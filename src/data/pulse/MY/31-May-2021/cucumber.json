[
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 1182184700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 480155400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 621900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 112400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 20553270500,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10457300,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13193936200,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12506031200,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5001945600,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10954043600,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4714323400,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2283319600,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 469200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 45600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 94500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2278460100,
              "status": "passed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18832353000,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1479487600,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5001056700,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7910106100,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7801469000,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 379000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 51000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 25,
        "name": "Verify the Invalid Email id in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-invalid-email-id-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 161800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 44100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14391943800,
              "status": "passed"
            },
            "line": 26,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2000022000,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13028757900,
              "status": "passed"
            },
            "line": 28,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12147754900,
              "status": "passed"
            },
            "line": 29,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000901300,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11174856000,
              "status": "passed"
            },
            "line": 31,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4958721000,
              "status": "passed"
            },
            "line": 32,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3983180200,
              "status": "passed"
            },
            "line": 33,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19481522200,
              "status": "passed"
            },
            "line": 34,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "t@gmai"
                ],
                "line": 35
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 36
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3834016600,
              "status": "passed"
            },
            "line": 37,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 443059500,
              "status": "passed"
            },
            "line": 38,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1155762700,
              "status": "passed"
            },
            "comments": [
              {
                "line": 39,
                "value": "## need to check validation message"
              }
            ],
            "line": 40,
            "name": "verify invalid email message \"Email is required\"",
            "match": {
              "arguments": [
                {
                  "val": "Email is required",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 251279400,
              "status": "passed"
            },
            "comments": [
              {
                "line": 41,
                "value": "#    Then verify invalid email message \"E-mail is invalid\""
              }
            ],
            "line": 42,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3134474600,
              "status": "passed"
            },
            "line": 43,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "t@gmai"
                ],
                "line": 44
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 907864200,
              "status": "passed"
            },
            "line": 45,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1099546700,
              "status": "passed"
            },
            "line": 46,
            "name": "verify invalid email message \"${email.invalid.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${email.invalid.text}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 289000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 41600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 48,
        "name": "Verify the User not registerd email in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-user-not-registerd-email-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 83400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 49992400,
              "status": "passed"
            },
            "line": 49,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 343500,
              "status": "passed"
            },
            "line": 50,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "USER_NAME",
                  "taf-${RANDOM_NUMBER}@mailinator.com"
                ],
                "line": 51
              },
              {
                "cells": [
                  "USER_PASSWORD",
                  "Pas$1234"
                ],
                "line": 52
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15492586300,
              "status": "passed"
            },
            "line": 53,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12684506800,
              "status": "passed"
            },
            "line": 54,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11669493800,
              "status": "passed"
            },
            "line": 55,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000740400,
              "status": "passed"
            },
            "line": 56,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11104223400,
              "status": "passed"
            },
            "line": 57,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4627992900,
              "status": "passed"
            },
            "line": 58,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3931674500,
              "status": "passed"
            },
            "line": 59,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18784725400,
              "status": "passed"
            },
            "line": 60,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${USER_NAME}"
                ],
                "line": 61
              },
              {
                "cells": [
                  "Password",
                  "${USER_PASSWORD}"
                ],
                "line": 62
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4140167900,
              "status": "passed"
            },
            "line": 63,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 448344900,
              "status": "passed"
            },
            "line": 64,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1282104000,
              "status": "passed"
            },
            "line": 65,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 229431800,
              "status": "passed"
            },
            "line": 66,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3885262300,
              "status": "passed"
            },
            "line": 67,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${USER_NAME}"
                ],
                "line": 68
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 839741300,
              "status": "passed"
            },
            "line": 69,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1595565100,
              "status": "passed"
            },
            "line": 70,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 215200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 41100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 72,
        "name": "User should be able to retrieve the reset password using forget password link",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;user-should-be-able-to-retrieve-the-reset-password-using-forget-password-link",
        "after": [
          {
            "result": {
              "duration": 2646028800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 52600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 497300,
              "status": "passed"
            },
            "line": 73,
            "name": "I assign \"${forgot.password.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${forgot.password.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4021796100,
              "status": "passed"
            },
            "line": 74,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 75
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 816264800,
              "status": "passed"
            },
            "line": 76,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10001039000,
              "status": "passed"
            },
            "line": 77,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26830884200,
              "error_message": "com.prudential.tap.exception.TapException: Not able to convert Json string to map [\"message\":\"Too many API requests, upgrade or wait until Tue, 01 Jun 2021 00:00:00 GMT\",\"requestId\":\"msfe_0cl72hKQwH058\",\"responseTime\":\"12 ms\",\"method\":\"GET\",\"path\":\"/api/addresses/testmyuser1-111@mailsac.com/messages\",\"status\":429]\r\n\tat com.prudential.tap.filehandling.JsonReader.convertJsonStringToMap(JsonReader.java:61)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getMessageIdFromMailsacEmail(PulseMailSacApi.java:68)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getOTPFromEmail(PulseMailSacApi.java:100)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.readOTP(PulseRegistrationScreen.java:969)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.readOTP(RegistrationSteps.java:299)\r\n\tat ✽.And I read the otp for emailid \"${PULSE_EMAIL}\" using mailsac api and store into a variable \"EMAIL_OTP\"(features/PulseLoginTest.feature:78)\r\n",
              "status": "failed"
            },
            "line": 78,
            "name": "I read the otp for emailid \"${PULSE_EMAIL}\" using mailsac api and store into a variable \"EMAIL_OTP\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 28
                },
                {
                  "val": "EMAIL_OTP",
                  "offset": 89
                }
              ],
              "location": "RegistrationSteps.readOTP(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 79,
                "value": "#    Then I wait for 30 sec"
              },
              {
                "line": 80,
                "value": "#    Given I create connection for api service"
              },
              {
                "line": 81,
                "value": "#    And I set endpoint url for reading email as \"https://mailsac.com/api/addresses/${PULSE_EMAIL}/messages/\""
              },
              {
                "line": 82,
                "value": "#    And I send request to \"get\" the otp with \"https://mailsac.com/api/raw/${PULSE_EMAIL}/\" stored into variable \"EMAIL_OTP\""
              }
            ],
            "line": 83,
            "name": "I enter \"${EMAIL_OTP}\" reset code",
            "match": {
              "arguments": [
                {
                  "val": "${EMAIL_OTP}",
                  "offset": 9
                }
              ],
              "location": "LoginSteps.enterResetOTP(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 84,
            "name": "I wait for 7 sec",
            "match": {
              "arguments": [
                {
                  "val": "7",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "comments": [
              {
                "line": 85,
                "value": "## password reset success message is not displaying in ios build"
              }
            ],
            "line": 86,
            "name": "Verify message: \"${password.reset.success.text}\" for Reset Password",
            "match": {
              "arguments": [
                {
                  "val": "${password.reset.success.text}",
                  "offset": 17
                }
              ],
              "location": "LoginSteps.verifyResetPasswordMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 227700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 41700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 88,
        "name": "Verify Account should be locked after entering more than 7 times incorrect passwords",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-account-should-be-locked-after-entering-more-than-7-times-incorrect-passwords",
        "after": [
          {
            "result": {
              "duration": 1885763600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 59800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1165600,
              "status": "passed"
            },
            "line": 89,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 199500,
              "status": "passed"
            },
            "line": 90,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14782498400,
              "status": "passed"
            },
            "line": 91,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000138400,
              "status": "passed"
            },
            "line": 92,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12780172600,
              "status": "passed"
            },
            "line": 93,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12291252400,
              "status": "passed"
            },
            "line": 94,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5001035500,
              "status": "passed"
            },
            "line": 95,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7997048800,
              "status": "passed"
            },
            "line": 96,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000454000,
              "status": "passed"
            },
            "line": 97,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7752788200,
              "status": "passed"
            },
            "line": 98,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 99
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 100
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 101
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 102
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 757384800,
              "status": "passed"
            },
            "line": 103,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32822428600,
              "error_message": "com.prudential.tap.exception.TapException: Not able to convert Json string to map [\"message\":\"Too many API requests, upgrade or wait until Tue, 01 Jun 2021 00:00:00 GMT\",\"requestId\":\"msfe_2ii1gj5euko7e\",\"responseTime\":\"19 ms\",\"method\":\"GET\",\"path\":\"/api/addresses/pulse20631054512@mailsac.com/messages\",\"status\":429]\r\n\tat com.prudential.tap.filehandling.JsonReader.convertJsonStringToMap(JsonReader.java:61)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getMessageIdFromMailsacEmail(PulseMailSacApi.java:68)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getOTPFromEmail(PulseMailSacApi.java:100)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.enterOTP(PulseRegistrationScreen.java:257)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.enterOTPInPulse(RegistrationSteps.java:294)\r\n\tat ✽.Then I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"(features/PulseLoginTest.feature:104)\r\n",
              "status": "failed"
            },
            "line": 104,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 105,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 106,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 107,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 108,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 109,
            "name": "I click the sign out from pulse app",
            "match": {
              "location": "LoginSteps.Signout_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 110,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 111,
            "name": "I enter invalid password on login screen and verify the error message",
            "match": {
              "location": "LoginSteps.verifyInvalidPasswordErrorMsg(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 112
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 113
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 114
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 115
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "Pas$123##${account.locked.message}"
                ],
                "line": 119
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 218500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 60900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 122,
        "name": "Verify the Login Functionality using \"Continue with Google\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-login-functionality-using-\"continue-with-google\"",
        "after": [
          {
            "result": {
              "duration": 99700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 41900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14531035900,
              "status": "passed"
            },
            "line": 123,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9621311900,
              "status": "passed"
            },
            "line": 124,
            "name": "user click on \"CONTINUE WITH GOOGLE\" with Google button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH GOOGLE",
                  "offset": 15
                }
              ],
              "location": "LoginSteps.clickcontinuewithGoogle_Button(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15205323200,
              "status": "passed"
            },
            "line": 125,
            "name": "I click the \"Email\"  in Continue with Gmail",
            "match": {
              "arguments": [
                {
                  "val": "Email",
                  "offset": 13
                }
              ],
              "location": "LoginSteps.EnterEmail_Id(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Emailid",
                  "${facebook.text}"
                ],
                "line": 126
              },
              {
                "cells": [
                  "Password",
                  "Pulse@123"
                ],
                "line": 127
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9918361500,
              "status": "passed"
            },
            "line": 128,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify login functionality on One pulse App",
    "description": "",
    "id": "verify-login-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/PulseLoginTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@onepulseLogins"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 230800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 207800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 757249300,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 69400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1529600,
              "status": "passed"
            },
            "line": 6,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 210600,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15019048500,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000184900,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12961316400,
              "status": "passed"
            },
            "line": 10,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000646000,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11548101800,
              "status": "passed"
            },
            "line": 12,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000645600,
              "status": "passed"
            },
            "line": 13,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7533271700,
              "status": "passed"
            },
            "line": 14,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1999967200,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7950344400,
              "status": "passed"
            },
            "comments": [
              {
                "line": 16,
                "value": "#    Then I change the language as required on registration page"
              }
            ],
            "line": 17,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 18
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 19
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 20
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 21
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 725805400,
              "status": "passed"
            },
            "line": 22,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28207486100,
              "error_message": "com.prudential.tap.exception.TapException: Not able to convert Json string to map [\"message\":\"Too many API requests, upgrade or wait until Tue, 01 Jun 2021 00:00:00 GMT\",\"requestId\":\"msfe_5l112w1f2UYab\",\"responseTime\":\"11 ms\",\"method\":\"GET\",\"path\":\"/api/addresses/pulse66931054541@mailsac.com/messages\",\"status\":429]\r\n\tat com.prudential.tap.filehandling.JsonReader.convertJsonStringToMap(JsonReader.java:61)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getMessageIdFromMailsacEmail(PulseMailSacApi.java:68)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getOTPFromEmail(PulseMailSacApi.java:100)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.enterOTP(PulseRegistrationScreen.java:257)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.enterOTPInPulse(RegistrationSteps.java:294)\r\n\tat ✽.And I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"(features/PulseRegistrationTest.feature:23)\r\n",
              "status": "failed"
            },
            "line": 23,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 24,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 25,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "${registration.mobile.number}"
                ],
                "line": 26
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 27,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 28,
            "name": "I choose my wellness goals under wellness plan screen",
            "match": {
              "location": "RegistrationSteps.iChooseMyWellnessGoalsUnderWellnessPlanScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 29,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 30,
            "name": "I click the date in Date of Birth field",
            "match": {
              "location": "RegistrationSteps.enterDateOfBirth()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "I click the Done icon",
            "match": {
              "location": "RegistrationSteps.doneButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 32,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 33,
            "name": "I select the  Male icon",
            "match": {
              "location": "RegistrationSteps.MaleImage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "I enter my height and weight details",
            "match": {
              "location": "RegistrationSteps.iEnterMyHeightAndWeightDetails()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "I click on Calculate BMI button",
            "match": {
              "location": "RegistrationSteps.iClickOnCalculateBMIButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "I select the \"How active are you?\" in doing exercise",
            "match": {
              "arguments": [
                {
                  "val": "How active are you?",
                  "offset": 14
                }
              ],
              "location": "RegistrationSteps.iSelectTheInDoingExercise(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 40,
            "name": "I select my favorite food dietary",
            "match": {
              "location": "RegistrationSteps.iSelectMyFavoriteFoodDietary()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 41,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 42,
            "name": "I answer as \"Yes\" to \"Any Food allergies?\"",
            "match": {
              "arguments": [
                {
                  "val": "Yes",
                  "offset": 13
                },
                {
                  "val": "Any Food allergies?",
                  "offset": 22
                }
              ],
              "location": "RegistrationSteps.iAnswerAsTo(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 44,
            "name": "I verify that \"Tracking your activity is trending\" is displayed",
            "match": {
              "arguments": [
                {
                  "val": "Tracking your activity is trending",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.iVerifyThatIsDisplayed(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "I click on connect Later button",
            "match": {
              "location": "RegistrationSteps.clickOnConnectLaterBtn()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 46,
                "value": "#    And I click the continue button"
              }
            ],
            "line": 47,
            "name": "I see that \"Welcome to Pulse\" text is displayed",
            "match": {
              "arguments": [
                {
                  "val": "Welcome to Pulse",
                  "offset": 12
                }
              ],
              "location": "RegistrationSteps.iSeeThatTextIsDisplayed(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 48,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 49,
            "name": "I see that fitness subscription exclusive offers screen is displayed",
            "match": {
              "location": "RegistrationSteps.iSeeThatFitnessSubscriptionExclusiveOffersScreenIsDisplayed()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "I click on close icon",
            "match": {
              "location": "RegistrationSteps.iClickOnCloseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I click skip buttons",
            "match": {
              "location": "LoginSteps.iClickSkipsButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 52,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 53,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 54,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 55,
            "name": "I click the sign out from pulse app",
            "match": {
              "location": "LoginSteps.Signout_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 56,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "user enters password credentials in sigin screen",
            "match": {
              "location": "LoginSteps.EnterPasswordRegister(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 58
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "I wait for 8 sec",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 256900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 43300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 64,
        "name": "verify the field label on registration screen",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-field-label-on-registration-screen",
        "after": [
          {
            "result": {
              "duration": 106900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 43500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15276177800,
              "status": "passed"
            },
            "line": 65,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2000645300,
              "status": "passed"
            },
            "line": 66,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13032255200,
              "status": "passed"
            },
            "line": 67,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000461400,
              "status": "passed"
            },
            "line": 68,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11773634300,
              "status": "passed"
            },
            "line": 69,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2002347200,
              "status": "passed"
            },
            "line": 70,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7481478900,
              "status": "passed"
            },
            "line": 71,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000674700,
              "status": "passed"
            },
            "line": 72,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1231911400,
              "status": "passed"
            },
            "comments": [
              {
                "line": 73,
                "value": "#    Then I change the language as required on registration page"
              }
            ],
            "line": 74,
            "name": "I verify following field label should be displayed on registration screen",
            "match": {
              "location": "RegistrationSteps.verifyRegistrationScreenFieldLabel(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${firstname.label.text}"
                ],
                "line": 75
              },
              {
                "cells": [
                  "${lastname.label.text}"
                ],
                "line": 76
              },
              {
                "cells": [
                  "${email.text}"
                ],
                "line": 77
              },
              {
                "cells": [
                  "${password.text}"
                ],
                "line": 78
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 79,
            "value": "## below validation is not working in Android device"
          },
          {
            "line": 80,
            "value": "#      | ${country.text}         |"
          },
          {
            "line": 81,
            "value": "#      | ${language.text}        |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 227600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 78400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 84,
        "name": "verify the validation message for mandatory fields",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-validation-message-for-mandatory-fields",
        "after": [
          {
            "result": {
              "duration": 94700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 37600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 419409800,
              "status": "passed"
            },
            "line": 85,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1720664800,
              "status": "passed"
            },
            "line": 86,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${firstname.mandatoryField.message}"
                ],
                "line": 87
              },
              {
                "cells": [
                  "LastName",
                  "${lastname.mandatoryField.message}"
                ],
                "line": 88
              },
              {
                "cells": [
                  "Email",
                  "${email.mandatoryField.message}"
                ],
                "line": 89
              },
              {
                "cells": [
                  "Password",
                  "${password.validation.message}"
                ],
                "line": 90
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 191300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 35600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 101,
        "name": "verify validation message when user enters Invalid password: Pulse@1 on registration page",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-validation-message-when-user-enters-invalid-password:-\u003cinvalid-password\u003e-on-registration-page;;2",
        "after": [
          {
            "result": {
              "duration": 98100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2027443900,
              "status": "passed"
            },
            "line": 94,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "Password",
                  "Pulse@1"
                ],
                "line": 95
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1441215500,
              "status": "passed"
            },
            "line": 96,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 991765200,
              "status": "passed"
            },
            "line": 97,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Password",
                  "${password.validation.message}"
                ],
                "line": 98
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@onepulseRegistration"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionSG"
          },
          {
            "line": 1,
            "name": "@sanityTest"
          },
          {
            "line": 1,
            "name": "@registration"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 210700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 31000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 102,
        "name": "verify validation message when user enters Invalid password: Pulse123 on registration page",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-validation-message-when-user-enters-invalid-password:-\u003cinvalid-password\u003e-on-registration-page;;3",
        "after": [
          {
            "result": {
              "duration": 105100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 37300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1924635400,
              "status": "passed"
            },
            "line": 94,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "Password",
                  "Pulse123"
                ],
                "line": 95
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 811288600,
              "status": "passed"
            },
            "line": 96,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 966599100,
              "status": "passed"
            },
            "line": 97,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Password",
                  "${password.validation.message}"
                ],
                "line": 98
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@onepulseRegistration"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionSG"
          },
          {
            "line": 1,
            "name": "@sanityTest"
          },
          {
            "line": 1,
            "name": "@registration"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 103,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 214900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 45800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 105,
        "name": "Verify the validation message when user enter already registered email id on registration page",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-validation-message-when-user-enter-already-registered-email-id-on-registration-page",
        "after": [
          {
            "result": {
              "duration": 132400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14111612500,
              "status": "passed"
            },
            "line": 106,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2000426700,
              "status": "passed"
            },
            "line": 107,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13284110200,
              "status": "passed"
            },
            "line": 108,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000510100,
              "status": "passed"
            },
            "line": 109,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10773126900,
              "status": "passed"
            },
            "line": 110,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000281900,
              "status": "passed"
            },
            "line": 111,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7358918800,
              "status": "passed"
            },
            "comments": [
              {
                "line": 112,
                "value": "#    Then I change the language as required on registration page"
              }
            ],
            "line": 113,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000353000,
              "status": "passed"
            },
            "line": 114,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8609540500,
              "status": "passed"
            },
            "line": 115,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 116
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 117
              },
              {
                "cells": [
                  "Email",
                  "${login.email.id}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 119
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 837678700,
              "status": "passed"
            },
            "line": 120,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1317601900,
              "status": "passed"
            },
            "line": 121,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${user.exist.text}"
                ],
                "line": 122
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 277600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 48500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 125,
        "name": "Verify the mobile number screen validation using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-mobile-number-screen-validation-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 725934600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 60400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1374000,
              "status": "passed"
            },
            "line": 126,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 294100,
              "status": "passed"
            },
            "line": 127,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14765586400,
              "status": "passed"
            },
            "line": 128,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2000884900,
              "status": "passed"
            },
            "line": 129,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12939292300,
              "status": "passed"
            },
            "line": 130,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000024400,
              "status": "passed"
            },
            "line": 131,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12367371200,
              "status": "passed"
            },
            "line": 132,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000726400,
              "status": "passed"
            },
            "line": 133,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7941401400,
              "status": "passed"
            },
            "comments": [
              {
                "line": 134,
                "value": "#    Then I change the language as required on registration page"
              }
            ],
            "line": 135,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1999955000,
              "status": "passed"
            },
            "line": 136,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7450240400,
              "status": "passed"
            },
            "line": 137,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "NewAutomation"
                ],
                "line": 138
              },
              {
                "cells": [
                  "LastName",
                  "NewAutomation"
                ],
                "line": 139
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 140
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 141
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 733165100,
              "status": "passed"
            },
            "line": 142,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28193823300,
              "error_message": "com.prudential.tap.exception.TapException: Not able to convert Json string to map [\"message\":\"Too many API requests, upgrade or wait until Tue, 01 Jun 2021 00:00:00 GMT\",\"requestId\":\"msfe_aefiFCXmzSA53\",\"responseTime\":\"32 ms\",\"method\":\"GET\",\"path\":\"/api/addresses/pulse58531054525@mailsac.com/messages\",\"status\":429]\r\n\tat com.prudential.tap.filehandling.JsonReader.convertJsonStringToMap(JsonReader.java:61)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getMessageIdFromMailsacEmail(PulseMailSacApi.java:68)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getOTPFromEmail(PulseMailSacApi.java:100)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.enterOTP(PulseRegistrationScreen.java:257)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.enterOTPInPulse(RegistrationSteps.java:294)\r\n\tat ✽.And I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"(features/PulseRegistrationTest.feature:143)\r\n",
              "status": "failed"
            },
            "line": 143,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 144,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 145,
            "name": "I verify the country code should be displayed correctly on phone number screen",
            "match": {
              "location": "RegistrationSteps.verifyCountryCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 146,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "917670"
                ],
                "line": 147
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 148,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 149,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 150,
            "name": "verify Again invalid Mobile message \"${invalid.mobile.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.mobile.text}",
                  "offset": 37
                }
              ],
              "location": "LoginSteps.verifyAgainInvalidMobilelMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 257100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 52000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 152,
        "name": "Verify the Gender screen validation using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-gender-screen-validation-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 682314900,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 55700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 30146296100,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 00ffb539-aa61-4e81-be98-e5fb90083bcb\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Please start by entering your mobile phone number\u0027)]/following::android.widget.EditText[2]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$16.executeCommand(Commands.java:148)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.setTextWithTab(TestBasePage.java:265)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.enterMobileNumber(PulseRegistrationScreen.java:476)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.enterMobileNumber(RegistrationSteps.java:162)\r\n\tat ✽.Given I enter the \"mobile number\" in welcome to pulse(features/PulseRegistrationTest.feature:153)\r\n",
              "status": "failed"
            },
            "line": 153,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "${registration.mobile.number}"
                ],
                "line": 154
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 155,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 156,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 157,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 158,
            "name": "verify validation message \"${wellness.goal.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${wellness.goal.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 159,
            "name": "I choose my wellness goals under wellness plan screen",
            "match": {
              "location": "RegistrationSteps.iChooseMyWellnessGoalsUnderWellnessPlanScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 160,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 161,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 162,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 163,
            "name": "verify validation message \"${dob.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${dob.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 164,
            "name": "I click the date in Date of Birth field",
            "match": {
              "location": "RegistrationSteps.enterDateOfBirth()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 165,
            "name": "I click the Done icon",
            "match": {
              "location": "RegistrationSteps.doneButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 166,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 167,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 168,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 169,
            "name": "verify validation message \"${gender.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${gender.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 170,
            "name": "I select the  Male icon",
            "match": {
              "location": "RegistrationSteps.MaleImage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 171,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 172,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 173,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 174,
            "name": "verify validation message \"${bmi.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${bmi.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 175,
            "name": "I click on Calculate BMI button",
            "match": {
              "location": "RegistrationSteps.iClickOnCalculateBMIButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 176,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 177,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 178,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 179,
            "name": "verify validation message \"${activity.level.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${activity.level.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 180,
            "name": "I select the \"How active are you?\" in doing exercise",
            "match": {
              "arguments": [
                {
                  "val": "How active are you?",
                  "offset": 14
                }
              ],
              "location": "RegistrationSteps.iSelectTheInDoingExercise(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 181,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 182,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 183,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 184,
            "name": "verify validation message \"${diet.preference.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${diet.preference.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1589700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 880100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 187,
        "name": "Verify the resend OTP functionality on Enter OTP Screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-resend-otp-functionality-on-enter-otp-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 735238500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1216800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1159400,
              "status": "passed"
            },
            "line": 188,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 312700,
              "status": "passed"
            },
            "line": 189,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15599843100,
              "status": "passed"
            },
            "line": 190,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000522800,
              "status": "passed"
            },
            "line": 191,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13015581100,
              "status": "passed"
            },
            "line": 192,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000662100,
              "status": "passed"
            },
            "line": 193,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10923604800,
              "status": "passed"
            },
            "line": 194,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000555000,
              "status": "passed"
            },
            "line": 195,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7569910900,
              "status": "passed"
            },
            "comments": [
              {
                "line": 196,
                "value": "#    Then I change the language as required on registration page"
              }
            ],
            "line": 197,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000005200,
              "status": "passed"
            },
            "line": 198,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8797878300,
              "status": "passed"
            },
            "line": 199,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 200
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 201
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 202
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 203
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 743627100,
              "status": "passed"
            },
            "line": 204,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 90000511800,
              "status": "passed"
            },
            "line": 205,
            "name": "I wait for 90 sec",
            "match": {
              "arguments": [
                {
                  "val": "90",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3634012700,
              "status": "passed"
            },
            "line": 206,
            "name": "I click the Resend button in OTP screen",
            "match": {
              "location": "RegistrationSteps.ClickResendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26515402100,
              "error_message": "com.prudential.tap.exception.TapException: Not able to convert Json string to map [\"message\":\"Too many API requests, upgrade or wait until Tue, 01 Jun 2021 00:00:00 GMT\",\"requestId\":\"msfe_f1hmn75OyFUe6\",\"responseTime\":\"14 ms\",\"method\":\"GET\",\"path\":\"/api/addresses/pulse37231054529@mailsac.com/messages\",\"status\":429]\r\n\tat com.prudential.tap.filehandling.JsonReader.convertJsonStringToMap(JsonReader.java:61)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getMessageIdFromMailsacEmail(PulseMailSacApi.java:68)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getOTPFromEmail(PulseMailSacApi.java:100)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.enterOTP(PulseRegistrationScreen.java:257)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.enterOTPInPulse(RegistrationSteps.java:294)\r\n\tat ✽.And I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"(features/PulseRegistrationTest.feature:207)\r\n",
              "status": "failed"
            },
            "line": 207,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 208,
            "name": "I wait for 8 sec",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 209,
            "name": "I verify enter otp screen is not displayed",
            "match": {
              "location": "RegistrationSteps.ValidateEnterOtpScreen()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify registration functionality on one pulse App",
    "description": "",
    "id": "verify-registration-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/PulseRegistrationTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@onepulseRegistration"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@registration"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 404400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 67900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 150900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 47300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15670564700,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1320200,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${onepulse.login.edit.profile}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.edit.profile}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 55
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12899382400,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11650851000,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000967500,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4371464800,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 195300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 36400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 105900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 30700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3858139000,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18560087300,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 379568100,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000946600,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7959822900,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7622839100,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 292600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 50100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 23,
        "name": "Verify User should be able to navigate to Edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-be-able-to-navigate-to-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 179900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 116600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4794282600,
              "status": "passed"
            },
            "line": 24,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5127353200,
              "status": "passed"
            },
            "line": 25,
            "name": "user click on Edit profile link",
            "match": {
              "location": "EditProfileSteps.clickEditProfileLink()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5001237600,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 525300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 55300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 28,
        "name": "Verify User should be able to change the profile picture in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-be-able-to-change-the-profile-picture-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 4362523500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 123200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 21691093000,
              "status": "passed"
            },
            "line": 29,
            "name": "I give manage profile camera permission",
            "match": {
              "location": "EditProfileSteps.iGiveCameraPermission()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8017517600,
              "error_message": "org.openqa.selenium.UnsupportedCommandException: Unknown mobile command \"tap\". Only shell,execEmuConsoleCommand,dragGesture,flingGesture,longClickGesture,pinchCloseGesture,pinchOpenGesture,swipeGesture,scrollGesture,scrollBackTo,scroll,viewportScreenshot,viewportRect,deepLink,startLogsBroadcast,stopLogsBroadcast,acceptAlert,dismissAlert,batteryInfo,deviceInfo,getDeviceTime,changePermissions,getPermissions,performEditorAction,startScreenStreaming,stopScreenStreaming,getNotifications,listSms,type,sensorSet,deleteFile,startService,stopService,getContexts commands are supported.\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 822babf0-8b39-418a-a633-cf2e709afe0a\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.executeScript(RemoteWebDriver.java:480)\r\n\tat com.prudential.tap.appium.AppiumCommands.tap(AppiumCommands.java:148)\r\n\tat com.prudential.tap.appium.AppiumCommands.clickElementByCoordinateforBothXY(AppiumCommands.java:986)\r\n\tat com.onepulse.app.screens.PulseManageProfileScreen.editProfileTakePicture(PulseManageProfileScreen.java:1294)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.EditProfileSteps.iTakePictureFromCamera(EditProfileSteps.java:326)\r\n\tat ✽.Then I take picture from Camera(features/editProfile/PulseEditProfileTest.feature:30)\r\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 30,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 275900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 96200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 32,
        "name": "Verify the email,country code and COR fields are non-editable in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-the-email,country-code-and-cor-fields-are-non-editable-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 3966774900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 83700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14748639400,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 822babf0-8b39-418a-a633-cf2e709afe0a\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Email\u0027]/following::android.widget.EditText[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$22.executeCommand(Commands.java:201)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.getElementAttributeValue(TestBasePage.java:579)\r\n\tat com.onepulse.app.screens.PulseManageProfileScreen.verifyEmailFields(PulseManageProfileScreen.java:196)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.EditProfileSteps.verifyNonEditableEmailField(EditProfileSteps.java:65)\r\n\tat ✽.And verify email field is non-editable(features/editProfile/PulseEditProfileTest.feature:33)\r\n",
              "status": "failed"
            },
            "line": 33,
            "name": "verify email field is non-editable",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableEmailField()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "verify country code field is non-editable and country code is \"${country.code}\"",
            "match": {
              "arguments": [
                {
                  "val": "${country.code}",
                  "offset": 63
                }
              ],
              "location": "EditProfileSteps.verifyNonEditableCountryCodeField(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 35,
            "name": "verify country of Residence is \"${country.name}\" and non-editable",
            "match": {
              "arguments": [
                {
                  "val": "${country.name}",
                  "offset": 32
                }
              ],
              "location": "EditProfileSteps.verifyCORField(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 678100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 60900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 37,
        "name": "Verify user can able to change the details in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-can-able-to-change-the-details-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 4015250000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 80000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1698700,
              "status": "passed"
            },
            "line": 38,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 326800,
              "status": "passed"
            },
            "line": 39,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "First Name",
                  "Automation-${RANDOM_NUMBER}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "Last Name",
                  "Testing-${RANDOM_NUMBER}"
                ],
                "line": 41
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18331863500,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 822babf0-8b39-418a-a633-cf2e709afe0a\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"First Name / Given Name\")]/following::android.widget.EditText[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$16.executeCommand(Commands.java:148)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.setTextWithTab(TestBasePage.java:265)\r\n\tat com.onepulse.app.screens.PulseManageProfileScreen.updateProfileDetails(PulseManageProfileScreen.java:1343)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.EditProfileSteps.updateUserProfileDetails(EditProfileSteps.java:374)\r\n\tat ✽.Then I update following profile details in edit profile screen(features/editProfile/PulseEditProfileTest.feature:42)\r\n",
              "status": "failed"
            },
            "line": 42,
            "name": "I update following profile details in edit profile screen",
            "match": {
              "location": "EditProfileSteps.updateUserProfileDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 44
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "comments": [
              {
                "line": 45,
                "value": "#      | PhoneNumber | 81069586                    |"
              },
              {
                "line": 46,
                "value": "#      | Address     | Singapore                   |"
              },
              {
                "line": 47,
                "value": "#      | PostalCode  | 576612                      |"
              },
              {
                "line": 48,
                "value": "#      | DOB         | 13-January-2003             |"
              }
            ],
            "line": 49,
            "name": "I click on update button in edit profile screen",
            "match": {
              "location": "EditProfileSteps.clickOnUpdateBtn()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 175000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 49400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 51,
        "name": "Verify Details updated during pulse profile registration should be reflected in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-details-updated-during-pulse-profile-registration-should-be-reflected-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 3964060500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 46800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8504130600,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 822babf0-8b39-418a-a633-cf2e709afe0a\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027years\u0027)]/following::android.view.ViewGroup[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.PulseManageProfileScreen.clickeditProfileLink(PulseManageProfileScreen.java:183)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.EditProfileSteps.clickEditProfileLink(EditProfileSteps.java:37)\r\n\tat ✽.Given user click on Edit profile link(features/editProfile/PulseEditProfileTest.feature:52)\r\n",
              "status": "failed"
            },
            "line": 52,
            "name": "user click on Edit profile link",
            "match": {
              "location": "EditProfileSteps.clickEditProfileLink()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 53,
            "name": "I verify following values in edit profile screen",
            "match": {
              "location": "EditProfileSteps.verifyFieldValue(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "Email",
                  "${onepulse.login.edit.profile}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "Gender",
                  "${pulse.edit.gender}"
                ],
                "line": 57
              },
              {
                "cells": [
                  "PhoneNumber",
                  "${pulse.edit.number}"
                ],
                "line": 58
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 373600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 39800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 60,
        "name": "verify the user details should be correctly on babylon screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-the-user-details-should-be-correctly-on-babylon-screen",
        "after": [
          {
            "result": {
              "duration": 4056946800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 115600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8155267100,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 822babf0-8b39-418a-a633-cf2e709afe0a\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027My Profile\u0027]/preceding::android.widget.TextView}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.PulseManageProfileScreen.navigateToHomePageFromMyProfileScreen(PulseManageProfileScreen.java:1454)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.EditProfileSteps.navigateToHomeScreenFromEditProfile(EditProfileSteps.java:391)\r\n\tat ✽.Given I navigate to Home page from edit profile screen(features/editProfile/PulseEditProfileTest.feature:61)\r\n",
              "status": "failed"
            },
            "line": 61,
            "name": "I navigate to Home page from edit profile screen",
            "match": {
              "location": "EditProfileSteps.navigateToHomeScreenFromEditProfile()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "I navigate to Babylon health Assessment and Accept TermsAndCondition",
            "match": {
              "location": "BabylonSteps.navigateToBabylonHealthAssessmentAndAcceptTermsAndCondition()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 63,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 64,
            "name": "I verify the default values in babylon registration page is updated as below",
            "match": {
              "location": "EditProfileSteps.verifyDefaultValuesOnBabylonRegPage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Gender",
                  "${pulse.edit.gender}"
                ],
                "line": 65
              },
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 66
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "Email",
                  "${onepulse.login.edit.profile}"
                ],
                "line": 68
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "verify email field is non-editable",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableEmailField()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 70,
            "name": "verify country of Residence is \"${country.name}\" and non-editable",
            "match": {
              "arguments": [
                {
                  "val": "${country.name}",
                  "offset": 32
                }
              ],
              "location": "EditProfileSteps.verifyCORField(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 198700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 45700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 72,
        "name": "navigate back to health screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;navigate-back-to-health-screen",
        "after": [
          {
            "result": {
              "duration": 3961660000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 45600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8518888600,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 822babf0-8b39-418a-a633-cf2e709afe0a\n*** Element info: {Using\u003dxpath, value\u003d//android.view.ViewGroup[@content-desc\u003d\"home\"]/android.widget.ImageView}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.babylon.BabylonRegistrationScreen.navigateBackToHealthScreenFromBabylonReg(BabylonRegistrationScreen.java:273)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.navigateBackToHealthScreenFromBabylonReg(BabylonSteps.java:570)\r\n\tat ✽.Given I navigate to health page from babylon registration screen(features/editProfile/PulseEditProfileTest.feature:73)\r\n",
              "status": "failed"
            },
            "line": 73,
            "name": "I navigate to health page from babylon registration screen",
            "match": {
              "location": "BabylonSteps.navigateBackToHealthScreenFromBabylonReg()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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",
                "mime_type": "image/png"
              }
            ],
            "line": 74,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1496700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 50600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 77,
        "name": "Verify User should not be able to edit email and country of residence fields on myDoc registration page once the user submitted their gender and DOB in edit profile",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-not-be-able-to-edit-email-and-country-of-residence-fields-on-mydoc-registration-page-once-the-user-submitted-their-gender-and-dob-in-edit-profile",
        "after": [
          {
            "result": {
              "duration": 3949535900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 186400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13543648200,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 822babf0-8b39-418a-a633-cf2e709afe0a\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.ScrollView//android.widget.ImageView)[4]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.PulseHealthScreen.navigateToMyDocRegistrationScreen(PulseHealthScreen.java:197)\r\n\tat com.onepulse.app.stepdefinitions.mydocuisteps.MyDocUiSteps.navigateToMyDocRegScreen(MyDocUiSteps.java:180)\r\n\tat ✽.Given I navigate to MyDoc registration screen(features/editProfile/PulseEditProfileTest.feature:78)\r\n",
              "status": "failed"
            },
            "line": 78,
            "name": "I navigate to MyDoc registration screen",
            "match": {
              "location": "MyDocUiSteps.navigateToMyDocRegScreen()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 79,
            "name": "I verify the default values in myDoc registration page is updated as below",
            "match": {
              "location": "EditProfileSteps.verifyDefaultValuesOnMyDocRegPage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 80
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 81
              },
              {
                "cells": [
                  "Email",
                  "${onepulse.login.edit.profile}"
                ],
                "line": 82
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 83,
            "name": "verify email field is non-editable",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableEmailField()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 84,
            "name": "verify country of Residence is \"${country.name}\" and non-editable",
            "match": {
              "arguments": [
                {
                  "val": "${country.name}",
                  "offset": 32
                }
              ],
              "location": "EditProfileSteps.verifyCORField(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Edit Profile functionality on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/editProfile/PulseEditProfileTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@PulseEditProfile"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 510200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 44900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "User should be able to login on app with correct credentials and the BabyLon call 995 flow must be verified",
        "description": "",
        "id": "verify-the-babylon-emergency-call-flow-on-pulse-health-\u0026-wealth-app;user-should-be-able-to-login-on-app-with-correct-credentials-and-the-babylon-call-995-flow-must-be-verified",
        "after": [
          {
            "result": {
              "duration": 98600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16688050800,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 414000,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${Babylon.call}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${Babylon.call}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 40
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12979255500,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11727799800,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10000462000,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11335093300,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4918317200,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3873525100,
              "status": "passed"
            },
            "line": 13,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18548306600,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${Password.text}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 524383200,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000432500,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8154268400,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7092000800,
              "status": "passed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7607597200,
              "status": "passed"
            },
            "line": 22,
            "name": "I navigate to Babylon Symptoms Page",
            "match": {
              "location": "BabylonSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25805548400,
              "status": "passed"
            },
            "line": 23,
            "name": "I enter \"${babylon.suicidal.thoughts.text}\" symptoms on Babylon screen And select \"${babylon.suicidalThoughts.description}\"",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.suicidal.thoughts.text}",
                  "offset": 9
                },
                {
                  "val": "${babylon.suicidalThoughts.description}",
                  "offset": 83
                }
              ],
              "location": "BabylonSteps.enterAndSelectBabylonSymptoms(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000108000,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 555131800,
              "status": "passed"
            },
            "comments": [
              {
                "line": 25,
                "value": "#  PCAONEPULSE-20559 : Below step will fail for SG as \"Call 995\" text is missing"
              }
            ],
            "line": 26,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.call.immediately}"
                ],
                "line": 27
              },
              {
                "cells": [
                  "${babylon.call.number}"
                ],
                "line": 28
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 568696800,
              "status": "passed"
            },
            "line": 29,
            "name": "I close the babylon symptoms checker screen",
            "match": {
              "location": "BabylonSteps.closeBabylonSymptomsScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4434346900,
              "status": "passed"
            },
            "line": 30,
            "name": "user views chat history",
            "match": {
              "location": "BabylonSteps.userClickChatHistory()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon Emergency call flow on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-the-babylon-emergency-call-flow-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/health/BabyLonEmmergencyCall.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylonCall995"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 293100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 38100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 9,
        "name": "User should be able to access Babylon from Pulse app and perform Perianal lump workflow",
        "description": "",
        "id": "verify-the-babylon-perianal-lump-workflow-is-working-as-expected;user-should-be-able-to-access-babylon-from-pulse-app-and-perform-perianal-lump-workflow",
        "after": [
          {
            "result": {
              "duration": 2851988900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 59500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14751611700,
              "status": "passed"
            },
            "line": 10,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 489500,
              "status": "passed"
            },
            "line": 11,
            "name": "I assign \"${Babylon.AnalLump}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${Babylon.AnalLump}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 44
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000329500,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12858538400,
              "status": "passed"
            },
            "line": 13,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12143906600,
              "status": "passed"
            },
            "line": 14,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000363000,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3982310300,
              "status": "passed"
            },
            "line": 16,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3756670600,
              "status": "passed"
            },
            "line": 17,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18348821100,
              "status": "passed"
            },
            "line": 18,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 19
              },
              {
                "cells": [
                  "Password",
                  "${Password.text}"
                ],
                "line": 20
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 271150300,
              "status": "passed"
            },
            "line": 21,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10000263100,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7773320200,
              "status": "passed"
            },
            "line": 23,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16879910500,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 1fd1e94e-853d-4b49-b3e1-18c9357a6a7a\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Health\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.babylon.BabylonRegistrationScreen.navigatetoSympthomsscreen(BabylonRegistrationScreen.java:98)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.navigateToBabylonSymptomsPage(BabylonSteps.java:47)\r\n\tat ✽.And I navigate to Babylon Symptoms Page(features/health/BabylonAnalLump.feature:24)\r\n",
              "status": "failed"
            },
            "line": 24,
            "name": "I navigate to Babylon Symptoms Page",
            "match": {
              "location": "BabylonSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 25,
            "name": "I enter \"${babylon.symptom.anallump}\" symptoms on Babylon screen And select \"${babylon.symptom.anallump.choose}\"",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.anallump}",
                  "offset": 9
                },
                {
                  "val": "${babylon.symptom.anallump.choose}",
                  "offset": 77
                }
              ],
              "location": "BabylonSteps.enterAndSelectBabylonSymptoms(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 26,
                "value": "#    When I handle questions and answer"
              },
              {
                "line": 27,
                "value": "#      | Is there any other related symptom you’d like to tell me about? | No |"
              }
            ],
            "line": 28,
            "name": "I click on Ok button after noting the caseid:",
            "match": {
              "location": "BabylonSteps.verifyCaseIdTextAndClickOkBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.caseid.txt}"
                ],
                "line": 29
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 30,
            "name": "I handle Babylon \"AnalLump\" questions and answers",
            "match": {
              "arguments": [
                {
                  "val": "AnalLump",
                  "offset": 18
                }
              ],
              "location": "BabylonSteps.babylonQAndA(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "I verify the closure summary and click on continue button",
            "match": {
              "location": "BabylonSteps.verifyClosureSummaryAndClickContinueBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.closureSummary}"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I click on view results to see the possible causes",
            "match": {
              "location": "BabylonSteps.clickViewResults()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "Verify following possible causes are displayed",
            "match": {
              "location": "BabylonSteps.verifyPossibleCauses(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.anallump.possiblecause.piles}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${babylon.symptom.differential.potentiallyserious}"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "I select on \"${babylon.symptom.anallump.possiblecause.piles}\" cause with offset 100 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.anallump.possiblecause.piles}",
                  "offset": 13
                },
                {
                  "val": "100",
                  "offset": 80
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.anallump.possiblecause.piles}"
                ],
                "line": 40
              },
              {
                "comments": [
                  {
                    "line": 41,
                    "value": "#      | ${babylon.symptom.differential.pharma}            |"
                  }
                ],
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.subtitle}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.strainwithpoo}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.bloodystool}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.lumpyanus}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.itchyanus}"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "I click on back button to move back to possible causes screen",
            "match": {
              "location": "BabylonSteps.moveBackToSymptoms()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I select on \"${babylon.symptom.differential.potentiallyserious}\" cause with offset 500 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.differential.potentiallyserious}",
                  "offset": 13
                },
                {
                  "val": "500",
                  "offset": 83
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 52,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.differential.potentiallyserious}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${babylon.symptom.differential.gp}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.changedbowelhabits}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.strainwithpoo}"
                ],
                "line": 57
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.bloodystool}"
                ],
                "line": 58
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.lumpyanus}"
                ],
                "line": 59
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.itchyanus}"
                ],
                "line": 60
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon Perianal lump workflow is working as expected",
    "description": "Following condition should meet to run this script:\r\nAge:48\r\nSex:Male\r\nCountry:Singapore/Malaysia",
    "id": "verify-the-babylon-perianal-lump-workflow-is-working-as-expected",
    "keyword": "Feature",
    "uri": "features/health/BabylonAnalLump.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylonAnalLump"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 178300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 22100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 9,
        "name": "User should be able to access Babylon from Pulse app and perform Breast lump workflow",
        "description": "",
        "id": "verify-the-babylon-maligant-neoplasm-breast-lump-workflow-is-working-as-expected;user-should-be-able-to-access-babylon-from-pulse-app-and-perform-breast-lump-workflow",
        "after": [
          {
            "result": {
              "duration": 3487537300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 37700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 360700,
              "status": "passed"
            },
            "line": 10,
            "name": "I assign \"${pulse.babylon.breastlump.username}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${pulse.babylon.breastlump.username}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 61
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 15220484000,
              "status": "passed"
            },
            "line": 11,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000565800,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12897760600,
              "status": "passed"
            },
            "line": 13,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12366419300,
              "status": "passed"
            },
            "line": 14,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000967900,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12321028300,
              "status": "passed"
            },
            "line": 16,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4660303800,
              "status": "passed"
            },
            "line": 17,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4257839800,
              "status": "passed"
            },
            "line": 18,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18734262700,
              "status": "passed"
            },
            "line": 19,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 20
              },
              {
                "cells": [
                  "Password",
                  "${Password.text}"
                ],
                "line": 21
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 500670400,
              "status": "passed"
            },
            "line": 22,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10000945300,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7719874900,
              "status": "passed"
            },
            "line": 24,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16806254300,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 778504f8-e306-4322-ae39-c30656b8024f\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Health\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.babylon.BabylonRegistrationScreen.navigatetoSympthomsscreen(BabylonRegistrationScreen.java:98)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.navigateToBabylonSymptomsPage(BabylonSteps.java:47)\r\n\tat ✽.And I navigate to Babylon Symptoms Page(features/health/BabylonBreastLump.feature:25)\r\n",
              "status": "failed"
            },
            "line": 25,
            "name": "I navigate to Babylon Symptoms Page",
            "match": {
              "location": "BabylonSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 26,
            "name": "I enter \"${babylon.symptom.breastlump}\" symptoms on Babylon screen And select \"${babylon.symptom.breastlump.choose}\"",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.breastlump}",
                  "offset": 9
                },
                {
                  "val": "${babylon.symptom.breastlump.choose}",
                  "offset": 79
                }
              ],
              "location": "BabylonSteps.enterAndSelectBabylonSymptoms(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 27,
            "name": "I click on Ok button after noting the caseid:",
            "match": {
              "location": "BabylonSteps.verifyCaseIdTextAndClickOkBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.caseid.txt}"
                ],
                "line": 28
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 29,
            "name": "I handle Babylon \"BreastLump\" questions and answers",
            "match": {
              "arguments": [
                {
                  "val": "BreastLump",
                  "offset": 18
                }
              ],
              "location": "BabylonSteps.babylonQAndA(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "I verify the closure summary and click on continue button",
            "match": {
              "location": "BabylonSteps.verifyClosureSummaryAndClickContinueBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.closureSummary}"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I click on view results to see the possible causes",
            "match": {
              "location": "BabylonSteps.clickViewResults()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "Verify following possible causes are displayed",
            "match": {
              "location": "BabylonSteps.verifyPossibleCauses(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.differential.potentiallyserious}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecauses.breasrabcess}"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "I select on \"${babylon.symptom.differential.potentiallyserious}\" cause with offset 100 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.differential.potentiallyserious}",
                  "offset": 13
                },
                {
                  "val": "100",
                  "offset": 83
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.differential.potentiallyserious}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${babylon.symptom.differential.gp}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.subtitle}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.lumpormass.armpit}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.invrtdnipple}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.bloodynippledischarge}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.breastcancer.famhistory}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.breastlump}"
                ],
                "line": 48
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "I click on back button to move back to possible causes screen",
            "match": {
              "location": "BabylonSteps.moveBackToSymptoms()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I select on \"${babylon.symptom.possiblecauses.breasrabcess}\" cause with offset 500 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.possiblecauses.breasrabcess}",
                  "offset": 13
                },
                {
                  "val": "500",
                  "offset": 79
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 52,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.possiblecauses.breasrabcess}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${babylon.symptom.differential.gp.urgent}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.lumpormass.armpit}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.invrtdnipple}"
                ],
                "line": 57
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.bloodynippledischarge}"
                ],
                "line": 58
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.breastlump}"
                ],
                "line": 59
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon Maligant Neoplasm Breast lump workflow is working as expected",
    "description": "Following condition should meet to run this script:\r\nAge:54\r\nSex:Female\r\nCountry:Singapore/Malaysia",
    "id": "verify-the-babylon-maligant-neoplasm-breast-lump-workflow-is-working-as-expected",
    "keyword": "Feature",
    "uri": "features/health/BabylonBreastLump.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylon_breast_lump"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@refactorTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 179500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 22300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 8,
        "name": "User should be able to access Babylon from Pulse app and perform Human Immune Virus Rash workflow",
        "description": "",
        "id": "verify-the-babylon-human-immune-virus-workflow-is-working-as-expected;user-should-be-able-to-access-babylon-from-pulse-app-and-perform-human-immune-virus-rash-workflow",
        "after": [
          {
            "result": {
              "duration": 3279053600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 253700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 22810711000,
              "status": "passed"
            },
            "line": 9,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8933200,
              "status": "passed"
            },
            "line": 10,
            "name": "I assign \"${Babylon.virusrash}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${Babylon.virusrash}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 45
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5003836900,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13058847900,
              "status": "passed"
            },
            "line": 12,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12422948600,
              "status": "passed"
            },
            "line": 13,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000192100,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10912760700,
              "status": "passed"
            },
            "line": 15,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4617969900,
              "status": "passed"
            },
            "line": 16,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4000270500,
              "status": "passed"
            },
            "line": 17,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19012538400,
              "status": "passed"
            },
            "line": 18,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 19
              },
              {
                "cells": [
                  "Password",
                  "${Password.text}"
                ],
                "line": 20
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 473476000,
              "status": "passed"
            },
            "line": 21,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10001262300,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7683434400,
              "status": "passed"
            },
            "line": 23,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17106405300,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 03e539c9-c562-4d02-b37a-a3bdb7090fe1\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Health\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.babylon.BabylonRegistrationScreen.navigatetoSympthomsscreen(BabylonRegistrationScreen.java:98)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.navigateToBabylonSymptomsPage(BabylonSteps.java:47)\r\n\tat ✽.And I navigate to Babylon Symptoms Page(features/health/BabylonHumanImmVirusRash.feature:24)\r\n",
              "status": "failed"
            },
            "line": 24,
            "name": "I navigate to Babylon Symptoms Page",
            "match": {
              "location": "BabylonSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 25,
            "name": "I enter \"${babylon.symptom.rash}\" symptoms on Babylon screen And select \"${babylon.symptom.rash.choose}\"",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.rash}",
                  "offset": 9
                },
                {
                  "val": "${babylon.symptom.rash.choose}",
                  "offset": 73
                }
              ],
              "location": "BabylonSteps.enterAndSelectBabylonSymptoms(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 27,
            "name": "I click on Ok button after noting the caseid:",
            "match": {
              "location": "BabylonSteps.verifyCaseIdTextAndClickOkBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.caseid.txt}"
                ],
                "line": 28
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 29,
            "name": "I handle Babylon \"HumanImmVirusRash\" questions and answers",
            "match": {
              "arguments": [
                {
                  "val": "HumanImmVirusRash",
                  "offset": 18
                }
              ],
              "location": "BabylonSteps.babylonQAndA(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 30,
            "name": "I verify the closure summary and click on continue button",
            "match": {
              "location": "BabylonSteps.verifyClosureSummaryAndClickContinueBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.closureSummary}"
                ],
                "line": 31
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 33,
            "name": "I click on view results to see the possible causes",
            "match": {
              "location": "BabylonSteps.clickViewResults()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "Verify following possible causes are displayed",
            "match": {
              "location": "BabylonSteps.verifyPossibleCauses(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.rash.possiblecauses1}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "{babylon.symptom.rash.possiblecauses2}"
                ],
                "line": 36
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "I select on \"${babylon.symptom.rash.possiblecauses1}\" cause with offset 100 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.rash.possiblecauses1}",
                  "offset": 13
                },
                {
                  "val": "100",
                  "offset": 72
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.rash.possiblecauses1}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${babylon.symptom.differential.gp}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.subtitle}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason1}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason2}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason3}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason4}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason5}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason6}"
                ],
                "line": 48
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "I click on back button to move back to possible causes screen",
            "match": {
              "location": "BabylonSteps.moveBackToSymptoms()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I select on \"${babylon.symptom.rash.possiblecauses2}\" cause with offset 500 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.rash.possiblecauses2}",
                  "offset": 13
                },
                {
                  "val": "500",
                  "offset": 72
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 52,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.rash.possiblecauses2}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${babylon.symptom.differential.er}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason1}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason2}"
                ],
                "line": 57
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason3}"
                ],
                "line": 58
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason4}"
                ],
                "line": 59
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason5}"
                ],
                "line": 60
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.fever}"
                ],
                "line": 61
              },
              {
                "cells": [
                  "${babylon.symptom.rash.differential.why.reason6}"
                ],
                "line": 62
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon Human Immune Virus workflow is working as expected",
    "description": "Following condition should meet to run this script:\r\nAge:48\r\nSex:Male\r\nCountry:Singapore/Malaysia",
    "id": "verify-the-babylon-human-immune-virus-workflow-is-working-as-expected",
    "keyword": "Feature",
    "uri": "features/health/BabylonHumanImmVirusRash.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylonVirusRash"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 310100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 81000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 8,
        "name": "User should be able to access Babylon from Pulse app and perform Groin mass workflow",
        "description": "",
        "id": "verify-the-babylon-groin-mass-workflow-is-working-as-expected;user-should-be-able-to-access-babylon-from-pulse-app-and-perform-groin-mass-workflow",
        "after": [
          {
            "result": {
              "duration": 3002102000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 65700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 18440372200,
              "status": "passed"
            },
            "line": 9,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 449200,
              "status": "passed"
            },
            "line": 10,
            "name": "I assign \"${Babylon.hernia}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${Babylon.hernia}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000964900,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13415897200,
              "status": "passed"
            },
            "line": 12,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11796150400,
              "status": "passed"
            },
            "line": 13,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5001067200,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10184073300,
              "status": "passed"
            },
            "line": 15,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4396238800,
              "status": "passed"
            },
            "line": 16,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3760581000,
              "status": "passed"
            },
            "line": 17,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18887356400,
              "status": "passed"
            },
            "line": 18,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 19
              },
              {
                "cells": [
                  "Password",
                  "${Password.text}"
                ],
                "line": 20
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 608656000,
              "status": "passed"
            },
            "line": 21,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10000654700,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7844208900,
              "status": "passed"
            },
            "line": 23,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16768346600,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 26401074-2677-40cf-a6eb-1e6ee97a9c15\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Health\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.babylon.BabylonRegistrationScreen.navigatetoSympthomsscreen(BabylonRegistrationScreen.java:98)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.navigateToBabylonSymptomsPage(BabylonSteps.java:47)\r\n\tat ✽.And I navigate to Babylon Symptoms Page(features/health/BabylonInguinalHernia.feature:25)\r\n",
              "status": "failed"
            },
            "line": 25,
            "name": "I navigate to Babylon Symptoms Page",
            "match": {
              "location": "BabylonSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 26,
            "name": "I wait for 6 sec",
            "match": {
              "arguments": [
                {
                  "val": "6",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 27,
            "name": "I enter \"${babylon.symptom.inguinalhernia}\" symptoms on Babylon screen And select \"${babylon.symptom.inguinalhernia.choose}\"",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.inguinalhernia}",
                  "offset": 9
                },
                {
                  "val": "${babylon.symptom.inguinalhernia.choose}",
                  "offset": 83
                }
              ],
              "location": "BabylonSteps.enterAndSelectBabylonSymptoms(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 28,
                "value": "#      | Is there any other related symptom you’d like to tell me about? | No                                                             |"
              }
            ],
            "line": 29,
            "name": "I click on Ok button after noting the caseid:",
            "match": {
              "location": "BabylonSteps.verifyCaseIdTextAndClickOkBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.caseid.txt}"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "verify user is landed to inguinal hernia consultation screen",
            "match": {
              "location": "BabylonSteps.verifyInguinalHerniaLandingScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 32,
            "name": "I handle Babylon \"InguinalHernia\" questions and answers",
            "match": {
              "arguments": [
                {
                  "val": "InguinalHernia",
                  "offset": 18
                }
              ],
              "location": "BabylonSteps.babylonQAndA(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 33,
                "value": "#    And I wait for 5 sec"
              }
            ],
            "line": 34,
            "name": "I verify the closure summary and click on continue button",
            "match": {
              "location": "BabylonSteps.verifyClosureSummaryAndClickContinueBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.closureSummary}"
                ],
                "line": 35
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "I click on view results to see the possible causes",
            "match": {
              "location": "BabylonSteps.clickViewResults()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "I click on \"inguinal hernia\" cause",
            "match": {
              "arguments": [
                {
                  "val": "inguinal hernia",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnCause(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.possiblecauses.inguinalhernia}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${babylon.symptom.differential.gp}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecauses.reduced.groinmass}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecauses.groinmass.lump}"
                ],
                "line": 43
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "I click on back button to move back to possible causes screen",
            "match": {
              "location": "BabylonSteps.moveBackToSymptoms()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "I click on \"femoral hernia\" cause",
            "match": {
              "arguments": [
                {
                  "val": "femoral hernia",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnCause(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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l2PxDtAdmzfbwCCbtZ61zsZSU2jYQWtFdpEzXPsPshagMRR33nnn0UPK5SrMZulQTyYSHaA7Nm+23u40yQB5rc3QmsoUMK9hrWatGrLToL/2/wktQD/kIQ8xxps5lNBh1oEu4MowwdwBumNztQ0OF613OGtisNex1prAFrgZ5pWsFawBf+1fIluArqoJ0Eo5eOcYe+f4yQ30e9/3PnrHO98lev8HPqCvbsm+973v0d2f/zz98U9/ore/w/iPWLC//u1v1bKVfvKTn5i2bM9uecUr6AA+q9vAvv2d79A//vGPurQPf+Sj9POfn7iXqObDulxu6ha5qMvpoo2sDY0AZ6hX2wC1kwYCDYC2vJQ0DdBZVjkaM2BWOkmBfup559Ovfv1r0e9+N7tvX3z5K1+hD334w/RrLuMlL31pNX3v3r1SLta94pWvkvlt27aZtmzPLrviCtq/f7+eLPba172efvCDH9al3frWt/LFdnJ9sbTP46Y+t6Fet0sDG97bRescyms7GWonDQbCVqDxshGG6mYCGp55HB3BOLxzxUOfxEA/48KL6pb37NlDz+S0FzOYF150Mf3il7+kn//iF3TxJZfSNc+7VtZff8MNdP0Lb6CbXvQiOnDgQFOglX3jm9+kd77r3dXld992O73guuvp6mueK5Dv3LmTXvTiF8s6eHDcNY4cOUIvfslL6TreD/JivwD6la96FV3JHfbbbr+9Wh5MAb1jxw668qqr6IYbb6Snnf/0kw7o/hG3QN3LQPewulmb2WNvAtBOA2glgA2oh4MNgFYz6l3oHHtgs0fOh8JU4rRJhliX2VOfbPbocx4r4EBf/NKXaNfu3XThxRfLuu9897v01re9nX784x/Ty295haS9573voy984R6Z/8QnP0kf/8Qn2gL6L3/5C137ghfIPLw14Ny+fQdddfXVkva9739fPOvXv/51ete7jW0QTvz4xz8RoP9z77107NgxvsDqf7GigL799vfQF+65p5p28gHtMYD2GDBDXayNDPUGJ2SALaqAbQtNA3RV7KUn2BNDOsCNdLICrXtoAA0PB/vBD39Ib3rzWwTo17/xjZJ2yyteKV4b9sMf/oje+KY3tQX093/wA3rLrbdW111y2WUNgf7Yxz9B99zzxWo+mDnkuOSyy+vWKaBf+apX089+/nNJOxlDDgANAegej4eB9gjQmypQ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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 47,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.possiblecauses.femoralhernia}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${babylon.symptom.differential.gp}"
                ],
                "line": 49
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecauses.reduced.groinmass}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecauses.groinmass.lump}"
                ],
                "line": 51
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon Groin Mass workflow is working as expected",
    "description": "Following condition should meet to run this script:\r\nAge:55\r\nSex:Male\r\nCountry:Singapore/Malaysia",
    "id": "verify-the-babylon-groin-mass-workflow-is-working-as-expected",
    "keyword": "Feature",
    "uri": "features/health/BabylonInguinalHernia.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylonHernia"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 238800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 27900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 9,
        "name": "User should be able to access Babylon from Pulse app and perform Postmenopausal Bleed workflow",
        "description": "",
        "id": "verify-the-babylon-maligant-neoplasm-postmenopause-bleed-workflow-is-working-as-expected;user-should-be-able-to-access-babylon-from-pulse-app-and-perform-postmenopausal-bleed-workflow",
        "after": [
          {
            "result": {
              "duration": 2982652000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 339600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 390400,
              "status": "passed"
            },
            "line": 10,
            "name": "I assign \"${pulse.babylon.postmenopause.username}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${pulse.babylon.postmenopause.username}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 64
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 188300,
              "status": "passed"
            },
            "line": 11,
            "name": "I assign \"${parity.password}\" to variable \"USER_PASSWORD\"",
            "match": {
              "arguments": [
                {
                  "val": "${parity.password}",
                  "offset": 10
                },
                {
                  "val": "USER_PASSWORD",
                  "offset": 43
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17210486900,
              "status": "passed"
            },
            "line": 12,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5000639500,
              "status": "passed"
            },
            "line": 13,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12946768200,
              "status": "passed"
            },
            "line": 14,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12438207200,
              "status": "passed"
            },
            "line": 15,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000273700,
              "status": "passed"
            },
            "line": 16,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 478296300,
              "status": "passed"
            },
            "line": 17,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4565546200,
              "status": "passed"
            },
            "line": 18,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3957122400,
              "status": "passed"
            },
            "line": 19,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18388067900,
              "status": "passed"
            },
            "line": 20,
            "name": "I login into pulse app with below details",
            "match": {
              "location": "LoginSteps.loginToPulseApp(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 21
              },
              {
                "cells": [
                  "Password",
                  "${USER_PASSWORD}"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10001223900,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8257949000,
              "status": "passed"
            },
            "line": 24,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15954191800,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 5e273c9c-f25f-49de-8335-b31d24296a73\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Health\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.babylon.BabylonRegistrationScreen.navigatetoSympthomsscreen(BabylonRegistrationScreen.java:98)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.navigateToBabylonSymptomsPage(BabylonSteps.java:47)\r\n\tat ✽.And I navigate to Babylon Symptoms Page(features/health/BabylonPostmenopausalBleed.feature:25)\r\n",
              "status": "failed"
            },
            "line": 25,
            "name": "I navigate to Babylon Symptoms Page",
            "match": {
              "location": "BabylonSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 26,
            "name": "I enter \"${babylon.symptom.postmenopausalbleeding}\" symptoms on Babylon screen And select \"${babylon.symptom.postmenopausalbleeding.choose}\"",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.postmenopausalbleeding}",
                  "offset": 9
                },
                {
                  "val": "${babylon.symptom.postmenopausalbleeding.choose}",
                  "offset": 91
                }
              ],
              "location": "BabylonSteps.enterAndSelectBabylonSymptoms(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 27,
            "name": "I click on Ok button after noting the caseid:",
            "match": {
              "location": "BabylonSteps.verifyCaseIdTextAndClickOkBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.caseid.txt}"
                ],
                "line": 28
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 29,
            "name": "I handle Babylon \"PostmenopausalBleed\" questions and answers",
            "match": {
              "arguments": [
                {
                  "val": "PostmenopausalBleed",
                  "offset": 18
                }
              ],
              "location": "BabylonSteps.babylonQAndA(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "I verify the closure summary and click on continue button",
            "match": {
              "location": "BabylonSteps.verifyClosureSummaryAndClickContinueBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.closureSummary}"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I click on view results to see the possible causes",
            "match": {
              "location": "BabylonSteps.clickViewResults()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "Verify following possible causes are displayed",
            "match": {
              "location": "BabylonSteps.verifyPossibleCauses(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.possiblecause.endopolyp}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${babylon.symptom.differential.potentiallyserious}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.thinning.vaginalwall}"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "I select on \"${babylon.symptom.possiblecause.endopolyp}\" cause with offset 500 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.possiblecause.endopolyp}",
                  "offset": 13
                },
                {
                  "val": "500",
                  "offset": 75
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 40,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.possiblecause.endopolyp}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${babylon.symptom.differential.gp}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.subtitle}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.vaginalbleeding}"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 47,
            "name": "I click on back button to move back to possible causes screen",
            "match": {
              "location": "BabylonSteps.moveBackToSymptoms()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 48,
            "name": "I select on \"${babylon.symptom.differential.potentiallyserious}\" cause with offset 500 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.differential.potentiallyserious}",
                  "offset": 13
                },
                {
                  "val": "500",
                  "offset": 83
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 49,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.differential.potentiallyserious}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${babylon.symptom.differential.gp}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${babylon.symptom.possiblecause.vaginalbleeding}"
                ],
                "line": 53
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon Maligant Neoplasm postmenopause bleed workflow is working as expected",
    "description": "Following condition should meet to run this script:\r\nAge:74\r\nSex:Female\r\nCountry:Singapore/Malaysia",
    "id": "verify-the-babylon-maligant-neoplasm-postmenopause-bleed-workflow-is-working-as-expected",
    "keyword": "Feature",
    "uri": "features/health/BabylonPostmenopausalBleed.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylon_postmenopause_bleed"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 433700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 310900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 10,
        "name": "User should be able to access Babylon from Pulse app and perform Prostatic Hyperplasia workflow",
        "description": "",
        "id": "verify-the-babylon-prostatic-hyperplasia-workflow-is-working-as-expected;user-should-be-able-to-access-babylon-from-pulse-app-and-perform-prostatic-hyperplasia-workflow",
        "after": [
          {
            "result": {
              "duration": 2680422200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3602700,
              "status": "passed"
            },
            "line": 11,
            "name": "I assign \"${pulse.babylon.prostatic.username}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${pulse.babylon.prostatic.username}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 60
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1700300,
              "status": "passed"
            },
            "line": 12,
            "name": "I assign \"${parity.password}\" to variable \"USER_PASSWORD\"",
            "match": {
              "arguments": [
                {
                  "val": "${parity.password}",
                  "offset": 10
                },
                {
                  "val": "USER_PASSWORD",
                  "offset": 43
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17056016400,
              "status": "passed"
            },
            "line": 13,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5000455000,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12855496000,
              "status": "passed"
            },
            "line": 15,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12332429000,
              "status": "passed"
            },
            "line": 16,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5001048200,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11191653100,
              "status": "passed"
            },
            "line": 18,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4147434100,
              "status": "passed"
            },
            "line": 19,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4369312900,
              "status": "passed"
            },
            "line": 20,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19034081700,
              "status": "passed"
            },
            "line": 21,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 22
              },
              {
                "cells": [
                  "Password",
                  "${Password.text}"
                ],
                "line": 23
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 658789600,
              "status": "passed"
            },
            "line": 24,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10000527200,
              "status": "passed"
            },
            "line": 25,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8326343800,
              "status": "passed"
            },
            "line": 26,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16343185300,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 7c972096-3cb2-4954-b1d4-886fec378b0e\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Health\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.babylon.BabylonRegistrationScreen.navigatetoSympthomsscreen(BabylonRegistrationScreen.java:98)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.navigateToBabylonSymptomsPage(BabylonSteps.java:47)\r\n\tat ✽.And I navigate to Babylon Symptoms Page(features/health/BabylonProstaticHyperplasia.feature:27)\r\n",
              "status": "failed"
            },
            "line": 27,
            "name": "I navigate to Babylon Symptoms Page",
            "match": {
              "location": "BabylonSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 28,
            "name": "I enter \"${babylon.ph.symptom}\" symptoms on Babylon screen And select \"${babylon.ph.symptomDescription}\"",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.ph.symptom}",
                  "offset": 9
                },
                {
                  "val": "${babylon.ph.symptomDescription}",
                  "offset": 71
                }
              ],
              "location": "BabylonSteps.enterAndSelectBabylonSymptoms(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 29,
            "name": "I click on Ok button after noting the caseid:",
            "match": {
              "location": "BabylonSteps.verifyCaseIdTextAndClickOkBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.caseid.txt}"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "I handle Babylon \"ProstaticHyperplasia\" questions and answers",
            "match": {
              "arguments": [
                {
                  "val": "ProstaticHyperplasia",
                  "offset": 18
                }
              ],
              "location": "BabylonSteps.babylonQAndA(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 32,
            "name": "I verify the closure summary and click on continue button",
            "match": {
              "location": "BabylonSteps.verifyClosureSummaryAndClickContinueBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.closureSummary}"
                ],
                "line": 33
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I click on view results to see the possible causes",
            "match": {
              "location": "BabylonSteps.clickViewResults()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "Verify following possible causes are displayed",
            "match": {
              "location": "BabylonSteps.verifyPossibleCauses(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.differential.potentiallyserious}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.benign.hyperplasia}"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "I select on \"${babylon.ph.cause1}\" cause with offset 100 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.ph.cause1}",
                  "offset": 13
                },
                {
                  "val": "100",
                  "offset": 53
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.ph.possiblecause.benign.hyperplasia}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${babylon.symptom.differential.gp}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.subtitle}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.urination.dfclty}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.increased.urination}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.urgentneed.urination}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.lowflow.urination}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.dribbling.urine}"
                ],
                "line": 48
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "I click on back button to move back to possible causes screen",
            "match": {
              "location": "BabylonSteps.moveBackToSymptoms()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I select on \"${babylon.symptom.differential.potentiallyserious}\" cause with offset 500 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.symptom.differential.potentiallyserious}",
                  "offset": 13
                },
                {
                  "val": "500",
                  "offset": 83
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 52,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.symptom.differential.potentiallyserious}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.weightloss}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.urination.dfclty}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.increased.urination}"
                ],
                "line": 57
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.urgentneed.urination}"
                ],
                "line": 58
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.lowflow.urination}"
                ],
                "line": 59
              },
              {
                "cells": [
                  "${babylon.ph.possiblecause.dribbling.urine}"
                ],
                "line": 60
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon Prostatic HyperPlasia workflow is working as expected",
    "description": "Following condition should meet to run this script:\r\nAge:58\r\nSex:Male\r\nCountry:Singapore/Malaysia",
    "id": "verify-the-babylon-prostatic-hyperplasia-workflow-is-working-as-expected",
    "keyword": "Feature",
    "uri": "features/health/BabylonProstaticHyperplasia.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylon_prostatic_hyperplasia"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 166900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 24400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 9,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-the-babylon-rib-fracture-workflow-is-working-as-expected-and-user-can-the-chat-history-after-consultation;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 81700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15914004500,
              "status": "passed"
            },
            "line": 10,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3905000,
              "status": "passed"
            },
            "line": 11,
            "name": "I assign \"${Babylon.rib}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${Babylon.rib}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 39
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12823141500,
              "status": "passed"
            },
            "line": 12,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12287938500,
              "status": "passed"
            },
            "line": 13,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000731400,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11360423700,
              "status": "passed"
            },
            "line": 15,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4224778200,
              "status": "passed"
            },
            "line": 16,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4392631200,
              "status": "passed"
            },
            "line": 17,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 717115100,
              "status": "passed"
            },
            "line": 18,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18546479700,
              "status": "passed"
            },
            "line": 19,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 20
              },
              {
                "cells": [
                  "Password",
                  "${Password.text}"
                ],
                "line": 21
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 721225800,
              "status": "passed"
            },
            "line": 22,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10000631000,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7981442500,
              "status": "passed"
            },
            "line": 24,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 25,
            "value": "#    Then user should be landed to \"Home\" screen"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 160700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 41200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 28,
        "name": "User should be able to access Babylon from Pulse app and perform Rib Fracture workflow",
        "description": "",
        "id": "verify-the-babylon-rib-fracture-workflow-is-working-as-expected-and-user-can-the-chat-history-after-consultation;user-should-be-able-to-access-babylon-from-pulse-app-and-perform-rib-fracture-workflow",
        "after": [
          {
            "result": {
              "duration": 2683041000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16788621000,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: a5048e21-673c-4e94-974c-99559b2a121c\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Health\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.babylon.BabylonRegistrationScreen.navigatetoSympthomsscreen(BabylonRegistrationScreen.java:98)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.navigateToBabylonSymptomsPage(BabylonSteps.java:47)\r\n\tat ✽.And I navigate to Babylon Symptoms Page(features/health/BabylonRibFracture.feature:29)\r\n",
              "status": "failed"
            },
            "line": 29,
            "name": "I navigate to Babylon Symptoms Page",
            "match": {
              "location": "BabylonSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 30,
            "name": "I enter \"${babylon.rib.symptom}\" symptoms on Babylon screen And select \"${babylon.rib.symptomDescription}\"",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.rib.symptom}",
                  "offset": 9
                },
                {
                  "val": "${babylon.rib.symptomDescription}",
                  "offset": 72
                }
              ],
              "location": "BabylonSteps.enterAndSelectBabylonSymptoms(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "I click on Ok button after noting the caseid:",
            "match": {
              "location": "BabylonSteps.verifyCaseIdTextAndClickOkBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.caseid.txt}"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 33,
            "name": "I handle Babylon \"RibFracture\" questions and answers",
            "match": {
              "arguments": [
                {
                  "val": "RibFracture",
                  "offset": 18
                }
              ],
              "location": "BabylonSteps.babylonQAndA(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I verify the closure summary and click on continue button",
            "match": {
              "location": "BabylonSteps.verifyClosureSummaryAndClickContinueBtn(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "text",
                  "${babylon.symptom.closureSummary}"
                ],
                "line": 35
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "I click on view results to see the possible causes",
            "match": {
              "location": "BabylonSteps.clickViewResults()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "I select on \"${babylon.rib.cause.chestStrain}\" cause with offset 0 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.rib.cause.chestStrain}",
                  "offset": 13
                },
                {
                  "val": "0",
                  "offset": 65
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "comments": [
                  {
                    "line": 39,
                    "value": "#      | ${babylon.symptom.differential.pharma} |"
                  },
                  {
                    "line": 40,
                    "value": "#      | ${babylon.symptom.differential.home} |"
                  }
                ],
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.subtitle}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.injuredchestwall}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.painonribmovement}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.rightside.chestpain}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.dull.chestpain}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.painonchestpress}"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 48,
            "name": "I click on back button to move back to possible causes screen",
            "match": {
              "location": "BabylonSteps.moveBackToSymptoms()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I select on \"${babylon.rib.cause.costochondritis}\" cause with offset 0 in report",
            "match": {
              "arguments": [
                {
                  "val": "${babylon.rib.cause.costochondritis}",
                  "offset": 13
                },
                {
                  "val": "0",
                  "offset": 69
                }
              ],
              "location": "BabylonSteps.clickOnCauseAtOffset(String,int)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 52,
            "name": "I verify following conditions are displayed",
            "match": {
              "location": "BabylonSteps.reportDetailsView(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.rib.costochondritis.conditionTitle}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${babylon.symptom.differential.why.title}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.injuredchestwall}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.rightside.chestpain}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.painonribmovement}"
                ],
                "line": 57
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.dull.chestpain}"
                ],
                "line": 58
              },
              {
                "cells": [
                  "${babylon.rib.possiblecause.painonchestpress}"
                ],
                "line": 59
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon Rib Fracture workflow is working as expected and user can the chat history after consultation",
    "description": "Following condition should meet to run this script:\r\nAge:39\r\nSex:Male\r\nCountry:Singapore",
    "id": "verify-the-babylon-rib-fracture-workflow-is-working-as-expected-and-user-can-the-chat-history-after-consultation",
    "keyword": "Feature",
    "uri": "features/health/BabylonRibFracture.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylonRibFacture"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 172000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 198500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1076052500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 50200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16952408300,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 507500,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13123380300,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11151975900,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: connect ECONNREFUSED 127.0.0.1:8226\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 2145ef5e-5a53-4127-a5c2-891806e9ab3d\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat io.appium.java_client.PerformsTouchActions.performTouchAction(PerformsTouchActions.java:41)\r\n\tat io.appium.java_client.TouchAction.perform(TouchAction.java:187)\r\n\tat com.prudential.tap.appium.AppiumCommands.scrollElement(AppiumCommands.java:876)\r\n\tat com.onepulse.app.screens.TestBasePage.scrollUpTillElementDisplayed(TestBasePage.java:392)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.changeTheCountryName(PulseRegistrationScreen.java:949)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.iSelectTheCountry(RegistrationSteps.java:306)\r\n\tat ✽.Then I change the country as required on registration page(features/health/PruShoppeLocation.feature:9)\r\n",
              "status": "failed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 208100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 26600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 1026064500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 46700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2158120100,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: connect ECONNREFUSED 127.0.0.1:8226\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 2145ef5e-5a53-4127-a5c2-891806e9ab3d\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\"EN\"]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.selectTheLanguageToggle(PulseRegistrationScreen.java:994)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.selectTheLangOption(RegistrationSteps.java:335)\r\n\tat ✽.Given I select the language option on toggle bar as required on login page(features/health/PruShoppeLocation.feature:14)\r\n",
              "status": "failed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 19,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 20,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 22,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 211300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 27000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 24,
        "name": "User should be able to locate Hospitals using PruShoppe location",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-should-be-able-to-locate-hospitals-using-prushoppe-location",
        "after": [
          {
            "result": {
              "duration": 1228738200,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 41400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2138075900,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: connect ECONNREFUSED 127.0.0.1:8226\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 2145ef5e-5a53-4127-a5c2-891806e9ab3d\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Health\u0027]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.PulseHealthScreen.clickHealthButton(PulseHealthScreen.java:60)\r\n\tat com.onepulse.app.stepdefinitions.mydocuisteps.MyDocUiSteps.iClicksOnHealthButton(MyDocUiSteps.java:98)\r\n\tat ✽.When I clicks on Health button(features/health/PruShoppeLocation.feature:25)\r\n",
              "status": "failed"
            },
            "line": 25,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 26,
                "value": "#  This step may fail due to Location locator - the xpath has updated according to MyEnv in PCAONEPULSE-19412, which is passed during execution"
              }
            ],
            "line": 27,
            "name": "I clicks on Location button",
            "match": {
              "location": "LocationSteps.iClicksOnLocationButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 28,
            "name": "I clicks on Search here text field",
            "match": {
              "location": "LocationSteps.iClicksOnSearchHereTextField()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 29,
            "name": "I clicks on \"Hospitals\" under Pulse Search",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnUnderPulseSearch(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 30,
            "name": "User can see the list of \"Hospitals\" near by to user\u0027s current location",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 26
                }
              ],
              "location": "LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "User can see that Call, Navigate and See Details links are displayed under \"Hospitals\" search results",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 76
                }
              ],
              "location": "LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 32,
            "name": "I clicks on See Details button on First result",
            "match": {
              "location": "LocationSteps.iClicksOnSeeDetailsButtonOnFirstResult()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 33,
            "name": "I can see the \"Hospital\" Information screen with Navigate and Call Now buttons",
            "match": {
              "arguments": [
                {
                  "val": "Hospital",
                  "offset": 15
                }
              ],
              "location": "LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I clicks on \"Speciality\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Speciality",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "I verify the Speciality screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheSpecialityScreenIsDisplayed()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "I clicks on \"Doctors\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Doctors",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "I verify the Doctors screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheDoctorsScreenIsDisplayed()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "I clicks on \"Rooms\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Rooms",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "I verify the Rooms screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheRoomsScreenIsDisplayed()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 40,
            "name": "I clicks on back button in See Details screen",
            "match": {
              "location": "LocationSteps.iClicksOnBackButtonInSeeDetailsScreen()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 207400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 31500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 43,
        "name": "User should be able to locate cli using PruShoppe location",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-should-be-able-to-locate-cli-using-prushoppe-location",
        "after": [
          {
            "result": {
              "duration": 1019445400,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 40200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2391868300,
              "status": "passed"
            },
            "comments": [
              {
                "line": 44,
                "value": "#    Given User has pulse app"
              },
              {
                "line": 45,
                "value": "#    And I assign \"${onepulse.login.global.id}\" to variable \"PULSE_EMAIL\""
              },
              {
                "line": 46,
                "value": "#    When I navigate to login page"
              },
              {
                "line": 47,
                "value": "#    When user enters credentials"
              },
              {
                "line": 48,
                "value": "#      | UserName | ${PULSE_EMAIL}   |"
              },
              {
                "line": 49,
                "value": "#      | Password | ${Password.text} |"
              },
              {
                "line": 50,
                "value": "#    And User clicks on signin button"
              },
              {
                "line": 51,
                "value": "#    Then I wait for 10 sec"
              },
              {
                "line": 52,
                "value": "#    And I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\""
              },
              {
                "line": 53,
                "value": "#    Then user should be landed home screen"
              },
              {
                "line": 54,
                "value": "#    Then I clicks on Health button"
              },
              {
                "line": 55,
                "value": "#    Then I clicks on Location button"
              }
            ],
            "line": 56,
            "name": "I clicks on back button in \"Hospitals\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 28
                }
              ],
              "location": "LocationSteps.iClicksOnBackButtonInScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8593139300,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: connect ECONNREFUSED 127.0.0.1:8226\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 2145ef5e-5a53-4127-a5c2-891806e9ab3d\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Search here\u0027]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.LocationScreen.clickSearchTextFieldInMaps(LocationScreen.java:64)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnSearchHereTextField(LocationSteps.java:35)\r\n\tat ✽.When I clicks on Search here text field(features/health/PruShoppeLocation.feature:57)\r\n",
              "status": "failed"
            },
            "line": 57,
            "name": "I clicks on Search here text field",
            "match": {
              "location": "LocationSteps.iClicksOnSearchHereTextField()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "I clicks on \"Clinics\" under Pulse Search",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnUnderPulseSearch(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "User can see the list of \"Clinics\" near by to user\u0027s current location",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 26
                }
              ],
              "location": "LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "User can see that Call, Navigate and See Details links are displayed under \"Clinics\" search results",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 76
                }
              ],
              "location": "LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "I clicks on See Details button on First result",
            "match": {
              "location": "LocationSteps.iClicksOnSeeDetailsButtonOnFirstResult()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "I can see the \"Clinic\" Information screen with Navigate and Call Now buttons",
            "match": {
              "arguments": [
                {
                  "val": "Clinic",
                  "offset": 15
                }
              ],
              "location": "LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 63,
            "name": "I clicks on back button in See Details screen",
            "match": {
              "location": "LocationSteps.iClicksOnBackButtonInSeeDetailsScreen()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 64,
            "name": "I clicks on back button in \"Clinic\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Clinic",
                  "offset": 28
                }
              ],
              "location": "LocationSteps.iClicksOnBackButtonInScreen(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify that user can locate near by Hospitals,clinics using PruShoppe Location feature",
    "description": "",
    "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature",
    "keyword": "Feature",
    "uri": "features/health/PruShoppeLocation.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@StoreLocator"
      },
      {
        "line": 1,
        "name": "@iOSdropDownTest"
      },
      {
        "line": 1,
        "name": "@ClinicLocator"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@18MayFailures"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 153000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 80300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14003825700,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 975900,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${onepulse.login.global.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12681822400,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11981237200,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000861000,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9998240300,
              "status": "passed"
            },
            "line": 10,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5129641200,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 12,
            "value": "#    Then I verify below language options on toggle bar as per specified lbu on login page"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 111200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 14,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 105200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3896671500,
              "status": "passed"
            },
            "line": 15,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18159064100,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 811061900,
              "status": "passed"
            },
            "line": 19,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000469400,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7963386200,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7157324600,
              "status": "passed"
            },
            "line": 22,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 95100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 24,
        "name": "Verify MyEvent Functionality in Home screen",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-myevent-functionality-in-home-screen",
        "after": [
          {
            "result": {
              "duration": 78400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 22433631100,
              "status": "passed"
            },
            "line": 25,
            "name": "I click the MyEvent icons",
            "match": {
              "location": "CustomerConnectSteps.clickMyEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000302700,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 943128500,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events enrolled yet"
                ],
                "line": 28
              },
              {
                "cells": [
                  "Please choose from the open events and get started"
                ],
                "line": 29
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 124600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 31,
        "name": "Verify Open Events tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-open-events-tab",
        "after": [
          {
            "result": {
              "duration": 61100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8768288000,
              "status": "passed"
            },
            "line": 32,
            "name": "I click the Open Events icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyOpenEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3745050800,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "There are no events available at the moment"
                ],
                "line": 34
              },
              {
                "cells": [
                  "Stay tuned for events on health and fitness"
                ],
                "line": 35
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 173800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 37,
        "name": "Verify Events Archive tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-events-archive-tab",
        "after": [
          {
            "result": {
              "duration": 72100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8992386000,
              "status": "passed"
            },
            "line": 38,
            "name": "I click the Events Archive icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyEventsArchive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2688940800,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events in your archive."
                ],
                "line": 40
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify MY Event channel functionality on one pulse App",
    "description": "",
    "id": "verify-my-event-channel-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/MyEvents.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MyEvent"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 4,
            "value": "#  Scenario: Verify User should be able to login using email account"
          },
          {
            "line": 5,
            "value": "#    Given User has pulse app"
          },
          {
            "line": 6,
            "value": "#    And user click on \"CONTINUE WITH GOOGLE\" with Google button"
          },
          {
            "line": 7,
            "value": "#    And I click the \"Email\"  in Continue with Gmail"
          },
          {
            "line": 8,
            "value": "#      | Emailid  | ${facebook.text} |"
          },
          {
            "line": 9,
            "value": "#      | Password  | pulsesgqa@123 |"
          },
          {
            "line": 10,
            "value": "#    Then user should be landed home screen"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 165000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 24300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 12,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 70900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13851666000,
              "status": "passed"
            },
            "line": 13,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1420900,
              "status": "passed"
            },
            "line": 14,
            "name": "Logout of pulse app if user is logged in",
            "match": {
              "location": "LoginSteps.logOutIfLoggedIn()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12491634500,
              "status": "passed"
            },
            "line": 15,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11237617500,
              "status": "passed"
            },
            "line": 16,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2999784500,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10538629600,
              "status": "passed"
            },
            "line": 18,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4978117200,
              "status": "passed"
            },
            "line": 19,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1814933400,
              "status": "passed"
            },
            "line": 20,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 107800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 25600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 22,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 93800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 344100,
              "status": "passed"
            },
            "line": 23,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2391972900,
              "status": "passed"
            },
            "line": 24,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18202956800,
              "status": "passed"
            },
            "line": 25,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 26
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 27
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 692396500,
              "status": "passed"
            },
            "line": 28,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10000714400,
              "status": "passed"
            },
            "line": 29,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7972456300,
              "status": "passed"
            },
            "line": 30,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7583032800,
              "status": "passed"
            },
            "line": 31,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 187300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 24300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 33,
        "name": "Verify User should be able to navigate to Health page",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-health-page",
        "after": [
          {
            "result": {
              "duration": 73800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 20475173900,
              "status": "passed"
            },
            "line": 34,
            "name": "I navigate to Health Content screen",
            "match": {
              "location": "CustomerConnectSteps.iNavigateToWealthScreenz()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5001418300,
              "status": "passed"
            },
            "line": 35,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 933899700,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Health Channels"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20033944200,
              "status": "passed"
            },
            "line": 38,
            "name": "I verify the following texts \"My Health Content\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My Health Content",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Category"
                ],
                "line": 39
              },
              {
                "cells": [
                  "Like"
                ],
                "line": 40
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 41
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 42
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 44,
            "value": "#  Scenario: Verify User should be able to Like the post"
          },
          {
            "line": 45,
            "value": "#    And I read the \"Brisk Walking\" post like count"
          },
          {
            "line": 46,
            "value": "#    And I Like the post"
          },
          {
            "line": 47,
            "value": "#    Then I verify \"Brisk Walking\" post like count is increased"
          },
          {
            "line": 48,
            "value": "#    And I Like the post"
          },
          {
            "line": 50,
            "value": "#  Scenario: Verify User should be able to Share the post"
          },
          {
            "line": 51,
            "value": "#    And I share the post"
          },
          {
            "line": 52,
            "value": "#    Then I Verify the share with friends popup"
          },
          {
            "line": 54,
            "value": "#  Scenario: Verify User should be able to Comment the post"
          },
          {
            "line": 55,
            "value": "#    And I read the \"Health Channels\" post comment count"
          },
          {
            "line": 56,
            "value": "#    And I commented in the post \"${wealth.topic.comment}\""
          },
          {
            "line": 57,
            "value": "#    Then I verify \"Health Channels\" post comment count is increased"
          },
          {
            "line": 60,
            "value": "#  Scenario: Verify User should be able to view the story post"
          },
          {
            "line": 61,
            "value": "#    Then I click on \"Brisk Walking\" wealth channel topic"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 115600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 63,
        "name": "Verify User should be able to view the full page article post",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-view-the-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 65400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7498574000,
              "status": "passed"
            },
            "line": 64,
            "name": "I click on \"Health Channels\" topic for details full view",
            "match": {
              "arguments": [
                {
                  "val": "Health Channels",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnTopicForDetailsFullView(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10000158300,
              "status": "passed"
            },
            "line": 65,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 92800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 67,
        "name": "Verify User should be able to see the Like, Share, Comment options on full page article post",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-like,-share,-comment-options-on-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 76100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13848848100,
              "status": "passed"
            },
            "line": 68,
            "name": "I verify the following texts \"My Health Content\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My Health Content",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Like"
                ],
                "line": 69
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 70
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 71
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 163300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 73,
        "name": "Verify User should be able to Like the post in full article view screen",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-like-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 101600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 25900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5682864300,
              "status": "passed"
            },
            "line": 74,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5792028700,
              "status": "passed"
            },
            "line": 75,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 120300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 16100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 77,
        "name": "Verify User should be able to Share the post in full article view screen",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-share-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 65700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5766408200,
              "status": "passed"
            },
            "line": 78,
            "name": "I share the post",
            "match": {
              "location": "WealthSteps.iShareThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10949740100,
              "status": "passed"
            },
            "line": 79,
            "name": "I navigate back to previous page",
            "match": {
              "location": "WealthSteps.iNavigateBackToPreviousPage()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 146200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 22400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 81,
        "name": "Verify User can navigate to Health homepage",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-can-navigate-to-health-homepage",
        "after": [
          {
            "result": {
              "duration": 77100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5107067000,
              "status": "passed"
            },
            "line": 82,
            "name": "I navigate to story post page",
            "match": {
              "location": "WealthSteps.iNavigateToStoryPostPage()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify My Health Content functionality on one pulse App",
    "description": "",
    "id": "verify-my-health-content-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/MyHealthContent.feature",
    "tags": [
      {
        "line": 1,
        "name": "@HealthChannel"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 179100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 75200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 79400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13864499700,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 336300,
              "status": "passed"
            },
            "line": 6,
            "name": "Logout of pulse app if user is logged in",
            "match": {
              "location": "LoginSteps.logOutIfLoggedIn()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12954077600,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12328294000,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2999635300,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5014643400,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 163000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 74900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 12,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 83500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 464500,
              "status": "passed"
            },
            "line": 13,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3873874000,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18645759300,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1313733500,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10000225800,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8524418600,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7462350400,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 104500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 23,
        "name": "Verify My Challenges texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;verify-my-challenges-texts",
        "after": [
          {
            "result": {
              "duration": 4643169900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 238839100,
              "status": "passed"
            },
            "line": 24,
            "name": "I click on My Challenges tile on one pulse app",
            "match": {
              "location": "LoginSteps.myChallengesTile()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8002839100,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tYou do not have any challenges yet. Please click below to select a challenge and get started text is displayed on page  expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\r\n\tat ✽.And I verify following texts are displayed(features/home/mychallenges/PulseMyChallenges.feature:25)\r\n",
              "status": "failed"
            },
            "line": 25,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "comments": [
                  {
                    "line": 26,
                    "value": "#      | ${my.challenges.text}     |"
                  }
                ],
                "cells": [
                  "${do.not.have.challenges}"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "comments": [
              {
                "line": 28,
                "value": "#      | ${challenge.getstarted}   |"
              }
            ],
            "line": 29,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${all.challenges.text}"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 152100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 23900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 32,
        "name": "Click on All challenges and and verify texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;click-on-all-challenges-and-and-verify-texts",
        "after": [
          {
            "result": {
              "duration": 4905002600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8535699400,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 36f79752-5f75-4d1a-9857-ea3fd258e888\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"All Challenges\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1717)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:533)\r\n\tat ✽.And I clicks on \"${all.challenges.text}\" in app screen(features/home/mychallenges/PulseMyChallenges.feature:33)\r\n",
              "status": "failed"
            },
            "line": 33,
            "name": "I clicks on \"${all.challenges.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${all.challenges.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.challenges.text}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${all.challenges.text}"
                ],
                "line": 36
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${not.connected.wearable}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${no.challenges.available}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${notify.challenge}"
                ],
                "line": 40
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 41,
            "name": "I clicks on \"${back.home}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${back.home}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify  My Challenges on One Pulse App",
    "description": "",
    "id": "verify--my-challenges-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/mychallenges/PulseMyChallenges.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_challenges"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 232900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 42300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 76500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13663922900,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 363700,
              "status": "passed"
            },
            "line": 6,
            "name": "Logout of pulse app if user is logged in",
            "match": {
              "location": "LoginSteps.logOutIfLoggedIn()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13027478700,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12312945100,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2999766900,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4806774600,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 140200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 12,
        "name": "User should be able to login on app with correct credentials using \"Continue with Gmail\"",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-gmail\"",
        "after": [
          {
            "result": {
              "duration": 112700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 85200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 308200,
              "status": "passed"
            },
            "line": 13,
            "name": "I assign \"${onepulse.login.global.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3765404600,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 17563489900,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 687474100,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10000980300,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8044873500,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7521236900,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 205400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 27100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 23,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\" and Verify the Mycommunities screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"-and-verify-the-mycommunities-screen",
        "after": [
          {
            "result": {
              "duration": 94100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6000150200,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 6 sec",
            "match": {
              "arguments": [
                {
                  "val": "6",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7100069500,
              "status": "passed"
            },
            "line": 25,
            "name": "User should be verify \"${my.communities.text}\" tab in Home screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.communities.text}",
                  "offset": 23
                }
              ],
              "location": "MyCommunitiesSteps.isMycommunitiesJoin(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6000217800,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 6 sec",
            "match": {
              "arguments": [
                {
                  "val": "6",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 505734000,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${icon.communities}"
                ],
                "line": 28
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8932859300,
              "status": "passed"
            },
            "line": 29,
            "name": "I verify the following texts \"All Communities\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "All Communities",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.communities.text}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${All.Communities.text}"
                ],
                "line": 31
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 32,
            "value": "##"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 102900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 16100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 33,
        "name": "Leave the community if already joined",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;leave-the-community-if-already-joined",
        "after": [
          {
            "result": {
              "duration": 80800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 308426100,
              "status": "passed"
            },
            "line": 34,
            "name": "I clicks on \"${my.communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3672220900,
              "status": "passed"
            },
            "line": 35,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1091768600,
              "status": "passed"
            },
            "line": 36,
            "name": "I click on joined community three dots menu icon",
            "match": {
              "location": "MyCommunitiesSteps.clickOnJoinedCommMenu()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8062970400,
              "status": "passed"
            },
            "line": 37,
            "name": "I click on leave button for joined community",
            "match": {
              "location": "MyCommunitiesSteps.leaveJoinedCommunity()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 88800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 40,
        "name": "Verify the All Communities Post screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-all-communities-post-screen",
        "after": [
          {
            "result": {
              "duration": 1440628400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5000781000,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7851420700,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 159b694f-2eda-4e26-9bdb-c66e45e7d28f\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"All Communities\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1717)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:533)\r\n\tat ✽.And I clicks on \"${All.Communities.text}\" in app screen(features/home/mycommunities/PulseMyCommunities.feature:42)\r\n",
              "status": "failed"
            },
            "line": 42,
            "name": "I clicks on \"${All.Communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${All.Communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "I click the Join button in Communties tab",
            "match": {
              "location": "MyCommunitiesSteps.Joinbuttons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 44,
            "name": "I click the static Active icon in community screen",
            "match": {
              "location": "MyCommunitiesSteps.StaryActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "I click Edit icon in stay Active icon",
            "match": {
              "location": "MyCommunitiesSteps.clickEditiconstayActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "Enter the post in community screen",
            "match": {
              "location": "MyCommunitiesSteps.enterNric(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "TEST1"
                ],
                "line": 47
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 48,
            "name": "Enter the post in community large text screen",
            "match": {
              "location": "MyCommunitiesSteps.enterlargeText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "welcome"
                ],
                "line": 49
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "I click the Post icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.clickPostIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 51,
            "name": "I verify the following text \"TEST1\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "TEST1",
                  "offset": 29
                }
              ],
              "location": "MyCommunitiesSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "TEST1"
                ],
                "line": 52
              },
              {
                "cells": [
                  "welcome"
                ],
                "line": 53
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 87000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 55,
        "name": "Verify the Likes and comments counts in All communities tab",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-likes-and-comments-counts-in-all-communities-tab",
        "after": [
          {
            "result": {
              "duration": 1669125800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 23835087200,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 159b694f-2eda-4e26-9bdb-c66e45e7d28f\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Hi Pulsemate!\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.TestBasePage.popupstart(TestBasePage.java:495)\r\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickFeeds(MyCommunitiesScreen.java:297)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.clickIcons(MyCommunitiesSteps.java:106)\r\n\tat ✽.And I click the Post icon in My communities(features/home/mycommunities/PulseMyCommunities.feature:56)\r\n",
              "status": "failed"
            },
            "line": 56,
            "name": "I click the Post icon in My communities",
            "match": {
              "location": "MyCommunitiesSteps.clickIcons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "I click the like button in Post screen",
            "match": {
              "location": "MyCommunitiesSteps.Clicklikesbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "Verify the like count in Post screen \" 1 Likes\" likes",
            "match": {
              "arguments": [
                {
                  "val": " 1 Likes",
                  "offset": 38
                }
              ],
              "location": "MyCommunitiesSteps.verifyLikescountInFeeds(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "I click the Comment icon in feed screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickCommentsbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "Enter the comments in Feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.FeedsComments(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Comments",
                  "TEST1"
                ],
                "line": 61
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "I click the submit icon in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickfeedssubmitbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 63,
            "name": "Verify the comments count in Feeds screen \" 0 Comments\" comments",
            "match": {
              "arguments": [
                {
                  "val": " 0 Comments",
                  "offset": 43
                }
              ],
              "location": "MyCommunitiesSteps.verifyCommentsscountInFeeds(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 176500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 28500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 65,
        "name": "Verify the Share with Friends Functionality in All communities tab",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-share-with-friends-functionality-in-all-communities-tab",
        "after": [
          {
            "result": {
              "duration": 2000587100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 137300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 21036043600,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 159b694f-2eda-4e26-9bdb-c66e45e7d28f\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Hi Pulsemate!\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.TestBasePage.popupstart(TestBasePage.java:495)\r\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickShareIcon(MyCommunitiesScreen.java:528)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.ClickShareIcon(MyCommunitiesSteps.java:173)\r\n\tat ✽.And I click the share icon in Post screen(features/home/mycommunities/PulseMyCommunities.feature:66)\r\n",
              "status": "failed"
            },
            "line": 66,
            "name": "I click the share icon in Post screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickShareIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 67,
            "name": "Verify the pop up in \"Share with Friends\"",
            "match": {
              "arguments": [
                {
                  "val": "Share with Friends",
                  "offset": 22
                }
              ],
              "location": "MyCommunitiesSteps.VerifySharewithFriends(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 68,
            "name": "I click the phone icon in share with friends",
            "match": {
              "location": "MyCommunitiesSteps.clickPhoneIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALQAAAGQCAYAAAAHh0qmAAAN4klEQVR4Xu3bh3dUZRrH8fwfW9x23OaudV0Xy2LXVRQ5h0VUFFekKdgAQUNHRMFGVVeKmoCIhUVcFQgtkoQSQMBDiRiCVElmJpOeAM/e9w0ZkzsJBIRl8uP7Oec5M3PvnUn7zs07E0gr+cmfjWFUJi28gWHa8hA0IzUEzUgNQTNSQ9CM1LSdoH96oUUuuDp5O5OSE/n15f5nFt5+wjnvEov84tLk7a2cUw46emF7K72li78e+f2VVt73aSvt9GDTY/56i8WuuaP+9s8vttLb7vHHNj4m9vc7LR7cL35Xdyu9o5uV3n6vRS+6LunjlT+RbrXLcyx2U2cr7XBfYnvkl5dZxbNjg/1DE1ORPtZvDz8Gc5rnZxdZ9IpbLXrJ9fW3gxjL+gyy8sGjrezRwVY+aJT/eUR+c3nyfY9NWff+ieuR3/7NSu+83+L/7GGRP1yVdGxr5pSCdh+srPdAqxz7mr9d1vOp+qiDLyB68XUWu/I2iwUx+8D6DfHHxO/uaZXjJlks+AY0fqzKV9+wqumZP8zbc4Mvsl9iv/8GPZ5ulS9MsorhL/rgKwaPSeyPHvtcKoY85580/j69Bvjt4c87+serCf10TRCzO0GV3vVA8D2tP6NGL70huN09+FmMtvKBI4PLMf5kFbvq9uT7B1N6x31WMWJ84nbsuk719xs6zkpv7Zp0fGvmlIJumMoxrySuxzv3sMrxU/wXF2t/l98WveSGRNBuXGjhoP0nf3OX+rNz8A2Kd36oSdC1X672z/iaRcvrnyDBdfckiF50bf3HcEEHjxu/t7cP2j8BBo5oNuiaz7KsYuSEpO3MSc6xmONde1rk/Cua7HNRu5+hCzPe7RGL/uUmf+ZufEzkV5dZ5Hft/M++cdDuxPRxr/42p0PwW3jAiOSP24o5LUG7XynuC/Nn6MtvTuxvTdDlTw33l7F2//BLh4r0563sgaZBV82YXX85daZVZ37gr7vfAv5jBOG6M3fNR59a1VsZfl/tipxmg453ebjFswXT+nFnUvcbNxxzw7jtbunglhDRC67xS1O3RE3cv31Hf/9w0JWvvG7b3p5t84cMs+qMD5IetzVzWoIuHzDcn6ErRr1Uv7YOvhi3vTVBuy8qfl8fK+//jF9WVL44yeL39P7hPsHa3C05qqbNsuq58/2SpGbBF4k1lnum+4hDE/l9u6TPl/nx476vsas6+LNseF/jcWfq6J+CmG/t4i/dWd1tL+vxhF82JoIOTkYN93FBF2TMtdrsvLMTdOJZF7yadS/+/CfeaHvEvWJtdKZ06+yG9VZiW3B2j154baNpn1gLN554114+ePdCM7wvesUt9ev2Y+Nuh49hTtM087M57pzX9PjIsdcxkfPrz96N37mKXnajld7Y2U+sXf1v4JOdHxU0w6TapB3+epsxjMqkGSCEoCGFoCGFoCGFoCGFoCGFoCHlpIM++P0h27j56/BmICWcVNAHgphHjX/VvincFd6VpKqqyqprasKbmxWLxay2tja8uUU5OblWWVmZuB0vK7Pi4mL/ODi3tTpod2YePeE1++bbE8fszJn7vi389L/hzc36z4JPbOfOb23Llq9tVRDrifR77Ek7cOBg4nb/x5+yp4ek2/ARo637Qz2tMngy4dzUqqAPfv+9jX5pYhBzYXhXixqC3rWryN6f96GlDxtp02fO8vsyZ7/nL0tKSmzBJwsta+ky27x5iz3cq6/d2627FRXt9vcbNmKUTZw81Wpqau3w4cM2ddobNnzkaLv7nm5JQRce+63xTPow2/jVJpv59jv+9p49e+2zzxcljoW2EwZdEywbhj7/kg0eNc5envJms5OzJj98t0TQeavXWN9HH/NRukt3Jh4waIgPct6HH9nnXyyy8RNetvXrN9jiJVmWMXuOHTlyxB548CGLRmP28fwFlpE52+a+P8/+PX2GX2p06nx3UtDuMV3M/+rRy8ff99H+tn//AXtr+kxbtnxFo88Myk4YtJOzZp2NHv+a7d27z0cWHrdeDmsc9OQp0/y2555/wb7atMmyv1zlw31iwCCrrq6uD3rDRluStdQy57xn+w8csPbX32QjRo0JlhLP2sRJU+zZocNt+44d/nGaW3JsDpYr0WjUBj+Tbhs3fmVfLFps77ybaX0e6XdS63O0ba0K2sldm28TJr9hFRU/vBg7nuMF7c6gD/d+xK95nYags7KW+dCrqqqt673329GjR62urs4ikahfbrilidOjZ5+koBuWHO5juTN9dXWNX5oMDZY6OHe0OminIeryiorwriRuKbEy+0vbFKyN35s7z297a8bM4Cxb4K9Pmfq65QfLDGfWO+/a1m3bbFdRkT0YvKj7trDQPln4qT0ZnMHdUsKdfd07GO7MnD50hF9rFxeXJD7WC+NfPrbkGG5jxo5LnJEHPj3E8vLWJI6DvpMK2slbt97yN24Kb045bvnh1uxuPY5zx0kH3VZMe/1N2xAsY3BukQ0a5yaChhSChhSChhSChhSChpQ095c496drhmnr41r2Qbu/rIV3MkxbGtewDzp8ygbaMoKGFIKGFIKGFIKGBPevKrOzswkaGlzMnTp1ImhomDx5snXo0IGgoWHixIkEDR0EDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSmTJk0iaOhYvHixdezYkaChoa6uzubPn0/Q0ELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkJII+siRI3bo0CHbtm2bbdiwwdavX2+bN2+2PXv2WE1NTeP7ACnLB33w4EFbtWqVZWVlNTvLly+3goICO3z4cPj+QEpJ27FjR1LALc3atWs5WyOlpYWjPdGsW7fOL0+AVHTCoN1yY+nSpU22FRYWhh8HSAnHDXrFihW2detW++6775psz87O5iyNlNRi0C7mWCxmJSUlfu0c3l9cXBx+LOCsazbohpiPHj1qLb1o3LlzZ/ixgLMuKejWxOzGvV8NpJomQbsXgK2J2Y3bD6SaJkG7F39Hghd727dvTwo4PPv37w8/FnDWJYJ271zs3bvX/8k7HG94li1bZtXV1eHHAs66RND5+flJ7ze3NFu2bAk/DpASkl4UnmhWrlxpVVVV4ccBUkLa6tWrk6JtadyLRve+NJCq0urq6vw/Ew3HG57c3FwrLS0N3x9IKYl/Dx2NRv3a2L04dGtpN+6M7F4k7tu3jz91o01o9n+s1NbW+n8m6t6PBtqSZoMG2iqChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChhSChpS0eDxuDKMyBM1IDUEzUkPQjNQQNCM1BM1IDUH/H6asrCwx4X3M6Z2UDHrRokX+sqioyPLy8vz1nJwc27NnT9KxqTy7d++2jIwMmz59emLcbbc9fGxbGvdzWbJkSdL2VJiUC9qdxWbNmuUvt27dagsXLvTb3WVBQUHS8ak8Lt7t27c32eZuu+3hY9vKuJjdE7OwsDBpXyoMQZ+hcZ+/+8GHt7tx29vi8iPVY3ZD0GdoFIOeMWOG5efnJ21PpSHoMzSKQXOGPoVRCdpNS2vozMzMpGPbyqR61CkXtJvG73Lk5ub66yrvcriYeZfjzE1KBq027rdNw4T3Mad3CJqRGoJmpIagGakhaEZqCJqRGoJmpOZ/MAG9W830qUQAAAAASUVORK5CYII\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 69,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1734500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 82300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 72,
        "name": "Verify the Post Functionality in All communities",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-post-functionality-in-all-communities",
        "after": [
          {
            "result": {
              "duration": 1525367400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 48300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16162251300,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 159b694f-2eda-4e26-9bdb-c66e45e7d28f\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Hi Pulsemate!\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.TestBasePage.popupstart(TestBasePage.java:495)\r\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickSkipfeedbutton(MyCommunitiesScreen.java:633)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.clickSkipbutton(MyCommunitiesSteps.java:208)\r\n\tat ✽.Then I click skip button in feeds screen(features/home/mycommunities/PulseMyCommunities.feature:73)\r\n",
              "status": "failed"
            },
            "line": 73,
            "name": "I click skip button in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.clickSkipbutton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 74,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 75,
            "name": "I click the Back icon in Stay Active screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickstarutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 76,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 77,
            "name": "I click Edit icon in stay Active icon",
            "match": {
              "location": "MyCommunitiesSteps.clickEditiconstayActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 78,
            "name": "I click the Camera icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickCameraIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 79,
            "name": "I click the Upload Image icon",
            "match": {
              "location": "MyCommunitiesSteps.clickUploadIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 80,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 82,
            "name": "Enter the post in community screen",
            "match": {
              "location": "MyCommunitiesSteps.enterNric(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "TEST1"
                ],
                "line": 83
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 84,
            "name": "Enter the post in community large text screen",
            "match": {
              "location": "MyCommunitiesSteps.enterlargeText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "welcome"
                ],
                "line": 85
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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5Q3LC5YZzsx337Nt27fbnr177dHgRd13+fn26YLP7NngDO6WEu7s697BcGfm9CHD/Vr76NHCxMd6aewrtUuOYTZq9IuJM3K/AYNs9eq1iftB32kF7axev8HyNm0Ob045bvnh1uxuPY4Lx2kH3VJMfeMt2xgsY3BhkQ0aFyaChhSChhSChhSChhSChpQ095c496drhmnp41r2Qbu/rIV3MkxLGtewDzp8ygZaMoKGFIKGFIKGFIKGBPevKnNycggaGlzMbdu2JWhomDRpkrVu3ZqgoWHChAkEDR0EDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkTJ04kaOhYtGiRtWnThqChobq62ubNm0fQ0ELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkJII+vjx43bkyBHbvn27bdy40TZs2GBbtmyxgoICq6ysrP8YIGX5oA8fPmwrV6607OzsRmfZsmW2a9cuO3bsWPjxQEpJ27lzZ1LATc26des4WyOlpYWjPdWsX7/eL0+AVHTKoN1yY8mSJQ225efnh48DpISTBr18+XLbtm2bff/99w225+TkcJZGSmoyaBdzLBazwsJCv3YO7z969Gj4WMB512jQdTGfOHHCmnrRuHv37vCxgPMuKejmxOzGvV8NpJoGQbsXgM2J2Y3bD6SaBkG7F3/Hgxd7O3bsSAo4PAcPHgwfCzjvEkG7dy7279/v/+Qdjjc8S5cutYqKivCxgPMuEXReXl7S+81NzdatW8PHAVJC0ovCU82KFSusvLw8fBwgJaStWbMmKdqmxr1odO9LA6kqrbq62v8z0XC84Vm1apUVFRWFHw+klMS/h45Go35t7F4curW0G3dGdi8SDxw4wJ+60SI0+j9Wqqqq/D8Tde9HAy1Jo0EDLRVBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQ0paPB43hlEZgmakhqAZqSFoRmoImpEagmakhqD/D1NcXJyY8D7m7E5KBr1w4UJ/uXfvXlu9erW/npubawUFBUn3TeXZt2+fZWZm2rRp0xLjbrvt4fu2pHE/l8WLFydtT4VJuaDdWWzmzJn+ctu2bbZgwQK/3V3u2rUr6f6pPC7eHTt2NNjmbrvt4fu2lHExuydmfn5+0r5UGII+R+M+f/eDD29347a3xOVHqsfshqDP0SgGPX36dMvLy0vankpD0OdoFIPmDH0GoxK0m6bW0FlZWUn3bSmT6lGnXNBu6r/LsWrVKn9d5V0OFzPvcpy7Scmg1cb9tqmb8D7m7A5BM1JD0IzUEDQjNQTNSA1BM1JD0IzU/BfmGcAA7rd7ZAAAAABJRU5ErkJggg\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 86,
            "name": "I click the Post icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.clickPostIcon()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 176200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 23300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 88,
        "name": "Verify the Category list and search feature",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-category-list-and-search-feature",
        "after": [
          {
            "result": {
              "duration": 1481967600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15011004600,
              "status": "passed"
            },
            "comments": [
              {
                "line": 89,
                "value": "#   And I click the Back icon in Stay Active screen"
              }
            ],
            "line": 90,
            "name": "I wait for 15 sec",
            "match": {
              "arguments": [
                {
                  "val": "15",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7415079100,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 159b694f-2eda-4e26-9bdb-c66e45e7d28f\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"Category\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1717)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:533)\r\n\tat ✽.And I clicks on \"${category.text}\" in app screen(features/home/mycommunities/PulseMyCommunities.feature:91)\r\n",
              "status": "failed"
            },
            "line": 91,
            "name": "I clicks on \"${category.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${category.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 92,
            "name": "I verify the following texts \"Category\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Category",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "COVID-19"
                ],
                "line": 93
              },
              {
                "cells": [
                  "Fitness"
                ],
                "line": 94
              },
              {
                "cells": [
                  "Global Awareness Days"
                ],
                "line": 95
              },
              {
                "cells": [
                  "Mental Health"
                ],
                "line": 96
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 97,
            "name": "I clicks on \"Mental Health\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "Mental Health",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 98,
            "name": "I clicks on \"${apply.button}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${apply.button}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 99,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${no.post.found.text}"
                ],
                "line": 100
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALQAAAGQCAYAAAAHh0qmAAAOAklEQVR4Xu3biXdU5RnH8fwfXex2bG1tXWutW3HXKoqcQwERxYpsCm6sEtYgqIALq1pZ1AREXChiVSBskbAGEPCwiQEMm5CZyWRPgKf3fZOMyZ0EAoUy+fH9nPOcmbl35mb7zs07E0gr/MmfjGFUJi28gWFa8hA0IzUEzUgNQTNSQ9CM1LScoH96mUUuvTF5O5OSE/n1Nf5nFt5+yrnoSov84qrk7c2cMw46elkrK7qrvb8eueR6K+k1wIraPtrwPn+5y2I33Vdz/erbraT381Z0d4cG94n97X6LB4+LP9DFiu7rbEX3drLo5bckfbySZ9Ktalmuxe5oZ0WtH0psj/zyaisdPDrYPyQxpemj/fbwMZizPD+73KLX3m3RK2+tuR3EWNyzv5UMzLDiJwdaSf+R/ucR+c01yY+tneIufRLXI7/9qxXd/7DF/9HVIr+/Iem+zZkzCtp9sOIe/axs9Ov+dnG352qiDr6A6BW3WOz6eywWxOwD6z3I36d08BiL/OpqKxs72X/hdccqe+1NK5+W9eO8Myf4Insn9vtv0NPpVvbSRCsd9rIPvnTgqMT+aO3nUjroBSv8+RU1j+ne128Pf97RP9xI6GdrgpiL7nnQih54JPie1pxRo1fdFtzuEvwsMqyk34jgcpQ/WcVuuDf58cEU3feQlQ4fm7gdu6VtzeOGvBic+Dom3b85c0ZB103ZqFcT1+PtuvpY3RcXa/WA3xa98rZE0G782TRjfINj+E/+zvY1Z+fgGxRv91iDoKu+WuOf8ZULl9U8QYLr7kkQvfzmmo/hgg4Cjnfq4YP2T4B+wxsNuvLzbCsdMS5pO3OaUxtzvGM3i1x8bYN9Lmr3M3Rhxjs/YdE/39HgBObGndgiv7vO/+zrB+1OTJ9072OzWwe/hfsOT/64zZizErT7leK+MH+GvubOxP4GQQffhJLgLB29ovbXU+2UPDfMX8au+7tfOpSmj7HiRxoGXT59Vs3llBlWkfWhv+5+C/iPEYTrztyVH39m5W9n+n1Vy3MbDTre/vEmzxZM88edSeMdkmOuG7fdLR3cEiJ66U1+aeqWqInHt2rjHx8OuuzVN2z7O7Ns3qChVpH5YdJxmzNnJeiSvsP8Gbp05PiatXXwxbjt9YMuGRCsp/oEa+j7O/tnZ90x3BcVf6in3+eWFWUvT7T4gz0S+4uDtblbcpRPnWkVc+b5JUnl/C8Tayx3LB9xaCKX/PgxmLM37vsau6G1P8uG99Ufd6aO/jGI+e72/tKd0Nz24q7P+GVjIujgZFT3GBf0rsw5VpWz+vwEnXjWBa9m3Ys//4nX2x5xr1hrw3MvCv3aOhj/Crj2GO7sHr3s5nrTKrEWrj/xjt198O6FZnhf9Nq7Esd2426H78OcpWnkZ3PSuajh/SO1r2MiF9ecveu/c+UaKbq9nZ/YdTW/gU93/qegGSbVJu3YN9uNYVQmzQAhBA0pBA0pBA0pBA0pBA0pBA0ppx304R+O2KYt34Q3AynhtII+FMQ8cuxr9m3+nvCuJOXl5VZRWRne3KhYLGZVVVXhzU3KzV1lZWVlidvx4mI7evSoPw4ubM0O2p2ZM8a9bt9+d+qYndlzPrAFn/0nvLlR/57/qe3e/Z1t3fqNrQxiPZXeTz1rhw4dTtzu8/RzNmBQug0bnmFdHutmZcGTCRemZgV9+IcfLGP8hCDm/PCuJtUFvWfPXvtg7keWPnSETZsx0+/LmvW+vywsLLT5ny6w7CVLbcuWrfZ4917WqXMX27t3n3/c0OEjbcKkKVZZWWXHjh2zKVPftGEjMqzDg52Tgs6v/a3xfPpQ2/T1Zpvxzrv+dkHBfvv8i4WJ+0LbKYOuDJYNQ8aMt4EjX7RXJr/V6OSuzQs/LBH06jVrrdeTT/ko3aU7E/ftP8gHOfejj+2LLxfa2HGv2IYNG23R4mzLnDXbjh8/bo88+phFozH7ZN58y8yaZXM+mGv/mjbdLzXatuuQFLQ7pov5n127+/h7PdnHDh48ZG9Pm2FLly2v95lB2SmDdnLXrreMsa/b/v0HfGThcevlsPpBT5o81W97YcxL9vXmzZbz1Uof7jN9+1tFRUVN0Bs32eLsJZY1+307eOiQtbr1Dhs+clSwlBhsEyZOtsFDhtmOnTv9cRpbcmwJlivRaNQGPp9umzZ9bV8uXGTvvpdlPZ/ofVrrc7RszQraWbUuz8ZNetNKS398MXYyJwvanUEf7/GEX/M6dUFnZy/1oZeXV1jHTg/biRMnrLq62iKRqF9uuKWJ07Vbz6Sg65Yc7mO5M31FRaVfmgwJljq4cDQ7aKcu6pLS0vCuJG4psSLnK9scrI3fnzPXb3t7+ozgLLvLX5885Q3LC5YZzsx337Nt27fbnr177dHgRd13+fn26YLP7NngDO6WEu7s697BcGfm9CHD/Vr76NHCxMd6aewrtUuOYTZq9IuJM3K/AYNs9eq1iftB32kF7axev8HyNm0Ob045bvnh1uxuPY4Lx2kH3VJMfeMt2xgsY3BhkQ0aFyaChhSChhSChhSChhSChpQ095c496drhmnp41r2Qbu/rIV3MkxLGtewDzp8ygZaMoKGFIKGFIKGFIKGBPevKnNycggaGlzMbdu2JWhomDRpkrVu3ZqgoWHChAkEDR0EDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkEDSkTJ04kaOhYtGiRtWnThqChobq62ubNm0fQ0ELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkELQkJII+vjx43bkyBHbvn27bdy40TZs2GBbtmyxgoICq6ysrP8YIGX5oA8fPmwrV6607OzsRmfZsmW2a9cuO3bsWPjxQEpJ27lzZ1LATc26des4WyOlpYWjPdWsX7/eL0+AVHTKoN1yY8mSJQ225efnh48DpISTBr18+XLbtm2bff/99w225+TkcJZGSmoyaBdzLBazwsJCv3YO7z969Gj4WMB512jQdTGfOHHCmnrRuHv37vCxgPMuKejmxOzGvV8NpJoGQbsXgM2J2Y3bD6SaBkG7F3/Hgxd7O3bsSAo4PAcPHgwfCzjvEkG7dy7279/v/+Qdjjc8S5cutYqKivCxgPMuEXReXl7S+81NzdatW8PHAVJC0ovCU82KFSusvLw8fBwgJaStWbMmKdqmxr1odO9LA6kqrbq62v8z0XC84Vm1apUVFRWFHw+klMS/h45Go35t7F4curW0G3dGdi8SDxw4wJ+60SI0+j9Wqqqq/D8Tde9HAy1Jo0EDLRVBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQwpBQ0paPB43hlEZgmakhqAZqSFoRmoImpEagmakhqD/D1NcXJyY8D7m7E5KBr1w4UJ/uXfvXlu9erW/npubawUFBUn3TeXZt2+fZWZm2rRp0xLjbrvt4fu2pHE/l8WLFydtT4VJuaDdWWzmzJn+ctu2bbZgwQK/3V3u2rUr6f6pPC7eHTt2NNjmbrvt4fu2lHExuydmfn5+0r5UGII+R+M+f/eDD29347a3xOVHqsfshqDP0SgGPX36dMvLy0vankpD0OdoFIPmDH0GoxK0m6bW0FlZWUn3bSmT6lGnXNBu6r/LsWrVKn9d5V0OFzPvcpy7Scmg1cb9tqmb8D7m7A5BM1JD0IzUEDQjNQTNSA1BM1JD0IzU/BfmGcAA7rd7ZAAAAABJRU5ErkJggg\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 101,
            "name": "I click the Back icon in Stay Active screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickstarutton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 105200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 16100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 103,
        "name": "Leave the community if already joined",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;leave-the-community-if-already-joined",
        "after": [
          {
            "result": {
              "duration": 1434891900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8280741300,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 159b694f-2eda-4e26-9bdb-c66e45e7d28f\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"My Communities\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1717)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:533)\r\n\tat ✽.And I clicks on \"${my.communities.text}\" in app screen(features/home/mycommunities/PulseMyCommunities.feature:104)\r\n",
              "status": "failed"
            },
            "line": 104,
            "name": "I clicks on \"${my.communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 105,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 106,
            "name": "I click on joined community three dots menu icon",
            "match": {
              "location": "MyCommunitiesSteps.clickOnJoinedCommMenu()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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jwOkhKSLwpPNypUrraKiInwcICWkrV27Nina5sZdNLrXpYFUlVZTU+P/mWg43vCsXr3aiouLw88HUkri30NHo1G/NnYXh24t7cadkd1F4oEDB/hTN1qFJv/HSnV1tf9nou71aKA1aTJooLUiaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEghaEhJi8fjxjAqQ9CM1BA0IzUEzUgNQTNSQ9CM1BD0/2FKSkoSE97HnNlJyaAXLVrk3+7du9fWrFnjb+fk5FhBQUHSY1N59u3bZ7NmzbJp06Ylxt1328OPbU3jvi9LlixJ2p4Kk3JBu7PYzJkz/dvt27fbwoUL/Xb3Ni8vL+nxqTwu3p07dzba5u677eHHtpZxMbsfzPz8/KR9qTAEfZbGffzuGx/e7sZtb43Lj1SP2Q1Bn6VRDHr69OmWm5ubtD2VhqDP0igGzRn6NEYlaDfNraEzMzOTHttaJtWjTrmg3TR8lWP16tX+tsqrHC5mXuU4e5OSQauN+21TP+F9zJkdgmakhqAZqSFoRmoImpEagmakhqAZqfkvJW7CCcPXGBgAAAAASUVORK5CYII\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 107,
            "name": "I click on leave button for joined community",
            "match": {
              "location": "MyCommunitiesSteps.leaveJoinedCommunity()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify My Communities on One Pluse App",
    "description": "",
    "id": "verify-my-communities-on-one-pluse-app",
    "keyword": "Feature",
    "uri": "features/home/mycommunities/PulseMyCommunities.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_communties"
      },
      {
        "line": 1,
        "name": "@pulse_sg"
      },
      {
        "line": 1,
        "name": "@pulse_regression"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 107700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-private-my-communities-on-one-pluse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 49099700,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor40.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15722477000,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3200300,
              "status": "passed"
            },
            "line": 6,
            "name": "Logout of pulse app if user is logged in",
            "match": {
              "location": "LoginSteps.logOutIfLoggedIn()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12819811000,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12033907800,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3000288800,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2590000200,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: java.lang.IllegalStateException: UiAutomation not connected!\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 82698d6c-e5d7-45a5-87fa-f51b7069845c\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor34.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat io.appium.java_client.PerformsTouchActions.performTouchAction(PerformsTouchActions.java:41)\r\n\tat io.appium.java_client.TouchAction.perform(TouchAction.java:187)\r\n\tat com.prudential.tap.appium.AppiumCommands.swipe(AppiumCommands.java:485)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickSignIns_InSignUp(PulseLoginScreen.java:755)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.clickSignIns_InSignUp(LoginSteps.java:351)\r\n\tat ✽.And I click the Sign in link(features/home/mycommunities/PulseMyCommunities_private.feature:10)\r\n",
              "status": "failed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 186600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 26100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 12,
        "name": "User should be able to login on app with correct credentials using \"Continue with Gmail\"",
        "description": "",
        "id": "verify-private-my-communities-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-gmail\"",
        "after": [
          {
            "result": {
              "duration": 24656000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor40.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 29800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1447700,
              "status": "passed"
            },
            "line": 13,
            "name": "I assign \"pulse123456@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse123456@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 48
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 62034800,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 82698d6c-e5d7-45a5-87fa-f51b7069845c\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\"EN\"]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor34.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.selectTheLanguageToggle(PulseRegistrationScreen.java:994)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.selectTheLangOption(RegistrationSteps.java:335)\r\n\tat ✽.Given I select the language option on toggle bar as required on login page(features/home/mycommunities/PulseMyCommunities_private.feature:14)\r\n",
              "status": "failed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 165800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 23,
        "name": "User should be able to login on app with correct credentials using \"Continue with Gmail\" and Verify the Mycommunities screen",
        "description": "",
        "id": "verify-private-my-communities-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-gmail\"-and-verify-the-mycommunities-screen",
        "after": [
          {
            "result": {
              "duration": 19317900,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor40.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 51634000,
              "status": "passed"
            },
            "line": 24,
            "name": "I click the MyCommunities icon",
            "match": {
              "location": "MyCommunitiesSteps.clickMyCommunities()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3000090800,
              "status": "passed"
            },
            "comments": [
              {
                "line": 25,
                "value": "#    And User should be verify \"${my.communities.text}\" tab in Home screen"
              }
            ],
            "line": 26,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4077123200,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 82698d6c-e5d7-45a5-87fa-f51b7069845c\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor34.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\r\n\tat com.prudential.tap.appium.AppiumCommands.swipe(AppiumCommands.java:432)\r\n\tat com.onepulse.app.screens.TestBasePage.scrollPageDown(TestBasePage.java:209)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.isStaticTextDisplayedOncommunitiesScreen(CustomerConnectScreen.java:176)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(CustomerConnectSteps.java:87)\r\n\tat ✽.And I verify the following texts \"Communities\" in Screen(features/home/mycommunities/PulseMyCommunities_private.feature:27)\r\n",
              "status": "failed"
            },
            "line": 27,
            "name": "I verify the following texts \"Communities\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Communities",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.communities.text}"
                ],
                "line": 28
              },
              {
                "cells": [
                  "${All.Communities.text}"
                ],
                "line": 29
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 148800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 17600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 31,
        "name": "Verify the Private Communities in communities screen",
        "description": "",
        "id": "verify-private-my-communities-on-one-pluse-app;verify-the-private-communities-in-communities-screen",
        "after": [
          {
            "result": {
              "duration": 24381800,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor40.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 30500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4115836800,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 82698d6c-e5d7-45a5-87fa-f51b7069845c\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Hi Pulsemate!\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor34.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.TestBasePage.popupstart(TestBasePage.java:495)\r\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickPrivateCommunities(MyCommunitiesScreen.java:941)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.Click_PrivateCommunties(MyCommunitiesSteps.java:288)\r\n\tat ✽.And I click the Private \"${All.Communities.text}\" in Communties screen(features/home/mycommunities/PulseMyCommunities_private.feature:32)\r\n",
              "status": "failed"
            },
            "line": 32,
            "name": "I click the Private \"${All.Communities.text}\" in Communties screen",
            "match": {
              "arguments": [
                {
                  "val": "${All.Communities.text}",
                  "offset": 21
                }
              ],
              "location": "MyCommunitiesSteps.Click_PrivateCommunties(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 33,
            "name": "I Enter the \"e.g. Be Healthy content, Challenges etc.\" in \"Test\" in home screen",
            "match": {
              "arguments": [
                {
                  "val": "e.g. Be Healthy content, Challenges etc.",
                  "offset": 13
                },
                {
                  "val": "Test",
                  "offset": 59
                }
              ],
              "location": "CustomerConnectSteps.i_Enter_the_in_in_home_screen(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I Enter the \"e.g. Healthy content, forum for celebrities etc.\" in \"2020\" in home screen",
            "match": {
              "arguments": [
                {
                  "val": "e.g. Healthy content, forum for celebrities etc.",
                  "offset": 13
                },
                {
                  "val": "2020",
                  "offset": 67
                }
              ],
              "location": "CustomerConnectSteps.i_Enter_the_in_in_home_screen(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "I clicks on \"Take a Picture\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "Take a Picture",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "I click the Upload Image icon",
            "match": {
              "location": "MyCommunitiesSteps.clickUploadIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 38,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 40,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 41,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 42,
            "name": "I click skip button in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.clickSkipbutton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "I clicks on \"OK\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "OK",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Private My Communities on One Pluse App",
    "description": "",
    "id": "verify-private-my-communities-on-one-pluse-app",
    "keyword": "Feature",
    "uri": "features/home/mycommunities/PulseMyCommunities_private.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_communties_private"
      },
      {
        "line": 1,
        "name": "@pulse_sg"
      },
      {
        "line": 1,
        "name": "@pulse_regression"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 157600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 19300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 160300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13168431100,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 888500,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${pulse.legal.privacy.login.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${pulse.legal.privacy.login.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 56
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12857205300,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12800278600,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5001447900,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4806386100,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 138100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 12500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 119600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3782457900,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18088859500,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1974130900,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000614600,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8398899800,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7825029100,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 143700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 17000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 23,
        "name": "Navigate to account screen",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;navigate-to-account-screen",
        "after": [
          {
            "result": {
              "duration": 60200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5493247100,
              "status": "passed"
            },
            "line": 24,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 206000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 26600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 26,
        "name": "Verify the Legacy and Privacy should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-legacy-and-privacy-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 61300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4234083600,
              "status": "passed"
            },
            "line": 27,
            "name": "I click the Legacy and Privacy in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickLegalandLegacy()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4031117200,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Terms.conditions.text}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${icon.privacyNotice}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${icon.regulatory}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${app.version.text}"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 85500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 11000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 34,
        "name": "Verify the Terms and condition screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-terms-and-condition-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 63900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 400542900,
              "status": "passed"
            },
            "line": 35,
            "name": "I click on \"${Terms.conditions.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${Terms.conditions.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14202129300,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the pulse icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickpulseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2296615400,
              "status": "passed"
            },
            "line": 37,
            "name": "I click the Back icon in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1858920400,
              "status": "passed"
            },
            "line": 38,
            "name": "I click the Back icon in Terms and conditions screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInTermsConditionScreen()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 128000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 19000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 40,
        "name": "Verify the Privacy screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-privacy-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 65700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2527546200,
              "status": "passed"
            },
            "line": 41,
            "name": "I click the Privacy icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickprivacyIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14101155500,
              "status": "passed"
            },
            "line": 42,
            "name": "I click the pulse icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickpulseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2585805700,
              "status": "passed"
            },
            "line": 43,
            "name": "I click the Back icon in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3244682700,
              "status": "passed"
            },
            "line": 44,
            "name": "I click the Back icon in Privacy Notice",
            "match": {
              "location": "CustomerConnectSteps.clickBackbuttonPrivacy()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 45,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 97600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 11100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 46,
        "name": "Verify the Regulator screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-regulator-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 59700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13866825300,
              "status": "passed"
            },
            "line": 47,
            "name": "I click the Regulatory icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickRegulatory()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20805123300,
              "status": "passed"
            },
            "line": 48,
            "name": "I click the Babylons  icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickBabylon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2653406500,
              "status": "passed"
            },
            "line": 49,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${clinicalSafety.text}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${ai.healthcare.text}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${localisation.text}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${privacy.date.protection.text}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${concern.reporting.text}"
                ],
                "line": 54
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify legal and legacy on One pulse App",
    "description": "",
    "id": "verify-legal-and-legacy-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/MyAccount/LegalAndPrivacy.feature",
    "tags": [
      {
        "line": 1,
        "name": "@Legalandprivacy_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 137000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 17200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 10,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 64200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 36000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14450101200,
              "status": "passed"
            },
            "line": 11,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 316000,
              "status": "passed"
            },
            "line": 12,
            "name": "I assign \"${onepulse.login.edit.profile}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.edit.profile}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 55
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13027205900,
              "status": "passed"
            },
            "line": 13,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12171417100,
              "status": "passed"
            },
            "line": 14,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000489700,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4994855500,
              "status": "passed"
            },
            "line": 16,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 202800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 91000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 18,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 65500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3871582400,
              "status": "passed"
            },
            "line": 19,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18045125500,
              "status": "passed"
            },
            "line": 20,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 21
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 727344200,
              "status": "passed"
            },
            "line": 23,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000301500,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8001738500,
              "status": "passed"
            },
            "line": 25,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6838905200,
              "status": "passed"
            },
            "line": 26,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 283200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 18300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 28,
        "name": "Navigate to account screen and verify all the options",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-to-account-screen-and-verify-all-the-options",
        "after": [
          {
            "result": {
              "duration": 61500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5388999300,
              "status": "passed"
            },
            "line": 29,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2000406700,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5742608500,
              "status": "passed"
            },
            "line": 31,
            "name": "user should verify following options on account screen",
            "match": {
              "location": "ManageProfileSteps.userShouldVerifyOptionsOnAccountScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.wearable.text}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${my.rewards.text}"
                ],
                "line": 33
              },
              {
                "cells": [
                  "${my.notification.text}"
                ],
                "line": 34
              },
              {
                "cells": [
                  "${icon.mySettings}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${my.feedback.text}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${icon.legal\u0026Privacy}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${pulsePersonalised.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${sign.out.button.text}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${logs.text}"
                ],
                "line": 40
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 99700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 42,
        "name": "Verify wearable screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-wearable-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 61200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1361781700,
              "status": "passed"
            },
            "line": 43,
            "name": "I click on \"${my.wearable.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.wearable.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1999974900,
              "status": "passed"
            },
            "line": 44,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2063583000,
              "status": "passed"
            },
            "line": 45,
            "name": "I verify following text are displayed under My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyWearablesScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${wearables.title}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${wearables.subTitle}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${wearables.description}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${wearables.fitbit}"
                ],
                "line": 49
              },
              {
                "cells": [
                  "${wearables.garmin}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${wearables.googleFit}"
                ],
                "line": 51
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 137600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 53,
        "name": "navigate back to account screen from my wearable screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-my-wearable-screen",
        "after": [
          {
            "result": {
              "duration": 69100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 297575300,
              "status": "passed"
            },
            "line": 54,
            "name": "user navigate back to the Home screen from My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.backNavigationMyWearablesHome()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000129100,
              "status": "passed"
            },
            "line": 55,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 124000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 13300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 58,
        "name": "Navigate to account screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-to-account-screen",
        "after": [
          {
            "result": {
              "duration": 63700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5080038600,
              "status": "passed"
            },
            "line": 59,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2000216300,
              "status": "passed"
            },
            "line": 60,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 110100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 62,
        "name": "Verify reward screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-reward-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 69300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 508852200,
              "status": "passed"
            },
            "line": 63,
            "name": "I click on \"${my.rewards.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.rewards.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000889300,
              "status": "passed"
            },
            "line": 64,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6653664500,
              "status": "passed"
            },
            "line": 65,
            "name": "User verify following texts are displayed in My Rewards screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnRewardsScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myRewards.title}"
                ],
                "line": 66
              },
              {
                "cells": [
                  "${myRewards.badges}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "${myRewards.vouchers}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${myRewards.discover}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${my.rewards.text}"
                ],
                "line": 70
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 131500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 17900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 72,
        "name": "User access My Rewards FAQ",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;user-access-my-rewards-faq",
        "after": [
          {
            "result": {
              "duration": 58400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3661611900,
              "status": "passed"
            },
            "line": 73,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2000186600,
              "status": "passed"
            },
            "line": 74,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 368517900,
              "status": "passed"
            },
            "line": 75,
            "name": "User verify following texts are displayed in My Rewards screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnRewardsScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.title}"
                ],
                "line": 76
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 111800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 87,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;2",
        "after": [
          {
            "result": {
              "duration": 62200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1834865800,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.1}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.1}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 652933200,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.1}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1263658200,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.1.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.1.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 603144600,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.1}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 82900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 88,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;3",
        "after": [
          {
            "result": {
              "duration": 131400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1130818300,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.2}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.2}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 258036700,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.2}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2074489900,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.2.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.2.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 538547900,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.2}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 117400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 16500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 89,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;4",
        "after": [
          {
            "result": {
              "duration": 69200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1255670200,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.3}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.3}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1546701900,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.3}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 470862300,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.3.ans.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3.ans.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.3.ans.1}##${myRewards.faq.3.ans.2}##${myRewards.faq.3.ans.3}##${myRewards.faq.3.ans.4}##${myRewards.faq.3.ans.5}##${myRewards.faq.3.ans.6}##${myRewards.faq.3.ans.7}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 241230800,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.3}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 113900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 18600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 90,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;5",
        "after": [
          {
            "result": {
              "duration": 2551917200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 50200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1770546200,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tActual text is: 4. I have completed Healthcheck and used Symptom Checker previously, will I earn points for those activities?expected text is:I have completed Healthcheck expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ManageProfileSteps.verifyFAQOnRewardsScreen(ManageProfileSteps.java:291)\r\n\tat ✽.Then User verify following faqs and answers \"${myRewards.faq.4.subtext}\" are displayed in My Rewards screen(features/my/MyAccount/PulseMyAccount.feature:79)\r\n",
              "status": "failed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.4.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.4.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.4.1}##${myRewards.faq.4.2}##${myRewards.faq.4.3}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.4.subtext}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.4.subtext}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.4.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.4.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.4.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.4.subtext}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.4.subtext}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 127400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 13000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 91,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;6",
        "after": [
          {
            "result": {
              "duration": 119500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 547273100,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.5}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.5}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 507357200,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.5}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1961650900,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.5.ans.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5.ans.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.5.ans.1}##${myRewards.faq.5.ans.2}##${myRewards.faq.5.ans.3}##${myRewards.faq.5.ans.4}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 573590900,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.5}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 119500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 92,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;7",
        "after": [
          {
            "result": {
              "duration": 65800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1441979400,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.6}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.6}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1604592100,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.6}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1027612300,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.6.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.6.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 267613700,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.6}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 132300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 93,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;8",
        "after": [
          {
            "result": {
              "duration": 63400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1317987900,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.7}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.7}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 604276800,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.7}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1275181800,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.7.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.7.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 654161100,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.7}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 132200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 21500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 94,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;9",
        "after": [
          {
            "result": {
              "duration": 69900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1225520000,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.8}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.8}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 600073100,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.8}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1859351800,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.8.ans.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8.ans.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.8.ans.1}##${myRewards.faq.8.ans.2}##${myRewards.faq.8.ans.3}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 561089700,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.8}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 113500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 95,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;10",
        "after": [
          {
            "result": {
              "duration": 92700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1481138700,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.9}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.9}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 493651600,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.9}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1500604000,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.9.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.9.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 484956600,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.9}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 141600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 98,
        "name": "navigate back to account screen from my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-my-rewards-screen",
        "after": [
          {
            "result": {
              "duration": 135500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 38021487100,
              "status": "passed"
            },
            "line": 99,
            "name": "I click on back button on my reward screen to navigate to account screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInRewardScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000195300,
              "status": "passed"
            },
            "line": 100,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 129100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 18200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 102,
        "name": "Verify Notification screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-notification-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 175100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 614048000,
              "status": "passed"
            },
            "line": 103,
            "name": "I click on \"${my.notification.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.notification.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2873242800,
              "status": "passed"
            },
            "line": 104,
            "name": "User verify following texts are displayed in My Notification screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnNotificationScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${notification.msg}"
                ],
                "line": 105
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 136100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 19700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 107,
        "name": "navigate back to account screen from Notification screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-notification-screen",
        "after": [
          {
            "result": {
              "duration": 50400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 419600000,
              "status": "passed"
            },
            "line": 108,
            "name": "I click on back button on notification screen to navigate to account screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInNotificationScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1999906200,
              "status": "passed"
            },
            "line": 109,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 111200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 13200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 111,
        "name": "Verify my feedback screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-my-feedback-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 62700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 760022000,
              "status": "passed"
            },
            "line": 112,
            "name": "I click on \"${my.feedback.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.feedback.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6321820200,
              "status": "passed"
            },
            "line": 113,
            "name": "User verify following texts are displayed in My feedback screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyFeedbackScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${feedback.static.text}"
                ],
                "line": 114
              },
              {
                "cells": [
                  "${feedback.improvement}"
                ],
                "line": 115
              },
              {
                "cells": [
                  "${aime.text}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "${health.article.text}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "${bmi.text.uppercase}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "${wrinkle.text}"
                ],
                "line": 119
              },
              {
                "cells": [
                  "${health.assessment.text}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "${babylon.symptom.checker}"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 442812900,
              "status": "passed"
            },
            "line": 122,
            "name": "I verify following edit box sample text is displayed in account screen",
            "match": {
              "location": "ManageProfileSteps.verifySampleText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${share.thought.text}"
                ],
                "line": 123
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 130900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 126,
        "name": "Verify the submit functionality in My feedback screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-submit-functionality-in-my-feedback-screen",
        "after": [
          {
            "result": {
              "duration": 64400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 672988600,
              "status": "passed"
            },
            "line": 127,
            "name": "I select \"5\" star in feedback screen",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 10
                }
              ],
              "location": "ManageProfileSteps.selectStarInFeedbackForm(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3293473500,
              "status": "passed"
            },
            "line": 128,
            "name": "I enter feedback",
            "match": {
              "location": "ManageProfileSteps.enterFeedback(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Feedback",
                  "Test_12345"
                ],
                "line": 129
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5698692900,
              "status": "passed"
            },
            "line": 130,
            "name": "I click the Submit icon in Feedback Screen",
            "match": {
              "location": "CustomerConnectSteps.clickSubmitFeedbackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000351600,
              "status": "passed"
            },
            "line": 131,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 122200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 21700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 133,
        "name": "Verify the Pulse Personalised tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-pulse-personalised-tab",
        "after": [
          {
            "result": {
              "duration": 60800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4993577500,
              "status": "passed"
            },
            "line": 134,
            "name": "I click the Pulse by Personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickpulsePersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2001077400,
              "status": "passed"
            },
            "line": 135,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1321741500,
              "status": "passed"
            },
            "line": 136,
            "name": "User verify following texts are displayed in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnPulsePersonalisedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${pulsePersonalised.text}"
                ],
                "line": 137
              },
              {
                "cells": [
                  "${data.privacy.text}"
                ],
                "line": 138
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2136799600,
              "status": "passed"
            },
            "line": 139,
            "name": "I verify data and privacy consent in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyDataAndPrivacyConsent(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${pulse.personalised.consent.text1}"
                ],
                "line": 140
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text2}"
                ],
                "line": 141
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text3}"
                ],
                "line": 142
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text4}"
                ],
                "line": 143
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text5}"
                ],
                "line": 144
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text6}"
                ],
                "line": 145
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text7}"
                ],
                "line": 146
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 94900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 148,
        "name": "Save the consent with data privacy check",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;save-the-consent-with-data-privacy-check",
        "after": [
          {
            "result": {
              "duration": 78300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 474707000,
              "status": "passed"
            },
            "line": 149,
            "name": "I select the data privacy checkbox",
            "match": {
              "location": "ManageProfileSteps.dataPrivacyCheckbox()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3699156000,
              "status": "passed"
            },
            "line": 150,
            "name": "I click the save button in pulse personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickSavebuttonpersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2569989300,
              "status": "passed"
            },
            "line": 151,
            "name": "User verify following texts are displayed in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnPulsePersonalisedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${consent.success.msg.text}"
                ],
                "line": 152
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9148303400,
              "status": "passed"
            },
            "line": 153,
            "name": "I click the Ok button in pulse personlised screen",
            "match": {
              "location": "CustomerConnectSteps.clickpersonalisedscreen()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 164400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 18500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 155,
        "name": "Save the consent without data privacy check",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;save-the-consent-without-data-privacy-check",
        "after": [
          {
            "result": {
              "duration": 70800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1289348600,
              "status": "passed"
            },
            "line": 156,
            "name": "I select the data privacy checkbox",
            "match": {
              "location": "ManageProfileSteps.dataPrivacyCheckbox()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4745228600,
              "status": "passed"
            },
            "line": 157,
            "name": "I click the save button in pulse personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickSavebuttonpersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2126176300,
              "status": "passed"
            },
            "line": 158,
            "name": "User verify following texts are displayed in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnPulsePersonalisedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${consent.success.msg.text}"
                ],
                "line": 159
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8414624400,
              "status": "passed"
            },
            "line": 160,
            "name": "I click the Ok button in pulse personlised screen",
            "match": {
              "location": "CustomerConnectSteps.clickpersonalisedscreen()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 126600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 17000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 163,
        "name": "navigate back to account screen from pulse personalised screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-pulse-personalised-screen",
        "after": [
          {
            "result": {
              "duration": 50600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8604592500,
              "status": "passed"
            },
            "line": 164,
            "name": "I click the Back icon in pulse personalised screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackpersonalisedScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000125300,
              "status": "passed"
            },
            "line": 165,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify My accounts options in Account screen",
    "description": "1)My wearable\r\n2)My Rewards\r\n3)My Notifications\r\n4)My Feedback\r\n5)Pulse Personalised",
    "id": "verify-my-accounts-options-in-account-screen",
    "keyword": "Feature",
    "uri": "features/my/MyAccount/PulseMyAccount.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MyAccount_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 117100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 21400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 75800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14414213700,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 451200,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12906900800,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10330658200,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000792300,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4982959000,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 129700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 17700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 57100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3902010500,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18032753500,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1196044300,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000804200,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7903209800,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8052137400,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 128300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 18200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 23,
        "name": "Verify the user can access My Wearables via Fitness",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;verify-the-user-can-access-my-wearables-via-fitness",
        "after": [
          {
            "result": {
              "duration": 56300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4712035300,
              "status": "passed"
            },
            "line": 24,
            "name": "User clicks on Fitness tab",
            "match": {
              "location": "OptionsInFooterSteps.clickOnFitnessTab()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3860826500,
              "status": "passed"
            },
            "line": 25,
            "name": "I verify My Wearables tile on Fitness screen",
            "match": {
              "location": "OptionsInFooterSteps.verifyStaticTextOnFitnessScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${fitness.myWearables}"
                ],
                "line": 26
              },
              {
                "cells": [
                  "${fitness.myWearables.description}"
                ],
                "line": 27
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1080903100,
              "status": "passed"
            },
            "line": 28,
            "name": "I click on Connect Now button on Fitness screen",
            "match": {
              "location": "OptionsInFooterSteps.clickOnConnectNow()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5210684000,
              "status": "passed"
            },
            "line": 29,
            "name": "I verify following text are displayed under My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyWearablesScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${wearables.title}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${wearables.subTitle}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${wearables.description}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${wearables.fitbit}"
                ],
                "line": 33
              },
              {
                "cells": [
                  "${wearables.garmin}"
                ],
                "line": 34
              },
              {
                "cells": [
                  "${wearables.googleFit}"
                ],
                "line": 35
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify My wearable functionality via fitness tab on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/my/MyWearable.feature",
    "tags": [
      {
        "line": 1,
        "name": "@myWearables_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 125400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 19900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-that-user-can-access-calendar-under-health-section;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 58700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14173805700,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 267800,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12673856300,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13145663900,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1999896500,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4681701600,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 12,
            "value": "#    Then I verify below language options on toggle bar as per specified lbu on login page"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 99700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 12300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 14,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-access-calendar-under-health-section;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 59800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3862234400,
              "status": "passed"
            },
            "line": 15,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19312728800,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 847303600,
              "status": "passed"
            },
            "line": 19,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000394100,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8221572800,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7637177600,
              "status": "passed"
            },
            "line": 22,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 68000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 11100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 25,
        "name": "User should be able to access Calendar screen",
        "description": "",
        "id": "verify-that-user-can-access-calendar-under-health-section;user-should-be-able-to-access-calendar-screen",
        "after": [
          {
            "result": {
              "duration": 1781590400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 25000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4693740700,
              "status": "passed"
            },
            "line": 26,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3755546200,
              "status": "passed"
            },
            "line": 27,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13382301500,
              "status": "passed"
            },
            "line": 28,
            "name": "I click on Calendar tile",
            "match": {
              "location": "LocationSteps.iClicksOnCalendarButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3000190300,
              "status": "passed"
            },
            "line": 29,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3781906000,
              "status": "passed"
            },
            "line": 30,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${calendar.text}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${no.events.text}"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 866377700,
              "status": "passed"
            },
            "line": 33,
            "name": "I click on events dropdown button in calendar screen",
            "match": {
              "location": "LocationSteps.iClicksOnEventsButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 100808936500,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tPolicy Remainder text is displayed on page Calendar events expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(CustomerConnectSteps.java:89)\r\n\tat ✽.Then I verify the following texts \"Calendar events\" in Screen(features/my/health/Calendar.feature:34)\r\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 34,
            "name": "I verify the following texts \"Calendar events\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Calendar events",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${medicine.reminders.text}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${appointments.text}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${vaccination.text}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${workout.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${pulse.tv.text}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${policy.remainder.text}"
                ],
                "line": 40
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify that user can access calendar under health section",
    "description": "",
    "id": "verify-that-user-can-access-calendar-under-health-section",
    "keyword": "Feature",
    "uri": "features/my/health/Calendar.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@my_calendar"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 115100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 17600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 4,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-pru-safe-covid-19-cover-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 804232700,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:89)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor40.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 30400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2639700,
              "status": "passed"
            },
            "line": 5,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 141500,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13788341500,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000046000,
              "status": "passed"
            },
            "line": 8,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12982027700,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000239600,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12364331000,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000080400,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7603728700,
              "status": "passed"
            },
            "line": 13,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000709500,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8291816400,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 16
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 770822400,
              "status": "passed"
            },
            "line": 20,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 30809749400,
              "error_message": "com.prudential.tap.exception.TapException: Not able to convert Json string to map [\"message\":\"Too many API requests, upgrade or wait until Tue, 01 Jun 2021 00:00:00 GMT\",\"requestId\":\"msfe_8re5GKjmx44a7\",\"responseTime\":\"10 ms\",\"method\":\"GET\",\"path\":\"/api/addresses/pulse883105556@mailsac.com/messages\",\"status\":429]\r\n\tat com.prudential.tap.filehandling.JsonReader.convertJsonStringToMap(JsonReader.java:61)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getMessageIdFromMailsacEmail(PulseMailSacApi.java:68)\r\n\tat com.onepulse.app.api.PulseMailSacApi.getOTPFromEmail(PulseMailSacApi.java:100)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.enterOTP(PulseRegistrationScreen.java:257)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.enterOTPInPulse(RegistrationSteps.java:294)\r\n\tat ✽.And I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"(features/my/home/prushopee/PruCovid19Protection.feature:21)\r\n",
              "status": "failed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 22,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 23,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 24,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 25,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 26,
            "value": "#    And I click the Account icon in Home screen"
          },
          {
            "line": 27,
            "value": "#    And I click the sign out from pulse app"
          },
          {
            "line": 28,
            "value": "#    Then I wait for 4 sec"
          },
          {
            "line": 29,
            "value": "#    When user enters password credentials in sigin screen"
          },
          {
            "line": 30,
            "value": "#      | Password | Pas$1234 |"
          },
          {
            "line": 31,
            "value": "#    And User clicks on signin button"
          },
          {
            "line": 32,
            "value": "#    Then I wait for 8 sec"
          },
          {
            "line": 33,
            "value": "#    Then user should be landed to \"Home\" screen"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 83200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 12500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 35,
        "name": "Verify User should be able to see the PRU Shoppe screen",
        "description": "",
        "id": "verify-pru-safe-covid-19-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-pru-shoppe-screen",
        "after": [
          {
            "result": {
              "duration": 1670056500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 29400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9293495900,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 3734a7cf-1f79-4852-bfa7-99f15ea5aaec\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Shoppe\u0027]/parent::android.view.ViewGroup}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.PruShoppeScreen.clickOnPruShoppeIConOnHomePage(PruShoppeScreen.java:54)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.PruShoppeSteps.navigateToPruShoppeHomePage(PruShoppeSteps.java:40)\r\n\tat ✽.And I click on pru shoppe button on the home page(features/my/home/prushopee/PruCovid19Protection.feature:36)\r\n",
              "status": "failed"
            },
            "line": 36,
            "name": "I click on pru shoppe button on the home page",
            "match": {
              "location": "PruShoppeSteps.navigateToPruShoppeHomePage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 37,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${pru.shoppe.my.receiving.service.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${pru.shopee.privicy.policy.text}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${pru.shopee.term.conditions.text}"
                ],
                "line": 40
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 41,
            "name": "I verify the following texts \"Pru Shopee Screen\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Pru Shopee Screen",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.cancelButton}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${prushoppe.proceed.txt}"
                ],
                "line": 43
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 88300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 11700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 45,
        "name": "Verify User should be able to see the PRUSafe COVIDCover screen options",
        "description": "",
        "id": "verify-pru-safe-covid-19-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-prusafe-covidcover-screen-options",
        "after": [
          {
            "result": {
              "duration": 1713148700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8958134700,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027RISHANI-PC\u0027, ip: \u0027192.168.0.102\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 29, deviceManufacturer: samsung, deviceModel: SM-N770F, deviceName: RF8N31EE5JX, deviceScreenDensity: 420, deviceScreenSize: 1080x2400, deviceUDID: RF8N31EE5JX, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.625, platform: LINUX, platformName: Android, platformVersion: 10, statBarHeight: 85, takesScreenshot: true, viewportRect: {height: 2104, left: 0, top: 85, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 3734a7cf-1f79-4852-bfa7-99f15ea5aaec\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\"Proceed\"]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:168)\r\n\tat com.onepulse.app.screens.PruShoppeScreen.clickProceedBtn(PruShoppeScreen.java:103)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.PruShoppeSteps.clickOnProceedBtn(PruShoppeSteps.java:100)\r\n\tat ✽.Then I click on Proceed button on prushoppe screen(features/my/home/prushopee/PruCovid19Protection.feature:46)\r\n",
              "status": "failed"
            },
            "line": 46,
            "name": "I click on Proceed button on prushoppe screen",
            "match": {
              "location": "PruShoppeSteps.clickOnProceedBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 47,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 48,
            "name": "I click on pru covid19 campaign tile on prushoppe screen for malaysia",
            "match": {
              "location": "PruShoppeSteps.navigateToCovid19Campaign()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 49,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.covid19.hospitalization.text}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${my.covid19.for.pru.malaysia.customer}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${my.covid.19.benefit.offered}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${my.covid19.hospital.assistence}"
                ],
                "line": 54
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 55,
            "name": "I verify the following texts \"Covid 19\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Covid 19",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.self.text}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "${family.text}"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.covid19.disclosure.text.1}"
                ],
                "line": 59
              },
              {
                "cells": [
                  "${my.covid19.disclosure.text.2}"
                ],
                "line": 60
              },
              {
                "cells": [
                  "${my.covid19.disclosure.text.3}"
                ],
                "line": 61
              },
              {
                "cells": [
                  "${my.covid19.disclosure.text.4}"
                ],
                "line": 62
              },
              {
                "cells": [
                  "${my.covid19.disclosure.text.5}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "${my.covid19.disclosure.text.6}"
                ],
                "line": 64
              },
              {
                "cells": [
                  "${my.covid19.disclosure.text.7}"
                ],
                "line": 65
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 66,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 67,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "comments": [
                  {
                    "line": 68,
                    "value": "#      | ${my.covid19.disclosure.text} |"
                  }
                ],
                "cells": [
                  "${my.name.as.nric.text}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${gender.text}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "${my.covid19.dob}"
                ],
                "line": 71
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 117500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 17600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 73,
        "name": "Verify User should be able to see the PRUSafe COVIDCover screen options",
        "description": "",
        "id": "verify-pru-safe-covid-19-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-prusafe-covidcover-screen-options",
        "after": [
          {
            "result": {
              "duration": 1645299100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 27300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3743829900,
              "status": "passed"
            },
            "line": 74,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37809964800,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tResidential address text is displayed on page  expected [true] but found [false],\n\tCountry of Residence text is displayed on page  expected [true] but found [false],\n\tResidential status and Nationality text is displayed on page  expected [true] but found [false],\n\tEmail text is displayed on page  expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\r\n\tat ✽.And I verify following texts are displayed(features/my/home/prushopee/PruCovid19Protection.feature:75)\r\n",
              "status": "failed"
            },
            "line": 75,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.residential.text}"
                ],
                "line": 76
              },
              {
                "cells": [
                  "${my.country.of.residence}"
                ],
                "line": 77
              },
              {
                "cells": [
                  "${my.resedential.status}"
                ],
                "line": 78
              },
              {
                "cells": [
                  "${email.text}"
                ],
                "line": 79
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 80,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.country.code}"
                ],
                "line": 82
              },
              {
                "cells": [
                  "${my.mobile.phone.number}"
                ],
                "line": 83
              },
              {
                "cells": [
                  "${my.referral.code}"
                ],
                "line": 84
              },
              {
                "cells": [
                  "${my.covid19.agreement.text}"
                ],
                "line": 85
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 86,
            "name": "I verify the following texts \"Covid 19\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Covid 19",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${prushoppe.proceed.capital.txt}"
                ],
                "line": 87
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Pru Safe Covid-19 Cover functionality on one pulse App",
    "description": "",
    "id": "verify-pru-safe-covid-19-cover-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/home/prushopee/PruCovid19Protection.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_covid19"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 4,
            "value": "#  Scenario: Verify user can login using CONTINUE WITH GOOGLE option"
          },
          {
            "line": 5,
            "value": "#    Given User has pulse app"
          },
          {
            "line": 6,
            "value": "#    And user click on \"CONTINUE WITH GOOGLE\" with Google button"
          },
          {
            "line": 7,
            "value": "#    And I click the \"Email\"  in Continue with Gmail"
          },
          {
            "line": 8,
            "value": "#      | Emailid  | ${prushopee.policy.login.id} |"
          },
          {
            "line": 9,
            "value": "#      | Password | ${proshopee.text}               |"
          },
          {
            "line": 10,
            "value": "#    Then user should be landed to \"Home\" screen"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 121800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 12,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 70700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14089861400,
              "status": "passed"
            },
            "line": 13,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 456100,
              "status": "passed"
            },
            "line": 14,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12990488000,
              "status": "passed"
            },
            "line": 15,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11951680300,
              "status": "passed"
            },
            "line": 16,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000751800,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5201833700,
              "status": "passed"
            },
            "line": 18,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 126200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 20,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 66300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4351054600,
              "status": "passed"
            },
            "line": 21,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 17867138200,
              "status": "passed"
            },
            "line": 22,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 23
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 24
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 786675900,
              "status": "passed"
            },
            "line": 25,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000599500,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7746212600,
              "status": "passed"
            },
            "line": 27,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7829306100,
              "status": "passed"
            },
            "line": 28,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 135400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 30,
        "name": "Verify user can access his policies from Pru Shoppe My Policies screen",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-user-can-access-his-policies-from-pru-shoppe-my-policies-screen",
        "after": [
          {
            "result": {
              "duration": 60200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 976435200,
              "status": "passed"
            },
            "line": 31,
            "name": "I click on pru shoppe button on the home page",
            "match": {
              "location": "PruShoppeSteps.navigateToPruShoppeHomePage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5000926000,
              "status": "passed"
            },
            "line": 32,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 695320400,
              "status": "passed"
            },
            "line": 33,
            "name": "I click on my policies tile on prushoppe screen",
            "match": {
              "location": "PruShoppeSteps.navigateToMyPoliciesScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8636809500,
              "status": "passed"
            },
            "line": 34,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.title}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${myCoverage.linkPolicyButton}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${myCoverage.information}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${myCoverage.InformationDescription}"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 124600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 40,
        "name": "Click on Link policy and verify screen to add policy number",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;click-on-link-policy-and-verify-screen-to-add-policy-number",
        "after": [
          {
            "result": {
              "duration": 59100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 416367400,
              "status": "passed"
            },
            "line": 41,
            "name": "I clicks on \"${myCoverage.linkPolicyButton}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${myCoverage.linkPolicyButton}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000350300,
              "status": "passed"
            },
            "line": 42,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1911497900,
              "status": "passed"
            },
            "line": 43,
            "name": "I hide one pulse app mobile keyboard",
            "match": {
              "location": "BaseSteps.hideKeyboard()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2172902400,
              "status": "passed"
            },
            "line": 44,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.title}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${myCoverage.policyNumber.description}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${myCoverage.policyNumber.description1}"
                ],
                "line": 47
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 155700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 49,
        "name": "Verify the error message when the Policy Number is blank",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-the-error-message-when-the-policy-number-is-blank",
        "after": [
          {
            "result": {
              "duration": 59800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 758865600,
              "status": "passed"
            },
            "line": 50,
            "name": "I click on \"${myCoverage.policyNumber.saveButton}\" button on app",
            "match": {
              "arguments": [
                {
                  "val": "${myCoverage.policyNumber.saveButton}",
                  "offset": 12
                }
              ],
              "location": "LoginSteps.clickOnButton(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1422454400,
              "status": "passed"
            },
            "line": 51,
            "name": "I click on \"${myCoverage.policyNumber.saveButton}\" button on app",
            "match": {
              "arguments": [
                {
                  "val": "${myCoverage.policyNumber.saveButton}",
                  "offset": 12
                }
              ],
              "location": "LoginSteps.clickOnButton(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2967693200,
              "status": "passed"
            },
            "line": 52,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.errorMessage}"
                ],
                "line": 53
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 139100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 55,
        "name": "Verify the error message when the Policy Number is invalid or incorrect",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-the-error-message-when-the-policy-number-is-invalid-or-incorrect",
        "after": [
          {
            "result": {
              "duration": 66300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1831698700,
              "status": "passed"
            },
            "line": 56,
            "name": "I enter \"1234\" as the Policy number",
            "match": {
              "arguments": [
                {
                  "val": "1234",
                  "offset": 9
                }
              ],
              "location": "PruShoppeSteps.enterPolicyNumber(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2064076600,
              "status": "passed"
            },
            "line": 57,
            "name": "I click on \"${myCoverage.policyNumber.saveButton}\" button on app",
            "match": {
              "arguments": [
                {
                  "val": "${myCoverage.policyNumber.saveButton}",
                  "offset": 12
                }
              ],
              "location": "LoginSteps.clickOnButton(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4826672700,
              "status": "passed"
            },
            "line": 58,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.errorMessage}"
                ],
                "line": 59
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 539900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 19400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 61,
        "name": "Verify the error message when the Cancel Button",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-the-error-message-when-the-cancel-button",
        "after": [
          {
            "result": {
              "duration": 47200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 577288700,
              "status": "passed"
            },
            "line": 62,
            "name": "I click on \"${myCoverage.policyNumber.cancelButton}\" button on app",
            "match": {
              "arguments": [
                {
                  "val": "${myCoverage.policyNumber.cancelButton}",
                  "offset": 12
                }
              ],
              "location": "LoginSteps.clickOnButton(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14454722500,
              "status": "passed"
            },
            "line": 63,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify Pru Shoppe My Coverage functionality on one pulse App",
    "description": "",
    "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/home/prushopee/PruShoppeCoverage.feature",
    "tags": [
      {
        "line": 1,
        "name": "@PruShoppe_my_coverage"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 123400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 13100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 70000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13830812500,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 293300,
              "status": "passed"
            },
            "line": 7,
            "name": "Logout of pulse app if user is logged in",
            "match": {
              "location": "LoginSteps.logOutIfLoggedIn()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 274900,
              "status": "passed"
            },
            "line": 8,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12980617000,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11529956700,
              "status": "passed"
            },
            "line": 10,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1999821800,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5136873000,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 134000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 21800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 62200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3868228900,
              "status": "passed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18310148400,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 527151200,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10000292500,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7759705900,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7703121800,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 126000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 26,
        "name": "Verify User should be able to share the link with Whatsapp",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-whatsapp",
        "after": [
          {
            "result": {
              "duration": 49800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 9300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10049318400,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify the share with friends links",
            "match": {
              "location": "LoginSteps.iVerifyTheShareWithFriendsLinks()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 57900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 11000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 29,
        "name": "Verify User should be able to share the link with Contacts app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-contacts-app",
        "after": [
          {
            "result": {
              "duration": 62200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10032817900,
              "status": "passed"
            },
            "line": 30,
            "name": "I verify the contacts share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheContactsShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 131400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 19300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 32,
        "name": "Verify User should be able to share the link with Messenger app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-messenger-app",
        "after": [
          {
            "result": {
              "duration": 60400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7358323200,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify the fb messenger share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheFbMessengerShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 138600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 35,
        "name": "Verify User should be able to share the link with Viber app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-viber-app",
        "after": [
          {
            "result": {
              "duration": 60400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 24071529200,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify the Viber share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheViberShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 101300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 16700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 38,
        "name": "Verify User should be able to share the link with Line app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-line-app",
        "after": [
          {
            "result": {
              "duration": 59400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 22924655100,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify the Line share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheLineShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify share with friends functionality in onepulse app",
    "description": "",
    "id": "verify-share-with-friends-functionality-in-onepulse-app",
    "keyword": "Feature",
    "uri": "features/share/ShareWithFriends.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@SharewithfriendsE2E"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  }
]