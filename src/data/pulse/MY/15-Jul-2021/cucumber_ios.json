[
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 151277166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 354891250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1795458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2217208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 75345317458,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 87845833,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34038422166,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22258056542,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2008812125,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 608041,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1753691041,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2979596000,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 366250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 716334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 916292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 867667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3766550792,
              "status": "passed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 63780962000,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1701342667,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5006567042,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13530512792,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17752239708,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 75834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 29667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 25,
        "name": "Verify the Invalid Email id in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-invalid-email-id-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 335667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1356500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6567942875,
              "status": "passed"
            },
            "line": 26,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2004811333,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 49302591875,
              "status": "passed"
            },
            "line": 28,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21527015917,
              "status": "passed"
            },
            "line": 29,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004878125,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1971715250,
              "status": "passed"
            },
            "comments": [
              {
                "line": 31,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 32,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2001316167,
              "status": "passed"
            },
            "line": 33,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3309014833,
              "status": "passed"
            },
            "line": 34,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 60305084709,
              "status": "passed"
            },
            "line": 35,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "t@gmai"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1562736291,
              "status": "passed"
            },
            "comments": [
              {
                "line": 38,
                "value": "#    And I scroll down"
              }
            ],
            "line": 39,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1392932750,
              "status": "passed"
            },
            "comments": [
              {
                "line": 40,
                "value": "## need to check validation message"
              }
            ],
            "line": 41,
            "name": "verify invalid email message \"Email is required\"",
            "match": {
              "arguments": [
                {
                  "val": "Email is required",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1517672208,
              "status": "passed"
            },
            "comments": [
              {
                "line": 42,
                "value": "#    Then verify invalid email message \"E-mail is invalid\""
              }
            ],
            "line": 43,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 29827789750,
              "status": "passed"
            },
            "line": 44,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "t@gmai"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1414437166,
              "status": "passed"
            },
            "line": 46,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 465491917,
              "status": "passed"
            },
            "line": 47,
            "name": "verify invalid email message \"${email.invalid.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${email.invalid.text}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1392250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 219416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 49,
        "name": "Verify the User not registerd email in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-user-not-registerd-email-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 212333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 102834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 54617834,
              "status": "passed"
            },
            "line": 50,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 330709,
              "status": "passed"
            },
            "line": 51,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "USER_NAME",
                  "taf-${RANDOM_NUMBER}@mailinator.com"
                ],
                "line": 52
              },
              {
                "cells": [
                  "USER_PASSWORD",
                  "Pas$1234"
                ],
                "line": 53
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6820082875,
              "status": "passed"
            },
            "line": 54,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29849062250,
              "status": "passed"
            },
            "line": 55,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21771292167,
              "status": "passed"
            },
            "line": 56,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005560084,
              "status": "passed"
            },
            "line": 57,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1885906208,
              "status": "passed"
            },
            "comments": [
              {
                "line": 58,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 59,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005740125,
              "status": "passed"
            },
            "line": 60,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3425256042,
              "status": "passed"
            },
            "line": 61,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 65142989042,
              "status": "passed"
            },
            "line": 62,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${USER_NAME}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "Password",
                  "${USER_PASSWORD}"
                ],
                "line": 64
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6876219750,
              "status": "passed"
            },
            "line": 65,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1431359208,
              "status": "passed"
            },
            "line": 66,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2012666833,
              "status": "passed"
            },
            "line": 67,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1464760084,
              "status": "passed"
            },
            "line": 68,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 33701292666,
              "status": "passed"
            },
            "line": 69,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${USER_NAME}"
                ],
                "line": 70
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1261923542,
              "status": "passed"
            },
            "line": 71,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1865504417,
              "status": "passed"
            },
            "line": 72,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 118750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1098541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 75,
        "name": "User should be able to retrieve the reset password using forget password link",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;user-should-be-able-to-retrieve-the-reset-password-using-forget-password-link",
        "after": [
          {
            "result": {
              "duration": 493875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 473541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6875500,
              "status": "passed"
            },
            "line": 76,
            "name": "I assign \"${forgot.password.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${forgot.password.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 70908563541,
              "status": "passed"
            },
            "line": 77,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 78
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1257786916,
              "status": "passed"
            },
            "line": 79,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27504431458,
              "status": "passed"
            },
            "line": 80,
            "name": "I read the otp for emailid \"${PULSE_EMAIL}\" using mailsac api and store into a variable \"EMAIL_OTP\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 28
                },
                {
                  "val": "EMAIL_OTP",
                  "offset": 89
                }
              ],
              "location": "RegistrationSteps.readOTP(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5007714709,
              "status": "passed"
            },
            "line": 81,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2338409250,
              "status": "passed"
            },
            "line": 82,
            "name": "I enter \"${EMAIL_OTP}\" reset code",
            "match": {
              "arguments": [
                {
                  "val": "${EMAIL_OTP}",
                  "offset": 9
                }
              ],
              "location": "LoginSteps.enterResetOTP(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5005739834,
              "status": "passed"
            },
            "line": 83,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13754721250,
              "status": "passed"
            },
            "comments": [
              {
                "line": 84,
                "value": "## password reset success message is not displaying in ios build"
              }
            ],
            "line": 85,
            "name": "Verify message: \"${password.reset.success.text}\" for Reset Password",
            "match": {
              "arguments": [
                {
                  "val": "${password.reset.success.text}",
                  "offset": 17
                }
              ],
              "location": "LoginSteps.verifyResetPasswordMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 319417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 478167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "Verify Account should be locked after entering more than 7 times incorrect passwords",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-account-should-be-locked-after-entering-more-than-7-times-incorrect-passwords",
        "after": [
          {
            "result": {
              "duration": 657792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 444458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9228209,
              "status": "passed"
            },
            "line": 88,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 554125,
              "status": "passed"
            },
            "line": 89,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6838543125,
              "status": "passed"
            },
            "line": 90,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006116625,
              "status": "passed"
            },
            "line": 91,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 28799518583,
              "status": "passed"
            },
            "line": 92,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20894727083,
              "status": "passed"
            },
            "line": 93,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5006125083,
              "status": "passed"
            },
            "line": 94,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7034439334,
              "status": "passed"
            },
            "line": 95,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004989042,
              "status": "passed"
            },
            "line": 96,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19876484167,
              "status": "passed"
            },
            "line": 97,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 98
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 99
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 100
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 101
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1942910875,
              "status": "passed"
            },
            "line": 102,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2673325459,
              "status": "passed"
            },
            "line": 103,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 34336191625,
              "status": "passed"
            },
            "line": 104,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 106930488417,
              "status": "passed"
            },
            "comments": [
              {
                "line": 105,
                "value": "#    Then I wait for 10 sec"
              },
              {
                "line": 106,
                "value": "#    Then I click skip button"
              },
              {
                "line": 107,
                "value": "#    Then I wait for 5 sec"
              }
            ],
            "line": 108,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15474267375,
              "status": "passed"
            },
            "line": 109,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4006632208,
              "status": "passed"
            },
            "line": 110,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2001022750,
              "status": "passed"
            },
            "line": 111,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12925792291,
              "status": "passed"
            },
            "line": 112,
            "name": "I click the sign out from pulse app",
            "match": {
              "location": "LoginSteps.Signout_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2004994000,
              "status": "passed"
            },
            "line": 113,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 51350314125,
              "status": "passed"
            },
            "line": 114,
            "name": "I enter invalid password on login screen and verify the error message",
            "match": {
              "location": "LoginSteps.verifyInvalidPasswordErrorMsg(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 115
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 119
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 121
              },
              {
                "cells": [
                  "Pas$123##${account.locked.message}"
                ],
                "line": 122
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1390333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 162250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 144,
        "name": "Verify the Login Functionality using \"Continue with Facebook\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-login-functionality-using-\"continue-with-facebook\"",
        "after": [
          {
            "result": {
              "duration": 447083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1892083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7585020500,
              "status": "passed"
            },
            "line": 145,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2006459500,
              "status": "passed"
            },
            "line": 146,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 29131544458,
              "status": "passed"
            },
            "line": 147,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2017498166,
              "status": "passed"
            },
            "line": 148,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18902742959,
              "status": "passed"
            },
            "line": 149,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2002780791,
              "status": "passed"
            },
            "line": 150,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5591670834,
              "status": "passed"
            },
            "line": 151,
            "name": "I navigate to pulse registration page and select the lang on toggle bar",
            "match": {
              "location": "RegistrationSteps.navigateToRegPageAndSelectTheLangUsingToggle()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1394560208,
              "status": "passed"
            },
            "line": 152,
            "name": "I click on connect with facebook button",
            "match": {
              "location": "RegistrationSteps.selectConnectWithFacebookBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005224208,
              "status": "passed"
            },
            "line": 153,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17932339875,
              "status": "passed"
            },
            "line": 154,
            "name": "I click the \"Email\" in Continue with Facebook",
            "match": {
              "arguments": [
                {
                  "val": "Email",
                  "offset": 13
                }
              ],
              "location": "LoginSteps.EnterFacebookLogin(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Emailid",
                  "${emailid.text}"
                ],
                "line": 155
              },
              {
                "cells": [
                  "Password",
                  "${password.texts}"
                ],
                "line": 156
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10007432792,
              "status": "passed"
            },
            "line": 157,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16054627250,
              "status": "passed"
            },
            "line": 158,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13294011875,
              "status": "passed"
            },
            "line": 159,
            "name": "I logout from onepulse app",
            "match": {
              "location": "WealthSteps.iLogoutFromOnepulseApp()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify login functionality on One pulse App",
    "description": "",
    "id": "verify-login-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/PulseLoginTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@onepulseLogins"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 422750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 533334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 6,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 2907750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 4426458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12651000,
              "status": "passed"
            },
            "line": 7,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4302458,
              "status": "passed"
            },
            "line": 8,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7251221667,
              "status": "passed"
            },
            "line": 9,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005564167,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 33371029417,
              "status": "passed"
            },
            "line": 11,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2007208959,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20951508750,
              "status": "passed"
            },
            "line": 13,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004509541,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6858968583,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "#    Then I change the language as required on registration page"
              }
            ],
            "line": 16,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005319333,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19493851000,
              "status": "passed"
            },
            "line": 18,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 19
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 20
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 21
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1871528584,
              "status": "passed"
            },
            "line": 23,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2340262459,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 35211597458,
              "status": "passed"
            },
            "line": 25,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2002495625,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7717173375,
              "status": "passed"
            },
            "line": 27,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "${registration.mobile.number}"
                ],
                "line": 28
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3930906000,
              "status": "passed"
            },
            "comments": [
              {
                "line": 29,
                "value": "#    And I click the continue button"
              }
            ],
            "line": 30,
            "name": "I choose my wellness goals under wellness plan screen",
            "match": {
              "location": "RegistrationSteps.iChooseMyWellnessGoalsUnderWellnessPlanScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2110707625,
              "status": "passed"
            },
            "comments": [
              {
                "line": 31,
                "value": "#    And I click the continue button"
              }
            ],
            "line": 32,
            "name": "I click the date in Date of Birth field",
            "match": {
              "location": "RegistrationSteps.enterDateOfBirth()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1526393500,
              "status": "passed"
            },
            "line": 33,
            "name": "I click the Done icon",
            "match": {
              "location": "RegistrationSteps.doneButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1830959542,
              "status": "passed"
            },
            "line": 34,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2060622375,
              "status": "passed"
            },
            "line": 35,
            "name": "I select the  Male icon",
            "match": {
              "location": "RegistrationSteps.MaleImage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1730385417,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2904794791,
              "status": "passed"
            },
            "comments": [
              {
                "line": 37,
                "value": "# And I enter my height and weight details"
              }
            ],
            "line": 38,
            "name": "I click on Calculate BMI button",
            "match": {
              "location": "RegistrationSteps.iClickOnCalculateBMIButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2022774834,
              "status": "passed"
            },
            "line": 39,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2142294625,
              "status": "passed"
            },
            "line": 40,
            "name": "I select the \"How active are you?\" in doing exercise",
            "match": {
              "arguments": [
                {
                  "val": "How active are you?",
                  "offset": 14
                }
              ],
              "location": "RegistrationSteps.iSelectTheInDoingExercise(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2298098292,
              "status": "passed"
            },
            "line": 41,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2228532667,
              "status": "passed"
            },
            "line": 42,
            "name": "I select my favorite food dietary",
            "match": {
              "location": "RegistrationSteps.iSelectMyFavoriteFoodDietary()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2080804250,
              "status": "passed"
            },
            "line": 43,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4619508042,
              "status": "passed"
            },
            "line": 44,
            "name": "I answer as \"${option.yes.text}\" to \"Any Food allergies?\"",
            "match": {
              "arguments": [
                {
                  "val": "${option.yes.text}",
                  "offset": 13
                },
                {
                  "val": "Any Food allergies?",
                  "offset": 37
                }
              ],
              "location": "RegistrationSteps.iAnswerAsTo(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3001213083,
              "status": "passed"
            },
            "line": 45,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2178286500,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify that \"Tracking your activity is trending\" is displayed",
            "match": {
              "arguments": [
                {
                  "val": "Tracking your activity is trending",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.iVerifyThatIsDisplayed(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1084944833,
              "status": "passed"
            },
            "line": 47,
            "name": "I click on connect Later button",
            "match": {
              "location": "RegistrationSteps.clickOnConnectLaterBtn()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8238360416,
              "status": "passed"
            },
            "comments": [
              {
                "line": 48,
                "value": "#Specific for PH reg flow"
              }
            ],
            "line": 49,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "${registration.mobile.number}"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2210120666,
              "status": "passed"
            },
            "comments": [
              {
                "line": 51,
                "value": "#    And I click the continue button"
              }
            ],
            "line": 52,
            "name": "I see that \"Welcome to Pulse\" text is displayed",
            "match": {
              "arguments": [
                {
                  "val": "Welcome to Pulse",
                  "offset": 12
                }
              ],
              "location": "RegistrationSteps.iSeeThatTextIsDisplayed(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6475130750,
              "status": "passed"
            },
            "comments": [
              {
                "line": 53,
                "value": "#    And I click the continue button"
              }
            ],
            "line": 54,
            "name": "I see that fitness subscription exclusive offers screen is displayed",
            "match": {
              "location": "RegistrationSteps.iSeeThatFitnessSubscriptionExclusiveOffersScreenIsDisplayed()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5437292583,
              "status": "passed"
            },
            "line": 55,
            "name": "I click on close icon",
            "match": {
              "location": "RegistrationSteps.iClickOnCloseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8101380292,
              "status": "passed"
            },
            "comments": [
              {
                "line": 56,
                "value": "#Specific for SG reg flow"
              }
            ],
            "line": 57,
            "name": "I enter NRIC number last 4 digits \"122F\"",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 25
                },
                {
                  "val": "122F",
                  "offset": 35
                }
              ],
              "location": "RegistrationSteps.iEnterNRICNumberLastDigits(int,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5249608958,
              "status": "passed"
            },
            "comments": [
              {
                "line": 58,
                "value": "#And I click the continue button"
              }
            ],
            "line": 59,
            "name": "I click skip buttons",
            "match": {
              "location": "LoginSteps.iClickSkipsButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21751707583,
              "status": "passed"
            },
            "line": 60,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4006174625,
              "status": "passed"
            },
            "line": 61,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1885041000,
              "status": "passed"
            },
            "line": 62,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12340874833,
              "status": "passed"
            },
            "line": 63,
            "name": "I click the sign out from pulse app",
            "match": {
              "location": "LoginSteps.Signout_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4009784709,
              "status": "passed"
            },
            "line": 64,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5237159833,
              "status": "passed"
            },
            "line": 65,
            "name": "user enters password credentials in sigin screen",
            "match": {
              "location": "LoginSteps.EnterPasswordRegister(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 66
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1674389042,
              "status": "passed"
            },
            "line": 67,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8000694917,
              "status": "passed"
            },
            "line": 68,
            "name": "I wait for 8 sec",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15781072458,
              "status": "passed"
            },
            "line": 69,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@OPUATRegressionPH"
          },
          {
            "line": 5,
            "name": "@regtst"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 662417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 93000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 72,
        "name": "verify the field label on registration screen",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-field-label-on-registration-screen",
        "after": [
          {
            "result": {
              "duration": 1851958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1167000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7715090917,
              "status": "passed"
            },
            "line": 73,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2000774000,
              "status": "passed"
            },
            "line": 74,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 45764382375,
              "status": "passed"
            },
            "line": 75,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2007485958,
              "status": "passed"
            },
            "line": 76,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21350345292,
              "status": "passed"
            },
            "line": 77,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005462792,
              "status": "passed"
            },
            "line": 78,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7015796792,
              "status": "passed"
            },
            "line": 79,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2003106458,
              "status": "passed"
            },
            "line": 80,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5058788250,
              "status": "passed"
            },
            "comments": [
              {
                "line": 81,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 82,
            "name": "I verify following field label should be displayed on registration screen",
            "match": {
              "location": "RegistrationSteps.verifyRegistrationScreenFieldLabel(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${firstname.label.text}"
                ],
                "line": 83
              },
              {
                "cells": [
                  "${lastname.label.text}"
                ],
                "line": 84
              },
              {
                "cells": [
                  "${email.text}"
                ],
                "line": 85
              },
              {
                "cells": [
                  "${password.text}"
                ],
                "line": 86
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 71,
            "name": "@OPUATRegressionPH"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 87,
            "value": "## below validation is not working in Android device"
          },
          {
            "line": 88,
            "value": "#      | ${country.text}         |"
          },
          {
            "line": 89,
            "value": "#      | ${language.text}        |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 151709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1252209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 92,
        "name": "verify the validation message for mandatory fields",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-validation-message-for-mandatory-fields",
        "after": [
          {
            "result": {
              "duration": 1252292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 766250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1741368834,
              "status": "passed"
            },
            "line": 93,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4433365916,
              "status": "passed"
            },
            "line": 94,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${firstname.mandatoryField.message}"
                ],
                "line": 95
              },
              {
                "cells": [
                  "LastName",
                  "${lastname.mandatoryField.message}"
                ],
                "line": 96
              },
              {
                "cells": [
                  "Email",
                  "${email.mandatoryField.message}"
                ],
                "line": 97
              },
              {
                "cells": [
                  "Password",
                  "${password.validation.message}"
                ],
                "line": 98
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 91,
            "name": "@OPUATRegressionPH"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 686875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 200416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 109,
        "name": "verify validation message when user enters Invalid password: Pulse@1 on registration page",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-validation-message-when-user-enters-invalid-password:-\u003cinvalid-password\u003e-on-registration-page;;2",
        "after": [
          {
            "result": {
              "duration": 1068917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 492791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4939745750,
              "status": "passed"
            },
            "line": 102,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "Password",
                  "Pulse@1"
                ],
                "line": 103
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1852337917,
              "status": "passed"
            },
            "line": 104,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 967669625,
              "status": "passed"
            },
            "line": 105,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Password",
                  "${password.validation.message}"
                ],
                "line": 106
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@Registrations"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 100,
            "name": "@OPUATRegressionPH"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionSG"
          },
          {
            "line": 1,
            "name": "@sanityTest"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 224000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 192834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 110,
        "name": "verify validation message when user enters Invalid password: Pulse123 on registration page",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-validation-message-when-user-enters-invalid-password:-\u003cinvalid-password\u003e-on-registration-page;;3",
        "after": [
          {
            "result": {
              "duration": 44084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 52583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5308575250,
              "status": "passed"
            },
            "line": 102,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "Password",
                  "Pulse123"
                ],
                "line": 103
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2110330208,
              "status": "passed"
            },
            "line": 104,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1498594167,
              "status": "passed"
            },
            "line": 105,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Password",
                  "${password.validation.message}"
                ],
                "line": 106
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@Registrations"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 100,
            "name": "@OPUATRegressionPH"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionSG"
          },
          {
            "line": 1,
            "name": "@sanityTest"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 264209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 382209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 113,
        "name": "Verify the validation message when user enter already registered email id on registration page",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-validation-message-when-user-enter-already-registered-email-id-on-registration-page",
        "after": [
          {
            "result": {
              "duration": 1203084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1974750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8562349708,
              "status": "passed"
            },
            "line": 114,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2005593416,
              "status": "passed"
            },
            "line": 115,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 34248010334,
              "status": "passed"
            },
            "line": 116,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006503708,
              "status": "passed"
            },
            "line": 117,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24271320292,
              "status": "passed"
            },
            "line": 118,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005543500,
              "status": "passed"
            },
            "line": 119,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7335836458,
              "status": "passed"
            },
            "comments": [
              {
                "line": 120,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 121,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004505541,
              "status": "passed"
            },
            "line": 122,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 29863847583,
              "status": "passed"
            },
            "line": 123,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 124
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 125
              },
              {
                "cells": [
                  "Email",
                  "${login.email.id}"
                ],
                "line": 126
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 127
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2411954334,
              "status": "passed"
            },
            "line": 128,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2598283875,
              "status": "passed"
            },
            "line": 129,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${user.exist.text}"
                ],
                "line": 130
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 112,
            "name": "@OPUATRegressionPH"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 4414750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13617625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 133,
        "name": "Verify the mobile number screen validation using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-mobile-number-screen-validation-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 1948542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 933833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27162667,
              "status": "passed"
            },
            "line": 134,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 102584,
              "status": "passed"
            },
            "line": 135,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7150853166,
              "status": "passed"
            },
            "line": 136,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2004934625,
              "status": "passed"
            },
            "line": 137,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30446588042,
              "status": "passed"
            },
            "line": 138,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2004378042,
              "status": "passed"
            },
            "line": 139,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20925265584,
              "status": "passed"
            },
            "line": 140,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2007786125,
              "status": "passed"
            },
            "line": 141,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7296931709,
              "status": "passed"
            },
            "comments": [
              {
                "line": 142,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 143,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005585750,
              "status": "passed"
            },
            "line": 144,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27344880958,
              "status": "passed"
            },
            "line": 145,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "NewAutomation"
                ],
                "line": 146
              },
              {
                "cells": [
                  "LastName",
                  "NewAutomation"
                ],
                "line": 147
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 148
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 149
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2154195417,
              "status": "passed"
            },
            "line": 150,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6556184292,
              "status": "passed"
            },
            "line": 151,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36208711375,
              "status": "passed"
            },
            "line": 152,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10006118208,
              "status": "passed"
            },
            "line": 153,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 668814000,
              "status": "passed"
            },
            "line": 154,
            "name": "I verify the country code should be displayed correctly on phone number screen",
            "match": {
              "location": "RegistrationSteps.verifyCountryCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7187537958,
              "status": "passed"
            },
            "line": 155,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "917670"
                ],
                "line": 156
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1806424750,
              "status": "passed"
            },
            "line": 157,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005474458,
              "status": "passed"
            },
            "line": 158,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 826664833,
              "status": "passed"
            },
            "line": 159,
            "name": "verify Again invalid Mobile message \"${invalid.mobile.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.mobile.text}",
                  "offset": 37
                }
              ],
              "location": "LoginSteps.verifyAgainInvalidMobilelMsg(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 132,
            "name": "@OPUATRegressionPH"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 161,
            "value": "#Not adding to PH regression as the reg screen order keeps changing for the LBU"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 152417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 162,
        "name": "Verify the Registration screen validation using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-registration-screen-validation-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 2070250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 646500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7162774958,
              "status": "passed"
            },
            "line": 163,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "${registration.mobile.number}"
                ],
                "line": 164
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1006243500,
              "status": "passed"
            },
            "line": 165,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2130055584,
              "status": "passed"
            },
            "line": 166,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4028250042,
              "status": "passed"
            },
            "line": 167,
            "name": "verify validation message \"${wellness.goal.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${wellness.goal.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4231042208,
              "status": "passed"
            },
            "line": 168,
            "name": "I choose my wellness goals under wellness plan screen",
            "match": {
              "location": "RegistrationSteps.iChooseMyWellnessGoalsUnderWellnessPlanScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1002616292,
              "status": "passed"
            },
            "line": 169,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2869673125,
              "status": "passed"
            },
            "line": 170,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3847780417,
              "status": "passed"
            },
            "line": 171,
            "name": "verify validation message \"${dob.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${dob.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1408072500,
              "status": "passed"
            },
            "line": 172,
            "name": "I click the date in Date of Birth field",
            "match": {
              "location": "RegistrationSteps.enterDateOfBirth()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1588397666,
              "status": "passed"
            },
            "line": 173,
            "name": "I click the Done icon",
            "match": {
              "location": "RegistrationSteps.doneButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2070178333,
              "status": "passed"
            },
            "line": 174,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1001928541,
              "status": "passed"
            },
            "line": 175,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1895394042,
              "status": "passed"
            },
            "line": 176,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3891347084,
              "status": "passed"
            },
            "line": 177,
            "name": "verify validation message \"${gender.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${gender.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1018927750,
              "status": "passed"
            },
            "line": 178,
            "name": "I select the  Male icon",
            "match": {
              "location": "RegistrationSteps.MaleImage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2072702458,
              "status": "passed"
            },
            "line": 179,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1001947542,
              "status": "passed"
            },
            "line": 180,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2354397000,
              "status": "passed"
            },
            "line": 181,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4164197125,
              "status": "passed"
            },
            "line": 182,
            "name": "verify BMI validation message \"${bmi.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${bmi.alert.text}",
                  "offset": 31
                }
              ],
              "location": "RegistrationSteps.verifyBMIMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3631257583,
              "status": "passed"
            },
            "line": 183,
            "name": "I click on Calculate BMI button",
            "match": {
              "location": "RegistrationSteps.iClickOnCalculateBMIButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2361164375,
              "status": "passed"
            },
            "line": 184,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1005690625,
              "status": "passed"
            },
            "line": 185,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2262571167,
              "status": "passed"
            },
            "line": 186,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4133540750,
              "status": "passed"
            },
            "line": 187,
            "name": "verify validation message \"${activity.level.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${activity.level.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1427355458,
              "status": "passed"
            },
            "line": 188,
            "name": "I select the \"How active are you?\" in doing exercise",
            "match": {
              "arguments": [
                {
                  "val": "How active are you?",
                  "offset": 14
                }
              ],
              "location": "RegistrationSteps.iSelectTheInDoingExercise(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1997457875,
              "status": "passed"
            },
            "line": 189,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1005346583,
              "status": "passed"
            },
            "line": 190,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2257746834,
              "status": "passed"
            },
            "line": 191,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4845332792,
              "status": "passed"
            },
            "line": 192,
            "name": "verify validation message \"${diet.preference.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${diet.preference.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 14550916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 3307167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 195,
        "name": "Verify the resend OTP functionality on Enter OTP Screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-resend-otp-functionality-on-enter-otp-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 5965875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1748084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13238541,
              "status": "passed"
            },
            "line": 196,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 617208,
              "status": "passed"
            },
            "line": 197,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8459202625,
              "status": "passed"
            },
            "line": 198,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005983792,
              "status": "passed"
            },
            "line": 199,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 54351595292,
              "status": "passed"
            },
            "line": 200,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2026082917,
              "status": "passed"
            },
            "line": 201,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30439963250,
              "status": "passed"
            },
            "line": 202,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005952917,
              "status": "passed"
            },
            "line": 203,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9415181917,
              "status": "passed"
            },
            "comments": [
              {
                "line": 204,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 205,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006610167,
              "status": "passed"
            },
            "line": 206,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 33131357833,
              "status": "passed"
            },
            "line": 207,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 208
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 209
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 210
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 211
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2447755333,
              "status": "passed"
            },
            "line": 212,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5379191833,
              "status": "passed"
            },
            "line": 213,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 90002523834,
              "status": "passed"
            },
            "line": 214,
            "name": "I wait for 90 sec",
            "match": {
              "arguments": [
                {
                  "val": "90",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3924875875,
              "status": "passed"
            },
            "line": 215,
            "name": "I click the Resend button in OTP screen",
            "match": {
              "location": "RegistrationSteps.ClickResendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 35996160708,
              "status": "passed"
            },
            "line": 216,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2007000541,
              "status": "passed"
            },
            "line": 217,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7690980833,
              "status": "passed"
            },
            "line": 218,
            "name": "I verify enter otp screen is not displayed",
            "match": {
              "location": "RegistrationSteps.ValidateEnterOtpScreen()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 194,
            "name": "@otpreset_tst"
          },
          {
            "line": 194,
            "name": "@OPUATRegressionPH"
          }
        ]
      }
    ],
    "name": "Verify registration functionality on one pulse App",
    "description": "",
    "id": "verify-registration-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/PulseRegistrationTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@Registrations"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 190709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 752250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1176333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 6775125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8811429959,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3013625,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${onepulse.login.edit.profile}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.edit.profile}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 55
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48975642000,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23766967167,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5018858333,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1686835000,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 4647625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 55917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 204125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2365125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5138890083,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 66677486625,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1281072875,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5011430000,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11745254625,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16319539666,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5002090542,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1609125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 43000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 25,
        "name": "Verify User should be able to navigate to Edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-be-able-to-navigate-to-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 649459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 128209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16880362667,
              "status": "passed"
            },
            "line": 26,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 14654389125,
              "status": "passed"
            },
            "line": 27,
            "name": "user click on Edit profile link",
            "match": {
              "location": "EditProfileSteps.clickEditProfileLink()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5040953333,
              "status": "passed"
            },
            "line": 28,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 274916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1008792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 30,
        "name": "Verify User should be able to change the profile picture in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-be-able-to-change-the-profile-picture-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 72708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 122584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 21045148459,
              "status": "passed"
            },
            "line": 31,
            "name": "I give manage profile camera permission",
            "match": {
              "location": "EditProfileSteps.iGiveCameraPermission()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3530735917,
              "status": "passed"
            },
            "line": 32,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 92542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1079625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 34,
        "name": "Verify the email,country code and COR fields are non-editable in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-the-email,country-code-and-cor-fields-are-non-editable-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 37250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 71583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1859060542,
              "status": "passed"
            },
            "line": 35,
            "name": "verify email field is non-editable",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableEmailField()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2521709708,
              "status": "passed"
            },
            "line": 36,
            "name": "verify country code field is non-editable and country code is \"${country.code}\"",
            "match": {
              "arguments": [
                {
                  "val": "${country.code}",
                  "offset": 63
                }
              ],
              "location": "EditProfileSteps.verifyNonEditableCountryCodeField(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3406116292,
              "status": "passed"
            },
            "line": 37,
            "name": "verify country of Residence is \"${country.name}\" and non-editable",
            "match": {
              "arguments": [
                {
                  "val": "${country.name}",
                  "offset": 32
                }
              ],
              "location": "EditProfileSteps.verifyCORField(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 200542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "Verify user can able to change the details in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-can-able-to-change-the-details-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 33916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 50667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 36832542,
              "status": "passed"
            },
            "line": 40,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2130917,
              "status": "passed"
            },
            "line": 41,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "First Name",
                  "Automation-${RANDOM_NUMBER}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "Last Name",
                  "Testing-${RANDOM_NUMBER}"
                ],
                "line": 43
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8289808708,
              "status": "passed"
            },
            "line": 44,
            "name": "I update following profile details in edit profile screen",
            "match": {
              "location": "EditProfileSteps.updateUserProfileDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4992783250,
              "status": "passed"
            },
            "comments": [
              {
                "line": 47,
                "value": "#      | PhoneNumber | 81069586                    |"
              },
              {
                "line": 48,
                "value": "#      | Address     | Singapore                   |"
              },
              {
                "line": 49,
                "value": "#      | PostalCode  | 576612                      |"
              },
              {
                "line": 50,
                "value": "#      | DOB         | 13-January-2003             |"
              }
            ],
            "line": 51,
            "name": "I click on update button in edit profile screen",
            "match": {
              "location": "EditProfileSteps.clickOnUpdateBtn()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 53,
            "value": "##defect - PCAONEPULSE-22930"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 118333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 53709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 54,
        "name": "Verify Details updated during pulse profile registration should be reflected in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-details-updated-during-pulse-profile-registration-should-be-reflected-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 350833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 7729275458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10383069292,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 7fcad16c-e173-4219-9bd5-29442cdff886\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeStaticText[contains(@name,\"+60\")]//parent::XCUIElementTypeOther//following-sibling::XCUIElementTypeOther/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.PulseManageProfileScreen.clickeditProfileLink(PulseManageProfileScreen.java:180)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.EditProfileSteps.clickEditProfileLink(EditProfileSteps.java:37)\n\tat ✽.Given user click on Edit profile link(features/editProfile/PulseEditProfileTest.feature:55)\n",
              "status": "failed"
            },
            "line": 55,
            "name": "user click on Edit profile link",
            "match": {
              "location": "EditProfileSteps.clickEditProfileLink()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 56,
            "name": "I verify following values in edit profile screen",
            "match": {
              "location": "EditProfileSteps.verifyFieldValue(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 57
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 58
              },
              {
                "cells": [
                  "Email",
                  "${onepulse.login.edit.profile}"
                ],
                "line": 59
              },
              {
                "cells": [
                  "Gender",
                  "${pulse.edit.gender}"
                ],
                "line": 60
              },
              {
                "cells": [
                  "PhoneNumber",
                  "${pulse.edit.number}"
                ],
                "line": 61
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 744875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10910125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 63,
        "name": "verify the user details should be correctly on babylon screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-the-user-details-should-be-correctly-on-babylon-screen",
        "after": [
          {
            "result": {
              "duration": 786083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1532472416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7110451417,
              "status": "passed"
            },
            "line": 64,
            "name": "I navigate to Home page from edit profile screen",
            "match": {
              "location": "EditProfileSteps.navigateToHomeScreenFromEditProfile()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 114889116667,
              "status": "passed"
            },
            "line": 65,
            "name": "I navigate to Babylon health Assessment and Accept TermsAndCondition",
            "match": {
              "location": "BabylonSteps.navigateToBabylonHealthAssessmentAndAcceptTermsAndCondition()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2031895042,
              "status": "passed"
            },
            "line": 66,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2534818708,
              "error_message": "java.lang.AssertionError: actual value is Automation-58030068638 expected [Automation-14915076745] but found [Automation-58030068638]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat org.testng.Assert.failNotEquals(Assert.java:513)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:135)\n\tat org.testng.Assert.assertEquals(Assert.java:116)\n\tat org.testng.Assert.assertEquals(Assert.java:190)\n\tat com.onepulse.app.screens.PulseManageProfileScreen.verifyDefaultValuesOnBabylonRegPage(PulseManageProfileScreen.java:534)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.EditProfileSteps.verifyDefaultValuesOnBabylonRegPage(EditProfileSteps.java:156)\n\tat ✽.Then I verify the default values in babylon registration page is updated as below(features/editProfile/PulseEditProfileTest.feature:67)\n",
              "status": "failed"
            },
            "line": 67,
            "name": "I verify the default values in babylon registration page is updated as below",
            "match": {
              "location": "EditProfileSteps.verifyDefaultValuesOnBabylonRegPage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Gender",
                  "${pulse.edit.gender}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "Email",
                  "${onepulse.login.edit.profile}"
                ],
                "line": 71
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 72,
            "name": "verify email field is non-editable",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableEmailField()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 73,
            "name": "verify country of Residence is \"${country.name}\" and non-editable",
            "match": {
              "arguments": [
                {
                  "val": "${country.name}",
                  "offset": 32
                }
              ],
              "location": "EditProfileSteps.verifyCORField(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 528916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1359708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 75,
        "name": "navigate back to health screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;navigate-back-to-health-screen",
        "after": [
          {
            "result": {
              "duration": 275334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1709584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4605729375,
              "status": "passed"
            },
            "line": 76,
            "name": "I navigate to health page from babylon registration screen",
            "match": {
              "location": "BabylonSteps.navigateBackToHealthScreenFromBabylonReg()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5012055833,
              "status": "passed"
            },
            "line": 77,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Edit Profile functionality on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/editProfile/PulseEditProfileTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@PulseEditProfile"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 192959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 307917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "User should be able to Register for Babylon HRA",
        "description": "",
        "id": "verify-the-babylon-registration-via-hra-journey;user-should-be-able-to-register-for-babylon-hra",
        "after": [
          {
            "result": {
              "duration": 1705834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2307667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7063167,
              "status": "passed"
            },
            "line": 5,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 233459,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8191309292,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005417125,
              "status": "passed"
            },
            "line": 8,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 56019559250,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2008185042,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22178868042,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005548500,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7051542458,
              "status": "passed"
            },
            "line": 13,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005365166,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30224224209,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 16
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2503484209,
              "status": "passed"
            },
            "line": 20,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5495591458,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34986332666,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006269750,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 127852503791,
              "status": "passed"
            },
            "line": 24,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18383723458,
              "status": "passed"
            },
            "line": 25,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4008106625,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 896417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 28,
        "name": "User should be able to Register for Babylon HRA",
        "description": "",
        "id": "verify-the-babylon-registration-via-hra-journey;user-should-be-able-to-register-for-babylon-hra",
        "after": [
          {
            "result": {
              "duration": 196167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1069375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 23313702834,
              "status": "passed"
            },
            "line": 29,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 45210379084,
              "status": "passed"
            },
            "line": 30,
            "name": "I navigate to Babylon health Assessment and Accept TermsAndCondition",
            "match": {
              "location": "BabylonSteps.navigateToBabylonHealthAssessmentAndAcceptTermsAndCondition()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14252634750,
              "status": "passed"
            },
            "line": 31,
            "name": "I confirm the registration",
            "match": {
              "location": "BabylonSteps.clickOnCofirmButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15176716167,
              "status": "passed"
            },
            "line": 32,
            "name": "I click on Babylon Health Assessment Get Started button",
            "match": {
              "location": "BabylonSteps.healthAssessmentGetStarted()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8622725541,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify following options are present for assessment",
            "match": {
              "location": "BabylonSteps.verifyAssessmentOptions(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Full Assessment"
                ],
                "line": 34
              },
              {
                "cells": [
                  "Nutrition"
                ],
                "line": 35
              },
              {
                "cells": [
                  "Activity"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Mood"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the Babylon Registration via HRA journey",
    "description": "",
    "id": "verify-the-babylon-registration-via-hra-journey",
    "keyword": "Feature",
    "uri": "features/health/BabylonHRA_Registration.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylon_hra_registration"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "comments": [
          {
            "line": 5,
            "value": "# This feature will fail due to the defect PCAONEPULSE-21990"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 205541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 244000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 6,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 211416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 84459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9969797250,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9529333,
              "status": "passed"
            },
            "line": 8,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 62639309750,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22540184875,
              "status": "passed"
            },
            "line": 10,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2009225000,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2034595625,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 98792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 14,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 74958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 65416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5106388000,
              "status": "passed"
            },
            "line": 15,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 49993914292,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1283158583,
              "status": "passed"
            },
            "line": 19,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5006749625,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12009113500,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21513383583,
              "status": "passed"
            },
            "line": 22,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 89500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 6033542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 24,
        "name": "User should be able to locate Hospitals using PruShoppe location",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-should-be-able-to-locate-hospitals-using-prushoppe-location",
        "after": [
          {
            "result": {
              "duration": 33833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1098150334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 36055391541,
              "status": "passed"
            },
            "line": 25,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 19466396292,
              "status": "passed"
            },
            "comments": [
              {
                "line": 26,
                "value": "#  This step may fail due to Location locator - the xpath has updated according to MyEnv in PCAONEPULSE-19412, which is passed during execution"
              }
            ],
            "line": 27,
            "name": "I clicks on Location button",
            "match": {
              "location": "LocationSteps.iClicksOnLocationButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14151398250,
              "status": "passed"
            },
            "line": 28,
            "name": "I clicks on Search here text field",
            "match": {
              "location": "LocationSteps.iClicksOnSearchHereTextField()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5283038625,
              "status": "passed"
            },
            "line": 29,
            "name": "I clicks on \"Hospitals\" under Pulse Search",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnUnderPulseSearch(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7476223334,
              "status": "passed"
            },
            "line": 30,
            "name": "User can see the list of \"Hospitals\" near by to user\u0027s current location",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 26
                }
              ],
              "location": "LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2093369750,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed \n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifySearchResults(LocationScreen.java:102)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(LocationSteps.java:51)\n\tat ✽.And User can see that Call, Navigate and See Details links are displayed under \"Hospitals\" search results(features/health/Hospital_Clinic_Locator.feature:31)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALkAAAGQCAIAAAB9G1ZBAAAO90lEQVR4Xu3biXOUdZ7Hcf6PMc6su4q7sxhgVZRZHGdFGTm9hpFl3ZqyGCk0iySgyHAZ5dgpEV0hAorIVUhCLgbCJQREY4BJYLnkyn32lU53ku6ku5PO/ro7SPKkAx9GjrC8X/Utqnn6yRO6n3d+T7emB7jueYhhrj0JgwZYNzFMvGm4h1YYbWiFUYdWGHVohVGn4Sa+tk2I3UiM/jkoOr32YW7wDHJGn/bYn70m8fLp6JqG6HlxJkin5qe2UvngsJrRE2vvH2bZXvpPwysHPhLZYeCjlxJ/dSnxX6vvj/yVuXnjNM/2Pw6rfW5yzbjfVz/waPe77AkP2R4d6XxigiMy4+1DnjC72R992vnkWMeI0c6Bj/c+Wu/5Sa1UP/K07+xF3+bMtnPnnQ8Oq540xXX/Y6bo8hFj2upsgQ3pZh/HpvRA/rdtO/Y0Jb3T+wjMjZqKxCfqvsoM+fzhWnvYZm9vanKv3mC7XEzDrydsfX30wtSnF7w3ctPUp8pmzqlcvXL+u08vSB21d8II729fdv7dkN7HtIzSSmzh6j0PuUaMaXzxD7Z7E11Fxe5/e6lp9Xr38Gft5q97Dtje/SCwMdKKe9f+yhderZ/0R/u9g7sOmNBtrN/rFk/vB9Xt0d1R41jw57ac3VXP/0f19Lfr3nir/vk/tB0saHotuevS/+SEMdkThp6cPLJg0nezpob8LUf+c/Kqt8YO++vEmZ9PcD78TINZXa71qK/ZSux1RvxpuCfRkfBQxTupgew9jgSTQqK58pW/kdLy4Zq6V6YFNnzlTEj0fH+safkqb3pu8xdbui6i3Vu52WN9ONfx6Hrt3K/HPNXVYyYFvd62w4X+Y8Uhp9P9+LOuey6vFr+eMDpnwpCTkzfNHO+vrO4MtYc7Ok5/sOix71+a+dl400rzK9Pc/zyi92G7T6QV588Gmel9X3RMa4P7mERzgSx/a35gxz7nfY/Yfj64Zu16x69Gu4+fsO874Pz+SGtFReMzv6t65TXHL4ZWDPlN+5nzrthrqJ7nsuEmT69H1H16P6grj67fTOSf6hg43PUPw5z3Pex8cLjj3iHOX45w3TvU3Hb+ffRVYPTJtP98sHPUxLr/Xu6at9j51HOuhG4H+c0L4zPHDT41+bntL61NGmnP223bunX8ttGDT018e9VY16O/9Tw8yp4QOaGRSYg/kVYcPxvUNdFdez6bPX/UEq6MWUIqx/17uK21cdfX7r/kuUa90DjpNfcDwxp+OaIx8Un7GzODW7Nd9/2Le816775D7u8KW1I/6v3tb8H0ft6vTI9FqMej6zfrStcz3/jkuKZhzzYMHdkyaqJr4GPe0b93PTC86akXPENHOiM/tF1j+8VQ7/bdrWu3mtsN3abx8WdOTH5x54zf7Ux+qWDiWN/eg6fHPLtjxvM7Zrx4fuxo99jJprwrP72RLOKMuXdAdUZmdUZWTWSyazOy66yT09fU5uRVHPi2Mv9wRf7h2pyddRm5XZOeW5Ozo2bXnrqMLHNAR9EJV8GxyJdsi06v49zMya5Pz67P6Gty+p7eO9/OqcvKrduWW28m0zzDOfVZ2yN/Zm6vz8i17Flj7tqWW5uR1ePL07Ntefsa8g+78r+t33/Qse9AQ/43DQcPmz9dBw7WZe+ojzxXl09fX5O+fUAnoKEVqGgFKlqBilagohWoaAUqtZVmn8+6CXcZqZXC4uJV674MWzfj7nLtVgqLipev/szX2mq947JwOFxXVxe73WQ0N/W8Pz6Xy3X06FHr1qiCggLrJvQD12jlaPHxj1atbvb3GYrR3t6ekpISu52Xl7dnz56e90f0XpM8Xs/p06ePHD22e3fX/qa52I3k5GTLFvQHV2ulsOj4nEVLi06dOX+pxMy5S6WxKamo7H4OTSvJKbNit3dGWtlbVFw0d968P82de/bs2YqKyvnzF7ybmnry5KlPPlnx6aer586bn7drV01NzZYtW+bNWzB16rSKiop169YtWrx44cKFoVAoOSXZLE8LF6YuXrJkd7zycFv02YqpYc2GTbPfX7olK/errO2Rye6anXv3W1oZN+651NT3zbz66hTTyvQ33zSn3N/aalaI7X/ZmZa2qqHBbbPZ3n77nYrKSrNYvP56Umlp2YoVKw8ePJSZmWUOUl5eXlVVNXv2O2Vl5ckpKWd/+MHs7HQ6q6trun0r3E59tmIEQ+1pGzbuOXi4vbOzI1rPj9Nd9Br0Vuz2zp2RdWXGjMglyez2RlJSR0dHfv6h+fMXZmRkzpkz1+v1mrvenJF8qaR0xcpIK9sys0xYSUn/tS0zc9q0pJKSspSUmeZri4qKP/xw+bJly7t/L9xGV2vFCLa3r9qwac+BQ9Y7uglFWum6BuXl7TKtfLHuy7S0tOXLl6enp3+9/0Ba2qdr1ny+fsPG2bPnfPTR/6xfvzH1vfdLyyLrypkzZ5OSpldWVU2ZMjUnJ/fllyeXlJQmJ6ecO3d+0aIl27Zlvr9occ/vhtvmGq10RlaX0OqNm7/O/8Z6x2XmFai5vsRuN0e0mFXBpGBeqcQ2lpaWlpSUmEvP3LnzbXaHub6YxSYYDLrdbnOvucq0+HzmInX+/AWnyxUIBGNHq62tPXs2sufl74Pb7NqtdEZXl5KyCuvW63fo0DfmcmPdijuE1ArQSSvQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUF1HK339f2bcJa6jFdzlrqOV7usKS8td6DpawV3uaq2Ew+HmimpfZbW3pNRTUuq1TtkNHE9JWVNpma+yNtDgFRettqjWv0nsa61HxFX12Uq4Leg4eToU9Ic7I79NfwsmptXp9J6/GL6yIY5AMNj6k8+0+Unw+f3t7e3WO9CH+K2EO8IN5y5Gf8v21guHfH7PxZK+cjFnNxAIWLf+rfytre386p0mTivmFDWV14Q7+vyBMzsEor8mFw4E22wO6903QqDRE4j+hmVvyooSu76Y5ScYCvmu9ela5YDojNuK4S2vsm7qxrTinrukKW9v2O5yZuR2ur3+/YfDLb5Oj8eX/03Y2xQsr/YVFps9Q05nh88fstlDfn/bd0dCF0rCgVCg1hb2eINuj/W4PbVcvGTdFF1U/H1/AjKmLRAoKS3tjH4Isrmlpa6+3rpHT7xwEcVvJWBzWjf15Exb69m4te34KdOK888rfYcKHZ9+7j15xnfkuGvlF44PVnjLy8xu7XU294599V9sbs7b5yo86lq5NlRWbtuSHiw+6So4Yj1oT232OCuWWSSu+WFEh8PR1Nwc+bRsU1OL0MoNvKL9/xa/FV91rXVTN+ZcudI+CwfaGv601JGRZXtvmafwaGPBkYbVG92Hv3d+8IktbW04HHkRYM6rZ/Vm21dZjek5gaoqz+ZtrZcu2b7cHDp0pKEg/oeZLwv7SyOXOYtAlHVrT5VVVS6XyyRCKzdW/Faayiq7vTWxMnc0Fp8wLQQrqhrPnWs9d8G1Jd1Tcqml+IQ9d5e38K+NRcd//Grvui3NZZXh1lbX1kzXvkMmn8bcna7tu1uquj4uH1dHMNhUXW3dGtV61WuQuUjFdmhubjYvRMxLFnPDulNPvF4RxW/FPMH+mqstLaJ2v9/+dZ8fLOqT6cm8be7jWmNO/w18o2te/poDWrcinvitGH67o7m6Ov7pupnMG+LG86VB39UWD7Ny3JDPGQUI5Xr02Yph3m42nv3B+79nPNW1npr6mz3eqjr3sVOe2Ltx67/FyrRi3uOYaCJvjK+T+RLzZsq8lLmB69Pd4Gqt/Cj231VvwcS+F/onqRWgk1agoxWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqB6s5rxW63z5o1a4rmj/3S9OnTL1y4YH1g/d6d18rHH3884M43bdo06wPr9+68VhobG5ctW/bunWzJ0qWVlZXWB9bv3Xmt4HahFahoBar/A+81mvAJSErbAAAAAElFTkSuQmCC",
                "mime_type": "image/png"
              }
            ],
            "line": 31,
            "name": "User can see that Call, Navigate and See Details links are displayed under \"Hospitals\" search results",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 76
                }
              ],
              "location": "LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 614375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 3751083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 33,
        "name": "User can see details of listed hospitals in detail",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-see-details-of-listed-hospitals-in-detail",
        "after": [
          {
            "result": {
              "duration": 165375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 734796583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2217149750,
              "status": "passed"
            },
            "line": 34,
            "name": "I clicks on See Details button on First result",
            "match": {
              "location": "LocationSteps.iClicksOnSeeDetailsButtonOnFirstResult()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 23857068125,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifyHospitalInformationScreen(LocationScreen.java:151)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(LocationSteps.java:81)\n\tat ✽.Then I can see the \"Hospital\" Information screen with Navigate and Call Now buttons(features/health/Hospital_Clinic_Locator.feature:35)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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RMxLFnPDulNPvF4RxW/FPMH+mqstLaJ2v9/+dZ8fLOqT6cm8be7jWmNO/w18o2te/poDWrcinvitGH67o7m6Ov7pupnMG+LG86VB39UWD7Ny3JDPGQUI5Xr02Yph3m42nv3B+79nPNW1npr6mz3eqjr3sVOe2Ltx67/FyrRi3uOYaCJvjK+T+RLzZsq8lLmB69Pd4Gqt/Cj231VvwcS+F/onqRWgk1agoxWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqB6s5rxW63z5o1a4rmj/3S9OnTL1y4YH1g/d6d18rHH3884M43bdo06wPr9+68VhobG5ctW/bunWzJ0qWVlZXWB9bv3Xmt4HahFahoBar/A+81mvAJSErbAAAAAElFTkSuQmCC",
                "mime_type": "image/png"
              }
            ],
            "line": 35,
            "name": "I can see the \"Hospital\" Information screen with Navigate and Call Now buttons",
            "match": {
              "arguments": [
                {
                  "val": "Hospital",
                  "offset": 15
                }
              ],
              "location": "LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 220250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1674917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 37,
        "name": "User can see the details in speciality tab",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-see-the-details-in-speciality-tab",
        "after": [
          {
            "result": {
              "duration": 577750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 719449959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7946604333,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: de4694e4-0ada-44dd-b124-fe5192464917\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Speciality, tab, 2 of 4\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.LocationScreen.clickOnHospitalTab(LocationScreen.java:140)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnTab(LocationSteps.java:61)\n\tat ✽.When I clicks on \"Speciality\" tab(features/health/Hospital_Clinic_Locator.feature:38)\n",
              "status": "failed"
            },
            "line": 38,
            "name": "I clicks on \"Speciality\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Speciality",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 39,
            "name": "I verify the Speciality screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheSpecialityScreenIsDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 539208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1434834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 41,
        "name": "User can see the details in doctor\u0027s tab",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-see-the-details-in-doctor\u0027s-tab",
        "after": [
          {
            "result": {
              "duration": 17459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 542197833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8097023542,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: de4694e4-0ada-44dd-b124-fe5192464917\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Doctors, tab, 3 of 4\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.LocationScreen.clickOnHospitalTab(LocationScreen.java:140)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnTab(LocationSteps.java:61)\n\tat ✽.When I clicks on \"Doctors\" tab(features/health/Hospital_Clinic_Locator.feature:42)\n",
              "status": "failed"
            },
            "line": 42,
            "name": "I clicks on \"Doctors\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Doctors",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 43,
            "name": "I verify the Doctors screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheDoctorsScreenIsDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 247333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1516791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 45,
        "name": "User can see the details in rooms  tab",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-see-the-details-in-rooms--tab",
        "after": [
          {
            "result": {
              "duration": 169417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 553995500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8532111250,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: de4694e4-0ada-44dd-b124-fe5192464917\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Rooms, tab, 4 of 4\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.LocationScreen.clickOnHospitalTab(LocationScreen.java:140)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnTab(LocationSteps.java:61)\n\tat ✽.When I clicks on \"Rooms\" tab(features/health/Hospital_Clinic_Locator.feature:46)\n",
              "status": "failed"
            },
            "line": 46,
            "name": "I clicks on \"Rooms\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Rooms",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 47,
            "name": "I verify the Rooms screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheRoomsScreenIsDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 226917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1787542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 49,
        "name": "User can navigate out of the hospital details screen",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-navigate-out-of-the-hospital-details-screen",
        "after": [
          {
            "result": {
              "duration": 15875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 692980083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7951377250,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: de4694e4-0ada-44dd-b124-fe5192464917\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Navigate\"]/../../preceding-sibling:: XCUIElementTypeOther[1]/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.LocationScreen.navigateBackToListScreen(LocationScreen.java:204)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnBackButtonInSeeDetailsScreen(LocationSteps.java:86)\n\tat ✽.When I clicks on back button in See Details screen(features/health/Hospital_Clinic_Locator.feature:50)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 50,
            "name": "I clicks on back button in See Details screen",
            "match": {
              "location": "LocationSteps.iClicksOnBackButtonInSeeDetailsScreen()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 303584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1596417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 53,
        "name": "User should be able to locate cli using PruShoppe location",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-should-be-able-to-locate-cli-using-prushoppe-location",
        "after": [
          {
            "result": {
              "duration": 117750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 739913958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4129584959,
              "status": "passed"
            },
            "line": 54,
            "name": "I clicks on back button in \"Hospitals\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 28
                }
              ],
              "location": "LocationSteps.iClicksOnBackButtonInScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15843356375,
              "status": "passed"
            },
            "line": 55,
            "name": "I clicks on Search here text field",
            "match": {
              "location": "LocationSteps.iClicksOnSearchHereTextField()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4210213000,
              "status": "passed"
            },
            "line": 56,
            "name": "I clicks on \"Clinics\" under Pulse Search",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnUnderPulseSearch(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7746897125,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifyHospitalScreenLaunch(LocationScreen.java:85)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(LocationSteps.java:46)\n\tat ✽.Then User can see the list of \"Clinics\" near by to user\u0027s current location(features/health/Hospital_Clinic_Locator.feature:57)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALkAAAGQCAIAAAB9G1ZBAAAOLklEQVR4Xu3bi3eU9Z3Hcf4Pid1ejtbdhttSUFrBXbFWBCKtpWuDnu1ZrbWtCAbdVbZUui2UI1V3D0oAFZBLAXMFNATkKhAMJCwIkjtMJpe535LMZDLJZH8zgzCZyeVDTSFZ3q/zPTlzfvPMA8/MO88zA8kY19hxDDP0ZGSOSV1imP7GPZZWGG1ohVGHVhh1aIVRx/3V39s6M8xkpq1nXl00XxMzNn0bZtjHPO2xG4mvaTM+PtdX3LEX5ctXaqj5qq00fXNy46yfNP/9tJT1y9/+7pV77nWOHdfwne/VZ37fTNNdU9IfzgzjmGfbcs/U5seym+b81Nr32bZnjLNNmemcnuWIzVz7xOlmM/uUh5wPzHbcP8t5933pe0ufr9RK011TfZXnQlt3BOvqXd+b1Twv2znxn816Y+b3fdXVoWMnWu8cH/pwT+ee/R1nL3Ru3uZO2wMzXHNl/PSWv+RFOoLRZnvUZu8OBDy5m21fFuOekbXjV7N+t/yhZb+fueXZBxtyXrHkrvntaw8tW/5wadb9/h/+i/PrE9P3mTJKK4kTV/qMc4ybHvj5QufYTHvhx4Enn/P88U3/7AWOjPFNG7falq4Ifnoy9geYze4c5zhwODB3Qdqeb/mkH9T1oxtd41i2qrOwpHHeAuvCl1t+/VLrvH/tPHwi8IvFVy/9D2Q9WpA16Vz2zBNPHF/ybCTYfuqp7LUvzZ56en7Ohizn5B+4zdllqKMespXE+4yBZry5LjY89Yuu4+XOb/xj7OKXkdkw+4lQ3h7LjDmhY2WuO2K1WuYtCJcecWZMSNv5LZ/0I0qe9O1H7jgzxlsffaLL7+88VhYsr4g4nZ77HnGN/fJsMSNrVmHWxHPZW3LmBi3W3kh3tKfn89f/cO/Jx3PWzzWttJlv9e/cn77b5Im14rwj00z6ffExrU0YYOKh/OzfQsdPuTKnOzLGWVb9t3vuE7bivZ6T5bZPjnQ5Ha4Fv2r92kT30eO+OU8mHnIrJv2grk36QV0/uhEzsb+q4+5prm9NdX5jsvPb0xx3TnT+w/2uOyeZ285vfje2QUZs7F+b4Hx4fsuf3nD95x+dDz7mykjayT/9aG7enAnnsx8rfvzd38y0f1Ri27Fj7oezJpyf//La2a4pP/RNftieMd4Zf9MT/7DSz8RacdyReXXim/Z9Nvt+q137UJMRe/PcPPnBsN/v//Qz9+6PXU/+0pOV7Z44w3XPNO+4Gc6spzqPl7u+NcUy/+fhfYfcY8e7x064+dPv83594k/xl9Pn6EbMeeXqM+99YE5g6iPuSTPbH57vuvte/6yfuu6aFnjwR75JM82149rY/m6Sv7gk9O4OZ+wJvz7e+35wNvvHexf9ZO/ix0/Mn91RevjzRx/Zs2jenkU/rpo9yzM725R39XmInT/6H3PvGOuuPOuu/KbYFDTvKmhJncKBpjmv2HLoWOOho2aadpfEF4sS05y327rvYMvOQuveEuuekpadV9dv/rTuLGjdNdAUDjzpG9/KackvavmwqNVMnjmowtb84tjXvOJWc4B9t2wyd31Y1Lwrv8/DdxbYPtrvPnTMdejT1k8OO/YfdB866j58zHx1HTzcUrCnNem1G3B2Fo/pBTS0AhWtQEUrUNEKVLQCFa1ApbbS1tGRuoTbjNRKWUXF2vc3RlOXcXsZupWyMxVv5K7vCIVS70hiMqqqqjpx8kQovpm54XA4zlRUJG/T0tpaebYyeQWjyxCtfFZR+eba3LbgYKEYa9a88+c33igsLHz6maf9gcDiFxd7vN4vvvgicW80GjsluVyuS1VVfR6GUWWwVsrOVL7yh5Vnzl+oqq0zc6m2PjF1VyzJ16P29vbnn1+UuF1dXW1ptLyY82J9fX1eXt7HH5esXLlq+fLl27Ztq6ur2717d1V19Suvvvrq0qWnT5++dKlq2bLXfrvsd9U1NUn7wwg1YCumhnWbt/z7f63cnl/0l/zi2BRcnb2lnyS3YrE0rljxp6SF3pycHHNSWbd+/bZt20tLD5iVX//m+QsXLmzavGnJkpdNW5Hu7vLy8g+2bH3//U3mfON0upIfjpFpwFaMrkj325s/2Hf4WHdvb0+8nmuTLPm80tTUbLfbk1sxTZj1FxYtjrWyadPChYvjV6TeSMQE0126/8BLL/1Hyb7SpP1hhBqsFaOru3vt5i37Dh5JvaOvd97Jff31P+fnFz7zzLMej+fFnCUXL15ct25dvJXTZoMXXki0srmoqHjVqlW569Zt3LixsLBow7vvvfnmWwUFRal7xMgzRCu9sbNLJPeDrQcOHU29o6/a2tqysrJgMGhu22y2zs5OE43P50t8Mmptja14vb7e+DWrprY2dn6KRmtqai9fvtx3Txihhm6lN352qWu4krqK24zUCtBLK9DRClS0AhWtQEUrUNEKVLQCFa1ARStQ3UArA/0/M24TN9AKbnM30EryeYVTy23oBlrBbW6wVqLRaNsVa4fF6q+r99XV+1OnYRjHV9cQqG/osDSH3X7xpNUZF/qrJB6bukcMasBWop1djnOfR7qC0d7YDz3ehEkIOZ3+qpro9YV+hLu6Ql/5lTbfCR3BYHd3d+odGED/rUR7ou5LNfGfsr35opGOoK+mbqBczKsbDodTV/9awVCou+eWHObo008r5iUKXG6K9gz4DWc2CMd/TC4a7uq0OVLvHg5hry/s8aSuxilnlMT1xZx+uiKRjqF+u1bZIXr7bcXwX25MXUpiWvEsXRHYWxq1u5y7ino9/uCBYz3twajP13HwaNQfiFy2Bstiv2IYcTp7OoLdNnskGOr89FSkuj4ajoSbbT2+QJcn9rO3g2ivqU1dip9UgoP+BqTRGQ7X1debG4FAoK29vaW1NXWLvnjjIuq/lbDNmbrUl/Ptd30f7OisPG9aca5a03GkzPbOhsC5C8FTla4177leXxNoaDCbdbfYvXv2297b2vZRqbus3L1mfVfDZdv2nZHK864TZak77avT3s8Zy5wkEr/FOAiHwxFoawvEtQutDOMV7f+3/lvpsDanLiUxr5Xr7Q29XWH30pXOXQX236/2nfrMc6LMnbvZc/SkffX/2NdsSLyi5qs/d6tte753R2G40erbkt9ZW2vfuDVy9ORQrUSD9bHLXIpwXOpqX5bGRpfLZRKhleHVfyuBBkvSR5NU5g5vxVnzhjBssfi/qApV1bi27fTV1XVUnHUUfeQ7ddp7pvLad7/v/e1tDZZoKOTake/afyQa7fEW7nUVl7Q3DpZjT1dXwGpNXY0LDXoNMhepxAZtbW3mjYh5y2JupG7UF+9XRP23Yp7gYNNgr6WoOxi0HxjiF4v6EY16zcfmAa415uUfxg+65u2v2WHqKvrTfytG0O5oa7T2/3L9LZkPxN6q+q6OwU4e5swRiURSV29cmFBuxICtGLF/57h4yf+/F33WZl9T6996/I0tnvLzvsSn8dS/SyrTivmMY6KJfTC+QeYh5sOUeSszjOen28FgrVwTvVmT+LMwMkmtAL20Ah2tQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClSjrxW73b5kyZKnNc+MSAsXLqyurk49sBFv9LXy1ltvjRn9nnvuudQDG/FGXyter3f16tWvjWYrVq60WCypBzbijb5WcKvQClS0AtX/AScyw+TTkZhYAAAAAElFTkSuQmCC",
                "mime_type": "image/png"
              }
            ],
            "line": 57,
            "name": "User can see the list of \"Clinics\" near by to user\u0027s current location",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 26
                }
              ],
              "location": "LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 272417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1103375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 59,
        "name": "User can verify the clinic page",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-verify-the-clinic-page",
        "after": [
          {
            "result": {
              "duration": 193792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 506817167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2128427541,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false],\n\tNear you Clinics are not displayed \n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifySearchResults(LocationScreen.java:102)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(LocationSteps.java:51)\n\tat ✽.And User can see that Call, Navigate and See Details links are displayed under \"Clinics\" search results(features/health/Hospital_Clinic_Locator.feature:60)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALkAAAGQCAIAAAB9G1ZBAAAOLklEQVR4Xu3bi3eU9Z3Hcf4Pid1ejtbdhttSUFrBXbFWBCKtpWuDnu1ZrbWtCAbdVbZUui2UI1V3D0oAFZBLAXMFNATkKhAMJCwIkjtMJpe535LMZDLJZH8zgzCZyeVDTSFZ3q/zPTlzfvPMA8/MO88zA8kY19hxDDP0ZGSOSV1imP7GPZZWGG1ohVGHVhh1aIVRx/3V39s6M8xkpq1nXl00XxMzNn0bZtjHPO2xG4mvaTM+PtdX3LEX5ctXaqj5qq00fXNy46yfNP/9tJT1y9/+7pV77nWOHdfwne/VZ37fTNNdU9IfzgzjmGfbcs/U5seym+b81Nr32bZnjLNNmemcnuWIzVz7xOlmM/uUh5wPzHbcP8t5933pe0ufr9RK011TfZXnQlt3BOvqXd+b1Twv2znxn816Y+b3fdXVoWMnWu8cH/pwT+ee/R1nL3Ru3uZO2wMzXHNl/PSWv+RFOoLRZnvUZu8OBDy5m21fFuOekbXjV7N+t/yhZb+fueXZBxtyXrHkrvntaw8tW/5wadb9/h/+i/PrE9P3mTJKK4kTV/qMc4ybHvj5QufYTHvhx4Enn/P88U3/7AWOjPFNG7falq4Ifnoy9geYze4c5zhwODB3Qdqeb/mkH9T1oxtd41i2qrOwpHHeAuvCl1t+/VLrvH/tPHwi8IvFVy/9D2Q9WpA16Vz2zBNPHF/ybCTYfuqp7LUvzZ56en7Ohizn5B+4zdllqKMespXE+4yBZry5LjY89Yuu4+XOb/xj7OKXkdkw+4lQ3h7LjDmhY2WuO2K1WuYtCJcecWZMSNv5LZ/0I0qe9O1H7jgzxlsffaLL7+88VhYsr4g4nZ77HnGN/fJsMSNrVmHWxHPZW3LmBi3W3kh3tKfn89f/cO/Jx3PWzzWttJlv9e/cn77b5Im14rwj00z6ffExrU0YYOKh/OzfQsdPuTKnOzLGWVb9t3vuE7bivZ6T5bZPjnQ5Ha4Fv2r92kT30eO+OU8mHnIrJv2grk36QV0/uhEzsb+q4+5prm9NdX5jsvPb0xx3TnT+w/2uOyeZ285vfje2QUZs7F+b4Hx4fsuf3nD95x+dDz7mykjayT/9aG7enAnnsx8rfvzd38y0f1Ri27Fj7oezJpyf//La2a4pP/RNftieMd4Zf9MT/7DSz8RacdyReXXim/Z9Nvt+q137UJMRe/PcPPnBsN/v//Qz9+6PXU/+0pOV7Z44w3XPNO+4Gc6spzqPl7u+NcUy/+fhfYfcY8e7x064+dPv83594k/xl9Pn6EbMeeXqM+99YE5g6iPuSTPbH57vuvte/6yfuu6aFnjwR75JM82149rY/m6Sv7gk9O4OZ+wJvz7e+35wNvvHexf9ZO/ix0/Mn91RevjzRx/Zs2jenkU/rpo9yzM725R39XmInT/6H3PvGOuuPOuu/KbYFDTvKmhJncKBpjmv2HLoWOOho2aadpfEF4sS05y327rvYMvOQuveEuuekpadV9dv/rTuLGjdNdAUDjzpG9/KackvavmwqNVMnjmowtb84tjXvOJWc4B9t2wyd31Y1Lwrv8/DdxbYPtrvPnTMdejT1k8OO/YfdB866j58zHx1HTzcUrCnNem1G3B2Fo/pBTS0AhWtQEUrUNEKVLQCFa1ApbbS1tGRuoTbjNRKWUXF2vc3RlOXcXsZupWyMxVv5K7vCIVS70hiMqqqqjpx8kQovpm54XA4zlRUJG/T0tpaebYyeQWjyxCtfFZR+eba3LbgYKEYa9a88+c33igsLHz6maf9gcDiFxd7vN4vvvgicW80GjsluVyuS1VVfR6GUWWwVsrOVL7yh5Vnzl+oqq0zc6m2PjF1VyzJ16P29vbnn1+UuF1dXW1ptLyY82J9fX1eXt7HH5esXLlq+fLl27Ztq6ur2717d1V19Suvvvrq0qWnT5++dKlq2bLXfrvsd9U1NUn7wwg1YCumhnWbt/z7f63cnl/0l/zi2BRcnb2lnyS3YrE0rljxp6SF3pycHHNSWbd+/bZt20tLD5iVX//m+QsXLmzavGnJkpdNW5Hu7vLy8g+2bH3//U3mfON0upIfjpFpwFaMrkj325s/2Hf4WHdvb0+8nmuTLPm80tTUbLfbk1sxTZj1FxYtjrWyadPChYvjV6TeSMQE0126/8BLL/1Hyb7SpP1hhBqsFaOru3vt5i37Dh5JvaOvd97Jff31P+fnFz7zzLMej+fFnCUXL15ct25dvJXTZoMXXki0srmoqHjVqlW569Zt3LixsLBow7vvvfnmWwUFRal7xMgzRCu9sbNLJPeDrQcOHU29o6/a2tqysrJgMGhu22y2zs5OE43P50t8Mmptja14vb7e+DWrprY2dn6KRmtqai9fvtx3Txihhm6lN352qWu4krqK24zUCtBLK9DRClS0AhWtQEUrUNEKVLQCFa1ARStQ3UArA/0/M24TN9AKbnM30EryeYVTy23oBlrBbW6wVqLRaNsVa4fF6q+r99XV+1OnYRjHV9cQqG/osDSH3X7xpNUZF/qrJB6bukcMasBWop1djnOfR7qC0d7YDz3ehEkIOZ3+qpro9YV+hLu6Ql/5lTbfCR3BYHd3d+odGED/rUR7ou5LNfGfsr35opGOoK+mbqBczKsbDodTV/9awVCou+eWHObo008r5iUKXG6K9gz4DWc2CMd/TC4a7uq0OVLvHg5hry/s8aSuxilnlMT1xZx+uiKRjqF+u1bZIXr7bcXwX25MXUpiWvEsXRHYWxq1u5y7ino9/uCBYz3twajP13HwaNQfiFy2Bstiv2IYcTp7OoLdNnskGOr89FSkuj4ajoSbbT2+QJcn9rO3g2ivqU1dip9UgoP+BqTRGQ7X1debG4FAoK29vaW1NXWLvnjjIuq/lbDNmbrUl/Ptd30f7OisPG9aca5a03GkzPbOhsC5C8FTla4177leXxNoaDCbdbfYvXv2297b2vZRqbus3L1mfVfDZdv2nZHK864TZak77avT3s8Zy5wkEr/FOAiHwxFoawvEtQutDOMV7f+3/lvpsDanLiUxr5Xr7Q29XWH30pXOXQX236/2nfrMc6LMnbvZc/SkffX/2NdsSLyi5qs/d6tte753R2G40erbkt9ZW2vfuDVy9ORQrUSD9bHLXIpwXOpqX5bGRpfLZRKhleHVfyuBBkvSR5NU5g5vxVnzhjBssfi/qApV1bi27fTV1XVUnHUUfeQ7ddp7pvLad7/v/e1tDZZoKOTake/afyQa7fEW7nUVl7Q3DpZjT1dXwGpNXY0LDXoNMhepxAZtbW3mjYh5y2JupG7UF+9XRP23Yp7gYNNgr6WoOxi0HxjiF4v6EY16zcfmAa415uUfxg+65u2v2WHqKvrTfytG0O5oa7T2/3L9LZkPxN6q+q6OwU4e5swRiURSV29cmFBuxICtGLF/57h4yf+/F33WZl9T6996/I0tnvLzvsSn8dS/SyrTivmMY6KJfTC+QeYh5sOUeSszjOen28FgrVwTvVmT+LMwMkmtAL20Ah2tQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClS0AhWtQEUrUNEKVLQCFa1ARStQ0QpUtAIVrUBFK1DRClSjrxW73b5kyZKnNc+MSAsXLqyurk49sBFv9LXy1ltvjRn9nnvuudQDG/FGXyter3f16tWvjWYrVq60WCypBzbijb5WcKvQClS0AtX/AScyw+TTkZhYAAAAAElFTkSuQmCC",
                "mime_type": "image/png"
              }
            ],
            "line": 60,
            "name": "User can see that Call, Navigate and See Details links are displayed under \"Clinics\" search results",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 76
                }
              ],
              "location": "LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 287709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2019000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 62,
        "name": "User can view listed clinic details",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-view-listed-clinic-details",
        "after": [
          {
            "result": {
              "duration": 773583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 617417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2212719958,
              "status": "passed"
            },
            "line": 63,
            "name": "I clicks on See Details button on First result",
            "match": {
              "location": "LocationSteps.iClicksOnSeeDetailsButtonOnFirstResult()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 40083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 67291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "User can view listed clinic info",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-view-listed-clinic-info",
        "after": [
          {
            "result": {
              "duration": 357250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 528425709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 25086259625,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false],\n\tNear you Clinics are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstClinic tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstClinic tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Clinic tile See Details screen expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifyHospitalInformationScreen(LocationScreen.java:151)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(LocationSteps.java:81)\n\tat ✽.Then I can see the \"Clinic\" Information screen with Navigate and Call Now buttons(features/health/Hospital_Clinic_Locator.feature:66)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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",
                "mime_type": "image/png"
              }
            ],
            "line": 66,
            "name": "I can see the \"Clinic\" Information screen with Navigate and Call Now buttons",
            "match": {
              "arguments": [
                {
                  "val": "Clinic",
                  "offset": 15
                }
              ],
              "location": "LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 644375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1114750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 68,
        "name": "User can view listed clinic info details",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-view-listed-clinic-info-details",
        "after": [
          {
            "result": {
              "duration": 37500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 550837375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8949455375,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: de4694e4-0ada-44dd-b124-fe5192464917\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Navigate\"]/../../preceding-sibling:: XCUIElementTypeOther[1]/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.LocationScreen.navigateBackToListScreen(LocationScreen.java:204)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnBackButtonInSeeDetailsScreen(LocationSteps.java:86)\n\tat ✽.When I clicks on back button in See Details screen(features/health/Hospital_Clinic_Locator.feature:69)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALkAAAGQCAIAAAB9G1ZBAAAOJklEQVR4Xu3bi3eU9Z3Hcf4PAbttV9ttw20BLRZxl5uNQLQHbN2o5/Ss1mpXEMF2lVMq3RbKkYq7BwVEucilgLkBEQgIJdyCAcJCQXLHyW0yt8wlyUwmk0z2NzOckDwzST7UFJLl/Trfk5Pzm2ce8sy853lmNBnhHjmGYQaeUWkjrEsMk2o8I2mF0YZWGHVohVGHVhh1PF//va1rlJm0pPW0m4vma2JGJm/DDPKY5yL+OPf1UI+Nz60VT3zjVE9fivm6rdR9a2JN+oL6f5piWb/xnUlfffdh18gx1d9/pCrth2bqHpicfHdmcMdx/1jXA5Oc/zip8f7xvdZHjWmcPMP1aIYzNvMc4x+tfzLTMXmm67E5zqnprgd/kLyr5PlardQ98JCv5HJox+5gZZX7kfT6pzJd4//VrNek/dBXVhY6ecY+emzo0wNtB460Xrratm2nJ2kPzGCN8xvjPA/P8v9oQWDm/OZZ8wOzFzRNmuUaNS5xq2daxu5X0n+7Yuby383Y/tL06iVv2jasW/72zOUrZhdkTPU//lPXP/RqK+UorSROXMkzxjnm0cDPFrpGpjlyDwaee7npD2v9c551jhpbt2VH47KVwVNnY/+A2Wz0GOfRvwTmPZu057s+yQd16+iG17jGTQtMSa+fMrvm1TfqX/mVfeJM/9Q5vu89cvP1+VjGEzkZEy5nzjjzzOmlL0WCLeeez1y/dO5D53+yZFOGa+Isjzm7DHTUA7aSuPj1NWPNBbL6+Z+3ny52ffOfYxe/UWnVc54JZR2wTZsbOlnkvi9Wq+2pZ8MFJ7obH0qTfEQ9J3n7oTxj69J/Gg74QqfOhYpL2l0uz8Ppzu7HfFpGem7G+MuZ25fMC9pqo5GOaGfkr+/8fvK5+Ys3zTOtNJuX+venJu2z18Racd2XZib5tviY1sb1MfFQ/u3fQ6fPudMedY4aY1v93555zzTuy286W9z4+Yl2l9P97Cv2+8d7Ck/75j6XuMvdmOSD6p7kg7p1dENmYj+q88Ep7m8/5PrmRNd3pjhHj3d9b6p79ATzvetbk2IbjIqN8/5xrsefbvjjWvdv/uCa/qR5xxp7q5uYf3lqXtbccVcyn8ybv/mX0x2fHbTv3jPv0znjrjzz6/Xz3JMf902c7Rw9Nral9SG6NbHPzM770m6OOZVZt+j9Uuv+UBP7OdLqJ04P+/3+U1949h90P/eLpoxMz/hp7u9O8Y6Z5sp4vu10sfvbk21P/yx8+Lhn5FjPyHF3flI+7rem+6GMTa+jGzLnlZuPvPexuYGHfuSZMKNl9tPuBx/2p//E/cCUwPQf+ybMMNeO7nF8Y0Jg/6HQR3++VUl8vD+YdSlz/oHXFuS/tuDM03NbCgqvPJGev+jH+Yvml855wjsn0zN6fO9HI8WYZ3xE7d6s2r3ZdbHJqd+b02Cd3L6mPmuf7fjJmuOFZur2H4ov5iWmPmt/7eFjDXtya/MP1R441LDn5vqdH/ueHPvevia370ne+G5OQ3Zew6d5djNZ5qBy7dn7Yl+z9tnNAfbest7c9Kl5IrJ73X1vTuNnR9zHC93HT9mPnXAeOd507HRsjp9yf15oz85POvwU07B334guQEMrUNEKVLQCFa1ARStQ0QpUaivNra3WJdxjpFaKLl5cv3lL1LqMe8vArRRduPjuhg9bQyHrDT2YjEpLS8+cPROKb2a+cTqdFy5e7LlNg91ecqmk5wqGlwFa+eJiydr1G5qD/YVirFv3wZ/efTc3N/eFF1/wBwKLX1/c5PV++eWXiVuj0dgpye12Xy8t7XU3DCv9tVJ0oeTN36+6cOVqaUWlmesVVYmp/MrW83rU0tLy6quvJb4vKyuz1dheX/J6VVVVVlbWwYOHVq1avWLFip07d1ZWVu7fv7+0rOzNt956a9my8+fPX79eunz5279Z/tuy8vIe+8MQ1WcrpoaN27b/+r9W7crO+3P2vtjk3Jz8gs97tmKz1axc+cceC11LliwxJ5WNH364c+eugoKjZuWX//Hq1atXt27bunTpr0xbkY6O4uLiT7bv2Lx5qznfuFzunnfH0NRnK0Z7pOP9bZ8c/svJjq6uzng93dNTz/NKXV29w+Ho2Yppwqwvem1xrJWtWxcuXBy/InVFIiaYjoIjR9944z8PHS7osT8MUf21YrR3dKzftv3wsRPWG3r74IMN77zzp+zs3BdffKmpqen1JUuvXbu2cePGeCvnzQaLFiVa2ZaXt2/16tUbNm7csmVLbm7epo8+Xrv2vZycPOseMfQM0EpX7OwS2fDJjqPHC6039FZRUVFUVBQMBs33jY2NbW1tJhqfz5f4ZGS3x1a8Xl9X/JpVXlEROz9Fo+XlFTdu3Oi9JwxRA7fSFT+7VFZ/ZV3FPUZqBeiiFehoBSpagYpWoKIVqGgFKlqBilagohWobqOVvv4/M+4Rt9EK7nG30UrP8wqnlnvQbbSCe1x/rUSj0eavaltttf7KKl9lld861YM4vsrqQFV1q60+7PGLJ622uNDfJHFf6x7Rrz5biba1Oy//NdIejHbFfunxDkxCyOXyl5ZHby2kEG5vD33tZ9q8ElqDwY6ODusN6EPqVqKdUc/18vhv2d550Uhr0Fde2Vcu5tkNh8PW1b9VMBTq6Lwrhzn8pGjFPEWBG3XRzj5fcGaDcPzX5KLh9rZGp/XmwRD2+sJNTdbVOOWMkri+mNNPeyTSOtBf1yo7RFfKVgz/jRrrUg+mlaZlKwP5BVGH27U3r6vJHzx6srMlGPX5Wo8VRv2ByI3aYFHsTwwjLldna7Cj0REJhtpOnYuUVUXDkXB9Y6cv0N4U+93bfrSUV1iX4ieVYL9/AWm0hcOVVVXmm0Ag0NzS0mC3W7fojTcuotSthBtd1qXeXO9/5Ptkd1vJFdOKa/W61hNFjR9sCly+GjxX4l73sfuddYHqarNZR4PDe+BI48c7mj8r8BQVe9Z92F59o3HXnkjJFfeZIutOe2tzpDhjmZNE4q8Y++F0OgPNzYG4FqGVQbyi/f+WupXW2nrrUg/muXK/v6mrPexZtsq1N8fxuzW+c180nSnybNjWVHjWseZ/HOs2JZ5R89W/YUfjrmzv7txwTa1ve3ZbRYVjy45I4dmBWokGq2KXOYtwnHW1N1tNjdvtNonQyuBK3Uqg2tbjo4mVucF78ZJ5Qxi22fxfloZKy9079/gqK1svXnLmfeY7d957oaT71e/bvKu52hYNhdy7s91HTkSjnd7cfPe+Qy01/eXY2d4eqK21rsaF+r0GmYtUYoPm5mbzRsS8ZTHfWDfqjfcrotStmAc4WNffcynqCAYdRwf4w6IUolGv+djcx7XGPP2D+EHXvP01O7SuIpXUrRhBh7O5pjb10/X3ZD4Qe0ur2lv7O3mYM0ckErGu3r4wodyOPlsxYv+d49p1//9e89XW++rsf+/x1zQ0FV/xJT6NW38WK9OK+Yxjool9ML5N5i7mw5R5KzOI56d7QX+tdIveqUn8WxiapFaALlqBjlagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFquHXisPhWLp06QuaF4ekhQsXlpWVWQ9syBt+rbz33nsjhr+XX37ZemBD3vBrxev1rlmz5u3hbOWqVTabzXpgQ97wawV3C61ARStQ/R9qVbkjdKHrxAAAAABJRU5ErkJggg\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 69,
            "name": "I clicks on back button in See Details screen",
            "match": {
              "location": "LocationSteps.iClicksOnBackButtonInSeeDetailsScreen()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 253958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1127041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 71,
        "name": "User can navigate back to clinics screen",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-navigate-back-to-clinics-screen",
        "after": [
          {
            "result": {
              "duration": 218500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 804208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3403390708,
              "status": "passed"
            },
            "line": 72,
            "name": "I clicks on back button in \"Clinic\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Clinic",
                  "offset": 28
                }
              ],
              "location": "LocationSteps.iClicksOnBackButtonInScreen(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify that user can locate near by Hospitals,clinics using PruShoppe Location feature",
    "description": "",
    "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature",
    "keyword": "Feature",
    "uri": "features/health/Hospital_Clinic_Locator.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@StoreLocator"
      },
      {
        "line": 1,
        "name": "@iOSdropDownTest"
      },
      {
        "line": 1,
        "name": "@18JunTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@18MayFailures"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 98458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 208208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 2411958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 8736208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10825709,
              "status": "passed"
            },
            "line": 6,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 589541,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7460909750,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 60521439500,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2011837459,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24067670250,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2013269208,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7242616042,
              "status": "passed"
            },
            "line": 13,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 37007269125,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "medicine"
                ],
                "line": 15
              },
              {
                "cells": [
                  "LastName",
                  "reminder"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2533905625,
              "status": "passed"
            },
            "line": 19,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7134960208,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37878208792,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006900250,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 123388479167,
              "status": "passed"
            },
            "line": 23,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22095353542,
              "status": "passed"
            },
            "line": 24,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4008086334,
              "status": "passed"
            },
            "line": 25,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 393625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 28,
        "name": "Verify User should be able to navigate to medical reminder page",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-medical-reminder-page",
        "after": [
          {
            "result": {
              "duration": 726167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 456959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1938829917,
              "status": "passed"
            },
            "line": 29,
            "name": "I click the Health icon in Home screen",
            "match": {
              "location": "CustomerConnectSteps.Healthicons()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2009996792,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 90546101084,
              "status": "passed"
            },
            "line": 31,
            "name": "I clicks on click here icon in medical Reminder",
            "match": {
              "location": "DieticianSteps.ClickMedicalRemainder()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2009875875,
              "status": "passed"
            },
            "line": 32,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1612167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1444084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 34,
        "name": "verify the static text on medicine reminder screen",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-the-static-text-on-medicine-reminder-screen",
        "after": [
          {
            "result": {
              "duration": 547208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 315792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4206644500,
              "status": "passed"
            },
            "line": 35,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${no.medicine.text}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${Medicalremainder.text}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${track.medicine.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${important.dose.text}"
                ],
                "line": 39
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 382959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 41,
        "name": "click on add reminder button",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;click-on-add-reminder-button",
        "after": [
          {
            "result": {
              "duration": 52833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 916833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2896118417,
              "status": "passed"
            },
            "line": 42,
            "name": "I clicks on \"${add.new.reminder}\" in app screens",
            "match": {
              "arguments": [
                {
                  "val": "${add.new.reminder}",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.clickDietician(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2011096375,
              "status": "passed"
            },
            "line": 43,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 149000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 45,
        "name": "verify add medicine screen is launched and user can enter the required info on medical info screen",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-add-medicine-screen-is-launched-and-user-can-enter-the-required-info-on-medical-info-screen",
        "after": [
          {
            "result": {
              "duration": 27292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1030834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2858391375,
              "status": "passed"
            },
            "comments": [
              {
                "line": 46,
                "value": "##defect PCAONEPULSE-20944"
              }
            ],
            "line": 47,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "comments": [
                  {
                    "line": 48,
                    "value": "#      | ${add.medicine.text} |"
                  }
                ],
                "cells": [
                  "${medicine.info.field}"
                ],
                "line": 49
              },
              {
                "cells": [
                  "${schedule.field}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${more.setting.field}"
                ],
                "line": 51
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2119958,
              "status": "passed"
            },
            "line": 52,
            "name": "I assign \"Paracetamol\" to variable \"Medicine_Info\"",
            "match": {
              "arguments": [
                {
                  "val": "Paracetamol",
                  "offset": 10
                },
                {
                  "val": "Medicine_Info",
                  "offset": 36
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13056908583,
              "status": "passed"
            },
            "line": 53,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Medicine Info",
                  "${Medicine_Info}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "Unit",
                  "Tablet (unit)"
                ],
                "line": 55
              },
              {
                "cells": [
                  "Quantity",
                  "2"
                ],
                "line": 56
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2883793041,
              "status": "passed"
            },
            "line": 57,
            "name": "I clicks on Next icon in app screens",
            "match": {
              "location": "DieticianSteps.clickNextIcons()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 114417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 59,
        "name": "verify user navigated to schedule screen and user can enter the required info",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-user-navigated-to-schedule-screen-and-user-can-enter-the-required-info",
        "after": [
          {
            "result": {
              "duration": 34500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 102958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7633729209,
              "status": "passed"
            },
            "line": 60,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${frequency.text}"
                ],
                "line": 61
              },
              {
                "cells": [
                  "${dosage.timing.text}"
                ],
                "line": 62
              },
              {
                "cells": [
                  "${start.date.text}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "${end.date.text}"
                ],
                "line": 64
              },
              {
                "cells": [
                  "${dose.intake.text}"
                ],
                "line": 65
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4233817042,
              "status": "passed"
            },
            "line": 66,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Frequency",
                  "Once"
                ],
                "line": 67
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3400820375,
              "status": "passed"
            },
            "line": 68,
            "name": "I clicks on Timing in Add medcine screen",
            "match": {
              "location": "DieticianSteps.clickTiming_Icon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5177470708,
              "status": "passed"
            },
            "line": 69,
            "name": "I clicks on \"${before.meal.text}\" in app screens",
            "match": {
              "arguments": [
                {
                  "val": "${before.meal.text}",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.clickDietician(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3870684583,
              "status": "passed"
            },
            "line": 70,
            "name": "I clicks on Next icon in app screens",
            "match": {
              "location": "DieticianSteps.clickNextIcons()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 61583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 72,
        "name": "Verify User should be able to navigate to More Setting page",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-more-setting-page",
        "after": [
          {
            "result": {
              "duration": 29792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 3019667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2007140917,
              "status": "passed"
            },
            "line": 73,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11196856667,
              "status": "passed"
            },
            "line": 74,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Medication For",
                  "fever"
                ],
                "line": 75
              },
              {
                "cells": [
                  "Medicine Stock",
                  "5"
                ],
                "line": 76
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5342987791,
              "status": "passed"
            },
            "line": 77,
            "name": "I clicks the Done button in Add medicine screen",
            "match": {
              "location": "DieticianSteps.ClickDoneButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5769873666,
              "status": "passed"
            },
            "line": 78,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Medicine_Info} added successfully!"
                ],
                "line": 79
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 80,
            "value": "#      | ${add.another.med}                   |"
          },
          {
            "line": 81,
            "value": "#      | ${notNow.text}                       |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 53000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 83,
        "name": "verify Add medicine screen is displayed when user click on add new reminder on success popup",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-add-medicine-screen-is-displayed-when-user-click-on-add-new-reminder-on-success-popup",
        "after": [
          {
            "result": {
              "duration": 17959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 47417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5479086500,
              "status": "passed"
            },
            "line": 84,
            "name": "I clicks on \"${add.another.med}\" in app screens",
            "match": {
              "arguments": [
                {
                  "val": "${add.another.med}",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.clickDietician(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3367334,
              "status": "passed"
            },
            "line": 85,
            "name": "I assign \"cold\" to variable \"Medicine_Info\"",
            "match": {
              "arguments": [
                {
                  "val": "cold",
                  "offset": 10
                },
                {
                  "val": "Medicine_Info",
                  "offset": 29
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26496625542,
              "status": "passed"
            },
            "line": 86,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Medicine Info",
                  "${Medicine_Info}"
                ],
                "line": 87
              },
              {
                "cells": [
                  "Unit",
                  "Tablet (unit)"
                ],
                "line": 88
              },
              {
                "cells": [
                  "Quantity",
                  "5"
                ],
                "line": 89
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5038206541,
              "status": "passed"
            },
            "line": 90,
            "name": "I clicks on Next icon in app screens",
            "match": {
              "location": "DieticianSteps.clickNextIcons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10801473000,
              "status": "passed"
            },
            "line": 91,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Frequency",
                  "Daily"
                ],
                "line": 92
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5611598000,
              "status": "passed"
            },
            "line": 93,
            "name": "I clicks on Timing in Add medcine screen",
            "match": {
              "location": "DieticianSteps.clickTiming_Icon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6233551625,
              "status": "passed"
            },
            "line": 94,
            "name": "I clicks on \"After meal\" in app screens",
            "match": {
              "arguments": [
                {
                  "val": "After meal",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.clickDietician(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5679191625,
              "status": "passed"
            },
            "line": 95,
            "name": "I clicks on Next icon in app screens",
            "match": {
              "location": "DieticianSteps.clickNextIcons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12420431000,
              "status": "passed"
            },
            "line": 96,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Medication For",
                  "Cold"
                ],
                "line": 97
              },
              {
                "cells": [
                  "Medicine Stock",
                  "5"
                ],
                "line": 98
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5570797292,
              "status": "passed"
            },
            "line": 99,
            "name": "I clicks the Done button in Add medicine screen",
            "match": {
              "location": "DieticianSteps.ClickDoneButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 53709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 101,
        "name": "verify medicine reminder home screen is displayed when user click on not now button on success popup",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-medicine-reminder-home-screen-is-displayed-when-user-click-on-not-now-button-on-success-popup",
        "after": [
          {
            "result": {
              "duration": 50708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 59041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9421960125,
              "status": "passed"
            },
            "line": 102,
            "name": "I clicks on Not now icon in app screen",
            "match": {
              "location": "DieticianSteps.clickNotNowButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4012418917,
              "status": "passed"
            },
            "line": 103,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Medicalremainder.text}"
                ],
                "line": 104
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 65042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 54708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 106,
        "name": "navigate to health screen",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;navigate-to-health-screen",
        "after": [
          {
            "result": {
              "duration": 81417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 21125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3485025375,
              "status": "passed"
            },
            "line": 107,
            "name": "I click the Back button in medical remainder",
            "match": {
              "location": "DieticianSteps.Back_MedicalRemainder()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 29875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 109,
        "name": "Verify User should be able to navigate to calendar page",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-calendar-page",
        "after": [
          {
            "result": {
              "duration": 41542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 30709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2006061333,
              "status": "passed"
            },
            "line": 110,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7076691791,
              "status": "passed"
            },
            "line": 111,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21404183709,
              "status": "passed"
            },
            "line": 112,
            "name": "I click on Calendar tile",
            "match": {
              "location": "LocationSteps.iClicksOnCalendarButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12793069666,
              "status": "passed"
            },
            "line": 113,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Medicalremainder.text}"
                ],
                "line": 114
              },
              {
                "cells": [
                  "${Medicine_Info}"
                ],
                "line": 115
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Medicine Reminder Positive Flow functionality on one pulse App",
    "description": "",
    "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/health/MedicineReminder.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MedicineReminder"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 280291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1993625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 330458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 51583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7633694416,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2056917,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${onepulse.events.user}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.events.user}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 48
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 61455124083,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24037352542,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2003426167,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2247088708,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 79792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 1279041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 609000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4949289708,
              "status": "passed"
            },
            "line": 13,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 53529804000,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1463482500,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5006991875,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11561248833,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20926276209,
              "status": "passed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 154334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 49750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify MyEvent Functionality in Home screen",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-myevent-functionality-in-home-screen",
        "after": [
          {
            "result": {
              "duration": 19792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 23209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2006174792,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9479358458,
              "status": "passed"
            },
            "line": 24,
            "name": "I click the MyEvent icons",
            "match": {
              "location": "CustomerConnectSteps.clickMyEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5014787750,
              "status": "passed"
            },
            "line": 25,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3329128833,
              "status": "passed"
            },
            "line": 26,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events enrolled yet"
                ],
                "line": 27
              },
              {
                "cells": [
                  "Please choose from the open events and get started"
                ],
                "line": 28
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 38875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 30,
        "name": "Verify Events Archive tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-events-archive-tab",
        "after": [
          {
            "result": {
              "duration": 23875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 36250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 31556633000,
              "status": "passed"
            },
            "line": 31,
            "name": "I click the Events Archive icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyEventsArchive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1947094000,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events in your archive."
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 80833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "Verify Open Events tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-open-events-tab",
        "after": [
          {
            "result": {
              "duration": 27125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 34334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 31382577750,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the Open Events icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyOpenEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1505375,
              "status": "passed"
            },
            "line": 37,
            "name": "I verify either static text or available open events are displayed on screen",
            "match": {
              "location": "CustomerConnectSteps.verifyOpenEventsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "There are no events available at the moment"
                ],
                "line": 38
              },
              {
                "cells": [
                  "Stay tuned for events on health and fitness"
                ],
                "line": 39
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify MY Event channel functionality on one pulse App",
    "description": "",
    "id": "verify-my-event-channel-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/MyEvents.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MyEvent"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 141458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 43000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1135916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 522459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8977518625,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 50097923875,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "#And Logout of pulse app if user is logged in"
              }
            ],
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21995006208,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3006694583,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1675698917,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 201958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 71041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 364917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 186958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5319583,
              "status": "passed"
            },
            "line": 14,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3871835083,
              "status": "passed"
            },
            "line": 15,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 65170181459,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1239413084,
              "status": "passed"
            },
            "line": 19,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10009858875,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11013828166,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27695280625,
              "status": "passed"
            },
            "line": 22,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 150083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 24,
        "name": "Verify User should be able to navigate to Health page",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-health-page",
        "after": [
          {
            "result": {
              "duration": 142458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 58500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2005543041,
              "status": "passed"
            },
            "line": 25,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 12977165083,
              "status": "passed"
            },
            "line": 26,
            "name": "I navigate to Health Content screen",
            "match": {
              "location": "CustomerConnectSteps.iNavigateToWealthScreenz()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8003114666,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 8 sec",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1743266334,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Health Channels"
                ],
                "line": 29
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25046904500,
              "status": "passed"
            },
            "line": 30,
            "name": "I verify the following texts \"My Health Content\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My Health Content",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Category"
                ],
                "line": 31
              },
              {
                "cells": [
                  "Like"
                ],
                "line": 32
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 33
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 34
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 36,
            "value": "#  Scenario: Verify User should be able to Like the post"
          },
          {
            "line": 37,
            "value": "#    And I read the \"Brisk Walking\" post like count"
          },
          {
            "line": 38,
            "value": "#    And I Like the post"
          },
          {
            "line": 39,
            "value": "#    Then I verify \"Brisk Walking\" post like count is increased"
          },
          {
            "line": 40,
            "value": "#    And I Like the post"
          },
          {
            "line": 42,
            "value": "#  Scenario: Verify User should be able to Share the post"
          },
          {
            "line": 43,
            "value": "#    And I share the post"
          },
          {
            "line": 44,
            "value": "#    Then I Verify the share with friends popup"
          },
          {
            "line": 46,
            "value": "#  Scenario: Verify User should be able to Comment the post"
          },
          {
            "line": 47,
            "value": "#    And I read the \"Health Channels\" post comment count"
          },
          {
            "line": 48,
            "value": "#    And I commented in the post \"${wealth.topic.comment}\""
          },
          {
            "line": 49,
            "value": "#    Then I verify \"Health Channels\" post comment count is increased"
          },
          {
            "line": 52,
            "value": "#  Scenario: Verify User should be able to view the story post"
          },
          {
            "line": 53,
            "value": "#    Then I click on \"Brisk Walking\" wealth channel topic"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 1645917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 668083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 55,
        "name": "Verify User should be able to view the full page article post",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-view-the-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 73375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 68167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27446445500,
              "status": "passed"
            },
            "line": 56,
            "name": "I click on \"Health Channels\" topic for details full view",
            "match": {
              "arguments": [
                {
                  "val": "Health Channels",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnTopicForDetailsFullView(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10014266334,
              "status": "passed"
            },
            "line": 57,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 84708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 49334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 59,
        "name": "Verify User should be able to see the Like, Share, Comment options on full page article post",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-like,-share,-comment-options-on-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 1087542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1149556667,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11903451750,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: fa70f858-ba8d-4a4f-af67-6c91b4c67145\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\n\tat com.prudential.tap.appium.AppiumCommands.swipe(AppiumCommands.java:432)\n\tat com.onepulse.app.screens.TestBasePage.scrollPageDown(TestBasePage.java:206)\n\tat com.onepulse.app.screens.CustomerConnectScreen.isStaticTextDisplayedOncommunitiesScreen(CustomerConnectScreen.java:186)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(CustomerConnectSteps.java:88)\n\tat ✽.And I verify the following texts \"My Health Content\" in Screen(features/home/MyHealthContent.feature:60)\n",
              "status": "failed"
            },
            "line": 60,
            "name": "I verify the following texts \"My Health Content\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My Health Content",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Like"
                ],
                "line": 61
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 62
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 63
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 89417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "Verify User should be able to Like the post in full article view screen",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-like-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 584791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1046575917,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 28172202125,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: fa70f858-ba8d-4a4f-af67-6c91b4c67145\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Like\"])[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.WealthScreen.clickLikeButton(WealthScreen.java:175)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iLikeThePost(WealthSteps.java:75)\n\tat ✽.And I Like the post(features/home/MyHealthContent.feature:66)\n",
              "status": "failed"
            },
            "line": 66,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 67,
                "value": "##Defect#PCAONEPULSE-22541"
              }
            ],
            "line": 68,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 170500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 70,
        "name": "Verify User should be able to Share the post in full article view screen",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-share-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 48875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1053096041,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12384673417,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: fa70f858-ba8d-4a4f-af67-6c91b4c67145\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Share\"])[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.WealthScreen.clickShareButton(WealthScreen.java:215)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iShareThePost(WealthSteps.java:90)\n\tat ✽.And I share the post(features/home/MyHealthContent.feature:71)\n",
              "status": "failed"
            },
            "line": 71,
            "name": "I share the post",
            "match": {
              "location": "WealthSteps.iShareThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 72,
            "name": "I navigate back to previous page",
            "match": {
              "location": "WealthSteps.iNavigateBackToPreviousPage()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 4881917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1084833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 74,
        "name": "Verify User can navigate to Health homepage",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-can-navigate-to-health-homepage",
        "after": [
          {
            "result": {
              "duration": 25292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1110212166,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3111479041,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: fa70f858-ba8d-4a4f-af67-6c91b4c67145\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat io.appium.java_client.PerformsTouchActions.performTouchAction(PerformsTouchActions.java:41)\n\tat io.appium.java_client.TouchAction.perform(TouchAction.java:187)\n\tat com.onepulse.app.screens.TestBasePage.clickBasedOnElementLocation(TestBasePage.java:449)\n\tat com.onepulse.app.screens.WealthScreen.clickFullViewBackButton(WealthScreen.java:169)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iNavigateToStoryPostPage(WealthSteps.java:70)\n\tat ✽.Then I navigate to story post page(features/home/MyHealthContent.feature:75)\n",
              "status": "failed"
            },
            "line": 75,
            "name": "I navigate to story post page",
            "match": {
              "location": "WealthSteps.iNavigateToStoryPostPage()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify My Health Content functionality on One Pulse App",
    "description": "",
    "id": "verify-my-health-content-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/MyHealthContent.feature",
    "tags": [
      {
        "line": 1,
        "name": "@HealthChannel"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 174917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-notification-center-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 2065250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2409333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10113875,
              "status": "passed"
            },
            "line": 6,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1225875,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 73805966084,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2009981166,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 49150554500,
              "status": "passed"
            },
            "line": 10,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005335958,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23055966209,
              "status": "passed"
            },
            "line": 12,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005611542,
              "status": "passed"
            },
            "line": 13,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8564213542,
              "status": "passed"
            },
            "line": 14,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006634333,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24407328084,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 17
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 19
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 20
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2418133250,
              "status": "passed"
            },
            "line": 21,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2530289458,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34902780250,
              "status": "passed"
            },
            "line": 23,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005205459,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 109262869167,
              "status": "passed"
            },
            "line": 25,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17841135500,
              "status": "passed"
            },
            "line": 26,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4006212833,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 4,
            "name": "@NotificationCenter_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 431458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 30,
        "name": "Navigate to notification screen via home screen",
        "description": "",
        "id": "verify-notification-center-functionality-on-one-pulse-app;navigate-to-notification-screen-via-home-screen",
        "after": [
          {
            "result": {
              "duration": 40750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 54375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1504279916,
              "status": "passed"
            },
            "line": 31,
            "name": "I navigate to notification screen from home page",
            "match": {
              "location": "ManageProfileSteps.navigateToNotificationScreenFromHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2009892208,
              "status": "passed"
            },
            "line": 32,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 29,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 29,
            "name": "@NotificationCenter_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 500167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "Verify User should be able to see the Notification screen texts",
        "description": "",
        "id": "verify-notification-center-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-notification-screen-texts",
        "after": [
          {
            "result": {
              "duration": 13709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 17917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 526279292,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${notification.msg}"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 34,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 34,
            "name": "@NotificationCenter_my"
          }
        ]
      }
    ],
    "name": "Verify Notification Center functionality on one pulse App",
    "description": "",
    "id": "verify-notification-center-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/NotificationCenter.feature",
    "tags": [
      {
        "line": 1,
        "name": "@NotificationCenter"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@notificationiOS"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 18500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1829125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 351833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7266277375,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 48153064209,
              "status": "passed"
            },
            "comments": [
              {
                "line": 6,
                "value": "#And Logout of pulse app if user is logged in"
              }
            ],
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23120687833,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3005672833,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1971394167,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 56875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 852334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 83333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 19489833,
              "status": "passed"
            },
            "line": 13,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3368981209,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 62201422209,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1558645917,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10007562208,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12526953583,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17576671500,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 84209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 46542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Verify My Challenges texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;verify-my-challenges-texts",
        "after": [
          {
            "result": {
              "duration": 16333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 19000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6367876625,
              "status": "passed"
            },
            "line": 24,
            "name": "I click on My Challenges tile on one pulse app",
            "match": {
              "location": "LoginSteps.myChallengesTile()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4043681792,
              "status": "passed"
            },
            "line": 25,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.challenges.text}"
                ],
                "line": 26
              },
              {
                "cells": [
                  "${do.not.have.challenges}"
                ],
                "line": 27
              },
              {
                "cells": [
                  "${challenge.getstarted}"
                ],
                "line": 28
              },
              {
                "comments": [
                  {
                    "line": 29,
                    "value": "#      | ${my.challenges.text}     |"
                  }
                ],
                "cells": [
                  "${do.not.have.challenges}"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10482331541,
              "status": "passed"
            },
            "comments": [
              {
                "line": 31,
                "value": "#      | ${challenge.getstarted}   |"
              }
            ],
            "line": 32,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${all.challenges.text}"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 34,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 22375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "Click on All challenges and and verify texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;click-on-all-challenges-and-and-verify-texts",
        "after": [
          {
            "result": {
              "duration": 55500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2203257625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 33630993125,
              "status": "passed"
            },
            "line": 36,
            "name": "I clicks on \"${all.challenges.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${all.challenges.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11297487834,
              "status": "passed"
            },
            "line": 37,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.challenges.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${all.challenges.text}"
                ],
                "line": 39
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18990489834,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNo Challenges text is displayed on page  expected [true] but found [false],\n\tWe will notify you for next Challenge. Meanwhile maintain good health. text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\n\tat ✽.And I verify following texts are displayed(features/home/mychallenges/PulseMyChallenges.feature:40)\n",
              "status": "failed"
            },
            "line": 40,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "comments": [
                  {
                    "line": 41,
                    "value": "#   | ${not.connected.wearable}  |"
                  }
                ],
                "cells": [
                  "${no.challenges.available}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${notify.challenge}"
                ],
                "line": 43
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 44,
            "name": "I clicks on \"${back.home}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${back.home}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify  My Challenges on One Pulse App",
    "description": "",
    "id": "verify--my-challenges-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/mychallenges/PulseMyChallenges.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_challenges"
      },
      {
        "line": 1,
        "name": "@pulse_sg"
      },
      {
        "line": 1,
        "name": "@pulse_regression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@pulse_my"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@my_challengesSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 2479000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2813959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 337458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2349833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7450681709,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 48239061917,
              "status": "passed"
            },
            "comments": [
              {
                "line": 6,
                "value": "#    And Logout of pulse app if user is logged in"
              }
            ],
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19704754375,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3019412334,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1831324833,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 94416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "User should be able to login on app with correct credentials using \"Continue with Gmail\"",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-gmail\"",
        "after": [
          {
            "result": {
              "duration": 180750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 958834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10064583,
              "status": "passed"
            },
            "line": 13,
            "name": "I assign \"${onepulse.login.global.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3462017750,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 62495105875,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1374037750,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10006259958,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13784393125,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17233536250,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 35791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 126250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\" and Verify the Mycommunities screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"-and-verify-the-mycommunities-screen",
        "after": [
          {
            "result": {
              "duration": 27625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 44000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6005679708,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 6 sec",
            "match": {
              "arguments": [
                {
                  "val": "6",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1159732916,
              "status": "passed"
            },
            "line": 25,
            "name": "I click the MyCommunities icon",
            "match": {
              "location": "MyCommunitiesSteps.clickMyCommunities()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6005162667,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 6 sec",
            "match": {
              "arguments": [
                {
                  "val": "6",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1092145666,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${icon.communities}"
                ],
                "line": 28
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10144896875,
              "status": "passed"
            },
            "line": 29,
            "name": "I verify the following texts \"All Communities\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "All Communities",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.communities.text}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${All.Communities.text}"
                ],
                "line": 31
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 3469833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 33,
        "name": "Leave the community if already joined",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;leave-the-community-if-already-joined",
        "after": [
          {
            "result": {
              "duration": 28750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 24041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27184073250,
              "status": "passed"
            },
            "line": 34,
            "name": "I clicks on \"${my.communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5005747917,
              "status": "passed"
            },
            "line": 35,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2214920625,
              "status": "passed"
            },
            "line": 36,
            "name": "I leave all joined communities by clicking on three dots menu icon on my My communities screen",
            "match": {
              "location": "MyCommunitiesSteps.leaveAllJoinedCommunities()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 37,
            "value": "#    When I click on joined community three dots menu icon"
          },
          {
            "line": 38,
            "value": "#    And I click on leave button for joined community"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 82792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 41,
        "name": "Verify the All Communities Post screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-all-communities-post-screen",
        "after": [
          {
            "result": {
              "duration": 62083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1701881334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5005342541,
              "status": "passed"
            },
            "line": 42,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27486266125,
              "status": "passed"
            },
            "line": 43,
            "name": "I clicks on \"${All.Communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${All.Communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4314766625,
              "status": "passed"
            },
            "line": 44,
            "name": "I click the Join button in Communties tab",
            "match": {
              "location": "MyCommunitiesSteps.Joinbuttons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13567075000,
              "status": "passed"
            },
            "line": 45,
            "name": "I click the static Active icon in community screen",
            "match": {
              "location": "MyCommunitiesSteps.StaryActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21372385375,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 42f44cc6-e879-45e2-9421-1c37d507a3f2\n*** Element info: {Using\u003dxpath, value\u003d}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.clickEditiconstayActive(MyCommunitiesScreen.java:544)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.clickEditiconstayActive(MyCommunitiesSteps.java:168)\n\tat ✽.And I click Edit icon in stay Active icon(features/home/mycommunities/PulseMyCommunities.feature:46)\n",
              "status": "failed"
            },
            "line": 46,
            "name": "I click Edit icon in stay Active icon",
            "match": {
              "location": "MyCommunitiesSteps.clickEditiconstayActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 47,
            "name": "Enter the post in community screen",
            "match": {
              "location": "MyCommunitiesSteps.enterNric(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "TEST1"
                ],
                "line": 48
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 49,
            "name": "Enter the post in community large text screen",
            "match": {
              "location": "MyCommunitiesSteps.enterlargeText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "welcome"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I click the Post icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.clickPostIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 52,
            "name": "I verify the following text \"TEST1\" in post Screen",
            "match": {
              "arguments": [
                {
                  "val": "TEST1",
                  "offset": 29
                }
              ],
              "location": "MyCommunitiesSteps.verifypostscreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "TEST1"
                ],
                "line": 53
              },
              {
                "cells": [
                  "welcome"
                ],
                "line": 54
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 345250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1451125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 56,
        "name": "Verify the Likes and comments counts in All communities tab",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-likes-and-comments-counts-in-all-communities-tab",
        "after": [
          {
            "result": {
              "duration": 170541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1345664583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8549350125,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 42f44cc6-e879-45e2-9421-1c37d507a3f2\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"TEST1 welcome\"])[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickFeeds(MyCommunitiesScreen.java:320)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.clickIcons(MyCommunitiesSteps.java:106)\n\tat ✽.And I click the Post icon in My communities(features/home/mycommunities/PulseMyCommunities.feature:57)\n",
              "status": "failed"
            },
            "line": 57,
            "name": "I click the Post icon in My communities",
            "match": {
              "location": "MyCommunitiesSteps.clickIcons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "I click the like button in Post screen",
            "match": {
              "location": "MyCommunitiesSteps.Clicklikesbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "Verify the like count in Post screen \" 1 Likes\" likes",
            "match": {
              "arguments": [
                {
                  "val": " 1 Likes",
                  "offset": 38
                }
              ],
              "location": "MyCommunitiesSteps.verifyLikescountInFeeds(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "I click the Comment icon in feed screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickCommentsbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "Enter the comments in Feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.FeedsComments(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Comments",
                  "TEST1"
                ],
                "line": 63
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 64,
            "name": "I click the submit icon in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickfeedssubmitbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 65,
            "name": "Verify the comments count in Feeds screen \" 0 Comments\" comments",
            "match": {
              "arguments": [
                {
                  "val": " 0 Comments",
                  "offset": 43
                }
              ],
              "location": "MyCommunitiesSteps.verifyCommentsscountInFeeds(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 750667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1206917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 67,
        "name": "Verify the Share with Friends Functionality in All communities tab",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-share-with-friends-functionality-in-all-communities-tab",
        "after": [
          {
            "result": {
              "duration": 48542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1431912375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13686405042,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 42f44cc6-e879-45e2-9421-1c37d507a3f2\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Share\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickShareIcon(MyCommunitiesScreen.java:566)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.ClickShareIcon(MyCommunitiesSteps.java:173)\n\tat ✽.And I click the share icon in Post screen(features/home/mycommunities/PulseMyCommunities.feature:68)\n",
              "status": "failed"
            },
            "line": 68,
            "name": "I click the share icon in Post screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickShareIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "Verify the pop up in \"Share with Friends\"",
            "match": {
              "arguments": [
                {
                  "val": "Share with Friends",
                  "offset": 22
                }
              ],
              "location": "MyCommunitiesSteps.VerifySharewithFriends(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 70,
            "name": "I click the phone icon in share with friends",
            "match": {
              "location": "MyCommunitiesSteps.clickPhoneIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 71,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 289708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 719375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 74,
        "name": "Verify the Post Functionality in All communities",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-post-functionality-in-all-communities",
        "after": [
          {
            "result": {
              "duration": 692083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1569341458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16406914000,
              "status": "passed"
            },
            "line": 75,
            "name": "I click skip button in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.clickSkipbutton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2018499334,
              "status": "passed"
            },
            "line": 76,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17577516125,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 42f44cc6-e879-45e2-9421-1c37d507a3f2\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Dance for Wellness\"])[2]/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.Clickstaricon(MyCommunitiesScreen.java:479)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.Clickstarutton(MyCommunitiesSteps.java:153)\n\tat ✽.And I click the Back icon in Stay Active screen(features/home/mycommunities/PulseMyCommunities.feature:77)\n",
              "status": "failed"
            },
            "line": 77,
            "name": "I click the Back icon in Stay Active screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickstarutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 78,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 79,
            "name": "I click Edit icon in stay Active icon",
            "match": {
              "location": "MyCommunitiesSteps.clickEditiconstayActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 80,
            "name": "I click the Camera icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickCameraIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "I click the Upload Image icon",
            "match": {
              "location": "MyCommunitiesSteps.clickUploadIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 82,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 83,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 84,
            "name": "Enter the post in community screen",
            "match": {
              "location": "MyCommunitiesSteps.enterNric(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "TEST1"
                ],
                "line": 85
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 86,
            "name": "Enter the post in community large text screen",
            "match": {
              "location": "MyCommunitiesSteps.enterlargeText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "welcome"
                ],
                "line": 87
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 88,
            "name": "I click the Post icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.clickPostIcon()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 708459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 706000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 90,
        "name": "Verify the Category list and search feature",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-category-list-and-search-feature",
        "after": [
          {
            "result": {
              "duration": 6485959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1453681250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15009190833,
              "status": "passed"
            },
            "comments": [
              {
                "line": 91,
                "value": "#   And I click the Back icon in Stay Active screen"
              }
            ],
            "line": 92,
            "name": "I wait for 15 sec",
            "match": {
              "arguments": [
                {
                  "val": "15",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 33826067750,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 42f44cc6-e879-45e2-9421-1c37d507a3f2\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Category\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1730)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:534)\n\tat ✽.And I clicks on \"${category.text}\" in app screen(features/home/mycommunities/PulseMyCommunities.feature:93)\n",
              "status": "failed"
            },
            "line": 93,
            "name": "I clicks on \"${category.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${category.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 94,
            "name": "I verify the following texts \"Category\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Category",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "COVID-19"
                ],
                "line": 95
              },
              {
                "cells": [
                  "Fitness"
                ],
                "line": 96
              },
              {
                "cells": [
                  "Global Awareness Days"
                ],
                "line": 97
              },
              {
                "cells": [
                  "Mental Health"
                ],
                "line": 98
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 99,
            "name": "I clicks on \"${no.post.category}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${no.post.category}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 100,
            "name": "I clicks on \"${apply.button}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${apply.button}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 101,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${no.post.found.text}"
                ],
                "line": 102
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 235167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 3126750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 104,
        "name": "User navigates back to the community screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-navigates-back-to-the-community-screen",
        "after": [
          {
            "result": {
              "duration": 36375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1412051084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 17849203000,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 42f44cc6-e879-45e2-9421-1c37d507a3f2\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Dance for Wellness\"])[2]/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.Clickstaricon(MyCommunitiesScreen.java:479)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.Clickstarutton(MyCommunitiesSteps.java:153)\n\tat ✽.And I click the Back icon in Stay Active screen(features/home/mycommunities/PulseMyCommunities.feature:105)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALkAAAGQCAIAAAB9G1ZBAACAAElEQVR4XuydBVgc19rHg7u7u7O+rLDLYou7O4u7u1tCEiAhgRgkQJxACESwQFyJEOLepHEj0iSNS793d1uSQpvy3fb2u1/v8vyfeWbPnJk5c85v/u97ZoUZj1WRHHH0x1JDzJhcxBFHv6UnqhxWOJqeOKxwNF1xWOFouuKwwtF09eTP57bjTOImFzKlxtqq9rMmb+Xo3yIEu6t/p8NRLH0pAatg7YKYUvM39GdZuaeJu27tfhNBmSgBdG6amt9x9runTXiggbuKNL+KYuq2Pn7q7hz9hWL2vBHxrmfIHbeA2/qErzc9VEM+INDHaR6PmHJ/iKFBtYcEu3Er10cWzuMG5KlHm6o/xcpdLeyTA4ffbNjy+vzFJ56hd4n2404Bt2w8X527/GN795uTZx6Y2b7dNvi2d/DN1e9ezVow9Qgc/VW6gaLd27Dpw6vXn+8+/Pzg4ccXL542rX7wCzFPLD06kpzLK+3Kquhr422vZxfebFpcWmFXVukw5GHx3DFwXAvz86HUvtKvT/EHrDxS+12Byz3UNXviHzWujr3dvPJ5eunDgJiXxbPH6T7PnALva6BfXrv+CGE1rmZ6Wwv74uSZpziHn0/592rqRf0j9ais5u3mwVteobfT8u4l5973ini759CLuMzHzCiDfGzl4dLjgT0dQj8UdDAn/sPrH4+EhyzLdSUe989e4TGOt38C7sIOT79m5ded+U1WfrXnJDEroO5roJ4O7Xxz7uIDot0jNdQTFaYTPlBH3Jy34O2KjicqKDjBrazC1yvaf24K65R/pyZf0T9U42qo2y5B758/f7t/5PWxEx/Gx5+SnR6r/uIWlh7Omz0wp0PWZru/vnn7pw8fP3/6dLZuFumwb/Zyd2DlZVjiU1MLZs2vhngi1/w54wRfGVdBgL46MTsD+kMh75pS73hHjauh72UXvVqz8fuQmGcl1UDMjVm17zZsfqiBhTp3dPAvL5x/jKc/VvuZlSnH+bdqcp/+P9UjA/PHusRxbfy4ofkjdcy4icVjdSysj+uYMSuwhvahBnrcwf/e3PrHJdXjtl5P1NAsoZiy9nbf5IY+E+K51bclhf6wf/BBR4d7lzP6jH/eMtfHBMcf8A4P1ZlATI0ev2LlkQqKKWgQS0DoF03u+i9i+ocB8fWJ0483bnlx4dLzqIxxgv0PzsE3wxI+v33/rHf4yZaBpySXO7mlr5vWPIJM+/9IT6aU/H/UMyu3F0SnJ1j6K3u/cX3yC+eAJ/qUF7Y+zzH0rwfloSb2xdaBtys2sF6iJ/SM7HAyxKc307cv0++gv/ur4T1nXRx6Mzx6M7wuuTo+cw16rI6G2dBUfd0GeDnjxobum0z1sHWrY/MXbdh8+1vqudnVe3/05O2hPVDzVkf37c7uG5v7r+/Ye33n3ms799zu2nqjb8et7t47G7rubtgEusNUz9+n9m7WGf+fq73nVufmW53dNzu7b2/sudGx6c7GzTc7Nt3euPlOx+Y7G0BbJnSraysUMken44tuwUH6tj/Ysefhjn23h3ff277j0c69bD0Y3nW7awsM5Z2O7jsdUzqw44tudfTMePP+I0cc/aHefvjAYYWjaYnDCkfTFYcVjqYrDiscTVccVjj6orew/AArH6ZuYm7lsPIP06Mnz8ZOnxl/+mzqpj/Uu9v3XrR0vL37gAnNFHFY+efo9bsPl65e27V338fPn/ceODj+9Iepdb6ht+8+vEwtHk/Of5JV8u9i5bvvb4ydPvvjm3dTN/3Levr85fMfX0+8fDD+eGodjr7W42fP9+w/eHDkSO/g9tv37nVv2XLg8MjJM+em1vxNvfvx9bPcytv55eNtax7mlD8tn/v27ZtJdb7Fyu17Dxqbml+9++3oBXr19h0jMopANvfw9gkOC59a4V9Wzbz5K9esvXbj1vYdu4BCSxvbh4+fTq3GEVsvX7/dd/AQ6M6DB29OXbjetu7HJ8+Oj50cOTZ69sLFqfUn68PHVwtW3Ovufc16CabyalXn0+WrJlX7XVYAlLSc/K3bh36p92lqnS29/VY2tq/evn/Dai6ouaW1omoWjPEPL39cuWbd7Lm1mzZvWbysGcqhTnNL24LGRavWrlu9dv2ChkUAQfeWrXCi42OnRo4d373vwPqOjRUzZ924fffAoRG41PTMbDKFOrxzd0vbqtfv3l+88l1ZRdXG7h441NDOXbB+4tTpqa36LxT0w6EjR8Fa3u08cKOk5nFP/8OUotcfPh45PgpO8+LVZIeYpHdvPz4IS3777ks1iBEPGClvPjBHdkK/zcqDx09TsnLj0rKWtq5ma1nrqgdT7uza+fWFJaUTL6tmzY6JTwAUsGaEO/cfyskrbOzeLC0rt2x5C55ABD8Ul5Ra39GppaNbPbfG3sl5a9+Ap7fvsRNji5YsAyPJKywKDY/IzS/IzMkDYpqWt9TVL3B2dTt19ryxKQI6Ak8kASL2jk7QBSpq6m2r10Lsm9r4/zY9GH+ypbcPTAXWn1bNf3v/4YfXb19U1j5/9BTieHvnRvamb+jtmw+PItLffPwSQMBabkemvZ0OKz/8+Lpybl18es7Arr1Dew6wtP/py1eTqm0f3onFmz178SOsQ1YVHBrWN7Ad3EJLVw+shWJBg3ITBPLJDy+iYmL3HxoBSqCEZmVz4fLV0orKNevavX39Dhw+UlM3n80KcLZzz97I6FhgBaxox+49MXEJsAuwcuP2HTkFxeS09ITk1MNHj4NdOTq7ZubkTm38f5uOjo5++umno8dH371599zW9wmO/sQ+8LkO4Wn3wOlz58Hg79x/AL03dccJvXv77kFUKmu2/EvJ+093otIBjq+r/TYroGcvX1XOnbdoeesrSLAhALH16zqQeBcUlRiamJpTLVzdPYAGDA5PIJErZ866/+gxzdoG6iDRGGAlNj4BturqG0CJtS0dokl51cx17R0QiUyRKHMLGlhIQXHJmvXtkMbHxMVXVc9e0bry4pWrgBdAg0ChIcDl5BcAWzZ29pDh+/oHunl4llVWTW35f5sgAF24fBn67f2r1z8YWdylub/ftO25osm9xhUQzQ+NHBk5egxceeqObL17+fpZZc3NvMqvWXnz/tOj7PJns+a/efNlhvG7rIB+ePlqaPe+1+8//fookwXtuPvg0WtWCgyhEchgl7PzGPb8CNahAnudvYSX7F1gd/ZW9nKiMnsdjgbHnJhkQeUf37xlH+Qb1//fJkhKDoyMvHz+/AeEzbi62SvfmOcKJveaVo6ePL1n/4Fvd9Trw6MPK2vf//gaOp2l9z/3/o9vXxfPeXz0xETNb7HC0f8XQaDZd/Dw3v0H7o2OPd574N7wnoc7958eHYXEbvTkqan1vxb4yuPi6ocxGY+i0h4T7O/FpD8iON6PToeV2+VzXr36knhwWPmHCKwdctjDR49tHxq6cOFC/0D/4SMjwMrUmr+hDyy9e/8sv+pJXM6Noup37z5ByvL2/a+yDg4r/xxBSge5y74DB3766af9B/bfvH17ap1vi/no9tmLN+8+vGWSwXp76OutHFb+Ybp97/6Zc+fu3Ls/ddP/SlMf83NY4Wi64rDC0XTFYYWj6YrDCkfTFYcVjqYrDiscTVccVjiarjiscDRdcVjhaLrisMLRdMVhhaPpisMKR9MVhxWOpisOKxxNVxxWOJqu/j5WWB+//d2vpU1fcJyJD5A++eHFy9fMj9/+h+vKte/vPxo/cerM11+m/OEl8/sPf5X6tw9PfA9o74GDdx88mlrnT+qvYWX05Glo3xvWJ66XNq94/e5X3yt5w2r9zj37tvb1X7txa+ru/yv98PIVHOT8pSvjT3+4cfvutz94/H+oH9+8M7eg1TcsgvWq6tn924e8fP2+v8X8rBq038nVzS8wyD8oeOKj7H9Sa9ZvePbix4Likjv3H27rH/j+1re+5PGv6a9h5fjYyY3dPQDKhctXl7e2QUPPXrgEvXB0lPkpcLiZBoZ2vGF1343bd65cuz60c9fA0DCMOuy1fcdO9ssLl6/s2L1n38FDgNSe/Qeg8Or174GG8afP4I4cHN6598ChvsHtT354fuzEya6ezfsOHj519jzcr7DLzj17gVc4+669+/7wq1N/j3bv25+Zk+vq4QlG+Asr/mxWqufWwh319sMnuHy46qLSssCQ0Ijo2KfPX1jZ0sMiIkPCGbCMiU/o3NTtGxBId3DMzMmzc3SCl2WVVbv27l+1dl3LytUp6RlxiUk0a+b3rbz9/Hfs3ovEYOFo6VnZh44chZPCQZJS02/fu+/jHxgeGQWdPLWd09dfxgro3MVLw7t2Dw7vACaGd+05cnz0wfiTN6wvauzed2Cicu/AICzBGE6fOw/OCZUBCwglMMz9rK/EwhEAO7iwi1euXrtx8+HjpyPHRnsHtsMmgOn+o8cHR46MHDsOK3BS6P0169uBG+jHM+cvbt+xC3aZ2sK/XxnZOTBaMMwA+iRWcvILurdsBVbgbgEzoNAsX719FxQaBj1maWML3QUlcIOBLcGlVcys7tzUU1pRCW4BtpGTXwjd1dzSuqSpOTImDm4boAeYs3dyht4Gu7p+8zZANrRztykKXTFzFsB37MSYi7tHSXnFuYuXp7Zz+vrLWIEAuaW3D4YQfALupAOHR2CFvRUGftPmLU+fvwTvHT15Cnh69OQZjDfrq+07gRUgAHYBVoAP6EGo8IZFzNXrzF9ggJvm8NHj7HsC/OPBOJMVcCywKDjvrbv3wYcgVEO1776/AWeBYZjawr9ZMNJUS6sNG7vgLp85e84EKzCQb1h3C9gA3E4wwCfPnLWwsoahhUEFH7W1dwB6rOl2cPNAObBSPbdm0+atlbOq+waH8ouKgYxZc+bGJyWzWIkFZ4VNHV3dcCi4qcDGwHqBFXA1KIEuXbhoMdyWTStaZs2pySssntrU6euvYQVcDjI1GFroI7hggOPyd9cB+YkKcK9AynLk+AlgAuocOnKMxfgHSPqg8nffM50A0IG93rB+pOMNMx+8DpvAUcAtbt65BzVZm27CvQiUABMAyu17D6BnYQnhCWwGMpgDh49AA6a28G8WNBgGGFagVeAK+w8dhkuDG2biN1EgKNfVL4TWvmFZLIwo9AncNu2dG4GSte0dcO2QggAKUAcqgHHCEYCAW3fvNS5ZCuRB927rH4RbFA4OEb+9swt6Bm4t8BjABaC8dPVaw+KlcNNCn3d0bVq8rPlPJrx/DSuTBI2DW3/qL7JM/NjCb/7qwm8WcvSfo38LKxz9I8VhhaPpisMKR9MVh5VpiPkzEf+NudTb9x++/mknDit/rHev3t4vmPcof85/mh7mz3lQ8G/V7MfD+yf6gcPKH+v9yzfHVLBjSpiT/2EaU4JW4f6dwl6Zt3SiHziscDRdcVj5R+nth09/oaYcnMMKR9MThxWOpisOKxxNVxxWOJqu2Kx84ug/SxM/KPw365unZrJigsD+G4RjaWo5R78rBAqPwhDQeBKGYI4jUc3MaQSKJZFqZW5pS7Gi02wdbBxd7F09nDy8Xb39XLx8vQKCfYJC/ULCgxhRoVGxYdFxoPCYhKiElIS0rKSMnNyiqvSckrTs4sy8spTMwtTs4pSsovjU3LiU7KiEjKj49NikrLjkbFBEbGpoZGIwIx4UFB4XFpUEJbCEwoDQGJBvUGRKZt4MYyT2rxIGR4JrhiUSbfalF6ZU42iSTFA4WJqi8UgskxUswRxPouLJFoALycIaBKxY2NizWbFzcQdcHNw8PfwCgRXf4DBgJSQyJpgBgxoVEBrJiEmKT8lKSs/NLihLyy7MzCtJzshPzshLysyLT89JyMiNSEgNi00Kj01ixKfEJGdGJqaFRiUEhccEhkWHRMSFRyeFxSQFRyWCAsOBEoZfSCSspGbl/jWsYLBEItECj8MT8CRLSzqRbPEFlymVOfpNTbCCMSMzcfmFFba1ACtW9k7ACttanD19QG4+/t6BIYCLfyjDJzDMLzgChhxYiUlMBziy8kuBldSsAlgHelIy8+OSMwEIL/9QOycPe2dPd68AvyBGGIDCiA1mxIZHJ4ZGxgMugYwYH+AjIt4/PBYUEs1EJy2n6C9gBWigWdhaW9o40q0dqAQ8FmtuTiNTLNFYIoeVaQqsZRIr7DAEoAAuZJoNmxW6sxu4i6O7F4ACYcjdNwBYAVCYkSg8KpgRDdwER8RExSfHJKWl5zJNBXCJS8vy9A8wRiLFJCUlpOWFRaT5hUT4BIT5+YWFBITlpeRMTTFOrt4RsclAEhAD3HgFhvmHRfmHRvkGR8AyICw6MT3nz7OCs6GSIz2dPO1o2aEuXfNyQulElKkRBoPD4DisTFcTrKBwxAlWwFq+ZsWS7mjr5AoxCAIQuAsbF4hEkLgALsER0eyshRGbAMuYpFRIWRLSssMi4/WMjfhF+QQluZAWol6heJKdemqRr60bRlREQpxfWJxPUJSHuV1X18jR1Rt8BfzJPyQyIDQa0IEVeAnRDfzpz7OCzY/13dZQtGtt45Wd7Yc3Lty1OC3ZGauvpWJiivj/BQp7tKaW/6ZMUFgzsoUJy1bZmlpn+vqaFXZ6yw5D7PQWcIEwRLW2s7RzBGthpyxsSsBIQIHhkezcFnAJj4kHXCLiEmOT0+nO7mKSsmIKglnLJOZslVkyLLSszXNsuOfaoYPXju1Li7OPVBVebCDkIy0oxMMryCckISlLodG9/EN8AsPBTvwhiYmIC4qID2TE5RRV/O9YgeuhWdNt7Zy8/YNCwqOQGLOQoMCRba0Xh9tuj2w+2DZzcbLXniXJqwv80LoqeobGxij01IP83wpHpKzdsLF9Y3dZZTUCY8bOK9kKj4rr275j6i5fa/Gy5Z3dmzs39fj4B925/4BCs7am2zu6uJkg0CZIzNT609QkVpi+QqSwM1zAhc2KlZ0TBCBghT0VggAE8vQPAlMBVgLCIiDDBU24iyXdgV9EVFFX3M7fmFEq37BDtnlAYc0Gz5Nnas6enXf52KbLDTPHvFVvm/B/jxNDy0uLC0uIiUqIiksSqTQ4LCTOEIzYOS+spGb/b3zFPzhkcKDv0fdXH147e+fy2OiJ07u6Wq8f6Lh1sPP7nW1X+xu/29Z0c3/H6kLfTD8awsTUBAmggP71Hvx3iGxhOf7sB5hRXrt+PTYxJa+w1NLW3sXDJzE1My4p5dDRoxACymfOnrewke7oQrOxm1u3IKegGKhi7375u2sHDx2ev2Chs5vn+o6N1nSHfYcOjZ48GRIe8Zew8qv09tesWNs7QwyCAARiJyswomAqQAmbFbbHQO4CSxsHZwFhESVDsZ1jLReutw0cDl83Irv+sGxKvoKFs5JnkkHKXGrvluKulojWNIORAKWKBG9NPUkJKVFhMTFRSWka3cEvhAGggCAARcalZBaUTosVEyQuOz/r9pWx8etnnt448/jq0Sv7OrZv6TrSvfDS1tqRlrwzXbMOrMjbt7j0VEf14dXFjEDPP+nJ/z4BK49/+KGwtOzmrVuM6NjzFy8HhjByi0q279wF6Bw+diwpPfPG7dtFJWWOzm6HjowsXLT00JGjWXmF7N2BlbNnz69cvSY4lPHh82dGVOyD8fHjJ8b+Qla+pCwsa4EMF/IVmDZbOzizAxAkK5DewiQI3IUNBxuXCW4g4ZWWV+DlF/COJt+423X9TvPRsbTdw8697hLrqEqpNGGqp4wymdctwXjNUv/+vti5sabHjhYcvBbb1J4vKiUGkMmrqNu7enoHMOdWkLJAwpuZXzItVsIYYTfOHbh7eujWif47J/senh26caT7YM+KPe3zjrdmbC3zObA8+8KW+q0FsetzPfMTAhAo3H8yK89evlzX0ZmWlWuKxl64dDkolFFcVjn8CytECm1Lb9/3t26HMaLuPXowtHN3//bhrLwi9u5MXxkZqa6pDQwNA1Yg/Jy7eKFl5ao/H4PAukBfs8IGhc0KiGrDzFeAGPaDFshtwVrYj+OAD3ZuG5WQDNEHgcULi4nz8gtSXTS+u7vp7NUlF682vlwSeMtLqaOKODZae2rPgpQUD4qtbGG4cf96v559jtkrpZqPyl64k+cZixKXlwRcjBBYO2dPD99gmGODu6TlFv4xK0SK5cHdW++c6P1u/5qLg40XtjfcOrT2ztGOE9sae9tqNhW4tqfYLktw2tmQumtpbk1hGhrLerIy5Tj/IQJWHjx+bE6zZMVH9O69+3r7B48cG2Wxknz46LHA0PDZNbUnTp0uq5w1OLSjo6u7Zl69pw/MOZkXdeW7aw2LlkBg9Q0MBlbsHJ33Hzp06+7d4rKKv5AVNIsV6Hr2VAhAYee2gIuFrT24C7ACYQhwgQx34hELEAP5iodvoJiUrLCIuIG2lqGJ4IoFvldOLezfV9FfR7neZntwf97dCysudjedqAu+Xer0Ynn6zXlRLT0GHlV8jccE+89E5sz3SCj2ExQVllNSpVjZuXoFsN0lIS3rj1mZX7/gxsn+G0faL+5cdHpr9VhPxYXtC28fXv/dnhXbVszpyHRanmAzKy9lQVrA9iU514717erbFBMZbYr8kjP+RwmFI8Qnp8GSlUhhICPJzit09YAOD7ewpodGRFOsbHPyixKgDpYAU53ktMz07DwC2cKYxUp0XKKLu7cx6xZKzczGEsi2Dk65hcUOLu5TzzV9TWYFT2LiQqSwH7EwTcXaDnIImDkDLuArkLJAhsvOWtgP+9kCXNBmJCFhCTt760A3vfVOGjdzvR/t2LZ3WfXQUFZZnf3W/pA9e9z2dpSllyt1NJhfDNXamay+86BvbJ50RpGee6SmvpNMYVOYsIS4mJQctMqS7uzi6e/mHRgRn/wHrIQwovfs2Xt9tPvq3ubRjUW7mlPP99ec65t7ZefSmwdWD6+qHa6PaS4Mnl9bs2p26sHW7NHumVcOrr05NrSwZg4GRzJG/eu32n+V2PnKJFYm3hhiP7oFVmi2DuArlnTHiTeGIL39mhVYV1LTMDEiOAdoN9pqP5oX87w18Xpdyq7yxK21jDWbQhNrlPZf9N7Qk+IxRy56kUVPI3VPjGl3sva8Ns28HHqIPQXnJ49x1xAWlxSVkNXSM8KTLAAXJ3ffyPiUb7ECLe7a3Ldq3Ybdm1tP9s4ZWZvVlO441Jx9Y2/LrYNr7h1q/35P68DC9JqS3EVLlm5cWnaoNXPHgqiRNZnnB+d9f2LbgaGe4oIcBycnBHrykTmaJDYrbH15yvIVLhRr5tuHzCdydo4ADdtX2DNnSHLZbwxB4uLq4y8nq+Dq4urvjx7yc7g9K+DtQMvJ9oDUTLxVmFrZEmrriFb1Gl2sq7T3Us3ERrdYnFSOu1qZj3zfYMGtx7uSI50tMRoYgqSsopq4pJy6lr4REke2sqM7eUR+21eCw6M3dG2pnbdg5qxZ86vLG+eWLqjKn5MbfWXX8nvHeh4fbutaXGpr49jQsGBudVVtXkSCl0VliGX/7KDj7WVX96+5d2rw8ZWRh9dOjh4c3Lh+xYLaiqiIUDyRbMQMT3+f35igmJpa/nWFqYUwThPrMHITc+apMkXjfvMIsIulrcPU8t/UBCuTIhGwwn5XCHyFaS22DmAq7If9gAvMhthhCHCBJeQuNo6uEhJSdGsXZ2PStqTK4zn1nTY2ubF6vnlo73xrmzhExTbV7GbZgFli6BRBPI0vHqsbzbBZ0KFxfXzeoxfHmmaHnIh17QyzIpN15CUVNLT0tQ1MzSjW1vau4bGJ32Jldu38Fa3rGhetmDVrdmlpeUVJSVlRfn5mytDKkuv7V1/c3lKVFK1pQAwMCiVbUBEoZkqLwWKi3cmr8jyH6uOOrCs/P7j4xuGOe6e33z+z49apofvnd188sXNpw1xPL4/f7N+/XDCQ6zo3Ll+50tHN05g1JLBMSMmAUWFXyMjOW9feaYxgsgtbQfHJGbBMTM2ceEzn5Rdk5+SWlJY1cQS2yBbW6zs3NrW0xienTuw+sUKxtG1d3c5qw8/n+oa+jkFfP5HDsJ7e/vzc1saOyYodkxU2KJDbgruwDYb9GNfSzkFMXEpRTiMqxe3Cze6D55Zl5Rs4JajbZiH9a5xyV8RahEkxcsRdg1R0zHisdESSIzyzanwaupUvjUcNj80OCtW4mUp9Bje9hrqYoJiOjqG2gYmZuRVMhb7FCrR1w6bNS5a1zaqeX1paUVJcmp+TnZWekhwfkR7jF+7taGpsrKut6+keoGVoZkay+PKBFSQWh8O72pLTQmwbc7y6a6P3tOWd37HszmjX9cPrbx7vvn9u+N7F/Vs7W0PDQr9xv/4lQmDwgzt3wpwFRqJ1zdqW1WsycvKOjZ3KyMlnV1i3YWPrqrUWlrYzZ9c2rWhLSEobO3U2jBG9el37oqXNjs5uK1evr6iqTs3IHjt9LiMrd3V7p52za8OSZbDv7Lr68Kg4GwcnSJCT0zNbVq9d19mFI1Jm19b3Dm6HnHfl2vbGZc2Lli13dvea2rav9XusTKS37GQFxH63me0rE6CwWYElhCpJGTkRcYnSReFX7vXeHe9fviUlZxnJIkHXr9zRJYOEMpe0QshXMOKWMgqKPKwi8qgjl9va95lt3GNHDJZz9Ze7Vxt6pzTABYMT4xcGVtBYohnZEibP32LFwtquY9NWYKWsfHZubmFycnpqcnJCbFQ0I8jXwwmNNDHS1Yhyo+6YmxDiZlecEjF1ngyxBswDhzejmJMCvezrC0OGmtNG1mSf6qk8t73+Bky8R7ce7FtdU1no5uqKwuCRaPyfmXb+nswtbVaua0/JyD46drJuwcKcwuKuzVuBIdgEbnHyzLnhXXvLK6s3b+tHwVCh8Zs2b0OgsDBV9vT2a1i8bPW6DflFpYyomJ6tfaZIzIrWVUuXr/AOCILd6xYs8g9mJKZm9PT2r93QiSOSAZeYhCSAY9eevV6+AcAKIzpu05Zedx+/qQ37WpNYmSCGzcpEDGK+JcSKQbZOruArExkuiO0xNFt7WUUlKVnZ5HLPszc6rtzbvLy3SC2E17XQNAavtDSdUL8JmblapLAB2ZOxaIF/vpuzzrKeiI6h6PBMA78iXcckrXY34zqstp6spiCfIMQgSFnAVyBfCYtJ+F1WAkMj1rR3zqlZmJtfkZWVn5qaHhcTGxIY4OHmEhTg5+XuMj/V62RXxaXOisur01tqizHYbzstkwMCwczX2bIw1rUxx7elxG99VdBAQ+KxjdWXdq8d29l1Ys/WLeub66oK6XT6lN3/RcGt2bZm/aYt2wJDGa2r1y5cvCQgNKy5dWVZVTVsnTW3LiAoFIsndvVsmVtX37JyTVAIY2vfYGx8MvgKEo3bsWtveGRMdl5BWERUV8/WtMwc38CQg0ePslGztnPa2j+0vG3V6vaO2MRkIHJDV09CSlpH9+b+oWEPb7/m1lW5hSWr12+IS2IGqW9oUr4C+tlaiBTIbdlvH4KYc+ZfcIGZs52LO/tTCoAOmxVLuoOymrqcooKqvtyO0fnnx5cs3m2hyxA0iBS3IYulVIgVbRAOXc7lVSI2MyfVl2aQYItPKtZz8VTU0pbSpQvY5WikZZmpSctICEqICUmZMkMqBgunt3MJjYr7XVYycgrbVm+YU7MgI6sgKSkjJTU7IjIuKDDUzcXN29sfb0Yl4nErM3xOri28sKX66u412ztXBPl5Q35gzHQUjNHvOAS7HBzIFIVBYnBgOzRzs9xw58NtRUdXFw0tyVzfkFxfCQHiL3s8A53OfpoCJocxI8ESGgnDYMzKJJheiMAgWCsYPMkUhUVizVBYApRMlEOhKfP5B96MRK2onl1YWjFxcDgCZMHM46CYT25Yl4+Bg7MSXhyCNfbw8g+Ts6msINmfkWO/g/jLzJliaWNt72Rl5whMsN9HtHZwhhIbBxgVf7qTG5Tr6BvKKysrqsrWb8RtOoNedkgtabmUlrOQf6lCfad50UqN1uMyDmnSEfGuvoYyNZEmLRu980oxs2cF1lSl5RbhD51fSHXV5+cX1tdHyyoqq2npEilWNFtH3xDG77Iyp27hita1NXUNuYVlsQmpCXFJM0vL8rLSGGExicl5aBxENHsbc6uu4uCx1bkXttReHV52ec+a9uX1kWFBRVkppXkZpdmpEaFB7Fvw2wLL8XKk5US4VCe4HtlTc/jwoCXdfmq1/3PB+EH0mU6u+r8Vk2AMDoHFMZdfPen/+d1mEpVgTjOnWVOtbMkWVrC0AlYcnKwdnGwdXWwgJDk42zm5gsDqEBicgooq3CC7zuSl1CBaDxjUbqQqWvLG1ykVBBurqvK6ZfLbRwg5RSITqXJF6+mdBx03HDVYvEO+fcC/o61675l5Ubm2vAKixqYYEQkpdW09Oyd3K7pzICP6t1kBzOc3LF24qDm/oDwuPqN+7uyro/ueXDry+OrI0vpafUM7Q6QrAuODJQbbkGw6i6N218UeXJq4f0nCsTUFF4dbL+3quHRo4PaxwbGtzT3Ns+3t6AiW37D0u4ZhgsIjkNioSPP1nZl19fOnVvh1ZVxcUho0khEdP1GIxhNIVKuplf8FQboGp4hNTIVBMmaN5dQ6vymajX1eUelXJRgYXRh49vrU+jXzFxaWVaRkZhJpFmRrGoKIMcUw59uwC1g/01HIFmxciBRLOBQIoLGwptOdnO1dXCHRpoPBsATQAEM4ormqhqaCgrJPhKl7pmTKQjUyXTLKVXIwEnupJK7Uz3r5NvPYZHV3vEStH9mnXCNvjdSCXdJlXaoB6QqtC+dVNwSoaMvLK6nJK6qKS8roG5nCqR1dvaJ+7/kKNLRhyfJ5C5bmF8yprZh5c3THtb2rL+9ZdfP4tnsX9i+YO8faxtfQlK6lR9IxtNTTJbhTzetiHTqLfXpnhw7Wxw0sTNlQm3F6U8P2BQnX9645v7t9sH3RioUz01PiHBzsvuk0uJQs+wVLvLZs2/hL//62ImMTlzS3kC2Y3QfjWt+4NDk9u6xq5ubefpiswjDnFZXNW7i4sLSycdlydx9/F0/fhiVNMQkpjq6eReVV0fGJhSWldfUL4MaFo9EdXRcsWgZzaRiP+Q1LktNz9hw8VD6zOiktE3JVJzdPmEl5+vpXzp47c24tK6JhPXwCFy5uCo2ICWFEl1bOqq1vgOsqraxesGgpCCpY2trDdCk1M2fT1l5onq2Dy/zGRSkZWenZ+XDS1MxcWMJ5x86eDY2IyswrWLpixap16zBEMwMTUzYrcEXp2QXMmbMZmUwjEylUuFgS9WdiLG3t6I7O9s5ujjAtgtyF5SvACsHcQtfQWFpeXkicX0JG2NHUsNZUeZgmfjeWOM8KsS179sb+uHA7raVUnXRbJXkyLzlUaMFWnYxGXby5bnVeg7CQgLS0LAKFExASk5ZV0DNCQJ/ADRAWGfO7rMDlLVy8OppRODa4cmxjzdiq4stbF32/a+Wtg533Rvu+G+mNYUTq6FsaIpz0jenaeuY6egQqCrky13thFL0sgLIiw2VvU+aloabrB9ZfP9oNkN083ntrdODa0YHtm9rSUxIIRDJ71vPL7An8Bke2Mlu0wq+2zrmrayUK963pdG19PYwfDFLj0qalK1pharrnwKG0rByYErMyEvzgjt3g1XsPHXJ291y6vAUGDHq5Z1tfbFLKoqZmd2/f/QcPre/ohPkRHA0GEtjatX9/RfWciJgEjJn5xp4tMK9pamkLjYhe3Lyibe16GPW+oR1b+wf9g8NgFxdPHwBx28DgrLk1kNi2rFoNvbli1RqfgOAFzDcXYXLA2LCpx9nDa1lLm429M4xiblHJ3kMjKRmZmXl5XVu2sR7DYDds2oQxI67t6CqvmukXGKRvZGxoip4IQ0B/MIOBI5uZUTFYAkxfwV2YwQgEvuLo6gZeYm3nCAeHJRADgMK6KRqrrK4pIiHOxyvgbORN19UMN5D11JCbHxE/srRt0+7MXA+Jq/OdZoUbVzT6MHLVqpvI0bk20SE5ZihLcUlZAFNCQlpSRlZFXRNIBaDhbvQPDv9tVnAESlFRo4VleHJ0xsj6WTsWxgzPCT7YEHd4UcLBxcmja0vP9y07vLnJ3jbAwNjBEOFoYGqnZ2Rlb2E9sCB5y+yYbbNjhhoSD68pPLu55lxv3fn+hguDS68d7Lw5OnD75PCt07tvnNw5urunsW6mp4cHGvwDBU5jZmvn0LQyu21t0Kw57h0dq79t+3Avtq1d5+7tB3OcmvqFYPswNuAWc+fVo/FEGIZNm3thpbNniznNqql15ap17T4BQVsHBqMTkvKKS6GLe7ZuCwwJtbBizrlgUOOT03bu21dYWl5QUg7otG/c5OblAztCKgBbAQKYAa1avyGYEWnGfB8RA5QAItsGB2fOnevlF7Bw8dIQRtSGru6ElHSYbcExYTjDo2I39w0sWtYMm1au25CYlgFAYwlkMC2g3JgV2n5hZWN+cUlaZhbrA2I/p7rQyLkLamneWJq3CZqIwZHM8SQK2AZAD0sixYJqZQOIgAARNjQuHt5wXjiFtr6hnJKKoKiYgSyK4Z6urW4YTHZeXVO3e29zgKfmbBuJS3OscqyUVrbnbBgoq2mJdwqg6uoYKyqpk8wtxSWkxSRlFFTUNHWBWzyebEGm2Xj7B/02K5A6EC0iMRgPhh/j4Mrc7bWhPUXuqxOtmyJIa5Nteku9hufHnutfMbR2CdXCjUB0ZUSluXsykEb4RWle1eH0gkCrTF+rRA+LeHdqrjdhYbTVQH3saEfVpe1Nt0a6mB4z2nfrxMCt0f7vDvce7V/f0VTbMKu0tbGie2NWS5t/1ey4ttVt38hs2L0Js/qSillwl8N8ISOnANIXDIEM9kC2sDZmvkERBZORoLBI2ArDDEaaXVDs7O5Ns7Gzd2a+JwxsARZQDutQnplbyD5UZm4B7Ovg4gHBwjcwFCKFm5cf+DyMK8CYW1jKnkP5BIYkp2fB0sXDB5IkiFLAUHh0HARHD9YHGMBLisqqXD19reiOOQUlcIqsvCJoM7S8e1svu5GsZkTAeASEMGD4ofEwzKxyyHBxkUlRZg4osg/CzEUfaYYGpDAEEuACgqQEWAEsIBgBzXBRkMGAYIUVlOlw7WpaOlJyClJScvKSKnoaCD0j9Xmt+X4RdJy00FKKdqe5UjFWXlNXhpFOt/VGK6iq6Ogb4QhkUTEpPkERUUlpJTVNA7hmgjn7g3nQh7/NCgiJczdB0M1wdo1Z/t3l3sviadkORrO80TX+2CWR5O4Sr91L08FyBpeXNlYnNa+Ib99YsqwppyLfZWa595ya8Nr6pJz8REg2MSiUKxmT60lekmC7vtBzYF7MoZUF+9ty9q/MO9peeqyj4nTX7LENs4531J4ZXF6YRWtc4rxuQxOE9qlN+mcoLSsPcJx4afLVmwZMobCGKLQRFo0koQwxJlRPNMUHbUI1MkSgISjDnB9QAFBgSbGEaZENK3GxZ2cwEJ5YfkNzdvcCT9U3NgVvkJCSVVRUkVdUEZWQ4BUQ4OLh5eXmoSpJWytISPLz8/Ly8QuJqGpq4onmMNnmExQSk5SG6Y+MghLMlo0QzPk/+13u3/UV1jVYGxrRtfWJOCS+MsqpJowSb4tIpqNKXDAV7ui6EGJzIn1jiX9vbfTe5tzRroXbV88a2FHVu7N8y/byjk15S5sCN28ua1xWZYIwM0HgIVei4rGuFHSwPTnewyLGjRzuiE/xIBUH0Opj6MtTHZoTnJakeWanGpdUUIZ3D6RlMdOI/04ZoFHGBKQxwVTX1BhpYYyjY3RNTMAnIHdGYs0AAhBYC5gKYAGCkATrsGSvs/NfyGwgB9czMgFcYPhhRqOupaNjYKiqqaWkrKasqKqqpK6nY2RGMEdh8Fq6BvxCwpCiCAgLi0pIQfCCEj1DE2MEM/PDkajgKx4+/r/LCiQQmtp4TR28ugZCS9PYQFdPTVlNTlbRzEjXCo+wISCcKRhvG3yEE7HAn7o42bMhNaAgO/3wyNDWbe1NywvLysh56ZaNixNMkDhghfluEXJCP5/CiPl8DINE4cwJeG87WqALISbKIC3D/MTJo5CITGnPf4WgT/QQpjooQ00THUBE19hE3wRhgsaxWYHhB1BgCaEKVsBFIH+HFXAagIOdykwYDJRDXqWpqy+vrAoSFBbjExAWEgVsYBiVJGXlxKQg3AjxC4rw8AnAJjFJKUUVVRUNLQ0dPUibUGicoQnSmDXRIZjTILB+gxWsgQlaQ9tEVd1ASUVbUVlTSVFdRUXTyHTK1zgM9a3NkGVZKSlJiQWF2QlJETZ2ptZW+uYUUzwBppf4acoUhTK3QODwRpUVxd+eBP3DBFY/IUMESt/UWAdhoG2kZ4hAGiFQxqx3yyd85Wto4CXbaQAdEMXSZiL5BVzY1mJoitTSM1DX1pWWUxCTkAZWAA4hUTFeAUEAhcmKELwUV1JTl5FX1NY1sLSxxJiZGZkyv/4EyQrz6TPr0bOrp8+3WPlyMSjgfXLhJLFmgN/KRjn6Pf2KFVOUjpGhlqG+nrEJTEKghNWrzI97ggeD2MQABGxcIIOBFViy/WaiELgBaGAFKrNx0dY3Ao/RN0aIS8tC6goSk5KBdZC0vKKBCVLf0FRdUxeyFog+kCPrGBgbIZif44EwhMQQYIo1g/nhqz8S+3EQR/9Wwb3LEhHBfMyPA2f9TcHwg4VA0AGxXQT8Y0LsKRJ7iSUwa8L0AonFs55/oiHbxZPMocTABAGBBtDR1jPU0NLV0tHX1jUEVoxMUAAoJMtQB3aB9rDe8Wae1MnNc8brDx//rZr6C0F/p6a25z9Sn77S1K1f9Or9h9/fcbLefPw8sfx6ZXK1X34jiPXbk7D8/NUPB7H//8rPmszKr/r6w1+hKeP392niov7T9fUvKE3d+otYVzSx8mWw/4x+6au3H5hirX8B5cvpprLyy4Z/iuByPsL9NPmXW/8ZYo70x89vppQzN03tir9ALFYuX7u+tW+gb/tQ//btv9Lg9oE/rf7/Ww0N9w8NDWz/h2poeHIJS/1TSv6MtvX1X2H+yzgWK339gz9x/jh/v//XNzDAYuXjx6HhnZM3fvPv808/ffpFn38tduEvtSYKPv5aP9f6/PVBf9nh59XPv3fsSYUTm1hL5l7s9Ynj/Uqff7Xpw897fWQ16TNTH1ilE2LV/szcb9KhmEf6eRfW1p9YKx+/6Deul70y8cfci324b/xNOjFr8cvFfktTGvy/0G/8De/YwWbl/dDw8OSNrD8jQ6SGho6GhramhpYm6w/WzbD4miUr2/p2bT50fMepc8cvfnfn0ZPzV69evXUTYtmKrsGK5s6U9DxbDMLaxCTSnrI2N3xzJWPbzMj+6ujh2oT9C9MOL84+tKJ685rO9NzyYN8QbxcfJztXT0ffhKz6iMjCQGefTLpDChrlrq3po6nhoa1hq6Fur6kRa2pQ5GaT4OkW7eoY5+qU6u2Z5eub7eeT7+9bGuzekpe2lOFRZYUttkTlu9tsa1l2eWTPpWO7Tx8aHBnu/u7M4ad3Lzy/c27Htk5/B2cXYxNvnM6yMpqzqVEcyuCQgdG2GKcaE6MNhgh8UpxGZZlGeYFOcQ4+Jc6BTHQ10A7Q1/Ez0PHR1fDT0wox1Ao30UlBGM7U0J2poZGvpR6trhGpqVFnabTal9weSFkfYL4+kLqzMuzUusKjrdlja0tGluf31yT01SUtLIhHIbAmxjikEao4Nd6e7kygOJMsXI2MCTqaxuoauuoaeuoaBnr6SASKoK1joqVtaoIkGyPJhiZEEyQVibJIC/RpzY9qzmIsTg1ZmBxYnxwwP8m/Nta7NsZrXpwPLCuCHHJcLXJcrdIdKCm2xCRbYo6bdWmAY1Woe0mQS7qbTbwDNcbOPMvbIS/ANT/QLdfPJcPDjllIJ8fZU8Ktzc+dGpvMwU8/DQ3/ESuiItLcXIJC/MLyQqLa0jKSAoL8XLzmeOKsZatb+3fvOnnx3M37D579+Prdh/efPn/46dPzl89nNa+PKFka6B1qJCVuKCHqYaq1PNZ5Y7b75jzvviL/ofLgPbMi99YlbFvSkJVZ7mjjboGlUNBkc7S5s1Ocb0QZFW9rrmcaoKocICtN4uOx5+O34eElcXNZ8nCFS4vEYQ18iCQ/Ii6YQgq1MI+gUaMsqQl21rUxYV1VhTOpiDwDuSQD6XiiYe/yhXdOHbh9Zt+140OndnffuXD41f0rL+5fPtvZWkSnkWSl80N07LSkTHj5kDxca8XFOnWVNodZ7RaSoKmK+ucR/DOxlaUYe21ZEj+/hbCAlTC/hSCvoxC/kzC/syiPuwRforRwrSB/Fjd3BA9PmpxYmaF8hZHYIopaM01jGVV1hb3WrlKvk00JRxqih2cGbivy6S323zozxp+GlxJXkhRXFuATVVVQ8HegaynpKSmayCroSUhpCIoo8QrIcvOKc3GLcPGIKSkbCEMJv6y4pLqImIqouJqUjK6Ssn6is1V9hHNNmPOsQPvqYLvacOc5QXZVvlZl3rQid3KaLTqSqB9J0A/H6YSgtcJwBlEkRBwFEUM2DicY+WP1/bAGgWYmYWRUEME0mIjwxxm5m2j5Ygz8sIZuxhpUDYXjRw5P5mBarIhKcs3gE+UVsjJAOCCwFgYmskISrjb0c5evPXn+49v3Hz5/Bn36/Pnjp0/v3757+fDBd/Xz65ydPOwxKKqGNEVZKtxMb2WCU3eOx9Z8n4GSgF1VIXvmxA8tnjOnqtHDxdfKzJKKoZojyQSUZUDkbLpLFFLTwNaQHKyiHampSeXlIXHzWHBzWfBwewjwxipIR5hhfMjEYCo53NKCQbOItKRF21g0VFZcv/Z9Z0VhLQ1VjVFLMZaLIxn0tzXcO3f47sWj10/uPbWn54dbY59e3Pzw7LsXgys3ezp5IFSjXAyRfALGPLzGPNx+gkIJkuLz/MwGJaUDkWK9LRr9TeoLkg1IIryWAvxUQQFLIV5HUR4nET4nYQG6uIC7OP9sGbEacdEoXp5CNcm+dJd1IeRyE6lGimqThfpiinJnhNn55UmX12WdaU0ZrPLrznfbXOSzoTjEiYiWkVISFZbm5Rbi4eLXVZV3JBBlpbVlZLQlZXSk5fTEJYEYRW4+CR5+KTFxVWUVI35+WR4eKVExFRERZXFJNUl5bU1N4zRX25kBNlX+9LowZ1Clj3Whq3m2Az7TDptqhYohGYZitf2QmgFoWGqFk0xS7MyS6LhUe2KGIzXNgZrmaJHhZJliT423JgUTUQ76mqEUXBzdPISMpGopHhs5NJmD6bEiwTWDl4uLV4CHT4CXV4SfX5CHPzo04MXrV+8+vHv79scXLx7ef/D9pUujI3t7ulbMrs0Oj7RFRVkY5roQqwMp1X4WDQy7jVnuW/K8ewt9hsqC9s4K21lf1LawOSgwlm5uT8NRyQhzjD6aahkSnDCXgKUZyKn6E+g0cWkbETEiDw+Zh8eGj5/Gy8uQEsk3UouimIVbUiNtrCKtLVmgWJckJzx78fzO+Pji6IAqnG65kXyaiWw8xaR/zbJb54/euHDsytj+E7t7nt8589OrO5+eXx7fsrzQnhweamOurYkTEUPy8Rrx8KDF+Qh+VGKU61YjvVR76W1t2huX6HgayHiKCLmKiZgL8duJ8LsAKCKCBHVZaz15P0n+FcripXJSkRL8m+Ppp5vTWrwxFcbSDRTV5RbqS2gq29Ktx5bEjDXFHFsSvWtuUH+5T1euW2uqS7gNXlFCXlJUho9HmJuLj4uLW1tNhYrByUhpiYup8vNJcHMJcXHxw/3JFBc/n4C4vIIOH58ML6+0qKiysKiSmKSmtIIRWhcxM8B+SZznyrSg5iTfKn+bAldykTsl34WURcfGkQyDkOpASaiZYSBGN84SW+RjU+RtVehpXeRpm+dimeFES3e0SLAhR1KwflhjO10NT5RhqDnK38zYUkvp2OGDkzmYHitiM2Zwc3HxsMQNa0LcfM5U8wunjly7cPTYvp71axs7utcePrKjLNU7zQFT4Ws+P8y6OcahLdFtXZpLR4Z7V7bnlnzPrfne/cW+OyqCwVS6Fy1NSipwtnKm4SxJaLKZMRFY8Qyf6eqfbqSqoS0ui5BUIEjLIfkFjbi5iAJ8Zvy8ZCEhG1lJHz2dIDIpCiixpsXSrSDapwf63bhz68OnzwPruyosMKlqUllqIilGUnFURP+G1Tcunb564eSVU4dH9/Q+vX3m88s7728eWFvCiHSn+kd4kI3QJCkpI0EBIy6eaCvxqGiMlh25gWRaGiHf26ZfGW3oKcybLy9LEOSiCvDTBflcxXnR+kpYb2sHKYFAcd7NahJr1GWWu2AP10UcmBM230a7Eimz0FylxVJzuYP2nkrvYw2Mk82xF9ekn1+ZcWxxwmBl4LoMt9pIF11ZZRlxWQkxOV5uQW4uHh4ebgMNdRKWLKtoIiGrKySmLCCswMsnzc0jzsUlyMUtJCoqLy2jISAoKyAgJyurDWYjIacjI2fkRsQvT/JZmeq/NM6jOpBe7kOr8LEs8jDPomMSyIahaE1/pBaA4o/SiSAjUu3M0u0Jqbb4WBo6jGgSgjcGBeGMg7BG3kh9e111K00lf7xxGAUTQEKfGRudzMH0WBGfMYMFCjdYC78ov6AQD78wH6+XI7W2MKmyILGuse7qzZsfP/64s7N+XphDY5R9U6xjS7zzqiTXdWlunVkePTle2wp9+or8BksDdlYyBhZWV5TUuDt4WRFoZCTRzBiP1kejDcyCUhopVDc9KVkDaQU9KRl9CUlNfgFtQWGMrCxRSZGkqoJVUTFVVCTr6PqQiN44ZAAeF2Fvc+zQ4Q8/fX76448NCUkp6tKRknypymLJxrJxNGTfxvU3r136/uqFq+eOnziw/enN8z89vXTjwLI5yS4pofYZUT5eZLK5nJKRMJ+hENfCLGVzHWmUohxDSWFehn7PUoyfhliLrJytsABFUMBckM9WSMBYX0kzK8xZXdpPgj9Ain+Npvwmot7ogriTLan754TX2+rNQsvWERSbLNRWehkfXRhxbGnksWVRp9tSRpsS99Qxesv9OrLd12Z6e5GQihIKUmLSYiKSAnwiPNzCEI9M9PSoeKqMopG0komsoqGgsCxQMmMG3wwugRlcQtIyarJymsLCClJSmnIK+kKiipLS2opyOrEOtIYIx3kRLgsiXesZTnOD7Cq8LYpcSVk26Giinh9Ky8sE3EUn2hydaU/KcSTDMp6GCcIZhhGNYmiYKCo6ioIOJSKdjDQtNBWCyKgwKtaPgDpz4l9jRUSKa4YgSFxMjmCMd8Ja2JgSFUTlJARF3Sn4cGer1OjwQ/t3Prp7qWtpyexA60XR9s3xjq2JLmtS3doz3Ddme2xhpbSDpUE7KkJ2zE1rW7giyD+eTrKmYMwJJnicAQatj8CY0gKTFiAMsFpiUtqizEROVUhYR1wKo6xppqFjpqFti8SYaenCHafCL0zS0Iq2tY60oa1btQoc5ePnn76/dbfRwzFJWjhchCdZUTwZYpAlqrer/db1y/fvfv/q+eNbl8ae3jjz8ur2TQui8iLsCuI8KpMCwxytiMoaCBEpOyOBhRm6surySFcLtKDQolxSZTh6rphIsawcUUCAJChAFeQ1VpUXLY41szXzlRL2kRXwkeYPlhFcidU4tzxpZHH0cFnAPCvdSqRsFVpmEVVlXSB6ZAHj7MqUS+3ZF9ZmHV+WuG9+xI654YNVYVtKApoy/UzVNOXE5IV4hQX5JAR4xXh4RSG8Iw0NrYgUaWktfmEFPkFpXohHvMIzuAXAXfj4xCUlVUDCQvIKioaSUjriEmoy8sbaKvoFPg7zw12WxXktjfOax3CCJKbMyyKbjo0hGwSitXwQ2kE4o2Q6sdDbOs/NItOBnGiDDyWahpJMGVR0gJkx5LluCB1LHWWCKsRWVQcDdUcj7bFjRydzMB1WVFXUIYJyc0FwFVaX15IRkRMRlBTik+ThEpYUFKcb67qZqtljtJI86WEU/SSqfkOkXUuSy+pUt/UZHp3ZnptyPbcV+A6U+G8vD9oxK2LLonk52VVOlo6WOIo5CkwFh9FDYQyQaBOKe3CRgbKOipCoioCwqpCIurCYtqgEUlGFom9kaWzqSiDSMTg9BUVNMWlNMSkfAmlmbvard28/sfLqE0dPLnR1KNJWSFeSTFeTTjSWT3Ugnzpy8NXLp+8/vv786cP4ncsndm3oqE/JCrPKi3KZlelfnhHiZkmiahuaSogn+0qn+KiJEE3x0dZhrsqts9AZCM0hWUUbMSGyoABJiB8pIyGaxlDLCLOTEvGXFgiTFwiQE0qS5NtnqnR8YeTBeWHDxb4zSaq5+mL5hqKQ3q7zR4/MCz3blnJ+XebJlpRDDTE754YOVAV3F/t1FfhtLg9OdqepSClJi8nCbIh7Bh83M0Hh5+XiNdXVtiNTpKXUBYTl+QRlWbgIsbYK8PKIyMtqCAvICPBKycjrySiaSMlqS8rqovRNywMcF8d4Lon1BHepDXOc6Wdd4EjIsMXAxCcYqx9JRSU7kvN8bHLcaWkOpERbfBQVwyCjGRRMqDk6hITyRBtY6qpQtJXtjSHEYxhW5H9xzuzv4cPPJEOcm0uMhxsyLykubokZXGIAO5inBL+gJw7paKBiqykdRzUqcSUujnFcmeK+LsNzQ7ZXV553T753X7Hf9vLAoYqg7XNTWha1+ntHWBMszFEEMBW8ERarj8bpY4y1EDZOsfpKWspComrCohqi4sxukJbXkZLTl1NCqWrSkWgvcwuclg5Fz9gBTQiwsb9x4yZ4yqfPn4CV4/uOt4WGNlJNivUVi41VkkzkZ4V7PLl36zPrLbnPP3149cPdFTU5iX4WyQE2mWG2M9O8C5PD6QQcVVsXIydRk61lS5CXcLemelKWU2X7F5kuQ+vPl1egigmbiwhixIXlAp1FihJxKAMvSfEwNbEIZZEIGf4BRckxA8XhYo9D9Yy+PI9ynFKGplCunmg9SXmtH/JoffjxpXFHl8WeXpVxfHnK8JywzcU+W8uDhmZHDcyO6C5nOGBN5MWVJEQkeLkFIMmFxIUbcOEWROkbWuNIwkIK/EJyvJDSwoSIW4h7hiAvl7CQgKSUhDI/rwQvv7i6Lk5GTk9EXE1W3sAeh18Q7bM4xqMxxqMhxmNusH2RMznTDhdLMQ0nGsZaYTNdaZWhbtAnlYHOBR7WOa7WqfaUOGtihAUunILxwRpZ6apStJSdTfUDCCh/PPLsvxSDPtPMnXh4JIUElLm4JXl4IIjKcPFIzuCS4OIShjSXi1tQnJ/fDW0STDSoDrFtSnBrS3FfC6DkeHXlenUX+Gwt8usrDRgoDxiuCOqbX1BZXOdu40bDkEnMz75hzIywJBMzjC5SR0GbSgE7xKmJSMDc0VBeGaupS9A1JOoZwRKrpkXU1HHC4F3xRFh6mdPWtbQyMWGC8unjTz/duHV3RUH5QhvcTJRGGVE33lQhzZ60d8fg+XNj339/8ePnNxAisyNdYr2pKQFWcR7EaHdiSrgfHY/FqaqSVGUWVWJMTOUUQ1yK9FV6RbiXeGhuxCDilVUsJETNJYUlHajiaRFq0YHWUoL+8uIMTcloVYnFMsI/6Mod01VeE211emXmrnL/crRCmip/lrZInZlSexD2XEvC2ZWpp9pSr20qPbM6d2cdY0uZ39CcyB11Mf2zwnorQxeneSM1VKVEpQX4hGHyzMUNEx9e8BgBbgGMoTEFgREQVODjk+fllWSZOkyOIH0RFBaSkZFW4+YSgcmzlg5eQlZHUk5fRko10po8N8R5TpjT7FCnEi+rVCt0LMUknGQYQTIKMzOIscBkulvmeVrlulKTbc1iLPAMMiYYb+qLNvDBGHqg9B0MNa11VN1M9bwxBt5og9OjxyaDMA1WftLXIwkIasrLGXNxSXNxyXFxSXJxg8eIqytqyYnJyolKS4tLywqKhFDQC+JcVqV5rs3wbs/26cr37Snw3VIMoAT1lwUOlvsNVwb31lcmRmXZka2pSII5Ek8yxZFNzChIErBiqKyLM7G2ofnoyiiAnejJKCBVNYm6hpbGCBskGkQ1NLJDot3wRE8yJdDW4dbd258+/8SkhfUs/cPnT7cfPV1bnFbvYZlC0I40lU+wxm3p2nD2zOiVSyefPrzW2ljFcCPHeJrHe1P9LY1dSLpRvm62eCxKRdFMTWxxhbkq3sjEx2GDiMgGQdEyYdFdqhoRulpWcpI6KCPJokzJzAhjY21HKXE/FaloTdlyOdHHhnIv9CV3a8otc8Nd2FB4vimxkaaVqsybrSVch1dc448aXRx1ckXi2IokIOlAY9y2Sv/NZQED1RF9VWE9pUHb50Tvb0xrSPc1VFGVFJXl4wEUeJnPJmbw8Mzg5ePiQxvoEYxQvLxSPNziPFxivNDn3KKQ5AoKSUpKKosKy3FzCUrL6GjqkSRl9YVEVA01dStC3eeGus4Ocij2oKXb4FKsMam2uCQrdLiZPoNonOlGKfSxynOnJNviws0RYWREFBUVRUExKMgICjKIYOJkqA6UhJAQMBv6F1lRUIR004ibl2kn3Nxy3NwyQkJKOmrGQc5+Ea5+YfYeukpaPNyCujJSkD2tzfRbn+3TkefXXRS4tTiwtyxooDxkAIy3PGj3zLDeumKGX5QdkUYxxdHQREs0kWSEpSLJZFMCDqZCejhnlxikuq6BrCJCVd1ESRWlokHS0bM2RTlgcU54M3s0xp1k7kk2D7axW1Bf9/4j01Q+//zmx6c3Hz9uWr1iUWZkMtUo0lAuzga7Y+umm9cv3rhyundDE8PDkuFqHuVOjnIjOqDV7XA6kf5edkQCUlleX4I7MwQrT6P5WVv08grFCgk68PHtlpLOR2IhiRbOSlPJY2jEhZIlRZjJipJYsor0WQPle6aqt/TkF6jJzkEon2pOPtcU3+JkmKbMm6stPM9MaaUP8mhj9OmW1DNtaWdXZh1sjN9aGbCpxL+vOnL73MQtVRG9sxkHF6XtXZRSxXDUVVAU4hPigTDE9BWmABoeHj4qwhSlp8/DLcrNBRKGlIWLCwQTUXEwEkEBSR5eCRVNtIIygkdYRUJWO8jGejbDfaY/vdCFkmaFSbZEJVigIsgmvihNBtmkLNChJsJ9TqhzkYdVPA0bQ0UmW+HiLVAMknEo0cgbpetkoO5qouWB0HbQUxk7OjKZg2mw8llXXU1UQpNPQENQSImfT5GHR05F2RRrRAxy8sXoIzQVNWXE5SGgCvAImv8PZ+8B1taZpn+jThESIEQVqAsVJKFeKQIBQvQukADRe+/F9N5NcQVsMBgMBuNeMbj3Esd2nDi9z2QmmfSdZJL5jvDs7H9ndzL7zbleHwuhiwsd/c793PfzvudAchvLiVisiV+uSwRYAUA53Zp8ttVwrk0PiArAysX+0jJjrkahFtPY3p4Cf75MQPGUs0RSJk9MF3i6U1XKOAlbzsS6cFzcBUQKD08U4IlSCtXbg6HhCTR8YZhECrCSG6TNDI346quvAFJ+/tU0Hff1L395/6sfpiYmBvIz8uWMdIYDcBROLc19+O7z9998PNRakqyRGkPl6WEynZqnpDpopZ4ZifFqqZTtjCVZggBpcQjW1ntxZi2smDAIFwTKskKkspiekZGonhZyfSbTW66yRcpQliFWiGMO6COu2Aok7G26fTceM0GyfT6SfX8kfZc/sdQFVkOy7Bc4TGpp59riN3v1W/16UwLqS1trTliqi1usS1ioiVuq1623G67tyt/cmb8xlDeQqwU8O1B6oNu4vOp8Ag9gULiSz6MTqGAwAMqr7hwcYAUMRiDgAC54OMIOhrB3dWMDlcjajmKLpQTzRK0JgTuifKoCRfkKloFPjWYTQumuGQrPHQnq5gR1Y7RfRYgiVwWUIR4wjHKOXsqK5pKDqc7JYmaWL98oZ8cL6E/u3/tHEP4vrOjUCgTcGoWmOdqTFKJAGBSooA6WCGcbJFA10SAz61fVFAq2QMGt0n14izVJK/W6YzuSAVZONSedb0+50AEM/VZ36o2hvLHamujAGD6ZKaIwAwUKthsFb+NIsXeS0DgcNxKXwNOok+iArjjhhASSjM6UkmkiIllMJCvpTDXXCxCYUJE4Xq5I04Rev/3w6v37Mwdn989M94wMNVWUlkTK8n3p+XKPXr1mqrloZWb3s9duv/XkTlVOrF4jTQmRpIVIohRMPg4d7iNKjY/1l4g9nTBESxATCSb5KDq5nFokOg4EXoEhsm2tgjQc6o4drjvyvRpyOY4Ovmik1g614mCzgXeJRZrr7OFveWAbcNidTrY3M/1vdBgm/IllbohakmUfDzMR4nGhM/lip+5Ce9zWYOq1nXmnulLXW1PWW1MP18SvNCSebNdfGso5N5B9cSDzQo+xNsrbGW2DgFrAtl2LGVCPQBCgHsGhCBnfi4AjAHz8jRUTLuYwiJU53MbVxcPcAgNFYJzcuVgntrU9wxZDiZQJOuNUNUGSXDkziUuMZOGimK4VwdKRzKjRrMjhjIje1PD2JG1DTFB1mF+l1rdILQNcCyAqGUqvAsDK+PL1Mu7r/14vLojLJqBRrlgyly7NSyt0dfIAgTBgsD0wTFYXhAabIU0DhISALKh2dv2poUcbko7t0B3fkXSiMeFsq/5Cp+Fiu36rx3hzOGu1ty4rMVvqKeS4UX3ZIjmdzXAlYhEodzSGT6QxHUnRGqMnjkRG23g6OYuIFBWb68P0lNPoUgoNwMWbztQKxRFiSaxcrg9Q7RqfvP/8jSv3Hvzh++/f++j9t55evHFqeqm38eHZxec3LqxMj2+dPXbn0nq+TqMLluiCBIZgYZiI4uVsHamSJ0ZH+gj5dAc0wdyMigSx3e1GuOxMK8t9cMQVkMU00iKrUIXr7+N0F3vpI0JwLlpHOyMC/raTQ749KsTGItHOYoPs0OHu1O5gfU/ucaUra28Is5xgWUe06Peyn47xujaUc7Y98UR92KmWmFNtyUfqYwFdWahNmC6J2JevmSoMni0PX6iNXWvRXehMP9uWWhHp7YrGWEFM6gLoihkIDDIDQ8wgFlBzCV9sZ+sABgrQK1a2B/ClDdrJ2soBBrW2ROFweIGNvYcVhmqDccsLkNdpFHmAtxVSE7mEJDahMljWb4zsAeK0PrAtSVMX5VcYLM8JEGepRKlyboQnKdjDLYpLieXRdGJWPJ/xb/oVPMY+gEGzhCFwThwaWYS0xoNAJlBgMEdgb2ZmAwJZg82sAGcOAltCQeYBTMrhmqT1hoRjjQnr9XFnWpLPd+gBVja7064NpG8MljQXlGh8Qtg4ioBIV/MkMg8vugsRA0M6WtjQnfAqYaBaGuSOtCZZ23k6Ogvdid4eTDWHB+x9GJ7eDBYQnsMl0miZPFamGG5r/vGnP//8159+/iuQhn796a/ff/G7l3dOrz3fPH/71Mqx+f3XLp44tLvXEKqICxDEB3glBXiF8ImArsQG+cRFhCl5XJq9Nd4cRLUCizCQaoJDiaX1Jbj1JgSxYoFkcqi2HY3+M81cscgbbR6IRKxZWa07YLV26HgsRu9kvcPJZi8VV0PHXY3xPVEfPxvFq6ag6gjmA3zs/hju6ZaktfrwlUr10ZqQpZqoI3XxpzszgHG00XC4Kv5oQ+KJ9rSjzXrAxGz0Zl7qTV9tjC/TyvC2GHOQqdGyHaGBYcLFEm5JIzMszG3/By5wS3NbcwQQqtF2Dh6AtCAxNBSGSnOjNEQFlAcKAVwyxfRUPrUsSNylD26O82+K823Vqcs00mw/kcnVKjk5vkAx4gI+F3C4qTJOYaCiKMj7jdce/SMH/xdW0EhrHyrVBY2CmWOQKCoY5gxDuILADmamTIQBdMUKbsvAUW0trJ2t7JEINMYSOZARtt6QuN6oO96QcKoh4Vxz8oVW/eUOw+We1Ov9OVONZYaYVMCyMJzdlEyeD5MrprIYriSMOcoOgfR0o8YFGdg4vJs5ioy2ZTu68FzdVSyOhi8CLEsQlxfE4UbLZHFKJSAtSf5+PW1dtx6+/tNf/gxE6J9/+fMXn79zfnnm2tr8/Y0Tjx/c/OSjF3O7uwFQIr3ZCSpOIpCA+HgJEaOPDIqPDFd6cZkYFMkcxLCACO2hEc7QXFvkeXPUJTD0OAIptTTnBqvVI0UCOt3L2iIfiX7NHlVtgwq3hukczFPdbNo0yqsTrW+eOfDi5MyBuszdMYpaOrrGHTEkcJw3yExnSKfuXEv4iaawpeqw5frYs51ACDIeqUk8UBwxXxGz2qRfaUxarI1bb9GtNSXNlUXsytUWhyjcUBg4GA4xmVygDJnUxcwMAoUgbG0ACbHcjkuvWIEAzwO4oK0dETBbCARl60Czd+FYYz0skbhwPitLxtBx8ZEsfBibDPzY4eyYvrSwXmNoT1pomUaW4yfMUQkLg6VVYaZmbmGAOF3J1Us9jX5Co4/g2aMH/8jB/4UVJBLpamUtJhGhYIiDPR1u4QaFu0CgTsAAdMUcZs/B0/PCY9KDgiOlcjsLKxgInuYtXN9hONliON4Qv9201V1oNQCsXOowXO1NO9VZVJmeFyz2pTi5sN2oMg+OiMwQk1leBA8qFoezxqi8AtUiPzrGiYBEe9hh2c6uPDc8UIBChRKtQBTM44cIBFEALnJloo93njawOzvx4vzEs3tnvv3s/ovNxTN7Ot+9t/Hdnz42AfTTt/N7emJ8uWEyZqSCHiUhank4OQWbEquNj4xQcDg0lCUZAWFagaQOMK0rvD9S0mGLPgG3WDW3EkBgPDzeryVHxKIG2NoeskQ9s7UrxKAScTZNWp/1obq3r8x/evvoxenBfE2A2N0tQci4N906nxE87E9dyQ+82J1yvj3+QlvMyaaI2WL1fEWoqWlbE3uwKHwyU70vT7NYG3+8Le1kZ/r53qwLvXlL9cn7C8IXq3XlET7udvYIEy4mVoBiZJqPA9ABweAwwBqa/z+sAN+CAhgB9gUGQUOhaCd3NtLeA2HlQnHCA9ZVxyEFebj7e5CNPqLGGFVdhLwqVFyuEed4e2YqOJm+fMCdZPsKDWJ2Ap8JROUkGSdJzkmSsH/Lr/wIsHLxn7ICB0O8KRQUAu5sbefuygdDnUAQRwjU2drSXcr2SfALNWqjVBy+mMa0tkBCwQgvZ9f5moTTrSmArhyriz29I2mjM3WjMwVIQ5tdKVf6skfL8/VhwBuhAHAIqGwRhSWjMoUEqoTC8mbxAnnK5FC9jMZmOriSbOxpGEemgxPPzV3F5mhFEq1IHMIXxiiUQA2KFItTVT6NUYF9wZxuFWlnkniXTrxQFPFwcfy7T57/5bvff/HR6+0VqdEKdpiIquETAhiOKrqDgmxvjA+Pi4qUMZkkSyjFHMxBg5WO5uk8x8uDOS1RyiYI4rCFNRMKwSq9FD3NQhIxHGVzDuNwgkacTNGd3tv7xsVD727MHu4qS/OXFsZoS+O141VpT09N/Onx8tePj759euzF0YHbe6su9qRs9gEZMO5QkXq2OHihAoAmdG+2eiBJPpLqN10UPl8Ve6Q+cb01bblRv7cgZFd20HRB6J6C8Cy1kGDrADf1cyF/Z2VbRRBQMApInds+92+JCQQCw+EWCDgaCraGm9u54LjmNm4oFM7Hg64TMKJFrAQJP18tb4rxa4rxqQ2XV4fKK0MkFUHSErU415eXpxIni9lhTEKKnJetkqYpBXop7/WH/1xXfvz5p3P/hBW0tbU5EJQtLXgEnCMU4opxs7GhgyGAbae64rhwKIbsQnHG4MBgC4gZwjRzAYLbIKx6UkPOtqUBOehEY/y5NgNgVgBRAVi50pt+ZzTvXF9pjTFPLZDTHd3oziQhma1geCk82FIyU0pi+NLYCQHR0X6hCjqXh6fS7J1pGIe/4xIqlkZJ5TFyRYLSGyhGURJRdqBvV5z3Sq7fbIpgdzRrMJjSp6Xvz/I/0pK21F9aGO8bLmWECCjeNGe+C4rvghQ7IVMiQ6IjI+U0Gg0JpVtBOTZgARqcI8NfH8+73J1T5WgzjkTjzS2CUnlhtakhKlWG3OdIc/ONpdlnpxfevbT/cEdRrIQTzKKmKEUzO3I/vXHo2+cnv32y+oebhz7e2P/V/dUvH6x/duvwm6eGbuwpWW+KOlKuOVQSsifLb3e6z0SqYjRFuTs7aE9mwFxJ2PqOpLMdxsXKmJl8zUpN3MnGhKXKhNHMkLxAKdHOAfB/YBMNJlHZHkDeRJnD7Uy9llesvFoCADIVKRgUCQJZALjYOlKgVjgEHOuGskmS8orD/KvCVQ3RPo3RvnURyrpI7yqtHHC7Jf7CLB9AXXg6ESuU6Z6i4AG4RHrRIjxpr9375972N1ixt7H1obOjBMKi0EASytISDMGgiXC4KxTubGnpBgHZgEHWZhA0GGRqL5paRiBAEs313oJT7eln2g2AxbvUbbzSn7nZY9zqTb81kvd4d9mjvVXTdSWGsHghjenhRGA4U/lklpIl8GHwfDy4/jRWKE+WEpaslaq8WXwJ1ZOKcSSi7Wh2WK6Lmz+bG+ftG+/tk+TnF6eUR4pFBj/fAo33WmXMjdaE8w1RJwA7WeR9OFs2k688OVFSnOgbIaME8wgCnA0VBaMjITIny4yo4MSIKAkBT7UEk83NWCgwDw0xSvEXdxbcnMg/GCGoQKEdXO1CS5WiaP+do+NXzp6+f2blrbPTpycbU30lAmesH8GhNyvinUt7v3109NtHS1/dPnh3ofXLh0e+frL67evHfnjj9NdPT355f/l3V2deX+66Olm20pi4Py9wf3bARIr3WJrf3pygXRm+s0Uha/Xxq3Vxs4UhBwtDgAdHa+MOlUWPpatHjYEVoRIPB0eYaY0LkIxMgXmbFWs4HGtujt1+xsTK9uoiMLDBYRZgMAxwwzBza8DqWtpSLS1stAJhSay2JMyvKlxZG66sDpNXhMhyfbyMck6alJ0iZCbyGHFe9GguJVHkGcmhqj3cormM35oPAlg5f/HiP35ze0NZozzxxCiJOFcTECkSAAXTBm5JdqLC4C4gsD3IzBYMtoNAAJNrCzJDb3cYLUAQc5aT8+Fa/bku44WutM3+rOvDOTdGcm+O5t0ZL3ywu/Th3vIrw2UNuXkhSj8hlcnC0WjOZC6RIaFxlHSOP4MTxPJKUIUbw3RqvlzlJVYwvRgOOCLSjmxtx3JwBjIRgIte5ZcRqE5UyqLFYr2Pcjgj7OGusnsTebeHMq72GDa7ks736M/PNrYURCd408OFFJ4jiogAMy1A2WJSV358UkSoCOdqYsUCzEBCWEiQn7tVZThvZ4rPcq46j06IDvVu35HZXZNza33hw1vn7h2Z7M5P4bk6se2sMtT8O/M9n2/s/Wxj8oPTA++cmfzj47NfPVr9/snan19f/+HJsf944+TXr61+9Wj5Tw9XPtg88Gh19NZ8b7/Bb19W4GC8tCOS36+T7Mn0WygNPVobvVITDVBysiX5eKNuvix2d3bgVG7IbL52Oiu4XC0i2mIAzXi10Gx7DwVBUHb2ZDt7IuTVzMDfl6GBYVZW1mAwUKqgaFsXa7Q7i8b2Fqti/dT54YGN0eqWWPWOWP/aCN9sH1P2yfPhZ8q94gXMeAFLB1gWoWcUh6amukWx6f+iBv0zVqxRNkgLKygE4mCDoji6mEMsbKAQAhpthybAoY5gU68FAyTn7fBsCwUD+Q0JsIKGWXalhZ7vzbjUm3FlMAdgBQDl9ljB3YmiexNF9yeLHu4qXuqoKExIVfFEMqYX051GdSFx8B5SD7Yvg61iMEO8hNkRyYnqCCWLE8ATq7girhuRgLJzR9qQbezEJEqokJ/oozRu46JTKAvV3me6858fqns2U/VoquzB3pKtyaLxpuT67NBMLT9WRhPi0CQLkNLBajpXc7Q7LylExXbEkM3BBLgZ1RLCtAazbaCeKLCG7DpSW3hsuHuhrer4cNPlXa1LLXknhypvzHZHipksjPXucv0753Y/X+59dGDHo0Ntn91d+ul3937+/YOf3j7/9aOVr+8tfXv/8HePlr55tPT1a8vfPj32wdaBZ6d23zg8lCb3OFwSMZak7I4SDOnE07n+h8u0y9XhR2sjT+5IPNWqX62Nni4MHjP6AfIzAxQpo2osRZWrlpAwTtsJaFtdQFAzMGBjLCyssGhbdyjUCgyGgkx8wCBg08w/EglIDgLgxt2ZopL5+SnU/gJZso+8PMSUd0qDJYWB4kylV5aSlyHlpApZcXxGvIgdK/aM4jMi2TQNkxjBov3WWqffYMUKhQIiGwgCM/1CYBgCaukEt3CxgCPACJIjWUT2ModioFB7MNgWAkIx3T28Pfle7jRHa/tEOedMV/rFvoyrg7nXBnOvD+XeHsm7M5oLjHtjuQ8AAdhZtrumPD4g1J8nkTB4TDca2QHPwVMkVLqS4hHsyU3zD6xIzg4SeSs8WCovQZBQpmCwGY6ueGtbNys0A+sop9K0gM+VAsciIEWpbNVpzvQVPp2tf7pQ/XS+4fp0TVdpVG6UoCRWnqJiSNzQTDQ0leNyviVha7wkVytlYq3x5mAc1MwVYkaxhFDMIfnJxsUDC6dXlpZ2jnQYo450Vqx2Fp8bqDjTXbjalvNkbefG7qabM603D7QCj39/d/nHdzZ+fOfSjy8vfvP6ma8er3//9OSfXz/xu829v9/a+8ebs98+OfrNo+U3z+1+enLX4d7qJCF5Ik01lKQYSJQNJkmHkoEhmzD6TOcFHS6LmC+PnC3ULJRGzJdGLJSE780KHEr2GdB5D+lVQIi1Q6BA4O0EBIKZ3C4Y8LwwJMrZFcdCIOzBEIASOAxqAUPY2jtR4DCkrZWtmMkTsYS+IklNiKIjVFyikWWrRHq5MEHELgqUlWkUWSqJD8Vd5OYYxPIIYNBixHyjryzNV6qXCp7+Rmb+16yATbNZr/QNZ22Hs0ICTzHssMZArYLrY47AQSGODCI/JSSqIlGfqYlwRtl7Ojou1iWf607b7Mvc6s280pd1fSDr5hAwMu+OZN3bmfNgLO/ycGV9WqpGqlALJXKWgOJIcEVhaQ4uPDeCkkwNYbPzQsMzw5N9WBwRgerD5IaI5RqRTEZjMh1daXaOFLQ929lNRvbw8WAGsVlxIq9SjXK5wfBiqen5YvO5yaLOQq0xkJ4dyiuNlXvjbSkWkHIV8f6E4a2l6sVmfTTPhYoEE8zBbjAQAQFiWEPzDRlH5taPHzq0NDGWGSAazoubq0tfakw/11u4OVS6MVhyb779y3ur37xx9sc3z//5yckf7q/+4cbcZ7cXvnt58YfnZ75/fPy7+0c/vTjx2aXJTy7u+vLW3MeX9759af+j1ZHimKCmCMlcWcxCZcJideLBkvA9Oepdmf5AMjq6PSe/UBYxnR+yWBG9WpOwUp0wlRvRl6TqTvQdMKi7Ev2DGARbhCV0e40cCGIJglgB6QcYEBja3MLe2toBYGVbchAQCMLa3BI4kkwKU0RixRJwa2nqXVESnqu9NRRiWv8KhtCdHYQkHNUJC2iRFdjMzcrcFQEXuDjnBvtnq33T/OTPfqMX9xus2No6AgYbSGvAb/PKjdtBUS6WKCgYTEKi7a3QTALb0gIPATvZWRHV8kAh0wvvQLC1dMDAkG3Jmgu96Zd7M7d6Mq/1m1i5MZBxoz/99kD6vaHse6PGh6MF8435huAQrUgWLFJ4cyR0F6KzpS0B7eDlSlRQ6OFe/Nbk+HR1iJjoISKQlR6eQXxxmFQZKlEEcoU+DLaQQJaQqX6evAA2J9CTlaKU9qUGv7HU8uJIy9E+Y2duYEmUKEFGSJST/WiOeDhEZgfriWXdHk3+/ZmmrZF0o5JIQ0GJ5iCyJYhiBZKR3Gd3H5zuH5np7OrOS8tVC8YLEuZqUg9XJ5/syru6s/rh2uR7Z/e/uTrw3omhjy+Mv3Npz1fPz/35va0fnp3+8bXj3z869sOj1T/emPl8Y9f758a/2Jp+eWrnuxf2bB3o8ic578vWHCyNnimOmCmK2JsTMmYMGEhWDhlUw2nqvmS/lmhJdYiwPlTYHC5uDpfWa8TlKm6JL7vcj1Ot9qoM4CfzGSI8wQKChJiy9Hbf1swSBrFBIx09qVyKCwFlbmkJN7e1sLQCChAaK3F0THTHJNjCWvn4ca3IDWUJAQFhFYYwCRRQt0wbYHNsYFAsAoZBwNyRljpvWZq/T3qg6umTx//Iwf+FFbw7BQYFAg7gxk3Lt4A6hLVEcVxcMRbmREsLgG2CjT3NlWEOd4FDna3MHSFgFBiCAoOs4CBLrRfjZEcmYFkAXbnal3UN8C7dqZudhmtd+lu9xjtDKQ+HMq8MFjYa9OESZQBXGCxShkj9ZHQuFetCd3CWUyjhPK+OJO2+ivxwgVToTubjiFKShz+bHyqWx/mo4pR+0TJFsBc/hC8E8nOMVBot4FXH+J/szX5ruePsWP5wiaYuWZGt4cSKCb4kG7YNgomEAZEnhoGcKZA+2J18Y1hXGkCV2MM9kFAaEkJHwYp0CSP19WN1VftbavNDlOWhypHsmIncyKnS+INV+juzXc+ODFzoz3s40/ThxX0/vnnhP948//3rJ3947dg3D1a+fXD02wcrX92a++rmwU839j5fG3h/Y+8bJ8bbs2LzlKwJgxzIyeNGv64ESUOEcEe0tCaUX6nh14RL23SB9ZHe5VpFUZCkLtK3zxDSlaBqjpDVBfKbNaL+GOVgvG+Vr2eGgu+EQv9n+x8GBSFsre09iSwfMq3WX6IXssgYV3cU2hkG5VrA8kiYZr5bmYdDERldzXBOYRGA090cCsVaIu3MLRyQ1q/ikw0CjjSZZzPAQ0RKBan+vmlq1dPX/i1W7OyAsAOHgpEwqBUCakF3ckkL9i+NjgzjehEsEQA+bgiYwI3sYkcFg51AYAcQGAOGAj4XCQYjsVaowczoi13pG53Gre70K93Gra6UzU79tW79zd7U2/2GewOp94ezD9XmG9XBGsDAenr5sXgBXFGQlzCYwwvleUUI+HqlpC5GUxARpfRge7mR+G5EABoFlenNYPsDrxFLY5TekVJ5tEQcwvVUuLsH0yktid5vLLU/Pty81mdsz/Q1qqgxfJdIrpOW6ahwt+bZQ3lYmNIBEedhPZzseaUrcqpArRe4yhzMOWiozNmup6RwZ23lWG1FX2FWssirVRc2kh01kKpdbi28Ol67OVw2Xx738HD/14+Off9o9Zs7i9/eX/7+0cqf7h355sHRb+4vf3N38f0zY7/bmnl5evy9janrB7u0DNf9WdqFsvBjzSmHaxN3ZgX3GQInC+JGciL7MrRDuZEH67OmajInSlO7MmK7jVE7c2MnciIHUwM7E3274n37dP4j+sC2KFlzlHcYz8MVZW0OhsIhSCwSQ3J0kzu7lguoK8m+IxEylr29JwyitgbrnSyKSLZ1ni4VNEwt07GM6NCrYJPRSCsYnI0nOltZUx2cTNICNq2ERWynKeD8Dhd6JSll8XLxk38vByEBAM2QMDDGpC5gOB7jLCTTKA4OClfHCA5FScaFsoghniRfT447hkgnCa2tXKBgFAIMZCIrC7BlpBf9bGvqxY60y52pW91GQFeudBlu9Bhu95nG3T79/UHDlf6ClpTEOLmP2tNLQWNJyR4yIlVGIEnxBBnBXUUjxwi4O5KicrQaMdmDhyMI3EgyCl1C8eDjSYDCiQgkbxodKEAAWAEMehiXVegvvDFZ89rB1rWO7A6juknnXR3CyfejJ4vdwzwd/Cm2EhdrAcZShIX4OkJLfHBn26KvjWTsLgjMlBNk9nA1HT9cUT5UUdaZnd6YGJevku4t058YrLy4s3HAELArP/pYd94Xt478/sahr24f/vr2wjf3lr65v/TtveXv7q18fH7Pxxv7vn/92KdXpz67Mv/m6YmGxNDWBMWZNsORRt1crWGmOnm6KmlPefxKV/7Z8bpTozUnRqpXOounazMny9J6c+LbDGHNuuCBNO1AmqZd578jzrclVjVgCBzJ1PQZ1O26wIa4oFA+D2dPcEHaeVpblnLI7SLannBZb7DA3dKCgoDpMLAke1iSAzSLhE53tcpyts53RufQic4WFnAwmGwP2AOEux0GbrKfJtcDuGVApuwR0CRvQbyYEy3mvvbwn69f+Q1WAN8EhdptL+VHwEBQPAIagEW5W8D8iMRogeny12wfVolGWqiVF4apCmMiqDgKFGTpjCHiMC5YKyzH2Wm+KuFCe+pGR8pWVxqgK1tdhus9hlu9Kbd6km536+73J98bSp+vz8kIDtbyRN50TwmRKnYnit0IMiI5gMWOlUiSlfKOWN8zHXmJCgUPR+a54hVUhkYgCRFKlXQm29mFhXVREClaDlunkOikvCSxl1Eli/cWMl2xThYwf4pTa6SkMsATwCVNQY4TuAV7YJU4a6EjXGQPUzjAjHynA4U+14ZSzrQbGqMksVxqlr9PR25udUJ0TVxof7Z+vrlsa0/n+d6KA1UpGxP1n18//On1+U+2Dvz+2uxXN+f+dOfwV7cXPt2c/uDiXoCS74Co/PDIexd3f7gxs7GnRePhdmVn8dWRgqWmpL1lcVOV+kONmXONaQ+ODHx6ffH9zbkPtxbuLAxO1aTvr84aLTYM5SV2pUUMGcN2Zob1pQR1G9Q9KYFDRs2QMbg7QdWeGNCXEtwcrwliMDk2lqEOltVstxYRrYCF97FH2kAgcAg4CGOZYI+It4UkYhE6B4tIDEKAtEID9mF7HtLV2sbZ0hppKglmpmRrWuhr6utRMDZGP2kYmxLEoj7+jTUJv8UK0gEMA7ytuRUY7omyyGG451EdVA5WXHtslBczlE4wSBnZPtxMJTvbl5Pry4ngEhOVnLRgdUF0gg9HZAWzSJJ7nGtPudih3wBGe9JWh/56l/5md/LNLt2tzoQ7PQn3BpKv9ha0pyXFK71Nyw9oDB8aM5jDj5IqYhXe4TxeGMezMUK+0WGcLE33Ywp5ru48V6IPlRUmkscqfUKFYimJ5sdghPO5epk0VcJN5ni4mMNRptkU05SJIwxSoea3RYmrgz2L1eRMJSFZ5BZBt1O5IeROMAkWosRCQvCImmDK/qKQQxVxR8e6O7OMxQm6phTdQEnm2sTQfHvdzuzYPn3Qid7KF+uTd+e63r+4/9Orc++e2/Xy1Nh75ybfPDHy5e1DX9459NWdQ989OvKHOwsfXz341unJxkR1Z1bY6Z7itdashcbUI225s3XG6SrDdE3Sk9WRP9xd/fja4sdXl65Od44XxE5XpfZnRPamR/WlR49lR42mh/YlBexMD9mTEzWZGT6SGjJoCN6ZET6RGTaaGdmdpK0JlCbgHaPdXYS2SEeo6TILiMmDgJzhsAAHVJANLABjLrS1xCBMV4uCzIAB/APZwM2RJkRMC2QAVqAmcTGxwsRikhXCCC5dy2G+9u/1V9BIrDkEhodD/eyR6Z6Ecg6plkvMY+KjaYxQJsOf6BrOck+TMvRCaqqUpheQYriuzfHKJIWYS2YjzdEoCELiYr+vIOZwZcLRuuQzzclb7YlX23VX2xNudCTc7Ii/1Rl3pyfxfl/qSmN2RkiIli/y82D50pgqJsfbg+lLoakZHjqpV6qPSEUhpKt9wsUKBYUjxtOEeIoQTw7i8iIlskihNEIg1HI8I+ikTE+3MIIjAIqdyY2bwcBmViCzBC/yYLJ6X17QVIGqRkPNlbsZBc46T7swMlLlCpc7AuoCV2AgwW5WxQpSnV4709Val25I8lct7dl9/OD0SEnWXFvpyYmWN04dODHUNlRieL448Pm12T89O/XV8zPfvXb8j9dmfr+194sr+7+5uwAQ8+ho34eXp+8e6c/XKE+PNZweq13tK1nvKzk7WnGiv/hoR+6BWsPZ0er7i0M35/ou7m45WJe+v0R3tDn/QEXqrqKknTlxk9mxg2mhXQkBo6nafbnRu3KihlNDB1I0OzPDx7MixzPCB9PCClRST3sbFAxqavUDH/i26QV0AgwBISEQQEisodtMbDdkwKblDWbAsIVZYBAWMNPUwKtrj4GdmbmZmTcBn6mSpvtJ9ArR64//Lb9CsbVROqBj8HaJeEwqxTWLTij1YtfLfBOp7DAmI4LDUJNd43i0RAE1gUMMImNy/b0aY2QiojsUbO1kjvGnUaLYtHgBK5JDihPQ8vyFu/OiFktCLzTFXWmNvd4We6M9/lZHwp3uuGs9GW1GfbRU7s/wVJJoMjxZjMMr8KQABiNGzGW7OJmDIDYIBB7jIKXzJCSalEoXk2g+DE+NFz9GIgnlsZWuzmp7DAdtjoGBsTCYMxRqvj1lAhRmFdGpLylopjD48d6is+0JO9MkZT5uGTz7RJadhmzl62bp52rhg4XK7CHetuAsCako2n+yvrxKn3hw156H16+/c/fKa+eOXT2071BT0a6y1CO9Nc+WBj/Y3PPNkxM/vrj0zcO1L65Of7G15wsTLlNvro+8OLP7nTPTe+rSJyrTV7oqF7sK51pzDzSmH6zVr3VmH+sC1CVtqiJlf4V+f6Vhb3nyeH7MbJX+RFfBqd7igzWpO3Oi9xXE786LHcmMGEoNGTVqR4whg6ma7uSgXoN2ND1yND2sPy3MIGXbmcO3CQE+dYAQMHxbJ0yf/isp2RaSV5vZf26OKFsvIhVukqBXKx6A15oBmhQvYBvl/DSlQCfiPHnw/9+v/PrXX+M4lBiCi56CSyBgo3AOWZ7cDE9REpWnIVGiuQyNB0FNwgWSXSNYhAiai68bqilOVRku8bDHWkMsufZOYXygKjGCGWQVwdmf7JgkZer4VI27ZVsI9/KO2Cst0dda4m60xd3sjL3dnbDekJkbHBTC5vhRPcRueImbuz+V7u/BJNnbAqcIcEKYDgAEZG+N8qcz+Tg3AYHkQ/f0Z7FSpV7lWn8KAu4EgUIgICAHkq3ROAsLS0CWzQBpgUhd7Xt1QeNGnyf7Sp7OVD45UHWhL3M4RZEtdY6kodQEa5W7lcIRLsZAhTaQGKp1ZSinu7x8qKq4vzT36NhwszG5Pi50pNh4/dDI9b21d+c6H8z3frJ18OvXTnz16PgnV2Z/t7X/6xszn1yYAKB5tjby/uW5B0cnOtIjzo7VzDVmHahPO9SUsa9Cd6AqcXOs6txw2dGO/KnKlH2V+oXmnKWWgpkK/WJD6ume/PMDJQerkifyoucqDFPFiaNZ0f1poaOZEePZUSMZ4QOpoX2G0LHMmPHsmOH0qDZdsE7GB96sKdCYmRQCtl2FTKz8Jx//AAogLEgYwtONAIRnEyuvVAcEwsJhyRKuQeqVIPKM4dIf3/vn16j+c1Z+SRWyk2huCVR8Ep1ZJA1IZyv0bGkCix/txQ6mApTg1CRXgBUfNzt/d0ww1bEpwTdfJYjyYjHhcG9XFz8aKYhOlOMcxA62aoqrUckNxqODXZFxVJuTlWGXm6Ku7ABwibneGn3LhIt+qiAqx1/uR6UIcW4KItmHRMOj0DDTGQPkulfHwcwKAkpRSDKD1EI3vMjd3ejjtSszRkLCW0Ogpo4hCGwLARwWsIeYm4TZZFm4jjbdCeqhZPn98dzHewpfHG58a6XjwYH6Y81JbZHcVLZ9LBUd6GohxIAEthABCiRxtval08ZaWscq86aaik4uLF5cXnl688p7ty+dGch9fKjlzTP7Ptyc//zO8ruXp94+PfHRudGnS63vnh0xtVVO733z/MxkhfFwa/5ad+5Ke+6x7oLj3QWLTcaV5vSN0YrjPfmzDamAohxsyDjclj/flDdTmbZYn3K02bjcmLq/KHZfUcJsWfLe/LhuvbY9KWQgI3IgPbxHr+lMDOpLDh1OixpMDe9KDO5K0jTGhxCwmFefOsTMNABfYiJme/sbMv+NFZA5GIJH2aKhcAsYUJ9NK3sBswJEkEyg+sj5yTJenJDz73hbgBUthxXFomlo1DCmVxCBEcn0SuB7hdOpAQAiFAAUXADRRYV38HO3kzlYpkoZHXr/LBFD54FLoVH1UoWChPcj4+SuWIE9OpbPiOeTFfYwP0dEsKv5Uq7fhdqwyw3hV3ZEXd0Rdb016kZH7PX22JXy6Cy5ly+RyHV2BorOtvfanmPdFkwICCjG4GwfUV2UX54fty5SsTWY25UcDIeCACHxdHIGFNX0/s3AFtsOH7TdPCDbWHXHBwwmK24NZzwYy3l6qP7ZUtvri22P5xq3RvN356iKFbgkD2tfB4jABkKxABEQYA+UTUlyYkGEpjMn+fbmjQuLK7dOrD84s3hxvOa9jdmXlw6+fWnqnbP7X54cf7HWD/yot9YHvr6/+M7piXcvH360uqsvPfJYZ9FyW87m7kZAh27ONF/eVbMxWXtxZ/VqZ/5cY/pKR9Hx/opDzbmzTfkzNZmTBVHTZbEHK+NnyuIWalOX6tPmKg1AoWlNCh7IiBrOihlIj+jQBXcnawdMl/mEtsWrAVYqtL72FgiQabmlqfa8EgkkBG4Fhf+dlP8CZRsWCxCEiLYlWNtgzS2B1wOnFhoKBSp4lJAdyvYAhoZBe3j39j+i8H9g5VcRjSan0gI4HDGR5OXk4kch+xJxfgRXNQ3vT8GpCEDdwfrj7cPorjo+eUecqilGnsnF53FojYFhCUIFz9lF5u6scHfkYVBJcm4o3VmEBnnbw4JcEIcylGcqNRdrtZuNEZuN4VtN4VdbIq+1RQImZrU8PMObaQ+HgU2zqJBXM+7bhwMoziAkDFIZ6t8SIbnSn3N/V/GdieKRlAAZBWeNQFhbwP8uwaZJrG3HB7DigjRvjfIdSPK+2p9yZzjjtYM1TxaaHx9qfjjTcG9/7dWdRUs10XVBND8swgMBdodD3eFgwM5HSQQD1bUzbQ0Pr91+79lbT69eeufaiQvzvU/PHHj7zMyL8/tfnp56vjb61vHhZ6ujX95cBozL0/WJtzfmp6oBU1K2MVJ7vLfs1EDVqcFKAItjfWWrfaXHuovXekqWOwqPtOYvNufuq0rdX5M1lJ/QkhA0aIyYzIubyI2bzE/YW6TbV5Q0khXXmx49mpMwnq/bmZPQpQ9tTQjuNl2LGgqA0qkLLg/xwaGtTa7W1Lb/GytYuKWTufUrGf7voJhYMQeBCShbEsoWSM6vTipHKyuDjzxeJgrncbRsZgTX8/FvXB/0G6wkaMLUXAEQqIRuTnJ3Jz7WVunuoqLg/ShuPgQnHzd7FR6jIdrnqvjJIkpdtKIogN0V7dMYFFShifejeXCxWLGrk9jZ3hNtnqTgBJKxQjTYxwEeirM8nOG9XhxwtjLoUl0oQMxGfdhWU+TV5ujrrbE32+NPVoU2hQgpKAtLABbAdZgk1fQPOAQYC/PWxDAgA98ayb03WXJ3ovDWWO6xprSiEIEzyuLvzg5sYsV0sgGE2VvA60KVA8m+V/vTAGl5OF35+GA9UINu76+9safq2ljJxmDegZKINBFBZGeOh4FICDMeGhFMcqxLz9nT2nxucfb5gwfvvf7ko3s3yooiNpcH37w0B6jLhxcPPD069OL4+Ivjk59fP/zZtbn3ry29dfFQd0bUif6KSxNNJ0fqZ5vzZhqzVnorjg3Xrg5Wrw1Unh6tuzDWuNZdsrAjb7m9ZKmjbLgwuTstcldxykShfiw/uTsl0tS9zdOPFaQO5OgGs+NHcnX9GXHtyeHNCcGdSVpAXToSgxpj/KtCVRxXF9NbNZWS7TspQaFEOwzOxs4CavIx/wMV08JdoABhza2QcAQcAkEAMoNC65WSeJlQ6+UZxKRF87n/TmYGWPF0x+MQ5mwsRkEAEHGRuWLkOCcfvKsPwVmJw6jcMQF4W6OMmefPNyoZTTHKDAl1viqvx5AZI5R4k0mednZCJ6zICcNAwvXeXn54GwEa4o2FRxOQi5neRwv9T5Wpz1eHnKvSAPtLdWGbjZHXWmJvdSTe7Eo+25iYLSWkcUnuSEuISVBMM17AfziMbXdKTEeM9OZQ9u2d+TdH864P5W32Z57pSdew8FYQEx9/lxaAM4AVFBSc783t1flc6Uu7OZh+b2/p/f3Vt/dW3txdfm2iZHO44EJf9sm21INl0Y2RMj+Cg8TeIprqkC0ij9fWHpvedWFh6vWHD+5eunj/5Orqvo6HZ6ffuDD77sWDL47vfWN993sX5t/fOPDl/aNvn9v3yZ31M2OtE+WG5a6S1d6KhY6S/Q3ZB5vzT4zWn51sXhuoWmovXOksOtFbtticfbA2Y6WrYrGjfCgvsT8rZlexfiQnbiRfN5CT0JuV0JEW25Ya25oS06ILbUoMqYvTNMSFNCeEvLrXQaVWWRcd0BijUVCI282Tv9lbNMLcEW1jDYVhLa1fHYR/YAU4NuZQwKpAgOpumisAgUR4QrTQK1LIDfHy9KdTQ9mMR/+WX/mVRySxnJ0Frq5inJMfwcWP5Cx1sZe7Oijc7ANIjkEkhwwlBzCzmd7sXJVXbaS80JddHaGO5vMDmXQ/MomNsVHiXQPpZBnOIU0l9HO3AYKGzA6a7GFzNM9/rSToVFng6fK/7c8CxNSGb+yIudKeeK0z+VpXymCCdFwnqwmRouDA+WBa6gOw4mKL7jYmtsUpr/Vn3RjKvT5oWvCw0Zt+pstYEeiVIPaEbWsQaLt5ADWxAraCgDNlrJZI8QbwY/tS7+wqurOn/MZk2fXx0q3Rwkv9eee6s060ph5tSJ6v0lVHqgwij3KlZ0cId6mvbW9f66Wj8x+99cFn7739wdO78+ND949Pv37mwBtnph4cHvpga+njG6tf3D76hxtL727OfnRjeaQ4+cLejgu72450Veyry93fkLe/Lme+tWitr2qpNX+hMWu2NnWx0ThbY9hTmny4rXRfddZATtzBmoy52ox9pfrpqvS5hvyp6ty+LB2AS3d6XJ8xtj05oiEhpCs1eiRH12uMrY8JqolWtySHdxiiYqSi7fDztw1sutkcyB2JptvZW2735v4bK6+AMcFlBgNBEBATKwoyMV7MS/EWp/rIEsW8BDH/31zrRHR0Yrq4Cgh4roOtPwnnT3L1IwLEOPmTnQJImHQFqyhIXBok1svoVaGybG96Z4xyxKiN8vIIYFIVBJzMzdmbgAvlMPyp+KwgqbcrUmgLldhB83nOa0WBwDheHHC8SH28WH2iBMBFc6Ym/FJT7FZb0vWu1Fu96afr4mbz1MeqY0PZJMT2X+kD3hsFa9+eEtccrbjclbbZk7HVk3a5K/1CV+rZjrSpvLC9edHuNtbb3sa0bdsdsKWJFc/qIM6ZHXFXuvU3x/NvTZQANuXKSNHGQN75nuzTHRnrzSkrDfrl+uSW+MDiQO+mCMliReyZ0c7W6oLjCwcf3rj7xoMHb928khiT+vD80psXF56fnnl0ZOzTO+sf3zj66Y2lp0d3/u7u0cfrk7vKky9Mtpwcrp5vKZxuyJuqz95TmXKoKftEb/lqW/7heuNUSex0cfRkXsRobuxMQ954WerOwqRDDVmHG7IOVRtnq9L3FBl602Pa9BEt+si25PDulOhOQ1RTnKYtKbQ9SdsYE1gZrqqKCKiNVjfGanRSEcIknaZtOyIDmRHCdHASuLlJaBRAV00NuP+xAc8BNQvQFTQEqmGzwvie8VKvSAFby6YFMai/5W3/45+z4oSxd7FGOyKthK7O3u4uvkDpccN6u2O83exiuMRSjbhMIy4PkSWJKLVRCr2AsNuoPpAXnib3jOSxQ1jUAA+SL9ktmEUDLE6qr9DbxVpiB+gKZIeKulKoXs0PWClQreT7AWM1X7VeHHi6MuxiQ8xmK8CK8XpP+tUO/emaqK3O5L1ZUWQ7FBQCsAImY+yq48OqQ8Vnmg1n2wzn2/Vn21JOtxmOt+gXKqJW63RRAsY2KiZt2Z7vMK1v1nFJ5SrWsdrYS21J1wazrgzmbvTnXurLOt+dcarduL4jZblWt1AZtycnrDHctzJMVa0VHSpKWOiq29fT+vjOtc8++tbaoIsAAIAASURBVOSDFy/eeXz75sq+NzeXnp+bfbC66/Nbx9+/uvLprWMfXV/68PLcx9cXDrflnOwrO9FXutiUfbgp5/RQ7anBquXWvPXuorX2/IUaw3Rx7P6imOmi6NFMbXdqyGhB0s7C5H0VabM16XM16YdqMg5UpI1kxzbGBdUDRSdeWxcT1Jyo7THGdhoiW3Ta+piAqjC/yjD/6oiA6ghVXXRQdWSoi53tf7Jiaq8BxYWCwXq5OKYH+FtCIf+TFdD2lUVwU2KC8nBu4Tx2GI8ZK+KEe7E0LKoP0e3e/3bP0gsXLvzHT38x+/NPP134J6zYWqMckGg00srDzk5BAGyKk8INK8Nh/PD2hUGSCo24QiMpD5WnSKiNMT5pAvf9xoDd6cEpPoIYES9K6BnE8vAm4pQEnALvkihl+7igZBiIyhHeovKYNshmkiV7k4R7EnmT8dzdCV57dfwDKfL5TN+lPPVKseZoiXa5MHQxT7NcFHI4LzSKhUeY5jAhOKRlbmhAqoA2qAOijc9Qst+wXjWYrOpP9OlN8AGeKfDjm0NN7UvgOJluRGFmukQijkXMl3t0R4vGkuX7Mv0m0313pqlG9MrhZOVAgqI7WtqqFTQFsZu1Xh2Rgq54Pz2XWCAh7yzObK8sObl06L033/nDR5988fLJ4dKsR2t7Hqzt+uDaysc31z+8cezDa2svNw59fuvI22f2DKdrDpQn7i2MG8+O2p0fN1eVdqg67UB50qHqlLnK5KmC6D054dOF0QeK4yazI3uSg/pSw7v0IT0GbbchuMcQ0mvQdiZpaiN88tXiXJUUGDl+4oIAWbnWtyTYuzBAlusryvMR5/mIClTiQn9xoVpeGODtjEb9Fyvbq21xaBuRC7YqPNCPSvpvjmUbpleJEgkxnUIEa2QYk6hluEeyKREscgid4Ed0vnfr2j9ysM3KTz///FusYFAorKUVYBacLRAygqvS3UHuhpXgsLE8WqlGWmbSFUm5Vm6UeVSEinVMh0Khe5aIzHG0idi2S1qup9zNWUnE+ZJwMQIPGdZSgYUFuMBzGHblbMcyT8diT2whA5PnYZvLsMtjYgpY2CKOY6mXU4UQVy50KRU4lvKxFQLHeqlLPt+diUHDwWBHS0RqkLfC0TaMiNISkWFkVCTFFhhRZNtoEjqeikpiYohoS9PE2DYr5tslPJ5DS+O754tdS6XOtf7ECm+3cm/3cm+3Sh/3CqV7uRxXInEql7gMRLJPNYbvzAiJpLmkcZyn6orne1ovr689f/z8ya27m0fmx42Jj9f2XZkf/OzeyU9urX98a/2Da8feujT7/oWpUwOFI2nq8YzAAb26VxfQnRDQq1MP6AOHU4N3podMZGl3b49dGZqxVPWQzq8zWtkW47sjUlkfKqkKFpcHikz32PHl5yo4RgkrRcA08OkGvgewT+Ez9F4eep6H3oum45F1XqQkPtUg9DCImSk8T3sLi+01biZSAFYswRAbCESBw6bJuXEcFsw0B/BfrJh2pleb2cBgAFUCR2wQ2dnX3UHpZi91tRc52wkc0XdvXv1HDkw16F+xgsdicZaANQRhLSw8gTTk7iBzcxDjHHID5WUh0nKNaZQGSzLkDL2Y4oeFqTEItTvWGQb2IeJiJHw1kwY8UDPJYVxGvJglwZhL7aB+TvAoF/MEV4QOZ2FwtzLgLQ14RCrR3Ei2SKdY5NKtS7iYaqFTjdSlTuHS7OPa7Ofe6k/oCPIo86M7WCCcrSzT/SUGjlN3BKMzhNmqprUHevRoWYOR3JFY3q5k4XKh30SavwvKCqg+iO173AC4JLEpXYmSN5dr31gofXet4Z21hpcr9e+s1L59pOrN+ZK3DhW9nCt4bTxzs8NwvjulKsgrguxQ5k2eby7b1dhwfN/4jYuX71w69/7jmy82185N9b1+afHFxpH3rx/99Pbxj28ce3fj0NPlroPVsW/M1z2ZKnu4u/DeZIEpo43k3BzJvj6ceX04/fpQ+o2BjOt9pkU8l9qTLjUnnmtMOLMj+VRT0vHa2NXKqJXyyKWS8MNFoXN5mplM9T6jam+aaneK32Sy35jOZyReMRgj64+WdEdKOsPFneHAXtoWKmwIkhBtbEym3xRxTBsSDJM72Rd5M0v9uBkStiUM+l+s/OdmwgVsWo8ZzcDH0l0jqK5aslMQ0THAHeuLw9y/9b/cCxkgBODkt1ihODs7wICTGaAVTLezAURF7uYQyKQUaX3LQ0wXJhWrhWliWq4PJxhvq7AFqTDgYLIrDgaTOdloPT3UTIragxjqRY/ks6J5NAEaJrWFavEWdWqPnhjueKpyqjB4sS7uWGvKqd7cSztLN/c33jzc/fD4+LOLB97YnH/j4oHn5/a8vDT1/o3FD+8ff761pBR4uaGsjb7CE5PNL6/OPz219+6RoWuzXVem224d6n2wPPx4bfjJat/VPXVqFsV0bTjAipnpPg56LmmmIuqX5wd/eXn4149Wf/nk2F8+Xv/lkxOmBx8s//Le4Z/fnv18o2c03bdGK6kIkFQHixfKwjYPTc4M9awfnPjkvXc/++DF23cub07vvDw7+uD0oVvLuz+5eezDm8fePH/w7bP7Nobzr+8v/uXR5E/3Rn+8PfzDzcHvrg/8cKX/+8s9317q+naj85uL7d+ca/vqdPMfTzZ9caLhD8cbvjjW8Lu1xs9WGz5brv30SOUnS+UfLZR9cKj0nZmCl1O5L/fnvrkv69ku49Mx45ORtEeDhvt9SXd6Em90xl1ti95qib7UEHGqStOv83W2Qpq6cds9AtD2J5XCdd+f7jeZouiIkKAtzf+BklcbILqeNpbVKmaNN6NKSSuT04ol5EIhKZuPf/rgf/G2/4KVX//6V46b+/ZFhWArMJhlh1a6O0tdHVODVaWR6lKtskKryPPhRtCcgMCcyHQpU5Ia1czKEDELa1cWGZDsLYoRczUsjyg+J1bMDiQ5yjAwbwfzZkPI91+8+9N3X/zlxy9//unrX/7y/a+//PDrr//x119/+vXXn3/560+//u3PsQBf/tk0gO/+/O0vP//h+y/f0cdGEGzQ8VLPm2v7P39+7cM7J19eXXl6Yf7+8ak7R/fdXpu6dWz6xtL4ud0duaFqgHHTRBIYZAsDJ3mRRvOiP7u2/08PF398Y/0/Xp7887tnfnr31M/vnfzLe8f/8u7aX95a/vHx1Dun+p4tt9+ZqdscK3j9UO3myp650eGlXUNP795+dn3jxurcuf2DzzdW75+aPber/fbh0Y9uHnvrwoGnK30HisJ+v9H/3dXBbzb7vt3s/f5K3/dX+3640vPDVvcPW10/XDHtv7/c/t1G27eXWr8+3wyMr87t+Opc85dnmkzjJEBP3Rfrdb8/VvO71arPVyo+Wy7/dKn0o4WiD2fz3j+Q89501rtTmW/vS39rj/HZuOHxSNL9gcSr7bHZ3ixzMMz0Ls3+1uCmIuFjSbK10pDDRerqELGpBm0npP+HFTDMDEKzR9X7MyfiReNx4rE40WiscCiS3x/m1RnCe+vJ/5KZ/zUrMg8a181Z5y+X0Ylu1pYMjE0gh1WRFF8ari7UyPP8+QYRNZTqEMt27YyXHmuIPblD16YLErjjJhrLciM0cRLA4XqFe9FTlRwZFq60h6kcEZMVhq8/fPinjx9989Gjrz969NVHj7784MHvX1z7+NHZ926tvXPtyDtXl15cnHt0bNfD5bE7C0PXpnsu72o9O1K33FkarZTRHbDBdNJYQepyd+VST82R3sal/vaV4Z6jQz0rQ71LA91LvTvmO6q7cgxOKKvtdcwgnCU83hPfZgg7Plh9cqT23FjDhbH68yPVF0Yqru+pfW2h9eWxrg9O9X56YeB3l4b+eHn4T1dGvrk+9qf7h47P7Z3sbO6vKLp2en1rZfbszNil2fE767P3T8+d3tmyNdXz0Y3Vx8fHL48WDegVm72GezuzXt+f/85CxUcrtZ+uNXy+DoxGYHx2rOHTtbqPjpR/sFj63kLx23MFb88VvpwDCl/RW7OFbx4seGsm/63p/BdTuS8AOZnKe7E/+w1AVPZmPt2d/mwy/dkEMIxPx42vj6e9NpzyYFB/uxcQmPjl0hAmxrRMxdRQ2sbADgYplJGXioIXCgJnMv0VJEdTafp/Jpz/JiogcAAZuzNRPJEk25UkA/bjOslwrGAgktcdJnj59H9Zv/KvWYmUelUmajNDfWt0UbZwOM3JwY/F1HixI4WeiRJWHIes8XAOJNtHMxw2BnOezVW/XNpxZmdTnL9vRkRwdoTW4O+boBAlKflahosIa863hQe6WRzbYbi7t+zWRPFN0yi9OV5uGmPl10fLtobLzvUVn2zPW2vKWqpNm6tImS5Nni5K3l+YtLcgcSQjIV4ml1NoYRzOjsSYfVUFB3ZUz3Y0z/f1Lg4PAmNpaPDwQO98V8OBppKp6twYuQgBMXXwSP8fe2cBF8e57v97zrn/03tqSRsXIrjDGuu+ywrsAsvi7u7u7sTd3d1IQgR3iJGEECNuJCQEh8j/md2EEkhbmp723tvL8/l1+mbmHdl5v/PIzOzyzVd8pUkLfSw2RNhtCLPdFG6/IcR2pa/5Yk+ThS7C+Q78PFtOljUr3ZKZYkpJNiGlmJCTpbQNWUkbVq5amZWxe0n26f07C7euOrZ2/t5FqYdWZO1fnHloSerezPAza9Ir1yWtDzZb7GZ4Kt2tdnHAueVBF1YGX1od0rgm9NLaoMvrgq9uCG3aGCZTyNX1wVfWBTauCbi8JuDK2sAr0GFNwKVVfpdW+F5c5gO6sNT7/GKv84s86+a5VeU4lWfan021OZUEyY30aLTpoUiTvcGiHf7CTV7cta6sNFPypP/6l+x5BpLY/uvvfxeqzMyzoiyyoefb0D1p+t9+hdy7lj0mGmJ//zvU0u4YlUxTTI6ZASjbDJdpgkszwqTwMQmGqObGL2MFq51uLzLU05k7eRJeRdGey7Kkkuiqc3Ezp9DnzCDPmKz9/VdcpUlSzakVy8MubY5r2pa6LtbX1UTkJBI48tnOHKoXj0WfPV39u3/O/erveuO+ijEmn8oNPZEVcCDZczcAEeu2Pcp1c5jTxhDH9UEO6/ysV3ubr/Q0W+khWeFmttTFZJGzySIXkwVOomxbYZTIUKCLMtRG2VLpEeaSVZGhm1JTtuXnbV+ydOfKVTtXrtyxdMnW/LwN6cnrYkLmezu60Wlq47+b8+13OuO+FyhNS5Qy8+3ZebasfHtOviMvz56bY8vKtqbn2tDm2zMWOEAFTko1xcQa6oXRtRJcLdctW7pz7fr9m1aW7d/eWFN693xpY+HuIyuydy5MKdm1sbFwT/W2BccWRe2ItEmWEBY7cxfYc4C5HGtWliU924qRY8PIsWZmy4Q0rBigLCt6piUt0wJRjhUrz4aTb8vNtWbnWDFzrRHlyLplWzKgQ4aUmmFOyTCngdIlVCAj1ZScIqYkGpNihcRoPt6fgQFnD47lm3/8bfx//oM8a5onHe1H04dKypWoJc9jEEyGpClg3/7nf5JmTXXEaNpiVK3RKpZoZam+okR3DshMGzT3Yv1n3l/5dVZISqras6ZP/Or/KU/8kW+A4eqos9QUOZpzqcqzdX/8Xv37r8gKEwymfBtrwT2YGVKQG3o8OzzT015CJ9vzGDZsCktPE+qRH/7x90l/+5vad187kTFZ1sI8e3G+vfE8e+P5DqKFjuJFTqaLnSSLnc0XOUsWOpotdDBZ6GiywEE8316cZ2uUbcXPtOalWhpGidleLJoIjZXgKR4CUYyt3aqY6G25ubuXr9izftP+rTsObd95aNOmfcuWbc9OXRriHSjiCDTU2arKPDV1vrqqFKXpx0KnSGhpUlq2DXueIw88ykInwTwHHlLWOvCXu4nW+5nsijQ/EGe+L87h5P69BQcOHdy0bvuizJ3L5j+9c+35zQt3qk+c2Tjv+Kal9y/WXis9dnZd5rZEtxVeRtE8/QXW9HkWlHwpJUdCzjYj5pqT8sxJ2ebkTDNShhkx3ZSQaoJPEuETRQaxQmw0HxXFR0UL0TFG2GghJoKnH8LRDWHrBrN0ghg6gQyY6gbSdf1p2t4kDZk0vYkangR1kAdRzYOo7k5QdyequxI0DVVn4WdMRE8erzdpHH76j4y504w1lCV6anYYrTnjv/9PpIyWvczx4Y3Jv0386p98TWVzfSWxlqJIY45QTYGnMoOjOJU5ewpj1lTazKmkGdPqP3sv7tdZ0dFVnzqNpYMy1NEzwelTFGfgpk7Wm/yD1qRvSYqTLbDqRIUpGMW5fpZWMc4uKR5uGV4eES6utiZSayMzM47AiEDmorFMTR2GqpqhuoqZnqobSTtaQMyzZs+3Zc23ZS+wZy2wY82HwbPh5NqwcmwMc6252dbcHBt+lhU/1ZKXIjVMteQnSPnhJjwfvqEdk+0qEIfa2Kd6e69LS921eMn+tRsObtt9eOeBg5t27F22bGNSzBJ/5wSpkTVOlz53FnmOAmPuXJbSXFNddW+GfrKEngFXsL3hPCdhvqMwx5aXbsFOMmPEiakRAkIgCxXIwkRwcclWxgtSEpemJcyP9k91s8yLDi4r2H+9+kzDsY0HF8afO7mv9U5z4+mDJxYnQxSLF+nnWRKzTTGZYkyaMSpJoJfI10s1xmSYGEAZkirGp5sQkIbIIEmMSxLhEo1x8UJsnBCXIMLL4h0p0RgfJzCI5WNj+JhoHjqKh4nkocO5qHA2KoyFCmaigxho5Cdrabq+FB1fso4PCRjSAnkStCTaSoQpP+iO/0bj+/9S+fYrze/+hZ04HgZepDqTMP3H2d/8c8bX/5z+X/9v2j//MfO//h96xmQjDSULbRVTrdli9TkCVQVDAEVpBnPONPrsSdTZE0gKPxJnTKr7gpoZWKHpowlq6lqzFGZ+/92sb7+e+c9/Kv3rK4LCJAu8tglOW3nCRJSanrlA6ipxCHdwT3T3yvDyjnHzcjO3dTUD2biIJU4CYydDnjOLbU+jWpMMbA30PMn6ccbkTCkj15I1z5q50Ia1yIYNWgjRwZqdZ8XKsQKfzMm04KZIOUlmnBQpL17CDxNxfXkcFw7Hy8go3Moy3d1hdUzIptT4nQvyDqxefXD1ql0L8tfGhS70ss20NQoR0CyxOkINFbGeukRfxxKHcqHhw4SkdEtOtq1hngMfWMlzEGbaAI7cBAkzWkQN4xOg/vdmor1Ies5EfQleX4jSEmG0aEozs+Ojyo/vv3D2SOW+dafXZjy4UNJ6t6lq/4b1MS45duylzvSKPJfSLPvSTLuSDNvCROmxGJMjUSYHwo13Bwu3+xtu9mGv82CscKYudaIucqDmW5OyzPGZ5sRMC3KWJSXTipomJSWb4hPFBKAn1hj5pmq0ABNpiA7noMNZ+qEsdAgLHcxAgacJpOkG0HT8KVp+ZC0fEuJprFFK7DmTKTMmkKb9iJ/6PX7y96SpwMpEoep0xswJBpO+RzRxHH7yeOzE7/V//Boz8VvGrMmGitON1BXEmnNEmrOF6rP5KjO5ytM4SlNZilPpc6Y1VP92vwJGxlGnj/tB4YdvVSaMU/7+G+yMKRxNFQOlmTPHfzvun1+pz1LBquqSNZCfW3I25AaZiqKspMFSCzuOwJrFt2HzbdmG1nSmlEyS4A3MMGhTlJ5UX8eZiIoVM/LtBEtdRCvdxKvdxatdRStdjJc4Chc4CPNsDbOtDTOk7DQpO8GEGWtEizGmhQvoflyKB5PkzqL6GjIiTHhw6S/2sFrpZ7821GN9pP+6KP81oR7LfWwWupimWvOCeBRXKs6egLYnolypBHcmKVDITDBnL3AxWeJhtsJHutxbusTTfJ6LaY6DcZo1P9GcEyWiRwhpITxSEMsgkINPsDFJdbLP9HJM9fcsP3m0vGD/sS3rzp88cu3UtkuF255ebzizNi/Zku7P0s+2Za/yMNzoZ7w7THI41vJkss3ZdPuqee4NS7wbFnk0LHI7t8Tt4kq3y2s8G9d4XVrtdXGVd8My95pFLhXznIqz7QuTrQ9Fme0KFm724a114y6yY+RZULIlhDQTgyQjTLwAFcNDR3LQoUy9IJpOAFXbn6zhQ1TzNFD1xKl64tWtdedwFCYwpv1An/YjdfqPtBkTGTMnGs6dKlJXECjPYClMIE/7njTtG8DIYMo4g2k/YKeMJ0z7kTxjIkd5prEm8kPZptrKJpqKxuBm1GbxVWexlWc2fO53s3+dFSyKNnvKLOWp0zWmzVSeNEV1wgTNiROUx3+v+P13oLlff6P89bda476DPNcKp+HLJYaJWP5CtgSnb4LRM8WiJAZYExxGjEGJMfoiPW0xSFfLCqsfwqOkWxgusBcsdhIucYapYIGjINeOn20tSJcapkm4iSbMeBEjQkCJEFBhCIN5NG8W0Y1m4MYkejIJATxqtJiZ62C82M10ha/12hDXDZFea0Kcl3iY5zsbx5tzfDlEB6K+PVHfkYz2YhC9WKRgISNJyp7vLFrqabYmwGptoPVqf6tl3hb5ziYZNoJkS268KTPKiBLKJYSwsMFsbJQJK8HKNMPNZtfqtU2NDTcvVN+6UH39fFXd4Y0Nh1ZfOLkj29UkjI8P5RNzHIzmOQjy7AR5tvxcW8MsyE9tWAuceMs9RGt9TTcHSXeEWe6LsT6e7HAmy6kkx7U0161qgXfdYt8LKwIaVwU2rvK/tNLn8kq/S8s9Ly7zOL/YrXa+U808+/Is67Op5meSzU/Eio9GifaFCLb5sNa709a4UJbb4xdb4pZaE+ZLsRli/QiGaiBJ0c9gjjt6poveNEf9KY6o6Q76M621p4uVJ3IUvqNN/Rd50tfEid8aTPgW9cO3uuO/hpiFmTyePnsyTxUczCyRxmxwM0J1Bb7qTLbKl7LCoIjxOjScOgalooVTVMPPUSQpzqUozaYqzabMnU2eNZOoMJ06e6ZAXdEBr+3DQPmzDVyoWNlrmyB1oZamUFtDoKMp0NUUaKoJNFT56kpmeureNEyCmALZ/jwrVr4VO1vKTDWlxxvRInmUUA4xiIX3pWG9qVhXkr4rQd+dhHLC69ngtG1wug5EjBMZ506HeEGMM2WmW3GzbAW5jqJFnhYL3c0zwUNIOWFGdA8m3pGGc6Rh3VhEXy4NWAnkU6F/nqNwiYfpcl+LFX6WS30tFrubQ3mVbM6KE9MgXwnhYgMY+khaQNUNNSREm/ETnKQHt2w/V19561L19XOlV+uKTmyYd2hhbIaHuR8H5YzXzLAW5NgL8h0E+fZ8yJfz7SDZYufaGc53FCxwEi5wQjCCpZAhZdlwQBmW7BQJPcmUkiqhZVuz8my58+25Cxw4i514azyFO0PMDkZbnkyyP53icDbVoSjNrijV9kySVUmqdVmadUmyRWmSRXGC+elYk8JYcWGcuDDGqCBSsDeAtceftceXud+PDdrjy97hzVnnTF9qTVxkaZAh0kkRaMaxVRO4mpF05SCiohdGwUVfwR07xwuv7ENU9SaoehgoO6Hn2unNstJRsNKb+9nfQv51Vvh8BxrRmIxmELQxFE09spomVVWNrqbKVFdjqauy1VTYakpsVSUjLRV7gq4PE+vHMXCmYI31NQXa6kIdTZG+DsgMizLDoSQYfXO0ngSlbW2gG8ghJJsxoFycb2OYb83JlrISRdQoATmQgfehYDyI+u5ElAsB5YjXdcDpOBroWqHUJTrKptpK5roqFih1O5yOFwUVY0RONWdA/gHKsjWEmAVDHi4kuVJRUoyGUFvZWFfZRF8ddmeF1XamoPzY2FgTWooFN8NWkO1onGlvlGhhGGFMDeYRAzgGfkzkbxl4kHXdSboeJD1/JiHEiB1tbZYZ5rckK2XLwtT9q7L3Lklem+gTY8V2IGvboFXjwPmZMeJNGYliWqKIkiImJ4mIsQKDRDE5TUJPldDTzOWipUtpqebUFHNasoSaZEpDZEZPt2RmQHlsw8qyYqVbsKBnppWs2LYG0XOsaLk2DCjyFzkZLnPmLnVkrXJhb/Tm7QoRHY61KIi3PB5ncSLG/Gi4eIcvZ4s7dZMLaZMzaY0ddrk1epmNwVIbA5gulKKzjHTS+ZrJbJUUtmoiUzmWqhRJUIymqSSwNTOM9HJNMPlmuHxTbK4JNt0YnczXj+XqNV/87fdXwBgMK5QuR1cVq6uohZqjgp2rQlRSpampMzXUmWqqXA3ARZmjpizSUXOhYIINSaFCqgeTYG6AEqN0xChdE7S+KUZPgkVJ8VgrEA5tgdW1xesFsgmJpvRMC1a2BTtdyk42ZcYa0yL4lEAW3oeK9SSjwZ3IEbFBa1ij1C311aQ6ypa6qjYoDVu0pjNez5+GiTdChiTbigN1U4YlB9xDjJgeZkT1YuIhTUG+2ExE2ZFQwK4jCeXFxAVwDWJEtGRzTradcY6jONPOOMaUHcwn+7FwHlR9F5K2PU7NFqNqpa8CssNoOhD03Tg0azbdQEWJq6dmRtS3IOsZodXIkBsqTbPUnW2vO9sFo+RF0Aig6ARRtUPpWmEMnVCGTiQHFS/EJ4tIKaZwhNR0c2qGlJomoaSaAzG0ZDNKshkV0Mm0ZmbZIAErz56db8PMlFLSJJDkUhKQ2yeEKJ5BJA8fysWGsNHBLFQIF4P8PV0W+Dxtb7ImlM0+VM1INiqBj0vgoTJhyCWYpZb4ZVLcUgvcCmsStBdJDRZJcZkCnVSuRhpfK0Oomy1CZQr00wx1U/laaQLtNCG4HN0MI/1MY1SGESpThMkyMUgxxt64/Jnf6hkFKzQJTo+pp4LRnauBU9YkqWlR1TQZGloMdU2GqgpTRZGqOIuuONtQZbYNRtOHhvZn45xIaL6mCk9TXaitbaQLxOhJDTBWJLwDheRIJtqTcBCkIAVJt+bnOwhz7YTZNsIkCTtWzAznU4EhXzrWk4KG6ANOxQ6nbYfRssNqATRSXRWQlYwbmAOXfrghHgJZshktScJINGfGmTEjxcwgI7o3h+xCIzjRiE40vDuL5M0mezEJgYakcCE5wYyRbsGFRCfPSZztYJxkYRgtoofxSUFcfAAT40fX86XpeZK0PYjaXhR9LxY+SMz1MzWy5zCsyHhwjSb6WgINFa6ygpnWXDu0sgdRw4+iHczQi+JgornoBAEmgY9O5KGT+Oh0ESHThJRpRsyUkLKklHQJOcOckiaF0ENOMQNBg5ouZWRZMfPtmBuDzA7G2ByItd4eKlnvK4Z4lGvNgiAVZ0yKNiZHCMlhAmIIOD+2Afg8e5y6I17LHqdli9W00Fcx1pjDnjOFrzjdUlfZzUA9hKUfL8RkmRossCQutiYts6UsMMfniPTzxahcoW4GXyuRrZ7M1UhgqcUzVWIZKvFsrRSo8AV6aUaoNCP9FIFekgB9vfEzf8PuV1l5RyPwsZpEjCoKo6xtoKxJVFajqqjTIQwBKAgrSgyVuWxVRYGGso2Brhcd58smOlHwRno6Qj1dI30USIxBS7BoKeJRUBZofQuMjq2Bjj/LIN6EkWHJTZewk00YsUaUCB4phEPwYxh407CekGdQMFAuQZriRkS7kzCuJLQLCe1KxnjQDFwpGHcazo9FCOMTY8XURAkz0ZydIOXESXhhYk6gEdudTXWgEu0oRFuKgTMd78EiujMMfNj4YD4RHE+SOQcKn0x7KH8EcSascD4lhEP0Z2C9KXow9m54DVcDdXeCpgdJx5OOgeop2tYiztk+ycUOlOBgGWFuHGTM9uWQPKgoSGvCOLg4I1KSMTnJiJhsjE8U4uJ4GJimm5EzwZ2YkzOklEwpFXxGujk5RUJKMiHEGxvEGeHiobOYmGJKSJMQU03xuVLyajfe7hDTAxFme4KMd/jzoSxa7sDINSckCjEhDF0/ihYcmxNGzQGj7oDTtEWrW+mpgsSairK7I1OpCpOpCpNoClMYClO4c6cJFKeba8y20VNyw6mE0CBT0YgFMdSjGWqgGIZqElcTlMzTyxRh8yR4UK4ZJDfoFCGm+ctYIaFoeoo6WgpKOgpK+jPnomcp4ubMJSsp0pSV6cpKiJTmsFTm8jRVzNFajkSMCwVniUUb6ekJ9fSNUCgTLFaKN7ABd0IlIeNHwtng9Z2I+gFsQqyIEWdMixOS42EqZoCnCeKQPemQz6IdDHTAS1nqq1voqFrqqtmg4NRo2WG07bE69gY6tlgte7yuBxUdyDEIN6LEmgIo3AQLXrylOFoqipCKA8RG3gKeF4/jzWP5CtkBRkw/Hi1IQAsX0eIk7CQpN9WGl24rTLUSxIgZwVy8Lx3jTUF5k/U9SbpAiStO3dVAE9peNKwPlxJqLo60t4l3to91dohxsAmzNA02NQwy4Xqyie5kPW+afhATHWmIi+bi4vm4WB42lmeQaERINSXJEKFmIffyGeAnoJEOkcicmmpGQZ46mZJSJeBvKGlm5GQRIcEIF8dHJwmw8yxpq51Z612Z61zo61zpa5xoKxyoy+zJ8y0J6SJ0LEc7jK7tR1R3x6k6opRt9VUkmnP4ilMNladzlKZzFKfxlKdzlaZxlKax505jzUG+6UedMYE5exJfaYpEY4ad7ixPnLIfST2YqhHJ1IphasVztRO42vFsjUSuVgJXJ46jE8fVbb70ZfkKlopT0cIoqhkoKhMVVQiKSkRFRYrSHKryXBpQoqokkyJPS0WC0bGnYO2pBhY4jLG+vjEaI8ZhLYgEOyrZhUFzY9HdWDRXBtmFTvBi46PEjFQrfqaNINtGkGFpmGphGGfKjhAygw0pgRyKL5PoTsE6E9AuRESuJIy84UbBupAxzuBjKFgPGhaACxFQoeqJNGFFmBpGSozDJQCK0MOQI/vD8FRnOsmTS/fl0XwNqcFCergxFajKsDXKcRbnu0pynUxTrAWxZqxwI1oIjxzMJQUjjg3tQ0P50iAeYX2YBH8+I9jMOMzWMs7JLsbJPsbBNszCNNBMGCQVefGZLhS0O3gXOiqIiQlj4yI5uEg2NoKJQbgREBKE+ERjQooJOdWEkmZKTRaT44yJsUYEyEUguCQYE5PESHYCwSjRlJwgIkQLcZF8XCQXE81Bp4qJ86xpS+2Zi6xo+RJinsQg1wyXJUanG0GqoZsu1IeokcjTjWRqe+NVrTWnG8+dwJ0xjjltHG3aDxTQzImkGRMpMyaRp/2Im/Q9dvJ41MRx+hO+1x//NfbHb0jTxjNn/misPNVCe4YTapavgVIIUTWEBIW3SiBJOZCodPX8F9VBeE19relzdKYrYBRm42fPJc5VoigpMVWVuOpqhhqqPCiDtTWMdLXEaF0pAW1LxdtRCZYkA3M8QQIi4KVkgi2D7MyiunIoLkySC4PgysT7cogRRvRkKS/dgpcq4cSDU+GTgzhEH5qBBxUJN0j0QYoglL2BrgNeD+BwhDSTivWg411pUGfh3BhEXw4lRMiIlvDiLYwSbEwS7MwT7K2iba1DpBJ/kZEnj+tpCMGI5ifk+PHp4B4CeBSIQdEmjBRLXrqdIN3OKElqGCmiBfMIAWy8LwPrA16EivamomDqz4CyiOCD3MFjhVuYRtnbpLg7J7q7JLo5xTvZxDtZJrjYhFuKgoxZ/oZkyOhDDPFhXEIEFx/GgniBCWdjIg2xUTxsNB8HihHgY4V4oCRagI/iE2TCxwhJMQJitIAQBWmsMTFKgA/n4cJkb1IGstC+dF0filYwUzeGp59ghE0ywqYKsal8dCoflcTXTzNCZxhjMozQEEGiGJrBMMZEVV+8sqv+LEvVyWaKE8SAjsI4psKPdIWJhKk/EKb8AMRgfvxW78dvtcZ/qz7uX6rffKXy9T/Vv/tK78evyVO/5ytOMlWbYaE5w1Z7ppOewqWG3/7sEExPUUN98gzNyTO0J0/TnDRFb+p03MxZZMW5DBVIVlRhylBVpSmrQPpiqK1hTcI7MWm2VIoVhWJHY9gz6G6GbD+xIMREEGYmDDMVhJrwgsXcCBNujJlhHFBizgF3EmXMCBNQA7gUPzbFk0lwo+GdyRhHItoBcCHou1IQRNwBI7qBO90AWHGh4t0YZB8OJYjPCBNxY8yF8TamiQ6WiY52sfZ2EdaWwRJTCENBJsZBYkGomVGYKQ8UZQY7ZSVZ8rIdxLkuJjlOJskWhpFGVMhq/Rk4L7K+B1HPFafthFYDOeir2+iqQRAELr35bD8To3BrKfgV8C5xDlax9uZxjpZRViYhRqwgHjWMT44QkGOEUL/QE4xpoCQxhBtmhoVckMCyYYpUQBJaoik1XkyOF5FjReQYYwoiI3IkjxBmaBDCwQayMIFs8JdYX+SPEUKiBumaljtJ25+GBr8VbYiN42FjuJhYLiaOi47nouMM0dFs3TCKeghBOYKsGkPXiqBqhJBVQihqPgaKLqg5VlozjZSmMGaMI075HjtpnP6P32mP+0b9e2Dlv0Dq33+jPu5bjfHf6E74DnwPYep48vQfGLMmfuG9OLVpsxXHT1IZP1lp/AS1HydqT5muP3UGTmEW8ntucxQxM2djFRDR1dWN9HSlBlg7GhlYsaFS7Gk0RybNjcOAKzvY2DBMbBhpyo804YWLOLFm7FQrXratEVRAmVb8ZCnyC+DhRsxgPgO8BciHTQZ5sYhQ/YI8gRUK1h1cDgUYQjmSsJA+e7HIAXxGuJkw1soMPEqCk328k2Ock2OktVWwmWmgiShQLAwS84OBThE7yIgVLmLHQgCyF2U7mEAAync1z7IXp1gKANZII3owlxjExgeAO6FhvMkoD4K+C14PfJsbREwey0csCLIwC7EwDzQT+RjzvI0M/U2E3gK2B5BNQnmS9H2pEIZw4eBaOAaRXHysgJhsIscF+XFAULoUucUChU+aOSNFAtwwocJPlnJSLLgpFpwkCSvWhB4rZkSJaOFCCvID14bIzUYoFLwYcJ3gIKl3Ieq7kfSg0oTjDDUkhHAMQtm4YBYGuXlI0fEnawZSoHTXCCCr+RFV/EnKwVT1YJpWAEnNl6jigVOETMVMdapQcTJDYSJ+6g96E77X+uEboERt3Nfq47/VnjBed8IP+pN+QE35QW/SuJrKsnfDQfhVVt6915mlpDphitqEKRqTpmpPmao3bQZmhgJOFo/koigpM9RU+braEizKkmhgTSZYEvGWRII15LM0sguL6sOHOpYbgrgTw3BjTrgxK86UlWZpmGMLBbNRlpUgScKJMWGGG9FDBQzwLv4ckj+XjDRgyiMH8SkBkMQgIkPDl0P2ZVP9DBkhRhzgL0pqHG9jkehgm+gC0cElwcUl0sY6SGIabCIKNhEGigyDxbwQMScE9itGfpUvBei0F+W5SHKdTVOthXFm7HAhNdiQ6M/CQYYL3sWTqAtj70VGe5CxnnTIV5ghkK9YmUNim+jiGG1nFWYhCbc0j7CWhpgZ+QuYPgyCDxXnT8cGMfHBLINgBjqIgQphoSN5eKiPIDWBABQDAciYKEtWSDFCYoyQDHVfjDE13pSRYMZKMGNCI1ZMjzamRRpRwgTkEB4hGPmbLQQ/iMssgheDAD4VQrALGY38vXaCrhsF7cPE+QPcLIMAFi6AiQtmG4SwsYFMdAAN0NEOoGj7U7R9yVr+VB1fkroPUd0Tr+aGVXHFqtjrz5XqzBSpT+cpTwNuKNMnEKdNwE4aj5k4Hi1jRX/SuOovY0V31lz1SVO0Jk/TmTpdb9o01ExwKgr42bNJkOEqKtKUILFV5qqrCnU0zTAoCwJOiseaGWBNcTgzA5wlCe9AJ3tw6H58ZqARK9SYEyHiRojYcCmnWRlmf0hsecnmXKhlwo2ZoXx6IA8QIflziAFcUoAhoiDAxZASxCUFIayQ/Thkf0MagBIjESZYmaY5WWd7uMwP8JkfEjQ/LDwrICDJ3S3BySHO1iLa0jTS3CjCXBAqZkMtHWkCq7ATLQ0hU8lxEkPNjNxcEbMgq5XnK8AKkq+Q0V6Iq0B5EDHuFANvNs3fyDDITBRpYwmgACUhEnGouUmEhSlEN8hmArjUIDY5lEsK51Ei+ZRoARkUZ0xNMgXnwU63YKZKkXu1iRJKoikpQUyJMwZQkD4RfCIoUkiOFMC6iJ8IZkOmgvVnYnxo+p4UXQ+ynjtZH9yJI17PAQ95m66dgY41VssKC1MdG5yeFUZHqo/czpZoq0p1VW3QGvYQQ/G6LoA7BeVB0fOi6PhQdHypOj5kbW+SpidBA+pnZ4ySK0bJBa3sglF2wao4YZXtUEpS7TkidQWu8nT6nKnEmZNqq8q/hBX9Ocoak6frTJ2pNwPS21kGc+aSFJVAZCUVqpIK5CtsdTWeloaxHvgVDLAiQVgxkAlnjsdZkwwcqQRIRT1ZRAgrfhxIMGmRENclbKh9UqTcJAkXiQIiZoiAHmRI84cYxCJBUunDJHozwQNDgkn045ACOOBpyP5cii9shEsLNuJEmxsn21tmujktCPBZHB68ODpyaWzcosiI3AC/LC/XLA+nbA+7LBfLTGeLdAfTVDtRmq0w3U6YZS/McxbNcxVl2fOTzFkxIkaY7MEyXJr+iF/RA7/iQYTKWdeNoOdBwUFW5C9kB5sZhVuZR9laRliaBUuMkcrIHPwWL0DAgOMJYBCCoSLjEEM4+AhDYiQPPAclXkRPNKEnmdJSzBmpUnqKOTToqVJmiiz6JEqYsPckJAyxYRpnQos2pkbwkRw5kI2DWsybqudO0nU20HbEatmiNKz01CSaSmK1OULVOTyV2SCO0izmXAX67OnkmVOI06cYTJ2Enz6JOGMqZdY0+uwZbKVZfNXZIvU5xmqzTTTmSLQVpbpKUh1Fqc5cwMJcazY0LHXmWOvOcdBXdEIrO2KUHdBqtmg1qZ6SRGvWhdqa387K+/dYFU2d6XN0Z8xBzZqLV1Qmq6gjvxOppkkHqSI35dgaGjwdbWO0vjkOZwGFDxFEMCcSLUgkawrJnk6BYsSbS/Pj0QL5jBA+M1TIAFbiwfdKwMGwokWyxNaQ7MPCe9IM3MhYVyJSITsa6NlhdRwMdJ0JKA8qzlsGjTeb5MOhBvBYoWJ+rJVpqpN9jrfXotDgFXExK1NSVqekrYiPWxgamOfjluvpmOdhO8/dap67Ra6LWbajONvBKNfJeJG76Uo/6eoAy2U+knkuxtlQEFlxk82ZiaaMGBE1QggeghDENvBnYP0YGD8WPpBPhWInyIQXKjUJk5oCNAFIXENS9SCRoR+PjqBMNwhm4UO5RBBUQ+E8EriKKCNKtDElTkSNE9PixTClgGAXMDNantKKqBCG5IoSUmAVcDNhhvhgjgF4F6R0p0IcRLmTUC4Geg5YbSt9dTNtFSP1OTxVBZ4a8uM3lFlTidMnGUyZgJrwo8748ZrjvlP77jvNceN0f/wBO2UyfvpUAAgz+QeILLjJyBtMMk2gKkxizJ3CUZpqqDyNrzJdCFKeYayqYKI+20xrjpnmLDONGRfrvoiVUB//AFePAFfPIHfvEA/vMC/fCB//KF//KL+AaP+A6ICAWP+AxICg1JDQ9LDwzMioLETRWVHROTGx+fGx85Pil6XErUxLWJWWsDotcS2ihA2Z8ZuyEjfnJMF0fUbcmpTYlUmxy+Iil8RELIoOWxQVujAyZEFE8LzwoPkRwQsiQpBfsYb5Mi2Ji1yaFLsqPXFDbsa2hQt2r1xxcMO6Yzu2F+zec3z3nqPbth1Yv3bvyhV7Vizes2IBaO/yebuXZO9enL17UdaexdmHlueeWLfg5LqFBWvmHVyauXdh6s78xG258Vsy4zdnJmzMiN+YHrsuJXpNctTa5Oj1qXFwhFvy0rfOz9m6KG/rwrzN83PW52Wsz03fkJexNidtVUbSsuTY5YnRKxKjVybHrEIUvSoF0ZrUmHUZ8RsyEwa1PjMe5qxJi12dGrM6LQaZftTK5KiVSZErEiOWxocvjQtdHBuyMDp4QWQgaH5EYH5YYF5YYE5IQEaQb3KAV3KAZwoy9Urw9YjzdovxdIt0d450cw5zcQxwsPG3t/a3twlxcQx1cQxxdghytJXNQeRnZ+1na+lnZxXoYBPiZBfiYh/h5hjp5hjl7hTj6QKbSvBxT/B2T/Byu3X92pew8gs2cnNj9u+zd0P0R9nbIfrV3fwuVsbs/5SNsTJmo7UxVsZstDbGypiN1sZYGbPR2mhZefr0acudlpY7d1pbW4cv+x324OHD9PT0w4cPD18wwu7fv9/Z2QmNN2/etLS0wBTaXV1dDx8+HNazqKiopqYGDnjTpk3DFo3Z77HRspKammplZeXm5iaRSKKiotra2ob3+CJbsnTp/PnzYVyHLxhh8fHxW7ZugUZDQwOPxzt3HnkhdPv27dnZ2cN6Ll26dNu2bdevX3dxcRm2aMx+j42WlZTUlIMHD0Kjq7s7OTk5NS0N2t3d3VevXn3y5Am0e3p6Xrx4AVf5nbt35au8ffv29u3b4IrevUNK92fPnjU1NfX19Q1u81V7e3xCAowruIf3iI950Nzc3N/fD+2Ojo4XbW337t9//fq1vPPhI4fDI8KhsWzZMkB25cqV0I6IiDhz5sx7mduDjcvXXbJkiZwVZ2dn2PWjR49gI7B0YGBAvqlnra2DRwIzr127Jv8ISLu5+fGTx/JuYzbMfgMrhw4dkreBDxMTk4E3bxKTEuEihpGrrasrLSu1tbUNCQkxMzMrLSsDUBITE2GRo6NjfX394SNHQkJDc/Ny/f39B3E5cuSIpaWli6trdXX1uvXr7ezsYKmnp+erV6/27d9nZ2/v5e19XuY/wB4/fgw7Bapgg3X1dbAWtEUikazz/rDw8JycnKCgIBjvoawAPUZGRhGRkdDOyspCdnr0aHBwcF5+nn+Af29vb3RMdFxcHOwXtpOQkBATE+Pn7//v8pp/MfsSVhovXwYgwFdcunRp586dcK5XrVoFrPj6+sLSNWvWwKV/8eJFZKgGgKg3wA3Erw0bNxw4eNDe3v7c+Z/e+83IzDhWcAwSEaFQ2Pr8OcxJSko6cOAAsBIcEix3SHKDNqCzbfu2oGBkvqur69Zt20JDQ2HjUql085YtsHEbG5vLly8PZQXQAVYg17na1AQow6FYWVtv2IAciYODQ119vaub27z58+sb6mGbnl5eeXl5wP3gTsdsqP0GVuQxCEJJWHjYggULgAYnJ6fKqqr8/HyICGVlZZDHvJflEDBaclZgs4Os7N6zB7LOo8eOwhYGNytnpUPOSmsrDBh4I9jR/v37s0YkIuvWrwPXAtuHNuwR2jt27IDtAyvgWmQbPwbADbIC+YqcFYhod+7esba2hiOB6e7du6HzsYICCD2w04Ljx4Hg8ooKiKEnTp6AD1VS+plfYRyz38CKubk5nGhTU1PIRiE7ab5+Ha7jhQsX+vj6rFi5ovRTVmBUwENADIIBO3fuHIyij48PJMgBgQEDshJGbggrx45BY/369XDdQyzw8vZqb29HWJGFjKHW2NgIWe2tW7egDbEJ2jdv3oQ2sAUuDTYOERDQ+QVWgMWCggJvb++09DTYV29fHwSv+QsWODo5QWCF7AfawMqVK1eG7XrM3o+eFcg0Hz5CDCgZnAkXMYwWjMSr9lcw/7ksiCD/fPXqvSxqQG5792Oq2/q8tenaJ7ktGGQGnV1IJQwGG2++3izPQCEqtb18ObTne1myDH2GtgeDlDxdlee2cDCQzEIbEl5YDIcNnWGz8gQWDI4TOkOy8l52tEDJS9kBw06vXL06lqz8nI2WlTEbszFWxmy0NsbKmI3WxlgZs9HaGCtjNlobY2XMRmtjrIzZaG2MlTEbrY2WlXv37iUmJiYkJLTcuTN0/pWrVwfba9etKyoq2rR5U//AwI0bN4b0en/g4MHk5OSUlJQXL14MnS+3/v7+devWDZ/7i7Zs+fK3b98Om7ln796h/9ywYcPQf8rtquyAlyxZMnzBH2OvX7++e+/e8Lk/b6tWrbra1FRW9pk/C/bfbqNlxcvLq7Ozs7u7W36DH871rl27Wltb6XT68ePHoUNzczOHwykFKys7fPiwQCB49Pinh/sAmfxNJbDTZ87k5ua2tbXB6jk5OWeLinp7e1NTU+VLy8vL582bd+zYsXfv3u3evRt219HR0dXVtWjRos1bkPdXqqqr8/PzfXx8RrISGBT05s2btWvXAkl9fX2wo5aWFjjO3Lw82Ah0ePjwIYPJOHX6dGBg4IKFC+XvMxQUFOTPmzf48sOhw4dzcnPr6urgAIBg2NqrV6/q6+vv3r176dKla83N8vu/ZeXlsC/581T40JcvX05LT79w4cLJwpOw4sWLF+Uv5axcudLCwgK2sH79+iVLl8pvFsMFg2zq2jXAAno+e/YMLjMQfKL4+HjYNRwDnNVFixfJj3D3nj2LFy+G03779m04dbAXWAXOUklJyYdP/qfYqFgZGBgID0feHVm9evXGjRvz8vIA/Lz8/HPnz8vfKZEbfE6Ypqenw6nJzMwcnA8WGxubnZ29dNlSONGhoaFXrlyBOREREXC+AgID4ZPLWYFT6efn19vXJ5VKKysr161fD8ABZ7Durdu3d+3eDePq6enZ29crNhF/hpXAwO07tgN8586dW7R4cXR0NJxr4AZO7qDfipQ9tLK3twf+/AMCACY4kvPnzyclJck7WNvY9PT2wkHu3bt3566dYDBUcHgrVqwARmGo5NADgpcaG+GSuH79OvjLmtra+w8ehIWFbd68ufHyZfDB8gcO8Elh1/sPHICxhzZs4b3Mj6ampcH1BhdARmbG1m3bYBfbt2/fv3//ICv2Dg4dnZ0BAQHVNTUIFqWl8xcs8Pf3v3nrFnRIS0uD+bW1n/lFnT/ORsXKu/fv3d3d4XJpe9nm7e0NY7xt+3b4eHB25AzJDQYVpukZGe3t7cNYgXPX/vo1jC64Hw8Pj/0H9hcVF7u5u8HZ2SnzT3JWYBgiIyNhRy4uLgcPHSwqLoJrNyIyEkYdMKqrr4fzDuMBx+Pr5/dmCCv3ZH4e/Aqcfbj44MIFAuSsnDx58vnz53BdyntGRkXCVH7Y8QnxQFVgUOCBAwdKP7r9qGgEppiYmGXLlgHce/ftg6sfEFksG9rBzwVuA0buxIkTAGhhYWFwSDCgDKDDR8jKzoLLSd4NQh44jJWrVjU1NYHrgs3K52fn5Cxbjmwf6IFjW758OaAJfeCQ5KzIjxAoPHjoUGJSEpwoIOPx48fg5xISE160tW3btg1IejvktY0/2kbFynvZ30UMCQkBLwJXLXx+GNGY2Fg44lWrVx05ckTeZ7EsCYCIC6Po6+sLDh8uBfkiuIYgfr2XPfNLSEwEMo4VHAN3DXilpKZ09/QsX7Fc3hOuY/Ainl6erzs6YFxhyGtqasBjR8dEA6MvX76EYYAObu7u4BhWyN6OA1uwYEFUVBRcoI8ePYKzDIcHfgjiV3V1dUVFBay1detWeU/wN0BPXj4yljBIA28GYmJjIJM6e/asvMO8+fORDS5cKHeBsPTWrVtHjx7ds2fP2aKz8jgoN/BwEOkgOsM0IyMDRl3unDw8PRsbG+V9INTC1QUHAwcPFMKlIp8PWzt85PAR2WaBALgA4JMC5XAOwS3BwchpA6cI8MEngosNLhXIwGAvS5cuhfwPwjfsFHzViZMnPxzQH2yjZeVPs8ysrPx5+WmydzT/59vIixouJIgjQ9/S+svY/zhWxux/rI2xMmajtTFWxmy0NsbKmI3Wxlj532eDv8ryJ+fPY6yM2WhtjJUxG619ISsDAwPdPT2dXV2gru7u/v7+P9kf/l+wd6862kprXpRUtxV/qpKf9LIYVDNE8jlfoldlde97kMdVP2eFhYUIK/0DA6Nk5d27d93d3R2dncME0Ix8QDNmX2wDV67fnYFt+dtMRP+h0PIfs/54KbRoMnuf/vRNv2H2wa+MkpV3su++jwTlJ1z+ivcr/1uszSvu9n/MhiG8Ix/FP0v3F6wZfigf7bexAl1HIjJUPbJn7oN2/fr197KfUwD3dbWpST5T/vUteRsa8rcFPmt9fX0XLlwYPvf/gMEF90Li3YKwonBnxHCO1K2/zQKBB7r6z9nX/yGb8/fZt/+m0PI3pH37bwhzI9f6rO5kfHiEN9J+GytDncqlxsa6+vrSsjKAoO3ly8H5g49CHj9+fFL2WGv37t3t7e1Hjh59IftKX0tLS0JiwluZyR+YDd3FUAPITpw8MXzu/w0bZGU0uokX3lOkXXfwe2bl+9gj4o4W646F55W5hLYF627/fc5tY8eWb9RGrvU5zWrJWDj8UD7ab8htAYJBIO7evRsfH79hw4aNmzbl5+dfvHRpcNHg15Vh/t59+x48eHDg4MFr166t37BB/t1VYGXfvn11YPV1gBGwckZmRcXFV65c2blr5+bNm48cPbJl69ZX7ch7MKdOnz585HBPT8/efXsLCgpu3ry5Y+fOU6dPAXyHDh0afEfpL2YvJF6jZAUczy2q6U2O9XOpH4Qt8CiPwtPvOwVfUSY+C059aOrZYuHV8p36yBU/p38TK+AGBoGAcS04fnz7jh1btmyBxpEjR4axAo7k6NGjgNfWrVthxfqGBvmvMr2XsQKRZfee3Xv27qmvr79569b8+fOBlV27dsF8WHr+/HkgrKq6GogESmCV4ydOlJeX79y168zZM3CcsOX3st/6glVejvja81/DRsnKHSTEKNykmd9m2z6x8Ln9Hwo3/jHrXniGnJUnhk73HIJuh6f92ayADQIBAQgu7u07tu/bv2/NmjU1tbWDi+TVEBCzcePGs0VFBbI3LHft3iX/8ab3H1kpLikpKi5qaGgAv3LgwIGampqKysoLFy/ev38flj56/Bjm3Ll7Nz0jvbqmZufOnS9fvYJpWXk5rH7iBBKYSkpKjh8/funSpSEH+NexUbICoDxyj74fkXXnO41HNgEP7ILv+MQ+1GA9MPe8Nhv3lGpx8x+zXqzZceebP52V7p6eQSYGBeXPYLtL9kKT3N68eQPeRd6Wv1AoN6iVgKd3sili7xB7+erl4L/eyKdv3sD/IJFCFslyINiIfIPyHxbs+/jPv6SNPl+5/Y9ZLf+YK2/f+qdSyz/mQOkky2eR3PY2UnWPNrH9d7ICgzSSlaHq//ibbGP2O+2F+ahZGTHnd2iUrBQWDl/4OfuFsnlYwTxmv8fa0pfd+Y85Pw3hsJtmQ0dXdhtmxKh/iW79fda9XQeGH8pHO1lYCL4AYeXk6Fh5L7vBPzTudMjC0NAoM2a/3951d9/zjGqaTbyqgL+qgPtU2EE1KWCvfRDu96gJNjuXcDM+U55uftYKv4AVuUE86pcZoPOXfL30v93+5LcOfnVfX87KmP1fM8hXxlj5X2f/PW87jbEyZqO1MVbGbLQ2xsqYjdbGWBmz0doYK2M2WhurmcdstDbGypiN1sZYGbPR2kdWBvqPHS8oPFV4tqjojxBY8Zj98Vb0h+nUqVPHCgr6gJWe/jdjGtOvaoyVMY1WH1h59uJl3vwF2bn52bl5Obm5fxllI4IPlT9y0V9AMFh/zpDlz5sHhHxgZe+BQ739A2/fv//Z9xf+19pf8kPJ7Z3so/0JjxD7+/v3HTj4gZWTp07/2Q8u/0gb+ihWfjZH/9F+Z8+hu/6dGo39Qs8v2NovGBDygZUTp04PXyizN2/fDrx5M0Tvhmjo/F/W20808AYEBdgo9WEjMhu5VK7e/v7nba23bl+5dPlyzbmGM5VVJ8oqj5dVniivLKyoLqxEdKqy5nRV7enq2rPVdcWgmvqi6vqzlbWnyqpOllYWllWdLq+Gf5bU1JfVnauoP1cpV8MQnTtfJRO0y+vqy2rrymvrK+rqYXrl5s2XHZ29A296B97+jN709iMaDP/yf8rV3fdBXb0fpoj6fl69bzplfbo/VVfPADLtHejq7e/s+UkdvaA+mHb29Xf3wxlDTinyd0tl78YPH/XP2a+zMmzUIUwN0ejHe9iKiPr6B2e+6ZMd/bAN9vX3D9NnZ8rnd/f2PWp9eKWxtqy8vKik6GTR2RNni06eLS4sKjlVUnq6tOxMWfnZsvKi8gpQcUVlaUVVaWV1WVV1aUVlSTmooqSisqyyqqKqurK6pqqmtqoWVFddB6qXTYervKqqtLy8tKICGmWVlZear7W+bu/qH+ju+1nB+H2qgWH6aWi7BxD1fE6yRa8/qL+9u29Qr3tk6u5H1AWL+tu7+uR63dUH68Ix9AElckDeDfE3Q/zPz4EzGlaGj/EXsTJy3c9vZCQHgzT8cofu3v7Hzx5cbawqLy8uLj5dVFpSXF4GKqkoL62sAJVVVZZXV1VWV1dVV1fWVFfUVFfV1X4QYAHDX19fA2qorz3XMFIwf+giaFfWAFilVdXlsIXK2prLN28874AxQhzGSEq+ABfQh7Efpp9A+UkAKTLt6ZcJuvWCC+lCXEi//DqUfYXmIx0/o3dv371BHP+bz3qaP42VL9EwUEbyMbRDd19/a9uTOzdrrzSW19cXlZT/xIocF2AFVFldNcgKDHBZVcXZ0uKTZ06dPHvqdPGZorISmFNdVzuSGDkrQ1VVi7BSWV1eIdva5ZvXX3TCpfsrrIzA5ZdYkQWOEcT8DCivkWlPZ09fTz84j4EBeXiRj+IILJB5b9+9ffMWgkU/AtMn5/wLWQEgR2YfIyVPJpB84s1HjRj7z6rvzSf6ZNEIIAbnj9xOT9/A8xdPHtyub7leffVyWUVVWVFZKWgoLnJiEErAqch0prh436FD67ZsXb5+46rNW7bs2n305PFyWN5Q+8ug1DTUVdVWVtWUQxwrr4TtlzXeuN7WCWMNhydLQfoGekdQMhSXEdB8oqGsdH4gBhwG4jlef/Q3HQg3SOjp6EH69CCAyL+I9+kQyv8pcxtgb2Xf1gNCevt6enq6enu7e3t7+vp6+/p7e/t6kf/6+j772yj/NlaGa8SMoRo50r9TQE9vb/+LF0/uXK+70VTVdLmqurYcnMRQXIazIgtGhWfPAh95y1cmL1ySuXz1ko1b9xw9WlpVASjUnkNcywhEPmEFQAHXUlEJGy+7fOPGyy6IhAgr8lQMpj0jKBmKyy9IzgqgJ8flo3dBQAFEOmXqQvjoR/IPhJC3SIAZ4T9kzgOu5P7enq6erg4ZGd1yMnp6u4GVvr4eZA4SqQbk0Wrgi2PQrwz7L+iX7TeWQr+qnv6+Fy+e3r7RcONa/bWr9b/ACpK1yFiB3OXkmdNb9uxZsHZD1qp1ueu2Lt+2Z2/BiVLwOA11I+AYzkplTcXH/Bj4q7wMdVAnMIBk6HJcPjgYedXTh3i+34KLfOnHwCTzLrBKD3LzFLwC+AaEjkH7CROZ73j7FjnFMPqAQnc38nWujtcvO9vbujvboQ2IACjdAEp/L3QDLwO+Brm3MCRCjbQ/kpVRaMSMz2skGUOFhKR+uMJ6W188vnnj/OXGunMXamWJSAloKCtyUIawUnWq6Mzew4c279mzYfe+jXsPbDt4+OipU+UIKwgNI/j4SdX1tZU1lXJWoGwCVpCaGVj5GEY/hs4PbgbhZgQroyMGEXSDLcj8x6dD+XFoP0SWAYgi3QDHx+CCeA6AA/nqX8errs52uVMBniFRgUR2MNsdzGsQzhBuPsPL6Fj5xN7K9Bn79BbKp8tGjv+gfn7pYHMkH0MGQ5a7IJVq79NnD5ua6hvOVUHSCnwMY0We235gReZUgBg5UmdKSs4Ul5wpLT1bVgrVb40st/1VVqpqKiuhWK5C/Ep5dcWHGDT8OD8EI7lGgjIqVvr6IV2VpyKyof3gPGTuA5HsFPV19yIupLPzdUdHe2dXR3d3F5KI9PfCSYIDgS4QjWQrfwThw6ZkxU9/70BvV2/Xq66OF92dbW/ffOZbpKNgRXY8H4b1w7F9XoMdRgz6CBvZ47OS/18GzWdZGTokkJ49a31043r9pYs1tfU1AIcclM/6FZC8eAGqQFD0VtfXQdksg6BOrpF8fMoKxKCqyqoK+R0ZSIcvNl192taGuPUBmd4gN+UGKUFylxHltByIkcQMnQOh53VvbyfknIN+qh+o6Ojtfg3Tvl5IOOQpCJJ2ICkIknwgngNxGzIWPsYmOSODgMjS297Ovp7X3R1tna9aO14+7Wh78vrFY2iAcxzOwWhYQUbip7EbzscvCOk/YuYHjcTic5LfpR0YUtGN1AeSYGD6+56/ePrg9vmW63UXL0JsQPzKL7DyEZcqKGGKy0uhcoae8j5VH/zKcA2riarraoASUE0tMFdd29DQdOvWg9Znra/B3fe0d8MwDvQOAQWGH8lJe/uAp66PuEAC+6qz+8XrzuevO9s6Ol91dbfL1kXU1dPW0fXsZfvDZ61PWp+2vXz6ur21q/NlN1z9nW1dHS97uoAi2FLPx5gis5+G7p38UZgsOsEZAsh6BpBqWg4cOJ1OSF+6O14CKK+BkrYn7TJQul8//0K/8uRFW2v7azhuJFeWD+LHIX8rK8AG9e9lZSgRciZG9vmps+xMvGh79vB2Q0tzReOl4vKqkrMjctthrIDOlhYdOnZ4267t6zat37R1y+69e44XnvyYrwzXsBK6GrxRTZX8Ni8IqZxLi8orz5y/WNt49fyNu7eAAPlte6hcIDw9efny7uNHtx8+uP+sFQh4ARy86rjz+On55uaqxqvlF6/UXr56ofn6ldstV+/cuXr37rXbLZevN9ddPF9dW9l4qe7enattzx70dLaDC5GPOnKCZfFo0HeAv4BI8O4dDBEkTj0QVvrAA3W9Bqp6Ol+CwIsgvgRw7e3o6XoF4QZmgl+BaW83ZDMd4LSAvGFJkdx+nZWG8+cuXr7UfOtGy8MHj1qfP38F+TRk0oinQ4ZwCBCD7RFDOcJG9vjd6hnoe/78UcuNmuYrJcAKZJ1F5Z+wMvSO3GAMKjx7ZvvunfMWLkhITk7Lylq6ctW+Q4eh20hQBln5aQ64n9rqQVxKSor27ty0bXHq0bX5RTuW1xQfu/ng3tO2Vw9bX9y+//BSU3NZTe3RU6f3HD5y9HRRaU3DhStNl641FVVUrdiyJ3np5vjFm1OWbM5ZvXnZ5h1b9uzfd/jA0YKDhaeOFRefqKspvn39ElwIPd2v4aO+lRHxIR9FfAdcpkg8eQNZDQx2T3tf96vujhddr1u7ET3vQvSiqx1Rb3cH4oqQDAZJYgaQO3ZvPl7sH1KZz2Ais19npba6qKbqdFXl6eqqM7W1pQ3nay9evth8++bD1tY25EdX+sAD9smEuDnZXbiBD44DyYLl04+MDKa8n3Mtn7W3H1cf6pY+zJeZbF2YQMR++rTldnNl8+XyK43lldUIJYOsDC2YB0GRsXJ2+67di5Yuy8jOzclfsHz1uv2HD0O3kaB8jpXqGiiG6iqroYFkSKW7tq5dlxJ6YFHK2c2LivesLSs5U15XA/lywanTuw4fW7l936KNO1du3r5t957jJwtqqkvP1ZcXnT2xftuunBUbc1ZvWrZx27a9e46eOFZcevZcQ/X1axce3Lv+9HELhNau9jZwEsg5hoRWlm0gGSlkccAH4jkgJ0WY6Gx/1tXe2vnq2euXjztePenuaO3pbAOH0d/XOdDf/WagT0aGPE79RMU7pFqG+f3IUqTD539w6ddZqao8BR+2pPRoWdmRirIjlWUFVeWFNTWljVcu3L575+HTZ60vX7141f68/fXz9k4IveDgkGcQspT0oyDRetuP4IEM8MdBlkOA6K1s3ifYDCVjhIYDJtsH1MxPn9xuuV7ZfKXi8qWKyppP7tvKWRlKiVyni4v2Hzq8aeu2tRs3rt24ZcuOnUeOFwzGoJH3bT/MaZDNqa8GUBAhN3nryioq9u7atGNxSsG6/JIdy05vXbpz84ZN2/Zt3nVg856Dq7buXbhm56K123YdOFRZXdJ4sfrKxaoL9VCDFRQWHq+qLGm6eu7h/RttrfdfPX/46sWjjtfPe7rakQQWOaM9MsF57UWuygFod8ny3U6kAxJKXnbLgwg4ld7OfuQpUA9cucjZkpXFP8Wo9/LUVl5FgXMBd9zZC5GovbX71dOutse9r1r7u17JKqbh9uusgF8pKzleXHyspPgIBPeKkiMVpccqyk7W1pRAxdF87cKtm1du3Wq6cePKtRuXb7Q03314H0JV66vXL5BkrQtytA7ZE6xecDmQMr2VpTvvEIw/SH7fSEbPKFn5RHLgBt709vU+e9Jy/UrppfNnzzeUVFb/xIoclEG/Mlj+yJ4HVZ4pKYZIdOL0KRA0oD/MHwrKz+lTVuoh6p08uOn48uQza7KL1uUdX5ezcd3yZRu2r9yyd+OuA/uPHjtWeHzfof0QWaprwG1AhCw4fXJ/89VaIKMTGekOKHtl9xR7epG7I4h6eju7e15D6OnufIUkHEhK0d0PCQf4GGSYZSf1bT9yImUxREaGnIkPiYzMA72Vl9XgVwagkpJhJ6uA2rtfv+hub3394v6Lp7efPmx+/ODK4/vXWp/cgT7DORgNK3du1jc1lp2vP1Nbdbyq9Eh5yeGykqOV5Sdra4svXapubjp3+2bjrVtXrl+/dPVy/YWLNXXnqqsbqqvP1UFSdu7ypcvNTTfuttx7+vTZq3aoDjqhNEBCBjhQoOT9G+QlmI+IyB5iDYLy4ebSp9yMJGkwre7t63n25F7z5ZLGC2cvXyyvqSkfjEGDfmUoLkMLZrl+rloeSYlMiF+prq2oqUNu8sKcqpqK0sObipZEn10SV7wq8+TavE1rli9bv2XH/gNVVeUP7t54+ODW+fPVBw7uOXh43/4DO/bs3nLq5KFH95p7Ol/A1QTZBoQJCBa9Pa87kSIWAsrzrvbnHS+fQZ0Cjd6ul/19XW9l92uHQoHYICAIGm+QukC2qf4+KKpfD/S+BleBOI+OF7Jpm3yKZDOvnnW1PXn5tOXR/as3mxvq65BbDVUVpe3tn/kl2F9l5d2z+1ee3L14/1bDraby5kvFjedPX6g/feHc2SuNFdea6m9ev9hy6/Kd21dv3rx87eq5ixeqqmqKikpPnj5bUFxSWF5RVFVdUlNbDtH3wqX6phtXWx7ee/wC8TovOyEB633Z3QNV4qsucD89nbJ8eTROZWjx9YGVd5D397Y9f3j3enVLc1Xz1eq6usqRrAwFRc4K1MyyReVyyZf+HC6fzqyDNAVYqa3/wEp1TWnF0Y0lS6OLliWWrM0r3bKkcPfakwX7aqvPPrxztfv1s87Xz1tuNx06cmD3gX17Dh7cu39fwbFDd25d6mx/3NUNfuUV5KSyzLQdSUihPH71rPPlU0g+Ottbeztf9vdAYtv3MQNFnMjbdwOyJ8X9b5GnrjLUoMzpbOvugFUeI5ttf9L9+ml3+5POl4/an99//uR26+Nbj+83g549utHeeqcLcpr2Z+3PHzy+39R4obKw8MTRo8eOHi148eLFcBBGw8rT+1da718GPW5puA8jca3yRlPFjabK29cbWm5cvHOr8V7LlXstTaCWm403r1240ljbUF9WWXW2rOJsRcXZqqqzNVVF1ZVnK8pPl5UXlleehkyi4UI91FYXmy5funrl4tXL569cvdZy996TZ60dnT3InezhKPyqIJvu6ut+/qTlblP5rcbiSxeKymV10LAANJQSmaqLy4uPHj+2Z++enTu37d6768CRw6eKzsKinwLN5/zKICuyGCRnBQJSafmRzaVLI0uWxZauyajbtfxK6b6716qf3L/S3vagtwu5lB/cbT595iQyHMeOHTp8+Pjxwy03L3a0PezuakNY6WnvBx/Q3d7T/hxB5Ce1dnc8B5IGejveDPT2I/kKEkEAoD4IXohe9HRASvsEgGh7drf18c3HD5oe3r/66P61xw+aH9y9eq+l8eb1C3Al19eWVlUVV1UXX22sev7wWuerxz2Ij3ne0QoY1xeeLDh87MiRgqPPnz8fDsJoWLndXHfvZv3D2+fv3ai521x182r59atlN5qq7t5suH/7woOWxgd3rzy8d/XhvSbZMV2+feNC05W68+cr6usgzy+7cK7iwrny+tricnA2p4+cLDxYcPxQwfHDhacKCs+cOHX25IlTx/cc2Ld9377C4lJIfJ60veyA1EN2R3skEz8niF2tbU9vXq+9dun0xerj1VXHS8qKSxBX8UmRPBh0BkPPqaKinbt3L160OC87c/78+avXbTh09Bh0HsnHENU1nK+pP1dTXVteUlZYWV3+4Yk0+JUjW0qXRRYtiixdkVy5Ke92w4kXj290vX4KBLzpB5jbnz66XVR0Clg5Bi7lyOGCgkO3b5zvePlokBVEXS+7XyFOBXEtMsGlDw6g8+VjaMjcBpD0GMB73Xq/7cmd549vgZMAOO63NN66cfFaU8NF5M51eVVNSWVVSVV1Kbj28sqi4pLTcKoLCo8fO1Fw7GRBcdHJa1eqnz+58f85Ow/oqOq0//93FZUeIBBC70VAUBQUxYpl7SugAoqU9J6ZTO+93Okzd3rvLTOTZNJ7hRBC6C1AaAq21dV9d/et+3/uTGBdz77vupvzOc955nd/9zJz7/c+5XevR1Dqj9/e+ubzSxfPDsbrEq5IyBOOQsfycyH8Eq2cPtl99lTXhbN9F852XTjdcf5UOziXzveNXRrENDR24s714S9vjnx5Y+TOjZOfj41cHz0+ev7ouZGesyO9F84chdpt9OLQpXPHTg73HO1v6epMNjRG6+oiQG1tuLYunEhEHC6nCFGo9RZXqLqps/vUpcu3vvrqO4gx//4f97Pz/82f//0/bt6+cu5M94UznaePtw0OtPb0j0eUPigWjh4F+gdBKNhrkeMMYba5o8MXCmtRo0yuUGtQs9UZr032Hvk7WkmnnqHjx04P9RypccZRnqBo7zsvPLXrvbeUKjXI7thQ/2B9sF9H7tGSIa70epQXhlq//90dKEX/E6tF/vTnf/v9nc8vt3e01CXrQCu1dWBrr1858W/f3YFaZDyo/BlLIjDyBwg2II7vvvzTd1/96bu7f/j21g9fX//uK+ifx+7cvnwDixMjF84dP3niCDQZRwagMW/p7GhsaWtoakk2NCebmuubmhsam5samxsbmhqSIM1kHXR81XDSa+oC8ZpQoibZlDxzZhDSwu3rZ65fPXXy5EAoXm32By3+yJ2/938R+sdauXBu4OK5vkvn+s6f7jw70nb2ZOf50z2XzvaPXRy8PXrs7tXBr68NfnMN7NE71wZuXu67eq7r4kjrueNNF060jJ7tvnZx4PrlozdGB0fP9Z0bbh852tjbGWuo89clAvGoLx7xBv1OjVZFZ/M4QrlIgUpVqN7iDFVX9x87Ovr5DeytxFQR81Nl/LQDTANauX372umRrjOnuk4cg8TX2dWPLdhjWgGhHDnaf3QQ+KtQxjkGPXMknrC7fRaH0+ZyegOBuoYGiEP3xZEGq3mHjg0P9ow0umoRAu/wrvx3X9z1/BMvbFqz+dFVz2x56v0PfosjVolo+DoFuVfPHHBIBwLa88fbvv/mNpQgEDP+8PuvfvfljdHLI03NjbV1tVhcgSSUTFy9dOzHb29DehoPKlhv8jWM/PjNTQAk8m+/u/Wn7774t9/d/v3XIJQrdyEAXBju7W3DcllTXSQedvlcJptJjWqUWrXKYDDY7TavzxuNBuPxYCwRhCoaqI75quOeaNxbXeOOJqCH98Vqq5PJY0MDo5dOXR09feXy6TNnhpNNDRZ/KKWVfymu3Ll59subZ6G8BWVcv9A3eh7Tzej5I9cvDX5+5diX1459c33od9eHvxkb+uJy//Vz3ZdHWs8PNp4frL94vHH0ZOvV0x1Xz3ZdPdN5+WTr+WMNp/trjnVGelsC3c2h1jpvU9xZX+0yG5QsHpdIZ1M5Qp5EKVGhOqPRZjFGQ77e/p6rn9/88Y9/xBZqoA+Cci71KB1bMxovdbEm6E9//vPnt6+dPNEzMtwxNNjRN9DR1dd9P6iASgawVbOfBJV79A0MtHV0wm9vbGtrbm9rbmuFWjjdM/+NUI4PDfe3VsuIe3dse2rl4g1LFqxbNHfdoqyNS+Y9sWrZ5rWrly9dmjV/QVb2/OeefFxVeeC4BxkK6S4ea/7uq6t/+O7zL+9cG7t27vyZY11drbF4daI2UYvd5YnqRPTSuSPff33zTz9g5QioCoBuBYIKFkXujH6dKhZ/f/cq6OaHr8a++/IqdLbnzgw1NNYHozGr2yVXq6ksdjmeWFSOK8ERSSyeUK7Rmp1Wb9gZirmjccBTnfBEE57qGk+0xlNd66qucWAfE/7qmqaW5hMj/WfODJ05fRyK9Ja2FpBXIF775df/Ur3y7d3R3929/N2dS998fvbu9ZGbVwZHL/Zfvdh/6zII5fi3N098d/vkd7dGvrt54uuxoVuX+q6ebr90vPHiUP3lE42jIy0gl0sn2y4ON18Yajx7pG6kJ3a01d/X5O5pAFx9TZ6+Rl8sYEFkCI0jFCtQldGmtTiNFrvDZg64LUG3rbG+9vyV0S++/hpKmS+/+/6bH378/g9//OFPf/z9v/343Y8//O6HH7778fd3v/n6/IVTg4OdR4+29/e3dfd2dPb29g4MgErSQeXvawV7H/uvffJP7d9q5fipI+12Zv66JdlbVi48+Nq2st/uqNj5atlvX/no+c1vbVn/zKNLls/PmpMJf7PnzV/48pOPhwXlJ/3KS/11v/viwjdfjPYO9MWbmqI1SX847Av4wvFYrLY2GK0OhkOnT/R+/+XYH7+/++cfU3XJd3d/+ObWt3cu3xkbuXHp6KVT7eeHW8Yu9n/9+QW4EF/fvQyl4amRgVhNjd3r15ltAom8ikwrrqjKL60sKMfjGWyBQq21OuyBkDuCxRI/du3joZoaSPnRumR1sqE6WR9LNsTqGxL1DU3NTT19HQNHsHa1b6AbtFLbUJ+oq/vqm38prty+DoXIyJ3rI19cGbp5of/auV7onEfP9ty8PPDV2BCo5IcvTv3hzpkfvzj9u5snvxo7dne0/+a5tmunGsdON42dab12tm3sbMf1c11gr55quzjUMNwV7k7a2xPWlqihLWZuqbb4HRo6g1ZeRWGL5CqjXWN2mKwOt9MeD7lrIr6I3xkOhapra2pb2hq7+7qODV+8fv3GnTtXb906eeny8PkLw+fOHRke7uhu7+xq6epqbm5pbGpt6ejpvRdUjmJP9o4OHh2E9uZvtAKNNcgFihislBkcHC9oUm8m/DSojBzrGYrqn1q19NDrz/p4+KRRVmdS+9VSlFwszPuobOeOnLeff/mJtY8umb9kXtb8uVkbVy8v3f06pKFTndGvbp75/PqpSKwaQa1ynVmlMxitcM+Hw7G4x+O3210DPc3f3D77+y8vf//VpW+/OHfn+onbo4Nj53suDrcMdcc7Gzyttc6TA/W3R4e+vHnmy5vnPr9xfuTkQCJZ6wuHHW6XWq1ms+g4XGVFZQWuCs/hC1Q61O71QFteA91WE1SyTfVQsjQ2NDQ1psqXJnCSjQ21jfU19fV19cnGlvrmliRW5TTVJWrjgUjI5fN+cefOz4XwS7Ry6kTHyWONIwPJ492RIy2e3kZXb5PvaGf49JGaa6eb717u/nZs8HtQzOenfn/r9O9uDH999ejdS92fn2+/db7t9vnOO5d6vrp69Kuxo19eHbh9sXvsVOup3uq2akPSq4o7kZgDCZgkEi7p4KFDB/OLqWyBHLVAaDGabU67JeS1JcLeeMjjdzu8bmc0FoMbItnWcX703K07N6/eunnq0qXhc+eHz56BRjAJZ6AJ+9mxmlgimWzv7obGfbyqTRUrA2kGjx39iVwgTzW1tcKpj8Zhr9qG5qaO7m7IQePxZmjo2NDgneNJWdm+kl2/udBde/tk1+mOuv6wpwaVKor2qYv3G/CH7NTCfTu2PvvY6lULsp5cs2zl/Nkfv/hkjYx8oj305Y1TN68MGU36ShKdzuaLJBKjAfX5PJFwMOi2e62mjobgrQs9d0cH7o4euX6688LR5Nm+xLn+xJmu6qGWYFetKxkwdjV4IY/fujJ0+9qJscvDI8M9ULrWJROxWMDnNOk1Yi6TQCaU0iiVEhEf1WvdPsg81TXJ2mRjfV1jsqa+Lp6sjdfVVNfEY7U10UQ8VB0NRqIQ5NwBvyeFy+sBiTi9PqPNodCiN2/d/rkQfolW2luqG+u8iag95NW5LFKrXmRFJU6zNObX9NRbzw1EbpxuunOp6+6Vvi+vDHxxqffW2faxk41XT9RfO9l48xwophMkcne07/MLXWOnWs4fSQw0OJpDmgafqt6nrPPIo3ZEyiPt/2z//pwCKlso05khB2HvB7jsYZ+9OuAKuq1ep9XnccVjkZpELJmsHTk5ePXaxfOjF06cOz187szI2VMtHW1evydaHa5vjIerQ6FErL6ttb23t7Ovr6u/v2tgoDsFSOo+2Mru4NHm9vZAOKLS6vhisUylNjmd8fr6rv4+LNgMgbCOnhvq+MPpeuLHOy4Od//5+1tfXToykHA2a4UJQWVMRAhyyX0uXY9Tq6nK275h5YZlizYtX/joknnvPb3eTskdavHfuHj0ypluu1GhRARmjdSBSsN2VZ3f2By2toTMTQFjW9Q41Oo/1R482eo/0eQdbvKcbPGc6wieaQ+eaA3013tbY86uet+FE82jZzpHz/VePNNz7EhzNBoIRfyBgMtuNShkAhq1Co8vqyJU0BhMkUQKwcvm8bpCIW8kCg2wMxCyB4J2f8jqBRu2YU7A7g3Y3H6Ly211e2xuj9XlgV2sbp/O6kA0uus3bv5cCL9AK//Z3x7rbPC21Tobq03VbqXTILHoJVaDOGBDmiK6423ui4OxsZHk2Mn6i4M1I93BwTbfsVb3cIfndG/k7JHE+cG6c4PJs/2Jk12RwVZfZ421PqBJeBQ1XmUyoGoI65JB1KgS5BfmH8wrJtK5HESjMjk8wUgkGkxEfbGg2++2uexm0E4sHkrWVjfUxfv7Ok6cgIDR19zV2dnX239soK6xHmK7L+ivqa8OVEOqjoTr6mtaOuo7uho7u9M0dfVgdPY0tnc1dnS1dPe0dPcmGlrtvpBMZ+BKFSKVVm62QfXX3NHV2dvX2tvdf6T75unOb4cSkqq8r66cGKn3HPFoOx3qI25tt44R5OK67LojIXuvz6DG52x/bNXaRfM3LVuwbtnC7euXSwv39NQ5zg21njvWMtQVP9lfO9gWbAgaGvy61pCxLaRvCaLtYUNnxNgZNvZETF0RY1cYozts7Ks29Vab2iLGZEAfdqAxv+lIe3Skr2Z4oHagIxaLuFUapVwlR+QIm8erIhOLykoLSksLyyvKSVQaVyhUwjm06uwug9OTxujympwYZszx6G0ug82ltzpRi11vdaAWh9ZsRy1OndmhNFjECu3Yv6aV65cGrl/sHTvffflky7nB2uGe6EBrsL/VP9wVujCYGDvZcPNM0/WT9aNDiZHOQFeNuTmia42iXXHjkUbnYIvnaIvnSLO7r97RlbA0Rw0JvzrilIUs0rBVGnMhtT5NjU9r1cuKyyoOFlRU0TlMsUKg0GmNVpvV6ndbvA6DzayxW/Uejy0WC9bXVdcnE83tzdCzBBO1jlB1LNnY2tXlj0blOtTmcUMP6Q37HeGQN1YTqW+qbetMdnQl2zEaOnuAurbOWGNLvKm1oRNGuiLJRrjPoBjUWOwaq0NtdUD7kGxvb+rubO3pHB5ovHuxd8gr6mmMf3t1uN6M+Hm4TqPgiIVnJxyQFn2iJBaa+FQlLge/+7Wn1y5dNT97w+LsNYuynli5sGLXq80RU19zeLin5srJdij5T/UnWqKmxgDaHDI0+nVJDwRXXUvI0BzUNwf0LX5dk1fX4NEmXZqEXREwiW1qvkbK0UhYNW7tcHvkXH/tmb7avuaIx2UWiKVcoYgjEJAZjHI8obCsIr+kvLACD1qhcPhsiVyqNSgMFrXJqgU12N0Gx7hozG7f32oFzq8LhKKBmWa71mwD1EbLzduf/1wIv0Ar/3X35pmvb5/+5jYUVsNfXDs6drH30qmu0VOdNy703IG8c7Xvq9Huuxfbrw7XjnT62+P6Gq88bBaETYJGv7qj2gCi6a0z9yWtHTFDc0hb71fGndKEU9YYUDeHde3VxtZqo9uEFJcWf5pTVAn9n0jJFav5YjmPxxXyGEIenc+ly2RivV4XDLqSNZGG+tqG1mZoccM1SW80XtfUCMUaZFmBTOnweaOJSCAa9EYj/nhNtL6prr0TQktaJfUp6tq6Yo2tKa10N3b11LS0h2rrfbEaX7zWHat1hiOBmiRoqLW7q7+34/KJtrunO9pMzLvXztcapYfefdlGKRhwqfp0eB+nwsKsouzfaSXnN6hZOtzBbetWLMic9ejCbOil1y+bf+j1p+MuTW3A1BC2tNU422vsDSFdjVMWsyNRmzRqQzx6vkvH8xrEHlTs0opdYPVSl17uQOVWrVyrkIgFHA6TalGwhpOO64MNXwx33D7edmmwoSZsVSsRVKfS6RQqlVQs4jEZFCqVTKVT2FyOBEEUajWkIYPFZrQ5TXaXzeW1Oj1WNwQVj9nphnOlBwFZnIDR5jI53ChIxGBSowalFpVrdAqN7satWz8Xwi/Qyn9ePt1z/ULf7UtHbl7ovX624/JIy5nBhtNHGy4db7p+tvXz8213LrTdPtuMaaXL1xbTxd1Sj4ZtFBF8ek6NSwZFCRZjGhy9tZb2KNoa1ta6kbhD0hTUtMf0PXVWCEV+s6Qg/8D7u3YXV+CkcoVKa5CpUJEUEUlEArEYCkKpUq0ymF1+uKYQR+rbujq7+/taOjsboCjp6WzpbLd6/Gqz3ROJVmPrwTXBmloIGInmtvrO7gaMnvqO7rRWakErDW2gFRhJaygdderau2rbOqobWmLNrSCUlp6uoc6GUyd6vjzZePvs0T9/c+1cvbtOxa5VCy7WGbyUg/KCPflvPvfxc+uRwt8ecUjFhXu2rl2elTHj0UXz1i2e++iirAOvPa3ik1AJUy9l2NU8n1HsM4ocKrZGSJSwKiWcKga5hEIsptPwDCYVrjFHKOZL5AK5WqTSCVQoV4GyxSq2UI7IpMmofaQ/eX6w8dyRxiNt8XjQrkcVRoPKCBdXi8hlQi6XTqUSqTQSg8UUiIQiRCqRK+BMCqUygVQmlMp5Iikcn8UTMjh8GodPB7gilkDKlyolCq1AqmTyxSQGu5JILa6sKizHXRod/bkQfoFW/ivqNTZUO/pbo8e6YkOd0SMtgfY6V2PU0hazHmlynukNXhqMXTmeuDRYfaLD01VjrPHIAnq+W8MJWQQRmzhsFVfbkYRLkcBuKWnEInap6AGUW+eSQXnbHNDUepRKEeXjD3e++dZbeQU5Aj4NkUlkKp3VFXD6wqjZoTbatRav3hG0h6pDNclYXX1dcwsIpb69IwFtT3t7dWOLxVdt9EY8sWSgptGTqPclG0MNrfGWjmRnb2N3b1N3H4STeGtHTWtHrKk9nGyO1LfUtHbWtAEdiZZ2GAcLxwnVNcSg1WztbG1tGu5u6ulp/ep043/++4/fjw4PhZxH/Ma7I+0nnYI6KTUhJiZl1A4tu80k6jHxSJ+8/dxjazKnTVuzYO5abJku++Dr2/BFBxR8YiJgPNJefbQtHHUo+JSKqtKc0sKDJUU5hUUFpRVwdZg0npQBskBQntLIU5m4ahNHZWLLjAwpShGpiTwZQyJTGowWp8PmdhnMVqFMwRCKmAIBVHeQg3BEUn5J6aH8wpzC4oIyXFkVpZxELyVQC8qrPssv2Xc4f19OAWYP5+89mLv3YN6+wwUwnlOCLyXS8TQeiSUkMHilBFpuKe7TvKLd+w/v/vTQufMXfy6EX6CV/9ErRTa9NOJBkzFrQ9xaFzWGvWq7QehEeZBNuuKGEx3uC31BYLjN010L+VhV40ZqvTJINwm33GsUGuUMrZimYFchzEq9iORDudAtQ1xpDmvrPAo3KiRWFOx4bcdrb/7mUO5BMrmyrLyUzGDbvSGXP8wTS8kMJoHGobCEMo3O6YY/jxt7f83vDfqg7nX7PQ6XCyInnE0jZGKnV2F2qOw+nbfaEq51VDdGmzpjLR2uRIMlWmeLJM3hpN4fNwZrrNEGa6TOHon747FoXTxeXxOKRaxej8HldoXC1dFwDSS35trvznX8959/f63Z267n3DrWfLPdO+hFuizCMB/f69CeijnO1jg7TOK8d17cum7VjGlT1y6cu3pB1qbli/a+/MTe9183yBk9jYG+pkDCbyDjCvbv27V3z659+z7au2/vZzk5hZVEIltME2voUh0T0acBidAkOqpISxaoqzjycrqohCYopvJKqfxymqCSIQLAgY/FJE4BnpZTitufV7Tn4OG9B3PAOVxckVNSCfaT3KJdn+bs/OTwOJ8eAnZhHN57uGh/UUUejlxGYuPpvHIyq6CSdKCg9KPPDr+/Z//OTw6cu3Dh50L4JVppiDtba90dDb6uRl9ng7spbq4NoXEfZGJte8w42Ow63eO/dCRyaSBypjs02OTqSphawmhLRAcZpymkS7hVfqPYquHCWUOlNDfKj7lkzSFdd60FElBLBA1ZZdSq0rffe+/tD3Z+emB/fnHRgdz8onK8weY2Ozw4PCEnP3f/oYOHcgsgezster/d5LYagm6zz27w2HRem95p0go4dCabLlXIIFuR2QI8R0oQoXSVnasPGAJ19liz3BnjGoM8Y4itD9HUHobWxzVEOHq/xu6LxENdnXW9PfXNzTGzzcKVa+SoVWoLS2wRqH4+Hwj/cPVYv7aq06E43x65FJUH6IfbDUw/u6xOwT6fcJ2Nm9UVn5bv+s2qRdnzMqZvWLJwzcLszSsX7dy+4c0XtnDplXwmvrwkZ+eu9956+/W333nrnXffee+DD977YPfHnx3Ox1GIPDlVqqNJ9XQpSpfoaGItFRBpQCgErqKSKS2lCgtJ3Hwiu5DMLaEKy+hioJQuKqUJ4WMRiZuHox8qrfo0v2TP4TzQx4GCMmB/funew4WgFYz9ubuBz/J3f1YAfHiwcG9O8aeFFbmV5DIKh8AUVtK4RVWUzwpLd+/P+e2+w7sPFZ+/9K/koP+pSwSSNYGG2iDYmpg3HHR63FaPywLdRm3U3VjjbasPdDUFOxoC9XF31G/x2LVOq9pp1TosqMWk0+tUSqy5k8hlUkQikkvFOo3SakbhCFDP28yoUqOl8JASurSQJi2Bs8CQFJIFFWzE5AlbgzEyF8mrJOdXUQqJDLpIpjVZDBa71mQ12qAc08vVCjWq1eoNDJ6YxBHxFTpI8ySBvJSFFDEUFVyUiDhAJRBLJLZqstJDVnqrEFe50FwpshLlHqLMKTS43eFQfVNNc1syXhvWmYxCREHkInSNm6f3xkK2b0Zqzjb7Bt3i/mrHt6dbBh2CBg29x65s1YtMhMNtKMvHKSjb+fKOJzcsmDNjRfbsTSsWb1qxZMOy7J3bN72yZQOJziiFuxZHOVxOOVBK+qyUuL+E8ElR1Z583CclxEKKgCDQUeVWisJCk1upMitFZqYgRjJiIkqMeCFaxlYW0KS5ZGEOSZBHFRczZWVcVTlHU87VlHHVpWxVCUtVzJAXUKV5RF5OFSeHwM4hcA7hmPvLaftKyHuKiPuKyfsrWZ9V8Q4QBH+lip9D5BfRpRVsRSVHWcpADhE4MHN3Hv7DAuLeEuaFK9d+LoR/qJX//stfGDIzVWqmySwAWWqoEqJ4AWaJQpQiNlKlRipipEiMBKGuhC7JJfIOwTcm8vMo4iKmopgFv0dbxtFV8gxAOQd+vA4o4ehKudpitjqfpiznG7n6IBpuQ8Pt2lCbOtCi8DZpAs2+ZKertpWhduRR5cVsTbnQgJNayXIHGbGREDtRYiphyuEfKmYgBJGxSmzGS6wkmQM24UWmAqb6MFVRyFLhRGbEFobUo3AliEo3QeEuFVoLWLpirhEncVXJXGSFg613i40ekcYgQOQ0Nm/b8y8uXrZy+8uv5ubltnjl355prrWIPj/V1Vvrvnb+yEBzddyqsfGIatxhO6XQQsjNffvZN7Y+tmp+1vrF89Ytmbft0RVPrly6fvn8N5/Z+N4LTzIQFVXjoqqcFKWbpHAR5I4qxFYB35ChyqHKijg6vNROUXmoajdZ7SGp3GSVh6T0AkSFFyd1lvLNuQztIarqEFWZx9AW80wVIlulxAVfvlLqKpc4y8S2MpG1XGgpE5jL+KYSvrGIq8+hqw6S5QfIsoMUeR5TUyKwlIkdMLlC6sR2kTjKxPYykQ1ORZnAWsIz59DUeyv4H5YwdxczPixlHyBLLl+9/nMp/BKtlPD0+SxdPjuNNp+lhS8NtpCtK+boS/nGUr6piIMepio/xfP3lnP2lHM+xQs+I0pyaEpsMhNmokUcQyHHUMA25LP1eSw0h649TFMfoCj2k+SHmTqiyivzNqqCLepQqy7aaYz3mmt6wy39/oYOrt6XS1cX8szYT5W5KhE4R9hvLhXBL5R/gucfpsrhTOERV5XcXSlxlgqsZXxrIVt/GPaCKyG2iswRS7Re5ashqTxVSg+coDyWrpBrwCEuAkQajbucjXx0IGfnx3t+8847L+54ZVpGxuw5c+bOX7B5zbI4gvu8N+IUVH77xbX/+s8/3u6LJpQsB6VInPexquKwj1NJ2PPmruc3PbVi4ePLFz+xcsmzjy7dvmHl5hWLn1q3Yuu6ZR+8/DRTomDo/XSDn6EP0tEQTR+i6oJEpadMaCng6OEqVingOwQo2gBJ7UsDZyPl+PEyV6nQAt8WtHKYpoIzWcI3VUgcOMSNl3nwci9e7sHJPZUydzmcE4kTzky52F4qsOSy0EN0zUGaJpepKxZYYAJO6cWr/GlwSj9O4YPBCqkL9irlW3Lpmr2VAtDKriLah6XMvVX8f0Ur//OXvxD56nK2AoJV+U/A8dQQS5gqB1vrAWgKO16gK6IK84icXAK7gMQFv4SOlLHk5RiKUjbEGDlQBDBlBQykgC7NpYgOkwQH8JycKl4RHangq6vEKFVuY+u8Ulu1I9HiTjTx1NZ8Eq+EIavgaSv56H3KeZoCqjiHyCugSio4apwAxYuMJWwVHDaPKimgIXkUSSEdIraGrXGZAgkodYlSSznfUMRW59KQAoainA8BUvvux/tfe/OtbdufX7lm7eJly5etXPXwpMkPTXgkY/q0Vx9bfi4iGWtxNsjKh7oaoBv68nR7i44f4RN8nConh4gU7C76zVb+p6++u/3JJ5Yv3LJm6StPrN2yesnjyxa9/MS69Uuyd2zdRBOI6Vo3U+8DrTDQEAMNg6VofTi5vVxsqZTayGovQx9iGEJg6WiQrg3QtH6aNkDVBkkqH8gFwkYx31jMM5aJLDjEQYD4pPbAXlStn6rBoKWga3wMjY+qgZjkqpSYy4XGMoGhUmSCMEZVuekaL1PrY+r8UKgxNF6o2ChKJ1XhpClcFJmjSmiAZJdHEh7CsQ/j2flk/pVr/7xW4A+KCrve5NCbf4rLaPNZnUGHN+IKhJ3+gM3rMTkcKGrTaK1qjVWttWl0Di2axq5B7VodYNNqxxmfprao1GaVyiBX6BUyVCFBFVKdXKaVITqlyuvzB6tjBrNNJoc/hUwJtYk+jTJlZUoNolTL1VqFRgctklyrR9Q6AaIE+HI1V67iKTQCtU5ustqCYXMgKDKYOWodS6VmKlQcpQbHZD+xZev6jZuy5s3PmJk5Y1bmzMzZs7PmTp2eMWHCI4vmZh7esflqq+NaEvVR9+M/2/nd3Rs3h1t7PGi1kuPh4ZXFe5G8dzUF79L2vLZtw8ota5c+s3bpCxvXrF88f92SBc9vWL1uyfwta5dLBFxo+7UGu8bo1Jq9OrMfw+TVGt0ag0urd6Mmr97iN1gDemsAtfpRi19vTYON6Cw+rcmrMXo0JtjXhw3aghiOoMERMjrDJnfUBB2fL2bzx6y+aqsnanKGjFafweTWG+wGg9lstFiNVrvJ7jHZ/CZ7wOwIAhZH2GqP2hwxuzNudyVs9rjFHDMb42ZDwmyIWQxfffHFz3XwS7Ri12stankaq0ZhhcpUo7DplHadyqFTuVCNS69xomqHTu3UaZw6LfjO1KBHrwPcqBbwoBo3CiNar0Hr1Ws9aVIj7tSme8C+2GFtWo3L4fAEAnaH3WjUm03wo02AxWK22Sw2u9Vut9rsNpvDZnfa7U6rzWWzux0Or8vmd9n9YN1WX4qAB3BF/O5IwBJwmf0Os99tC/jxFMq6jZs2bn5y+arVUzNmzJo1e+bMzIyMmVOmTJs2fcbkSZO2rFwk+uw33/T5zvj4CXbOZzu2fPbB2x0OTY2EbsTnVu56jffpa5LDbzbJK/bvePrJVYufXb9y27rlW9YsX7904bzZM59YuXTZvOwnVyx28kjdPmu339ntd3X5nF1+jO6Aqyfg7gq4OgPOriDg6g4B7p6QuzvoBgcbSTndIU9PyNP9U8Le7rC/O+zrCft7IoHuiL876u+t9vdEfb1RX0/Eh00Iuntgd7+zz2fr89mBAb9j0G8/5rcPBRxDQcA+FLIPR5wnIq6TUffJatfJGOA8HQccpxOu33/zz79DCTmonEwtwFWlIBTi70MsqiIVE0nFJFIJmVxKJoMto1AxqNRyKq2cRi+n0SrodKASYDBwDCaOycKz2FUsNp4FDquKzSZwAA6BwwWIAJdH4PGIfB5ZIGAiMp5GzVbIaQhCQ2QMmYwulzGUCrZGzYJxjYarQwGOVsPVanioTmA0iMwmicWMWC2IzSK1mmQ2i8JhldssiMUkt5rldpPcZtRYzaV4/Es7Xn39zbe2v/jSxic2P/7kU8tXrMzMnDNtWsakSVMeeuiRKZOmbF6xyEndf6Za3asus1d+SP/4pSXZmRmTJu97aXPl+9t5n+wQ577dIi/2UD+p3PXCq5vXPbdh1aMLsx5bvmjN4gUZ06euXpCVPWvmqnlZ7MI9zV5da8DYETR1BM3jhMxdYUtXBKypO2LuiQKWvmprX9qm6I/a+qvtA1HbkZh9IGY7Er9HAqz1aML2dzlSYztaYztWax+qsR+vtZ+oc5xIOkfqXSON7pNN7lNNnlPN3tMt3tOtvrPt/vMdgQsdgYtAZ/BSd3A0xdWe0OXe6j98/8+/F/dfoBWesIDJxWDxCtm8Ig6/mCNIISzmpp0U3NRHLh9sCVdYwhOW8jCb4v6ICAZL+aIKvricL65IUXaPcoGkXCAtF0pSwEdxpUhSKYDJonIeIITJlQIpXiSrEssBolRJkCjAIUjkBKmCKFOT7kGWqygKNVWpoao0VKWaplQz1Fq6SiMy6osry3d/vOe137wJ2Scza+706TOmTp3+yCOTfv3rBwEQysMPPzJ10uS3nlpN+eydo25hl6yQvPc31I93LJs3J3PmrLeeXs/c82pckCep+LROXKQuek9e/OGOx9f8Zsu6NfPnbFy2aMPi+TMzpi/KmrN03pwt69a+9MxmiVooNSCIXoboEblBpjAqFGaF0qxQmeUas0xjkWkBq1RrRbQWBLNWmc4qR21KvV1psqvNDo3FqbK5VXaP2uHVAE6P2uXVpHF71R6vyuNVuj0YXo/SB3hVfh9GwK8KBTXVQV08jCai+tpqfX3M0JwwtteaO5PW3iZHf4vrSKvnaLv3WKdvuNs/0hs83R85dTT0hx/+Ja2wdTaK0kxRpDFRlCaKwkhVmqgqM2aV4yNkuYEkR8kKDIpST1EaqCqMlI+R3pSGJNcBZIXu/ghFie11f5d7O6JUhZam1IGlyDVkhTYNBUZUKF1jSMPUmVioma23sMGm0Vs4BivXCNi4BivfaBMY7QKT3RQMk+mUTZufnL9o8ey52TMyZ0P2Aa1AOHnwwYdAK7/61QO/+vWvZ0ybyj78watPrLjWbGwS53/6ytadz22aM3PmQxMmvLBhOe3Ab6NGfuXBvYSPXy97/3nix9gT5ne2bXpsyYInVy1bNj8L4sqMaVPWLFqwetH8LetW6m7y5gAAXsBJREFU5xblslEVW6dmaVVMjRxgaOR0lYymktCUYoAiF5BlfLKMB5AQLlHKIUjYBAkLwIsYQJWIXiWiVYnpRAmDKGUSpWnLJMBHCQzSiGIaQUStElHAEkQ0DCEVqBKSq0RkgohMFFOIEipFSqMhNJaCyVVzhFquWMdHDEKFRaqxIQan3OpRufwaXxANhY1ff/3P1yugFbpKW4Uo8RI5TiyrFCGVInmlCBxZhRCBAFAhSoeBcadCKK0QSSvFCB6715UAMQUEAOzuTwUA8ImIipQCHIgHWEhISQFEQFPr4fIztEZQAFx1Llx11MxJO3oLDMKmNDATFJOeDzZNehNdq2fo9EydgYkaWaiJi1p4BhsoRmg0hWOhl155ec3qtZmz50ycNGXy5KmQeh54YAKmkl89MOHBCdMnT1o+L2v3y1uJHzx7p8NlwX344oaVW9eueGjCwxMeeODDN1869MlH+95+ec6smft2vSMiFHz8ypbHVy56ZdPaNQvmPbl62eyMjBnTp0+ZNGnBrFlLs2dvXLpw+5bHuWqEb9TwDFqeQcM1qLn6NKpx0HF4mK/koEq2TsHSgqpkDDUCpCUFUJUimlJEVwDiFCKaQkhX8KkyHgXhkqUckoQNEMWsFEyimJGGJAGYYIkgODGmLZKYTpJgkKUMCsKgyJgATc5mKNgsFW/s1o2fS+GXaKWMx8tjMHPpjFw6PYdGO0wdB3wYhE35TFYRh3sv+whK+cIySBxCSTpZpFSiIIhTgEokSoAkVZMRDYZMS5b/NVqkVGJi6swcvZVjgJBgg2AgNDmEZsAJPs9o46TiBwtiCegG5v8UEMq4gwmFrTdxDGaeyQo7glAAntHkT0TtDsv69Rsg+4BQHn54IgQV8KGqnTRx0pLs7MXZWQtmTtvz8pOSgp2jjTZlyZ4XHl22JHvuIw8/MnN6Rs6BT3bteq+qskgk5NApVc8/v23lonmbVy5esSBr49LFEEiyZs7KmpUJk2dNz1iUlbl07pwn1yw5ePgTPiaLtD4wofAwxYCvBEBAfKNWYEL5JlRgRMH5K0YMPoZeYDII05iNfwXGDVqBXstD1TydmqNTsrUKplrGUCF0lZSuFDOUIoCpwiwdQ0hVCKhyAVUhpCgwm0IAPkXOp2CxjUtBeNdu/vM9M2ilkMk4SCYBB0hE4CCFeIhKOkwlH6ZR0nLJZzKLOJxiLi9do5RBeSGQQARKBxKiVEFClClU6RiTiiUaEiYRHZZlVCARCAMGCABsg5mLXVHQhJ2LWQff5BSYXcIUfLjkabA52LVPO2k/JQgrG46jRcFyUCNXb+IZzAKTVWiGrZCJzKAVvsnY0Fov4LFXrFgJeWfChIfTCQhCS8bUKSsXztv66PJDb7303GOr+IW7rzSaBEV7Pnzu8aXzsrJmzXzj9desRoVeL49FvXpUuvO37zy58dFnHlu9dtG8JfPmrlm8aP7smQvnZM+bnTkd2qlpUxfOnZM1a8aSeZlvPLdZhKrFFlRoAQVoQRkprWBC4aAKiCJpy9bJ2eCgco5ewTOoUoCqVHyDGsJSSk9agVknsBiFFpPQiiGxmqGKl4K1YYgtZrHZDDU+VPqClIz4ejUfVfJ0Sq4O/q10AFOC5eu1AoOOD6FOD50BSA16BRUHQ8nRya7f/uffiwOtlHA4oImULOgAKKOAxS5kc7FYwuGlJMIv5QvKBFg4AaAshXyEl8jS+khDlmFQ5GqqQgPFB+iDBgUHljIMTC2kCTNWVZhsPJONb7DxDFYMLOlA/DAytQaWDpuWChgYmD++I1QqJtAZGzVxdEaWVkdTKihyhKKQAVRAKaepFDSVkqaUU5UIQFPJ2DplMOpdvGghlLSQgKBkyZqbvXzZ8k3roeSY99iyRa8+9dim5YucnIKrDSh+z2+gnl2SNSt7btaO13YI+bRoyEmj4J/f8sTWDStXL122MGvOxrWr58EhZs/Jzpw9L3PO9KlTl2XPXZCViXXh06cvmJP5zLplDBYVscK1NIpMeiwYQMCAcAKhBSSikbHUCFMpYSohrQjpcgFmlRiQYqip2z0FNwXmQySgKQQwgaHCQgVTLR5HI2aoRQAdxlXC8eMosOPQ5ZjDVIpYaglbLeFoZVytnKtVcAANIAdS30TKVInHbv1LWhGYbFAlMCHsY1jYBmuqbEzf+ljlCB85qVoybWGQb7ZD1hBb3BKrRwxY3GKrE5DYXCncUrs77YOD2L0yh1/uDCpcIZkjILF5AMThk9q8IgvkHetfMYOerDyjBeBiycUC8I2We5EDyhqUqVGxNEqoIjlwrxgMGHo934DyDWB1PAPK08PNpFPYzVWE8mnTZ0ycOBkuaFZ29rQpU6dNnTJj+pSNq5Y8sWLh1tWLm7TkiwmltuKTx5YveGrV4gXzsz/bv8dhVjGIJe+9su2xFQtnzpi1ZP68x9esWLVk4fzsbIhP8+YvmDJ5ajo+LV+QNXvGjOysOasWLnhi+QJC7l7U7dVieMZxuTVOp9Juk1uxrl5qMUhMOpFRI4BAoldwIbqgMrYWYWmkTLUEdMBQAakCBdMQphUMOcAfl9f9QQw+iOw+FBk/PS09H7hX4rCgjiFL2WQpF0PCJUm4RAnnn85B/5PSitzhk1i9gNgCV90z7ltTDnZd4aqDFNxiiys1ATZhEyQ2r9TulY5b7PKDA7IAEaR1gO1rxcSEzUlPs8M/4RIYrUKTXWxxCECIKAQVDUur4ehRrl4PgBrYOh0HQFEOqmPpNCyNGmTB0WuZGogoYhIiJMsgAYug3eBCdDVgmR5yvMRqkdqsEitggUAtsVl0bnthceH06TOhD3p8zapZs2ZlQAUzcfLCObM2rljywvoVl+LK42GVvOLggtkzdm7f/MKzz+zb+4FZyTn4/o41S+ZlzJixYMHCzevWLAedZM2ZBTXKpCmZc7Kg7oE2alZGxvIFc+fPyZybmblx+dINi7JLPnjF4vM5wtW2YASwh6LgA/ZwzBaqtgQjlkDYEgiZ/QGTz2/0eY1+jwHwjVu91w3oPC6Ny6Fy2pROK6BwWOR2bA3pPkqHXWG33cMKyG2WcQfDIrOZEchZFqMY06VWaNAIDWqBHgMciHNYtkLl12//k+9QprUiMtuhBxnPC6n+876Twp4i7cMgzByHqzffw8RBIU3o2Tq42CkLaAEUQ4eyNBqGSklXKmgKOUkG11tMRER4Ea9SyK4Q0Mv59EoBCydi40QcAC/mYog4lQJGOY9WxqOW82mlXEoRm1DAxAGFLHwJh1guoFSKaDgxvQpaACkLbiO47SC6QgROl3uAUC/f++mezNmZyxcuXLV0cWZm5oxpGQtmz5kx9RHavlevd7iSSnzlp+8vzpr5/oubt2/bwq44VPDxW/OzQBBTF2bPgYiycsmSGTMzM6ZDqpkJlfKMjJlzZmc98tDEyZMmL52fNXvmjNkzZkLlu37x/ANvbENUYoXdILehMisENr3KaVK5LGqXVe20ASonXHWTwm7E5tj1MpteBo7DoHAaVU6zOj3TZQFfaYdp6ZlGecqX2zAgWKbGTelVR5nVILMZEKsRsRoQW8paDRC9pBa9xIyKTRqRCRMKyAWCmcioFhpVAoMSQhpPr/intfKXe1oBZWD9CNaMAHbISiALTC73BASC4EBlqjNCRQl1ZdrhogbQBFuLMtXaVBkhI8sQMiKlyBCKTEqVS7F6IgWMkKQigpiPE3JAGSVcMlz4Iha+mEPAYFcVswmlXGIZj1zOpQBlHHIpm1jMwhVh4qjMZ1bmMSpy6WVp8hjlAAwWsnGF7MoiNq6EjS/lVpXziZVCMk5IxAkI92EqeAdzPl2zds2aNau3Pv7YoyuWPLlqyZ4XNzvph252epSF7+548tHHly84/MEbe994gUMtW7Rw/pQpU2ZkZOS+se3ZDatnzJyZkTELchnUPRMnT8HUNn061MsgpsVzM+dCsJqe8fiKJRuWzt/9/BMUSglZSiVLKGQphYLQKAidKmMANBmTiqQaVwxoYqGVpWENrRiz0NMCVIRJlbFoMhZdwWEoeUwV/29Q3nPUXIaKQ1eyMRQcmpwLUGUcatreB2FTpCwsAUE7jXXUTDLWUTMJInqVkIYX0q7eGPu5FH6JVhRO770iA8oISCUusdUBiCx2IN1i8AxGLGBAUtBqIWswIU5oVAyNgq5WUBQIWS4hIkKChH8PHkHCBYhSHlHKJyECGMEJmRUCiBDkch6hnEes4MEVpeBFVLwIswQxnSBmVAmpeBi8B/ZRSK0UUjAElAoMcrmAVMojlMIRhBS8mAbgRFRsFQvOOMIiIWDplJ9AltI4at6Bw/vfefP1N9987f3XX+AT8/kV+63ET467eITdL7+6eeP7zz1OKNq/ZfOmnb99FwIG1CUvP/1Y/rsvLZ43Dyrj6RkzM2ZgD5ImT5s+ecpkkBGUzFOnTZ87e9bi7OzM6dPXLV2wfvG8t7esp1flUqR0soRGltDBoSI/hZZSDxUAP6UhJkWGfVuSlJbaZZzUjpi8MORMOrYiwqUDcg4AegIoSBooRNIw0ksp6ZUVgpiaggxUiQDSOEISXkCs5FfByb9y/erPpfBLtKLyQIXhkTk9cpdX7vIpXD65E6pRqEkBlxSTEdStNqHZIjCbeEYD1wCFBcrBgDJCx4WK0gilJVZUcvVQamhSK5hKlgZbbkqtOMkZagQqDIqCD0D5BtUcRyeHZg9bOYBmwaDh6aGXk7OgzlcJWWoRWyPiaCU8VAbw9YAcHK4O4WilMM7WAGKuTspDEQDGwcIcgQHmS/l6RKCHESlXC3MACU8nEepkHB5Fr5asXTR/88oFr21+tF5SYiPsJX/8xisb1+p5uGe3bd2+bdv8+QsnTZy4bOliacWBDatXz8yYCeFk2oyZ02dgRc8jk6dMnDRx1owZoJVJk6fOnDlrwZysrJkzVy/Kfmzp4je3rOcS8gR6KU8nFuqlIoNMZJQDYsCkkJiUUrMasWgQq0Zm08ptOrlND3lKZkURi05q1khMarFRJTFhiI3YfIlZhVhSu6SA3YF7E5SAyKAABHCWdPBjJQBPK02RcnRSPpwWFM6GLA34MMjRiIGx2//SWpzSDVUn1rlginF45A43kNKKE7Hdw+6Q2qAgtYrMZoHRKDSZRGaLxGqT2myI3Q4WtqawwSBMg+pSZIY5qZUAk55v1N1bodIIzUas9sQWDCxpxFYD3wgFrBxqrnRCBZtOrmlHZMJy7X1EJsze3wQfxXAG4VRa1GAB+CiCs2lSph046XCW5VaNzqjY/dqzb25+9OWNq4Y9Ag9pr7hwX9EHb0AGz86au+ejXZBZpmVkKEm5v335mfkLFk6fBvXJLNDK1OkZUKw8+DCknsmzZmJagfYqa/bsRVlzls2bs375ks2rVux8dhOHUqxw6OXYM3qtyq5XOrDSBAAHq12wugSsSe1KY8aAEYdJ6YAqR4dYtDIroAOg6ElVPIb05PSO2L5pBw6YPib8E1D3WHWIWYPtbtHJragcjmCBo4EFX499AbsR+1eg+rHqYRC4+cX//t+S/fl/1woX1dLVSgagUYHDVENTij3pBaBBZWvVHJ0W5gBsnQa2MqFl1ajBT8UVDDYKczQAF9WlWlboTbBVIC5sRWEcAowMYEO7jyqFJlRowvrblKMTmKCXUUD3yIKbQ4dw0XTwwGIGRBQIJ+BDIOFoJFggwUII3CIgJoUQbixQiVmV0gTcu0o4WVKL9v5th92CqXsRbkq5Vau2qo1GaUJHj4tLa+WVlxOKTgOVk/ehXkAk4suWL1v+0e4Ppk3PePf156plxOUrV86YNXvadKhoZwGQcUAcaa3MmZ0JSQpS1aKszFde2Pbi5g1bNqx/duOavS89xWbg4PLDJdS4TBon5qRK3dTVgktrx4ALprAaUlcUBUGAxa40fPN7YQP78gal1KSCyw9fW2nTjysD2xe76n+LAdMKJhFMJeCnPqKwr9SkRUxamVmnSB1B7UiJEuZb9XKL/v/Syr//x3+0tLb+fGPqDydgFnMoJVwq2CI2qZD1V4rYZBgs5dJKeSm41BJsJkYpj1LGp6agVQgZlUImTsjCi9hVYjZYIFWg0Mr5FAwepZJPA3ACOkHCIqYem5EQDhlhEyWMKsiy2EMyBkFCh/oDq06gjoG6T8oEiGJG6mkZHXvSgT31gEoQMj2bJsdqQJZawFTzocpLlYRQ9/Ewm4KuhBqQw5FzeQoeH2GJEbpdy20PKi/XKsc6HWe8nASCixgFsaB952/f2f7itvfefXPG7LlGCePdV59ftHT5QxMnQVWSMStzWqpYefjhiQ89BLnnkYVz50yeNHHqpEfWLFrw0QfvvLxt8yvbn35h46oDrz1NpFRITJBNIF+AZDViLOBBnNOAghGrTooJAgbVEOqEoPV7CAzy1F0BN4mEiS2v8enYl4efwOdoxbBJaFSITHBjQBxV3PfHR/TydKJJAXeRPHVMCM/y+6kHPopgL7i1jErsNgNQ+d/NQS0tLf/xf2ulks8oYBLzGdCREtNOHr0qBSEfYKRJb8Ln0XE51IrDlHKwuTQcjBQwCYUsgFgEnQuHBIBTwMTnM3C59HKsbflr51JRwMKamgIW1t0UsvEADP6ktcFsHmO83ylglAP5dLAVhbAX7AKdEezFgrYZV8KpKoMKV0DGeh+sZIOuh4gXkioFpAoeqRy6Kg4BoHFJfC4BEZDZEqpUSjnqERyr1l1osLbLStQVewJWpVTMfnrrlk/27Xzl5Ze2bN5sEDPnZc+fMy/74UmT00FlSioBgVYeeGDC5MkTF2ZnPfzww9OmTlmzZOEbLz63fcumt954+fnHVu5/dWtpZR5bLeRAsaUGoHsXMlUCsFCBpUsxuPzptoWCsNMNCzhkKZskwR4Ewv2AF2DVPU5ArhJipT3cHmRsOWC8uwH/3o7cFLA7K/XUcPyRIVkCfRb0XOn6N1XzSscfU6egElP9F0y7evPvvcf/f2vlf/7yF5KEX85jlnEZZTxGGZdeBlGESwNbxqOV8xilXEYJh47BBagQUYo55Htg0QjiTWocPmJyAd0UsKryGJW59IocWlkOrTR14ctzaeV59Ip8RmU+oyIPozzljIspl16aJuVjI6CbQtBWSi5FrEroiks4+DJojHlEaI+LOZUlHJALrpSHL+Phy7kYoBVMNAJiOR868KrS1HwCn0jiE8hiCktMajSxkwbuaF9EXbE3wTvkElVx6UQ8ruSppzYzqfgXX3oB4dEr8vaDUDIyM0EiEFRAK9D+pN+Q+vUDD86elZE5I2PK5Mkzp09dv2TeG889te2J9fs+fv/FJ9Z+9OLmcnx+KsJhbQuEPaocu2bYlYOeBTpYSfqxMJ1wr92rwl4qwEh/xPHJmAMqwZoXDDzWuWCDsAmo5JEAzBeQUrfHOBXQWnKrsJODnR+MMuwj/HxsKSF9KtJnrwIm84k4Hmn0+pWfSyEVV0An/6tW4I+KCPEiLk7IAYs5Ag6GkJumUsApAyXxmOV8Vhkf9EQfz0cpUirBklcxqIRZVQBhZpzUohkGhAGIPTjQx7hK6BggGhgEOx5R0luxEAJ+eQGzAvttHDgFcC7gvJArUycLTmtqhYCKE5JwWAhJnSyQCB8iCpxcOMtwUxLS0oFIA/0h6KZCQIR2MahjWjWsgQRa50Lwu16Ic3Ok9Ir333kTX1nwwfvvvPXWmx9/uKs498BLz26ZlTVn4tQpDzz0MOSgqRkzQDRQzE6Y8PADv56wdMHcCQ/8egb2hHnmsxtWPfvYqjffeOmjd19/cdOaPa9sqSAXEaUUooRCklIxJGSSmEIUkzFEFBLc1hgUAvYaChlsWiVpHfwNadFj359QySOkBZHSByYdHJ+U0gcoA1NDShaYMkowQeBK7+sDcwC4oyqL2QAuNQEPuinnVP19rbS2/l9agdqWoUAIEiFBLCRJRWREklpJQ6hyGUBTgCOlyCRkmYQiByuFCQAJEcNkEiIiSrFlFbyYVynkgKoAvIhHkAhIUjiakIyISBIROAQpH1RYwWelYFQIoEbhEKQ8sODjREyCFD5yASJYCQcsBXuigT3USFk+BeGRkfSjNQ4UK1QZO73GQEXYNBkHexSiEAAwH6qZey9tYHGYKIUKiU6RMmUKdswlr6uxCVkV8rx3urWVe3e+/cL252iksrKSgscef6K4oOCV57Ytys6akz1/wsMP/b9fP/CrBx6EqmXy1GkTH5k8YcJDEydOmj8385GJj2RMmfT4ysXPbVj98taNOGr5B69sf/XxtYfee6WKXQlCSS9s3HfSaxsQIbCXkkAoKbC8MP4G089JRRoKpgkQB3afpJcWMfWAg0UaiDciMnafCAiYFY5TgX38CWmp8asqeVUVcPNg9x6ulI0DW86uGh37O//d4T/WCh9FWer0+606gcEgNJqERjOGARwTjEB3A61QqtNJO9pUv4OmmmcjdMVghUaDwKAH+Ho9D+ZD+4NiCy1sHfbCWGrRBYOLrcFg/RR0Tzzs1Q2YD4fSCoyo2GyUWkxSaLONBonJiFhMYjMqMmIPNQR6NV+nFug1APb8HZVzNNL001SuTpZqnqFghOY5/VgOSkV5qktSi81aUWqpG9uql4uxpRdpQWne+9s2nAgjW596fMuWLVRiaWlJ7s6dH7z9ztuPrVs7a9aszKysXz34IGgFePDhRyZOmTplyvSHJzycNXvOFKxdnrRkbuYzjy57dt2qD997nSPjv71961tbNxTue4+j4rM1Qqi1UyU2DyxdxaMpueNgy6zYYhoFW0+D2hxSFUzjY+W5CgMcKG7YGlGq0OHDCEzAFmQBBcAB4CBUOZuMsMgIM3UzwEc4LO9+6ZMGxikIl4pwaVDWgJ8agRKHoRAwlUKmUnDt5tjPpfAPtfLff/mLNxq0Bzy2gNvmxxh/P97ntvhcZo/L6HbpXTaNwwRNl9puVgE2zKrtFo3DrnM5DR630efBHob5POCjbpfWaVfYLQrsmZZFCTjAMSFmvcxqVDutKqcl/exD47ahXofObdO6rGBRj8PodZp9LpPXZfZ7rUGfxe82g4+NOGHQ4vOYfW6D14W67GqHRWmDr2TB9vXY1U4zkF5CUNgM4GjddtTrTD2Z8wJ6n0fncercTq3bQWRSn1m9pN0h3vrEptUrVxFxxQV5n5WXlSxbuXz+ksXQ9czIzEwL5f+l4grkoOz5Cx956JFFCxZkzZyZPXPW1rXL1yye/+SqJR9+8LZEId7z/hu7X9lKrczVuPRap0kL/7rThLrMOsBtQe8BHzXQ+tr0SguqsGANsyK1iIJZ23j/jC2N/KSLFmMdE6ACrUM/JTFr0+pP3RLY4pPAiC0yjT/oQRU8VAHjfD1moScSYF2SDFtoSK81QENkUorNMF9x/fO/807CP9AK/J082TMy0jFyon34eOvQUPPgYCNw9GjD0SP1A/3J3t7a7u5EZ1cM6OhMtHfEW9uqW9qiLa2Rllaw0ba26ra2WEtbdVNrtLEl3NAcSjYGk43hZFO4vinS0AyDUfiYqAvEa/2JOn9NMlCTDNbWh5IN4dqGUDwZiNX5EykbTzkJ2NoQSTZV1zVGgPqmaENLrKE5Bn5tQzhRH4rW+oJxTyjujdT6q+sCYEM1/mDCF0h4A2DjPn/MG4jDSDBcGwbHH4MRny/mD8SDgVgQUUnf2fZ4LcrfsX3brJmzCLjSqqqy3bt3Ll62dMHiRdNmzIJAktbKrx6cAN0QlCyzs7KnTJ6ahT10nDZ7esaGpdkLsmZve2z1W+++abZoDu/5IGfnDrWEHqlxR2o80Vov9luSfvh1QE19MPWTA4mGIBCvD8KmWNJfnfRF63yRWi/sEkq4U7iCcVcg5vRH7b6o3RO2ekIWd8jmDtvdYZsn4vDF3P5qZyDm8lU7PRE7RtjmDllhawpwrN4ozARr9UbMnrAphdEdMrlDZsAVxADn7ld/Z33lH2rlv2/dHLl5/XiaG2NDN8aO3bieYuzYtasDV0Z7gaujfWNXB65fGxy7evTalSNXrwwAV0YHRi/3pbl8sffShR6M890XMcDvvXwRxvtGL/WBf/5s59nT7WdOtZ0+2XZqpO3UidaR4ebjQ43Hjv3/9s4DrKor6/uTyZRnWuadb96ZaGKLGgWV3nuvl957VQSkCCig2AULKiooKiKIgqBU6b333m/vFBu2GFM0+v3PPcoYNRniZDLvzLBYz3n22WeffXb57bXXuoVb1tlZ0tlR3N5W1NJS0NyS39xS0Np6vb29pL29tKOjDApwOzoI7eys6OyqaGsraWoqbGjMb24ubGm93tJyvbWtuK29pK29tB18dyBRjBxRZmlbW1lbe1lLS0lzc3FzS2lTU0l2TurypYuCvJwsKAbvv/8LZyfHqMitUlISOvp6f/7rh3/+cAFsCcnKz3/5K6QRDf3udx+89z6c3V//4pe//P3vfiu/ZsUff//7hX/5s5Utpawk09fW5GCET2NdbmtrCVZXZ3tZV0d5d2dlF/G7AeUd7WUd7aVYeDjt6ars7akWaWVPd0V3FzIJ7RZpV2epSDEapV0duKWEzOnuKIF24Yh0Z0lPV5lIS0Va0t2FnJLe7tK+nrK+3vL+3or+voqB/srB/oqBvvK+HpQp7umElpDlUQxPf/jwLb/z8fdZmZgYEvL7oROC/glhH3EUDAj5fcCFxwEfrTxOm4DXNSm6KhT08HmdPG6bKL+Fy2risBrZzHoOlN3I5bTwuR0CfheKQQX8bhwnhL0v7+qAcjltbFYLh41jKyjkEMdmJr2RTm2gUmvGxirHxqqp4/U0aiN1rGF8tH5MpKMjtWMjdWMj9eMjDaND9cND1YMDlUODlTgO9FcM9VdCh5FDaPXoEEo2jA2jZB0Ut5B3jUAH61qbi6TlpGXkpJ2d7X7+3vtm5hR3T89PV6+iUCgffPCnvyxYCHMCr/b9939Jfv5ywYKPEDC/9977v/0dETn/7ne//d//+eDnv/z5b37zG1dnq5rKzNOHopL2h7Vjvrsq+ntqBvuwGOqGB+uHB+oG+2r6e6v6uiug/T2V/b2VWCEDfdX9fZXkjOI42F+FNg8P1IiaSnSQ+GEEQpFooI0RR1JFV2vHh6F1tJEG+lgTbQyLs5k21kQd/ZvSiPwm+ngLrqIe3DU2XDc2jHvrX1ZS//mjt/x+0FxYGRBB0Is5xoyKpvnF7HI5MCfNXHYLl00QAz44rCYWo55Jr2Ux6kRay6BV0aiVDGo5i1bFZtSJyoswIu5qwS18TruA20EwxOuY4KPybpAHgCZF5OF0Fiw+j2gAEpPCgcmJPh4XDWgnCRNpl4CPRvYgk0SNzWpmMZuYjEYWvZnFaMaRSWti0kBwpwAGktPDY3dxWe0cZhuL3sKit+ISysDy2dpZ/vH//cnT0/3Xv/qVsYmxlKysspqasrIK8ZXED/5IRkC/+MWvQMYHH/zPokVLyO8W/fGPfyJeZRGl3//FLxEW2Vqb9HcX9bTk1hSdHxoSTfYwJuZvSs49pmpksHpooILU4cHKkcEqQoeg1UggZ3SoenykjjbWyKCiF20MaisSOBVxQBzBBJQ6Vj8+SiBFZooUVOEpdVQin9Ra5IjyQUbd6DAaRiiaIeKG0HdkZXJyeELY/9IM9E5gnoRDk8JBAIRJBSKYfiBCTDy3nU/MWRsYQvqFcto4bDDUTGbyeR1QHreFy2nmgBtOM9J8btuEoHtqon9KODglHJgSDEwLB29MDE2Jnjtre8ABeCXMEpEgrBeqQkJUIVG5kN87IegleAJ2AtBG3A6MOCySZqJ5Am6nkNcNKAkued045bHRBaKFIgXrjTE7I377hz9oqKuJia2ys7Nb+PEiO0fHpUuX/QnOym9//97PiW+HwK6AjD/84Y9QwAF0/vKXD2FpiBda3v8lFCGRmor82FAJfax8fLCMxWhiM5rZzFlt4TBbeewOPqcDRy6xa4NvDB2GqFO0KggltnVOJ/Z30RaPFYWuYQR6hCIlHAO4BBhzDlGAixXCbmWxWnAkFCaZ0cISPRTP4r4sw3mpaAMDBpvWALMtKoZBIHwJeBGPHz94HYQ5sPJMtAcR61UESh8W9KtmRrQNwVQ0Y8SxKxEmh0+oaF67iTRhhLBzEbMoFPa+nPVucgMilCjWg3mFTsyWJMYCo9BOmC6REWIzm1jMehazhs2qZ7MbmYwaBq2aQa9mMWuhOIUxA3x8EZ1AZwLmR9CHSsAQafaABfRFAdHWCeWTeyWBO8arjkGvgZ44GQcf9pNly2xtrczMzJevXOno7AITAhrI7QYoAI5f//o3f/7zX8jvFv3+9x/87//+lfxGNPJBzG9+87uFH37YXH+JOlLKhE1lNr5sQxef0yXk9aJ5E4AbA4VWERx0CTCA/D5yKGA7pyYIJYzoS4UDgMEUDWmvKGdwEgUmRL7BSxUSq6WLMLQEHK1E3zE1nC5wJtriMaRYrl0TonpE1rqTtNYiBwOPGETNX3758HUQ5sDKN3x+D4fTziaYJbDlsDFnDQxGHV00rEw6Npp6FqNBdKwVKZlDKAaIsCjEdtPMZRGG5OUmVcdk1GLWOewGKDH9rAYWq47JBAGVNGo5dbx0fKx4fOQ6dbSYNlZCHb0+PkqkccQpk1qBTY0xXoYjk1rJoldxmMSjCYAIJdoACCb4MCGEyRG1oVnEB7lpwgrCi2ogd0nCnWI1IhMeFXLotOqkxIN/+n//+8tf/NLKykxeXkFeUUlLR5ekgdxiyA0IlgOskKe/+90fAAfx1fkP/ofEBVf/9D9/Sk/ZSx0toY9XgGwOE09pIfdcIa8TzRPANMK3I8eHAPolwaJ8AQ/HVpEi3SFEdwRdhBLLrHt2UYkWLWHOUQYqWgwvuskheorbYXEBB5ZfF6ECbPFEDTDJWIocNrzDFuJ2PrH1EwDxur/44l3syjdsbh+L081md3M4PRx2FxHmMNtZrFamKAIilcloptNgzQDQS6W9UNqrmSKl0Wpp1BoamKBXEUp7U6uJ43glfbyKTq1h0moZVJHSREqtRQ7rBaP1LHoDhwmr1vpSW7iEyW3msTArIrPBJswvh9hoCCPMgalnIjRrYtAboPBmCIeG2URwzG5GmkFruHTprKK8othqcRcXJw0NTS9vbyMjY2lpWXl5xVWrxKDi4mvWrFknJSUtKSmN07VrJVavJvKhYmJrxMXX4uq6dZJycvKJCbtpY9X08ToWndiDOEx4S4CDUC4MPhSWn9iPoI2v6eySY9HJhQdtIIAD+qwW9FQEGbHdMFlNTGYDlMVsJBMMRj2pRCbCCxbZQQILUuHMMZn1TEYdqbDZbBTDamFhTOoff/4u/soLmf1Vp7dm/h/XNzJEef858rce/YOd/P675srKvPxHyD8C0jwr8zJnmWdlXuYq86zMy1xlnpV5mavMlZUHDx48fvyYTD979uytvwv+Vvnqq6/u3XsRgH399dd379799vV5+beRubKyb9++wqIiMk2j0aytrZ88efLtIm+X9vb2TZs2kemxsTEPT89vXZ6Xfx+ZKyt79+4tesnK02++uXHzJgzGF1988VxkZj777DMkvnn2bHp6+rNHj169saOjI/AlK+Pj4x4eHuQtN2/eJI0T0o8ePUJtE5OTT58+fS4yRYQ1un//9m3il18B5ecvTRpKfvPNN2R6Xn5ieRdWBAKBi4tLT0+P73pfcDM4OLjR3//hw4fhEREwPz4+Pr29vbM3ghV7e/vExMSTiYl79u4lWUlOTt6zd09AQADqvH3njpWV1caNG729vXHEZpd15Yrfxo2o3M7O7syZM5OTkza2Nqj/xo0bqAoYzVY+Lz+lvCMrzs7OT54+9fLyGhoejo+Pzy8oKCwsjIiIaGhoAAcxMTGzN4IVNze365Di4nPnzpGswKhUVVcnnUqKiooCKxQKBQYJBgOnxcXFWVlZW7ZsAYUoZmlpCfMTsyOmsKgwOzs7MSlptuZ5+YnlXVlxcUbi6tWru3bvcnBwuH//PtIhoSGA5uq1ayBm9kaw8i1/xcMDFgKoga2LFy8CL7BiZmYGc/Jc9JSCggKwsmvXLpxia7OytoI56e7u9vODrdlIZ9Bna56Xn1h+ACuurq6BIsGmQ7Iyc/euhYXFwYMHkYZvsWHDhpMnT6JAW3v77I1vsgIsHB0dYWO2b98esYVgxdTUNCgoaNu2baj21q1bYAV7TXR0NLYhbGq4EX4MtrZZv2de/iUyV1bgNNBfyueff85iv/j/HDwebzYkRlDd09vDZH3ra0iwDSgzW4DD4TwXgQVTMTMzAxMFViytLLHddHV1kdYFrJw4eZLOYAwNDZHe7nNRIIZ97GWt8/IvkLmy8s8T0rd9NboBK7BPs6fTN24cPnzYxdXls0dEtDUv/yr517Py9ddfj46NvZoDGzMxMTF7CsvU1taGzFeKzMu/QP71rMzLv4vMszIvc5V5VuZlrjLPyrzMVeZZmZe5yjwr8zJXmSsrra2tu3bvvpab++WXX167du31y98h51NTv3n2Lh8DnrtkZGSQiQtpF7595S2Snp7+5tvUd+8RMjIy0tfX99qlH0UuXLjw9ddfCwSCh589zMnJef2ySMiXKC+kpb1+4YcLh8t99bS9vX1oaOjVnHeWubLi7e397Nmz7Ozs6enp6OjolJQUoVD46NEjTFVzS8uTJ08qKioqKyuRiUt8/ov/YhgREYG5QXMzLmV88cUXyMfAocydmZm0tDQqlYo6S8tKUS1qwFTl5ua2dxDvD5SWlhYWFZHzijJFRUUAFNj19vZevnx5YGAA+WXlZVVVVdu3byef1dvXd+fOnfr6etT8+eefT05O4llcHg+Fm5ub8/LyUE93dzfmrLy8fGh4CFWlpqbevXf34MGDMTExKD81NUWj0VLOpwgnJm7fvk1WhT6SVc3Owa3bt3HjwODgw4cPa2trsR5mX7lGSXSfTqczGIwHDx7cunULXY7YsgXttLOzw9D19/d3dXU9J/5TyeCDhw8xeo1NTTwez9TUFLCiSTiiTrK1qA0PampqIj9lxmKxMMQlJSXoTnFxMVHJ0BBaiAeNjY3hLqxktARVYWHfvHnz/PnzqK2goAAdIZv3D8pcWTmWcCwsPAwThrFzcXFBU7Zs2YIOszmcoODgzz77zMHBAWMXEhKCEQ8JDXkmMifhEREY4j179gyPjMTHx/uuXz8xMdHY2Lg9JoZGp9fW1WEQL2de7u7pSUxK2uDnh4nc6L9xfHx827ZtmHuM9XPR3AAgTAmY8/DwuHnrVmBgIIYjOTkZ1SJNtnDHjh2YCTyrp6fn5MmTfhs3CoTChoYG5NQ3NIBCjFp4eDgoPH78OPpbVl7OZLEOHDxYWoZkOaYEjfHz85u5exd1opKdO3f2DwwkJSUFBwdjymtqX/z/36CgoNt37mwOCwOFSDOZTDxi9hJuTxcJiOno6LhefB2sAMO9e/fevXt39+7dBw8dBCVAHMudxWbhls8fPw4LC4PtQebRo0cBBLqGyjf6+wNZT0/PSdGvJWdmZl7OzNy/fz+6sGv3Ljabjbsw/gD9xIkTxSUlwBQgIvOrr75Cd4Cmv7//T83K02++wZTjuHffvo7OjoOHDiFz2/btKefPnzp1ytLSEqzs2bv36dOnZmZmWAqwpbOstHd0YNpSL1xA/Sw2+3B8PKYK3UD3du3aBfZBxpdffRUVFYVxxC3ACGOHHm7evBnD/VxkRXEJQ4ClQ84KSMq6cqWtrQ2WBtNPNpJkBRYIa2vfvn2wKBj3+CNHMEmAGEb+ZOJJ2LmS0tKWlpZHn38eFh5+7tw5VFhZVQVqMbiFhYVoxnOROQQruXl5j7/44sCBAzw+H1UdEvUasikoCMfExMS6+rozZ88+efqUbAO6DICei15ovnjxIqwmWghWsKgAPeq5d/8+OoL+nj59GjSkXkgFiBaWljAbW7duJft19NgxDE5dXR1WlH9AAAZxz949UyJWAArsIigEnedTz9c31Ds4OmK00WUMJmjGLRiiyMhI3IXWonc2Njb5Bfk/KSuQqOhorLONGzfCoqBlyAHgsMz79u9zdHT87NGjw4cPPxeNIEY/MSmRvCtmx47HokWDMcK6xHJHH1AGSwSJvfv2YsWEhoZiNGFFSARjY2OxVjBqyGSJ3obEWsFkAB2MBfkUoABjExAYcOTIkdk9KDYuDisVFuL+g/vIP3PmDB6RcDwB7Tly9Gjgpk2oFjxho+zo7MQmtWnTpmPHjqEkNgykW0SCTu3eswdziWV9/fp1sAKysV7xXJQkHwQOUCeei5Wdlp4OVmY/r3P27FncjpLDw8NY0+gCtuadu3Zi/4VFBPpoEpCCDQY9uBcdcXB0wNWYHTEAC0vx1OnTN27cALg4hZ3D/ogbSbsCo45tOisrC8+9dPkSbHD0tm1YomAaz8XOjluwo4E/QI8b0WZXV1cYIexZZPP+QZkrK89Fb9yQ1uJVeTPnrc7sbLE3E6+l35r5XQXekvuKkO7O/thYWMQ3yz4T6Wx6Vt50fp+/0YC39pGU2dvffOKb8v1l0i+mJyQkgDnMzuvXXsr3tOT7K38H+QGs/JsKvOYfecx+QoH9eyu7/xKZKyv3799/Pes7BG75j9g98hMtc5G7L4MRuE1wUL598XX55uXnyZ+LHvHqEoTzTn5oBpvLw5dl5iL37r9oALo/WzkpGD34ZNiO594dyGx49ao8ePit1pIy+zn5HyQA8evvtlhvylxZ2SJyvuYiCD3mDtbfFXg8r2d9h8Adhg8IPw6Rc9N379CY/rKyMswZ3FUyB7e8OrVwtzlcDhLwMeGYz+b/XYF/g0inurr6zswd+EmvXtoaGcnhcEZGR3bMuTuQ2S/ZvCpwceCYv5YJl46Mon+QwPEa+/anQb5f5sqKra0tvLakU6eYLCYcTzibcHL9A/zh5V26dInBZMKTh4uHacjMykJMCG8RvjAcMbhgCC6io6MfimIllEf7EIHDh4Uj9ly0rcIRg5sG1xWuOzwy+KFYJUjEHYiD40w2AEEvThFowOGF54/K4QvDjUVjkIariPJwQtFOuJDwnROOH8ddCMUR9+LpcK5Ja5GXl2dKMYV7CAczelt0YVEh3ALEwAGBgeAy5+pVsEJn0OH2oh5MP6pFlIvoDEsQIQac0x07X8w3/FAsTXQca+PKlSvJZ5LRdwsLCwwRIhT0Go42WRJl4O0itoIPi0AS/nVdff2OnTuPHnvBKwQFgNSmoE2IAOCjoEeIIYquX0e0iLgaDi9CHsR0qB9WE8RgTHt7e1EnWoXogWQFox0SEoIWwr2FWUIbsMinRfcSUWdqKiIpdBO3ILpMF7ECRx4EzwW1ubKCaAVHOPZoQWZWJoKxltZWMjwLCg5GP+GKY9ZRAJOE7QBh53NR8Il2ILjATCB4W79+/dWrV7GIEa+iobNfXmxobIQTB9Qwo3dmZrKzs+G67xaFx4i8yDIIMkdGRgAHKgwLJ0JTRChd3V2oE4B+/eQJBhSzizAe44WZxhDwBQLRowNgQlxcXMiXZW/fuY0Zgl1BFIbTyKhIMDc1PU1Gy6gcNRgbG09MTDAYjLS0NKwK7CnoaVNzU9aVLPRxtkkwHojA8VwMdE9vL5CdmJxMOpUEuxIXF0eMxktjDFYwNzBgFpYWgBs5rm5uCI8pFEpHRwcZUaLA1WtX6xsaQFhNTQ1WDm5HPmhobW0tKCwME0XmwKK5pcXJyQl9JEMtQIzy5GQjnI6Pj0cCYeOFtDQMFMg4fuI4OR1YaYjLYIDRIyCFRYKQ0MDAAFVhQsmmfo/MlRW06bkocsbCGhoexpiixe4e7tgp/fz8hoaHwDJ2evQHrNy7fx+LBuUxxIAA8ef4+DiXx8NsVVRWYhZhM4EXrj4nXmq7hQQCWqxdWJ3PHn2WX1DQ2dkZunkz9ngbW1uyAWAF96IeDDEGAoYHpohKo9HodBgP0IY5g3nDouTz+cdEr1I4u7hgCtESgVCIBLnRgPXYuFiwcuQoEQOTPQIr5Cs3ABSsZOfkIHyFdQEr5NRu274dIOK5iKsR5ZJNIl8bHBgctLaxhtFCbIzVj6kS7UGEVSNfNSETJCubwzZjSaCdqGrm7l1AgJGH9w3fCAVg5MjXSBpEQrIyNDSE4crPzw8MDAQWoARDBxbRBaJ3O3agp+np6bOsAAgMTnBIMPCCXcSCoTMYMNV4TEBAALZIDBcWZGRUFJZrX39f4KZAbGqtba1Yut/v582VlRrR1bq6usmpSUw/TC4mCVxjNwEoUIw1li+Px8M0f/HlF5g8lEe30W7AAeuHR+Tk5CQmJs7MzGDpkC8fPRftQRkZGddyczFMTU1NKEalUbHBYbASkxJnP4995swZDBxQgNnH3g/bUFNbC1JhXc+cPfvll1/CsGPMT506BTI6RH4G7BMqhw+BmbsiSpNVYaeDASDfTECP2traAGiTaEPEsb+/Hzyh/bArg4ODdfV1z0U+DVZCZVUVCmOayXrw9KLrxBsR5BtkaD/SYHpqegqD8FzUfbIkEkKhkMvlwmx88eWXpWWlk5OTGC6YJbIABAVAPgYQveOJBHdhmd24eROFcQkNw8hjDEEMyMDIIx+DiUzYbPJ1S7CCVY3lxGSxgG9aejoGBCOGVQqIsWehv4fj4/Hom7dugULsdOhR/JEjI6Oj6CxH9LbUd8lcWXlTACMMGpmemJzo/ee88TYrcFdn7r7lnzn/ZALUABncLPLdqP+bgrmH5Xs99xWh0WkkVe8g787KvPy3yTwr8zJXmWdlXuYq86zMy1zlFVaqq1+/OC/z8orMszIvc5V3ZwXh+9dPniDWn/16+rz82EJ+buL79fXzd9NvXia+R96FlSdPn37++PFnjx49+vxzKJn4em7/Pm5e5ijPnn7zMCH1lpHnLUP379Gbhm43DVxv/Rh608TrweWC78HlB7MCQwI43qpffPnl66Xn5Z0EE/Yo+TLvZ0u4P1v8kynvZ4vZP196r7rh9da8lL//W96vytNvvnkTkVd1jv+cco7y5gdB/kvk2fNndxwC+T9b+uaM/rOVc+Bv/83kNan6Qaw8/uKLN/l4VWf/YSTkWu61goKC7p6evv7+/IKCK9nZT0SejVAoPHPmDFkmOTlZIHzLz7uS8vjx4zlau/8wgV2ZsfHnzpkV5kIZ3h/XjH8kzXMJ4pn5sN5fyl6lwfhAnCdvRFxdrsL95fI373qrcuKID1O/VX4AK4RhFHknn4m+MpOYlJSdk5OVlXXx4kUanU7mP3rlM38wCUjn5uWRX6BqbWvDXUhwuNyjR4/evXt3ZmbmwMEDHA7nzp07DY0NOCJncHCwu6d7dGy0r68PrICw+vr6qenp56J/edrW3gbbxufzW1pauFxuY1PjD/pk17+L/EBWPmZrWLElDW5ExHF/9Sn/E9UprzCeZ8joStWHmfmchXJcO3/uH8TfuOvtyon7MewKsSO8tB88Pv9YQkJpWRlwSTmfMjI6OssKaTwgz549y7py5cbNm1Qarej69bgDcWTEBFY6OjpKSkqKi4vb2trYbDZog7HJupIFUJBT31DfPzBQVVUFRJKSkr766qucqzkoVlJaSqfTS0tLUR4gZmRkMJjMd/js4P99mTsrPOIIVqw5Vt63DNy47y3hvbdkIvIgzyt8dKXKDYrPdMR+tv1PzgrmfpaVwsLCvPy8wqIi3HXlypV0TN7LSyQQKHz12jXSkDwXfUNucGiQTIOVoaEh3J6Xnw/jAQhSUlJoNBoKQAQCAY5TU1NdXV2wH6ANtwC1gcHB4pISKpWK8hWVxPvbt+/cQf7w8PCL9v0HydxZYb+3hLlafZziyhXXubVl/9ivlw0tU5722cr3DB1dqQx6mGKaN3JLf2pWnr+yB0Gx75SUlsC0YBZnM6Hkx0SQyMvLq6ysJP8vck9v72wwht0HBoPQqamJiYmZuzMwPDU1NeBpenr6/v37uPTw4UNYmnv37pWVl8NlGRoeQrVNzc0VlZW3b98m31XHNoSn/4if7f2/I3NnhfuzJVNa9jfNfGBR+AvkbjgFTJt68d7/RLBah/2B+MQiFd57iyfV7Hk/wF/5kVj56rsDZlLnw+YfS+bICu+lvnnp3fRHYwW8k6/CvVVhdd78OsK8vINgEO96RnB/2tdXCH1vEe/w6e+awh/GynORI/JWXADK0x/va0H/5YLZetzcwf7Np7Nm47v09cn+R/S9xSN/lXjAevGfi9+UH8wKKV+LfnuDpASJr9729dV5+QflMYPNPnWBmXDu+5WVcPbH0XMXH00SX5z+LnlHVublv1DmWZmXuco8K/MyV3mFlf/Kd17mZe4yz8q8zFVACGIagpWqeVbm5XtlnpV5mavAo51nZV7mJPOszMtcZZ6VeZmr/I2Vufxnn3n5bxYQ8oKVyampa7n/TMnLm9d/Y83NnZicfMHKu+qTH6ZPRPpm/j9X32z2f70++YEqGsl3Z+XLJ0++fPL0yyffiI5Pv/j66RdPXurX39JXi/30+mbL51U0HT9Av/oaw0h805RgpaysrOblfyr7J0pj40+v/w3yZn+J9I8ntbW1pWXlL+OgqqrXnZl/irz+MZdn39Y5yjPRV3Bnde43/gfJawNGnM5tGOdQ5G1SXT2HmPnJN8/uPPh88vbDyTsPpmY+I/TOZ5O3HwgJfThx5zMoEkJRYnLmxang1gMo/+ZD1tQD+sQ95uR99o0HnJsPRUokGFP3x4R3+zkzPSxC+7n3cGyhzjSO3X5Nm8bvEEqdaRZpC+1uC/1uK/3eq9rOuD8sfMC7hQY8unHvMaH3H9+8/3jq7ueC2484Nz8bEd7v497v590fEdzn3XhAFLv/+NaDL6C3Hzy+8+DxzMMvZj77ksYbZwhYMw8/v3HvPnuaTeNR65qvV9SWXC/LuZqXVlqVU9ucW16X2zvS0z1CrevovJZ/NeNySl5henH5pbyi9Ozc9Cu5WVcLsnPys67mZRWVFnYOjFTVV2XlXLp6LaewpCjjSmpO/tXSmuKyhvLr5dlXrqbn5l/OK8zIyjmXlZ2WczXz4sWM1NQL586lpKSkpqamIZ2ScuHipWsl5Y2XsgozrxTl5VdeL2sqKq4vKm8trOktaWNV9E5XDN6Elg/ceqk3y/r/pqV9N0r6pkt6CS3umbreM1XUPVUI7ZqEFrzQiZrR23cff+c3R0WsPP0+Vh4+/rKDKugYF3bTJ3uZk4Ps6UHOdA9jso0qbBnlt44JWseFLdAxQfOooGVM2Do+0TIuaBrlNw7zGof5DYP8yh5ecQenso9fNzRRPzJRPyysGRAW93DzOriZTezTlcwj12mHimiHi5lxBdS918Z3XRvbeW18B/TqGI47r1F35hK6C5pH3Z1H3ZNP21dIjy1kQOMIpccVMY6VMi8186oGhO3UqR7WjV7WzR7WzS7WzabR6bJeYiBSG7lnajnnG9jZ7bzaoYl22o0u5s0+9u0B7u0h7s1R3s0x4e0OKjWtKD2zuKBtiN48MJZ2PT0mPiByt/mmaLcTFy/4R/q4rjcIi7FcH6Zv4ahiaq1j726lri+jqi1paCpubi1DsZYyd9J09Ak2sTTUNZY3ttD32xKWU955Lrswck9s4OaQ9UHe9l7Kjp5Gdp7mbgEu9s76Kpri6npr1bQkza0NtLV0pCRlVq9aKy62buVycRlpJXlZFWVFDXk5ldWrJVRUtPX0TA31zcxNbCzNnSwt3SxsNlCsAy03HvNJ6ghMHYYGnB/2Pz/sd24o4PzQJuJ0BOkN5wbXnxn0PtXvldTnmdjncbLP/XiP6/FeqEtCr/OxHqej3Y5Huh3ju+wPd7gndLRSb7wOgUj+DivPnj/rYU83jvI7aRPd9AkRK1PDnBsD7OluxlQHbbKdOimCQ9g8JmgchvKRbqVO4LRpBKcTDUPCugFBaQ+vqJNX3Mmt6OVV9wuLu3hZTZyMRu65GvaxMsaBQmpsIX1vPm0POCA1l7b7Gm1XLqG78+jQPfmM3Xk0UIJi+wro+wFKETOOUMbBYlZ8CftEOft8LedaG7dmaLJ5/EbjyFTd8FRF/0R+hyC9iZ9SLzhTy0up42U08LJb+UXdwvL+yaqBqfqh6aaxGy3j0x20G+jIyZyUxKyMXcfjth86ePBMWvKVK9sOx0Ud8g3eYeAfaecTbL4x2Mwv2NLOXdHGSdbYSlLfTEXLWFnLUFtBS1HTWNvC0drWydTRy19Rda2mjqSNm92JtJwLORmJWef2nwqMjnUO32e+ZZ+15yYtS1dNaycjA2NNRbV1+sZqXj7eFmY2stJKUuvkxVdLrFsrLSutbE6xpZhYOzt64mht4aAor6ahqmOob6qjCaoM5eQ1ZGS1jawCKIFJTgeqQQkJCogJThvZnDEWnDYacH50Y8rIhrND688M+5wGLgNeSf2eif0ELif73E6QuPQAF+djvQQuR7od4ru8T7Q/+eYtH53+PlZE29qz5lFe05iggzoBW9LHIozKEGdqmHtzgHWjiw5cptqAC+AYBRzCplFB8xjBygt6RmBd+PWDgso+3vVOTn47t6iLVTPErernZzWxTpYx4wqp+wFKEXVfIW0fwQF1r4gGQsEHAQdhRYjTAih9lpJZBSiHS9hHyjjHythJFZzUOm5Om6Cwe7KI0Incdn5WC+9CA1jhnW/gwfBc65i42i7I7RRe6xLmdAiudQjyUbJnsmJwumpo6mJVU2HzQHZVx95TZ8/mVaVdr8qqbI89u2d9pMr6zZp2zmqm5vJ2TgYuXvqO7srugfI+EeaeEU7GVuraRjpapkam1lYmZirm9gaGpvIOjjoOnpZBMdFRseZBO3Qi9pjEHNHYEKEUEKltYadoZK5gaaejZqBlYW3ntyHQx9vfzNTK1NjKxMhCW1NfR8vA1sbJwtzW0IDi6OBmTrG2trS3t3XW1zF0d/bCqaa6rsQa6VUrxNeIy+m6H/JOaiftShAouTgacWks/NI40oGpY2DF79wwWPFNHgIufyMmacAjsc+NIKbH7XgPDIzLsW5HGJhD1U67Uu+97Tcm/g4rkOYRXuMIr3VU2EnDHjTVjz1IpH3Mqe6XrLSMTcKoNAzxoTAnItNCsAJ6kFM/yK8Z4Ff18nLbeNfaOM2jKD9V3MVNrqIfyB9JrmJmtvLPVLGwDcWSZoOwHAQ0IIM8kojMUhJ3nUUeDxSxDhWzwUp8GedIGTehgpdYzbnQwLvcLMhuE0IvN/MzmvkXm3kwLamNvLRGQUaLIKuVD1xy2oWZrYLLrYKMZsGlloms1onczsnrPcKaoanm0WnsXBW9git1nXtOHQnY7hywy2TjNltHX2UbNxkLh7VuG9YGbl2zIUzKN0LWJ9w8cLe3d+QeXRNzVS0lA2MFc3slt/VyQdFiW/Z9GrJbP3Cbif9W/Z0H9XYd1nDdoOLgY25mZ2zjbOAVRHH2sHZz9Vm/IcTD1dfZ0c3a0sHKws7IgKIjwkVVSUNdVWuduJSuloG6spaMhJyKvKquhp6asqaWmp6uhv7q5avFP127Rt7U9XBDwPnBTReGQ9KHQy+OhmaMQYPTRzddGA9IHfMnrMvYhrMgZhDEQL1PD3gmDXom1Dvvu+K8+4z7kQaPo41OMedto5Mc9hY47zh69/7d12B4PidWhnkNQ1w4H3BBYKWx6cDGdNAmWl9ajgY4JcOCugFubT+3po9bO8AhC4MwEhTYFRiSog52ZhMru4VRN8jrpk21jwvLeniFndyaAUHTGDyeaWyTJT28jHr6lWZ2cjXIoImU8aYtASWkHihmHxKBEl/OPVJOsHKiioO95kKD8GKT4GIjL6NZmNGKPUiQ1iiEdUlv5KTWjl2oG7/UyAQrWW2CzDaQJLjQOJHWJIRebhHkdQqL+6aKe4EOJ7mgaPN+t60HTSPizCLirEJ2qWyN03X1l9oYoeUZqGTlLE6xkzFzlPPb4R1xItNla4KZT6iJvaudh/WmbTJh+xTCdmkEbdeNOOgcFGMUttvEL9zKysvePWSTs59J6E6d6D0ujvYONlbOHm6+9rYuZhQrWAtlRXVZaUVFWWXptdJqCmrqiupKsso66roqcqpiK8TlJeXVlTQUpOQVpBRlJeSl10otX7ps+QoJy4hM//MDwCX4wlBw+ggoCb44FpQ+FpRGDRThEpBK3ZgyCgND7kfrkwc94zJtgjaYe5s4BpjZbvTw2B7rHBpu6qBEcTd1DQu6//AH2hVSGoc49UOcJpF1AQEi48GrH+TVDXJqBjhV/Zzqfk5NP7eql13ezS3t4pT3cKr6OACidpBf3Q/vRFDVxy/t5l9pYWc1UlvGJmjCGcbknVH+rX7OjZohQXEns3ZkopsxOS64zZi8S5uYQYEO+uSZGmZ8MRxY+lspgR4s4UAPlxIW5Wg5jwCFsCu8s/BLGgTnG4XnGgTn6gVn6wXnG4TAJaOJnl7TeKroakLe5bNllekNo5ebhZdauRcamKn1jHP1nLTGqdQmYXrzxKW2icttk7ltE/E5WZt26YTtU3VYr2zpKuvgo+boq+Qdou0bqmvhJEuxlzQ0k9DQEaPYqjiERHlEnfTdcd7aO8jazTAo2tQzUMPaScbRR3fzbouoWDcnbwNrVxs9K107d4PNMXZh2w0tLCi21s4GeqYwJBYUa2V5VUMdYx11PSVZFfAhJymPo6qCKkDRgvMsLim2QkxmnayijJKcpJzUGikJMcm1q9atXLpiyaJPVO2iNpzp808hTAtACbkIozIOBSubXuIisi6Eq7vxbL/X/jMuoe7m7kaWHsa23gYUB3ljOzmH9erOARrWXvImDlJ3ZohfJX1N/g4rMC01/czqPlbdAKd+kAtKkKjpY1f3cqp6OBXdnPIuVnk3u7IXiLCLOznX2znF7ayyLnZFL6eiF54sF8ajpJuT38bKbqVXDnCwi9GFt0hWhrg3epjCxlFBaRcT3g93+h7/5gP+7ftQ9o2ZYd7NbtaN7HYB4qMD1xmzhoRUUHKolHu4jBcvAkXECv9kJS+pmnemlg8+ztULz9QJkmv4hNbxztaNnS6+EJ+x9WBqwvGszNP5+RllyUl5x07nxyZkbtyZvOnw1dKUWkZKTVtCYebZmtGz9UMp1aORSTu9Nmtpm63VNlnrul5T22ititYqPRNJcwd5Vb1V2sYSRhaS6rprNPVl9c0NTK30jS1MdY11DM117VyVjExlVbTEjGx1HIO8fCJ32bg72fpYe4bqeG5Sc1mv5unjYGluB+/VQM9ES01HQ1lDTVEdZKz5dI2IAwlZCbm1q9au+mSV+Mo1OK5cunL54uXiK8XXrV4HSlAMZT5d9uknHy9b8vFScWWKd2IH7Ap8FJKVkItUKIFL+iu4pI76nx/yPnLJOdjB0kvfwkvV0svU0l3L0k3G2kPOzkvWykPC0lXazlNx5t4PZwXecGUPCxxUgY9+dm0/h9xoqnu5ld1sMFHcwbrezipqZxW2sfLamNCCNmYRMjvZ0OIuDvwSeLXAqKSDlV/RU1DWcTW/Lutq9ZXc2oKSlrqW4bZBTvsYb5x/gz15hzt1TwBWbt3j3rzHuXGPc/P+CO9WzaAgs4VHhEsvQIFFYR0qZR8mth6CEuixCv7xSv7JKt6pGj5YASVnal/o2Vo+wp+ksq5dpzfvSzRLztp5KvtUQtrewykhu47Z7z9tueOE9dYjHkezcxMKsxNyD4YdCdt94dSO83v2piXvPO1r7Sala77c0mWtg4eytuEaWfmlmtpr1XVWSSsuMTSXNbVW0TSQ07e2VzHQUNGU1zez0TemaBvrOLkZ6+rLKqiJ6VK0HAJCTBxNTK3V7TxMHLwRZqs5ws67esGsaGnoqSiqK8upyK6TxdwDjtWfrBZfIUZAsOgT6NKPli5esHjxwiWLFixa8tGSFctWrF6xGtAs/WgxdPGCRYs/XLxkweJVknJeCVWBqUMkKKEZ46EZNChJTFA6DUoQk0YNSBv3Syz3izvsssnR0l3N3EnP3F3Fyk3R1EHZxE7NyEbZzEGRYqd0Z+b26yjMhZXSLlYp7EQPdhkOzAlAqenjiBTmBLiwSjoBCjO/lXmtlQ7Na6XntzIKRNCQmlk9EhIaRzGwdbV1drVzNdTUV5SWk1kjIblaQnq1rLqinpdnaHpWRR+VR+VNMyZus6dnmNN36ZMzUNb0Pdb03WH+TF7PJOA4WMI9VMp5CQr3SAXvWCUfoByrhKeCDYh/ulaQXEuYlmQCGuHZOv65Bt7ZkoKEq6nHsi/sOWm8PVb3xJnNyRkxJzIuHEuNiE1y25ccGH3QcW/Sjp1n98deyg47Hhu8P8o70sY7irIxStvcQczcfpWV2wrvzXLO6xVNLGU0dcQpNmJ27mvtPZT1KJLaJkoU3wi3zdFahjKaetqaOura+oqmluq6hlJScsuUVaWNrHRMrRVMbaQNzKVVdFYamMg4uTrZ2LhamFnDXcWeApUSl1j7qfi6VTAhn0KXLyYoWbJw8bKPRayAiQWLln605NNlK1csWb54wUeLP1y4aMFHiz78ePGHi8AKnGCnmAT/sx2hF6mhl6hhl8bDLtPDLjM2X6K/hIYenE7dmFTjvmubyxZfiquZuYePmfdGS99wU1crczdjM3dNXSs5HYqMgaWkpavpnbf9TMbfZyW/lYa5L+nklPVwKnuAC+HDwp9tFHmv8Frgr2DHAVJFHcz8dpgWxiwrSFyq7Dc3d5URk9RW1vR18zHVM5aXkFm3YpXUKjEZMXEVGTklaTm5tTLykorxxzPah1lD3Kkx4e0R/u1hHvQmnBgQw5ya6ePcvtzCPd/AudQqOF7FPlIBULhHq3gJlXzo8WrByWpBUo3gdB0/uZafUNa79fTOPWkpJwsKTuediDtjdSIrPLmo6EBq1Lb9GrsO20XGOhxLDjuTceJQ2sGTl7eG7bAL3Ru0MzkpNuPq7rTYqMOq4fsVoo8Ybz2guu2wcmScbMA2Ce9QZTd/BbcASQuXvwTFrPYJlnLwkXLykzK2kTeytdGmaOoYKZi4BVq5eWvrKWjqyhhT1pnaiKtpiWkZrLJzUza3k3LdIO0WsMbFV97cwtKMYquvYySzTgaOiKSYxOplK8WXf7pm+arVsBxLl6/8eMmShYsIJhZ8TBwXIrFw0YcLF5P6V+K4aMFCETQfL1mwCMNnHhAUfK4nPL3P/1hKyIX28ExaWCZdRAx98yUCmpCL45vOtW48074hsdnrYKFzWLSBnYmWqYGZk5FPqKVHoK6Zg4q5g5ydp4K9j+rM3XeyK9eaqTmN9IJWdmE763oHq6SLXQVcBvjwXskwB0fyVbi6ITiz3IoeghuUBCvXmqievmEK6+QMNfR8XL03eGyg6BmryijIr5FQkZI1UNNQl1UQX7Z83XIxQwUlbxvn1PQi8hW/bsZUF326izHdx7oxwL05PnGbdeMuc3qGNnWHMX23fHD6eDXveBWx6Zyo5J6sxpGTVMM/XSdMxu5TL0yq6A2KdfOODt2ddjr+yvGdx02TLzmfzTRMuqC+Zbu2+0aTiLiApPRte46fOHq1LurY9m0H/bcf252YXwefJva8WcwBuW0HVkfHr4s5oRJ5TD4gRs07VNprk6LLesUNW1ZHHlq3abu8tdvaDeGqITu1N24xMLZVkFdbrawpYettvf1QuIO3svtGqdCdMmFxUiG7EFqLOfkqumyU8tkstvXAiuBILRNDip6GPhxV+B8rlyxf/vGSVYuXrVn2CXTV4qVmkms3G2p5aKp+unDhkg+hhBV5oQQfIgUrf11AZi5dsEjZxNb3eFXIiYt+e7d5RPq679gTfL4+4gojIosRnsUIy2JszugLOlfnc/CUd+xez5gQl3An5yADKy9Nc091fSs5ipOykY20rpmMkbW8noWEvrnk7Tvv5K9cqh/LqKNm1tOzGunZTYwrzcwrTfTcViZckAoi5EG8Q4RILeOCdupE2/hEy5igdpBb3sPKbaaGb4tXlVEy1jZws3d1tnU20NJXkVXUVlLVUlCWXiX+6cfLxJYs05STDXO1TY702+JiG+61saJ1pHWMeK8AEVPz6ETr2GQ7daqbMT0suAVcJm7f49562Me5g1j3ZMXw3ivZMWmpB3IuR55LiL1Snlg5nlwvONMgOF0zfKo49Vx5VUp5ZWb1qcRM96MXLOLPaSenmR0+ab0/acuJ/M6zhS3HsmtOFlPjc+q2J56KPO6+80xgbJrf+jA1KxdxB59VPhFS/lGqvuFKjr6yOpRPKQ6r3AOlY44pbN4jp2u2Ukpxibr+p5YuiiY2iopaYjJKy9U0V1nZqa4PMfUNUwyIkQzfrbgjXjl8t3zIrrX7j3+ydde64G06EfsM1ofoGugZaCtrSYpJrlyyYumCj1d89NHqRYvFliwWW7xIetliTyUpbyXpQ44WrqoKYh8tFPv4oxULFy5bsGApoUgs/ER0XPwhycpHyxYu1jRScQww8Nikbest7x7sZLbeJyCpKPIqc2s2a0s2I+LScMjJBI8IB/sNKq5B+iYOisYO6sb2auYuGmbO6uauqlauCvZe8g6+stbu2IOkdEwk7tx5J7tyoXospXL0fCWO1NRqelodLa2OkV5Ly25kwKUthx/Tj+AIuxK3dVTQSZ3opE02jQjKuhl7T2QrSqtqKKpbmVramNloK6qZqKsZqqlJr163YsnSZdh9lyxXXrNmg5nJ9cQ9RfFR0S6WPsaGsTsOtY9PtAE72iSOrWOkTsLGDPNuseD/Tt9jTs4091M3BG2m2NlpIe6wNNQy0dY00TG2dbR232Dj7mfp6m3rscHGw9vKwdjCXpdiZ6BlrEKx0rOyNzIxU9bVVzS2cbZ18XF097F29bP1CDB3Mje2VjGxUrVy0NM3UVHVlNTSk0dC10jZ2EzNyExNVUsOrquGnryusaK2obyKpqyMwlpFVSldQ1UNHQU5eUl5eSlVVVk9PTU9fWULGzWKtZa2oRLFXNncUsXCWsXSVsnSWtXBRdfOycTQRENLQ1NFXllJTmnNitVrlyxV/XS5wqoVa5YtlfhkmfaaVZv0VIL1VPw0FbYaapiuWW2wdrXKquXSy5asWbxIbNGiNUuRWLxmyZJVixYtBS4LFi79eLGy+mp7XwkrdxXnTTbumz1t/UJdYi9FX+NEX+VsyRzwT0jyiXJ122ztvNHQzEFV30rW0Fbfws3R1EHVwEJSx2ydusEaM3sFc0dFE1sZSycNS2fdt/6s199nBVExIpqcZnZKNeNkCfXo9bGjxWOnyqmZDcy8Fsb1DjY8X8TPcGLguxCh9RCvppeVWtBgaGCjIq9qrGespaK17tM17kbaiRtdfXXVVdetW/PJqrXLV1qqKZ6OCujJPcupy6k8vTPKzdrTxMDbyrF5iNvNnOplTfewiG2okz7VSb/RSZ/uZt7oZvE6aeNU/s3tsQc++uijjz/+ePHixUuWLF6ydMmyZcs++eST5cuXr3hDPnlDiGIrV678dOWqVavExcXXrl27TkJCUkpKRlZGTk5WXl5eQVFBpIqKSop/E1FaSVmJ0BeijD/yooICoJGXg8gTKisrS6SRRG0KRG2KKK2srKKioqampiESNXl5pVUrHZRkPLTVlNesllm5Uk96bbCJxmYTDXOJ1VEUPTdFKVu5dS7KMqaSYuqrliuu/ER2+TKZTwiVX7lCZsVyoLN62XJ1NTikCsZ2FDv/jY4BwTqWljZbDkddY27LZUdnU/3jzzoEmFl7axrYKFCcNa08FG28Fe19lA1slI3slC2c5K1dJSydJYyt12kbr4G3bmIjdefd/JXSDmZeK/t8Lf1I0diBvJEjheOJJeMXquk5zcz8NviwjMI2xvV2BnwU2JKiNmpaQWNw6E5HBy8VRS1ZSTlNZXUVaUUNKbmkEB8vDaUQU4MYb0dvM8NgO7PGi0fHCpNpeUkNiTEx9vrmKjJmCrI+xpTablo7bbKLOQ3toE+1EgZmCto0xj17PWXXKf+8xsKarp7InXvdfTcYWRnr29gZODmpGemp66tpG6rqmipoGUnpmojZumlQrLX1DaQc7CUd7VRMKarW7nbmTgZG1sZaRpJGVlpqhgo6JgraRkpq2rIKyuLKmmL6lHXWLoqaRpJK6mvllNap60nae0mb2UtoG0poG0jqmUiYWcvZekoiArJ1lrdzVXXwlnfcIOfip+CyQcPBU9rRa936UIX1oXpegbrmdor6xpLG5kraunK62vIUS4q5va2ZvZaOsbyesbKppa6qhpypiqyfoXa4pcE2O8p6A00dKQldaYkAY+3tdiZhFN2DzhbeSlLuylL+OsreWgp2CuvMpNcYrlutu1ZMU2yVlvhqfSkJioKCuYqqhZaWlZWWtpGMrZe1jY+Fvr2Fa8zRyOyRzRdbw9LrfONPu+7c6bo9Zv2ufVZeGk5+mjZeSjZesk7+ii6bZNw2yXgEqDh4qpjayGobSeqbSTr7Kt69/8NZefr8+eVaWko17WQZ9XDhWELx6LlKakoVPb2WmdXEzGlh5jYzCltfxMY5ddSTGeUbvIOszGzBiqmxtZKcihoMtoKqjoRktJV+VnRwcoDbUN7ZjswTOXtDRwrPCuqyuVUZo1lHCncEuuuoWyvJehoalDWPwFlpF73TBJeldkhYMyisG56sH5m8WFW+9dCGgB1WienH8quLMq4e2XskYFNs3Nak9J1pZREnryDtF2m0eY9ZZLxDbMqeiN2ePn5Kh+IMw7fohGzR3Z0QuifpYFxqslcwxcZdydpFzm6DnVugl6aprLmttpGVrKnNKntvFUt3Bfh3Khqf2rkr7DhsszFC29ZD3HnjX7Yc+uuBc5q7jmtvjJBbHyEefchw93HLLQdU4s/IHT23ZmvsmgPnJOPOS8amUCIP2rj76plaKti4KJqaSznZq1vZG9h5WfluNrf1ULFwkrZw0rRyVXGwVAu2Mox2stzlbLnTySLcyshLVy3AUCPaxni7jckeO1M3ZakNmor+uiob9FS8NOXd1RXcNRSdNZRgsW1UFGxVlezVVVx0tJ31DRyMTYz1lDUNVmsaizsFeQQnXdt2pTMys8v/eMaGI2cCDu102Wzgu9XQO0zRK1Te3k/CLVgyYLuWf5SOq7+iu7+Wrau6qbWylaO2nqmMiY3snbsvfg75Vfk7rMCuJJWMHy+hHbs+frhoPKGEllTBOFnGPFXBPF1FT6mi5TSBEk5OCyujduzk1WZrCzdTPTOKibWb2wY7KydDbQM1eWX5tZKWinIRxuq7rfRSg1zbz+0ZyjwwcDF2/FrCSE5C89k9V3cF7nO1CqDou+nruBoY5lf3No9NtIxPNo0KG4aF1QPTZT1TFX03ygemMmobthzdEbJ/z66E49lVTSmZJ+Pi3bbFO+1IPBp1Oi8q4fzGHbGRJ89EHz8YFGMVn77j4OnIkChLbW1JE1P542dPHssuTC5sOlM1HBQX5+CjYe1r7bbZz97fLiD2UPiJdDu/IHktGU1DJVXd1bpGUpra69R1VhtQxCL3Ku88JLX/hHz0IdmInXoh2+WDt0vHHF27M3HVruNaofskdiasO5MrseOEetRRvcBozfWhKv5b9PzC1UKi9J09VW1dZW0cZW1ctE1slIwspZw9dD299Tx9Nd02qFo6STjYym9ztd/jar3DyTzG0TzanhJlaxppbRxhrhdioO6tLhegoxygp+oPDwbE6KptNNDwN9bxM9LxNdL1NtDx0tfxMTL0pVB8KObuFDMLc1XvEG2XQHWPYCvvLc6uu+O3ZnUHndzvt8N1Q6SGS6CWraeUnbeCm7+aubOsjYeitbuKhYustauSsZWMlbOSmbWqs6eGpYPcu8TMsCvxBcOx+SMHC0YPFYzHF1GPFFOPldCOFtOOXKcmFI+n1DDP1zCTK2mnK8YDo44pSStrqWgb6ps62LshMtRU0VCUkpcWX+OgoXJkveNxP4eDnjbngxx6zm3vSdnecSryWoxvnKtRtAV2aHWsnkATvTAHu/zS1uaxSWj98ERV/2R572RJt7C0Z6KsT5jfyU6r7MxtGs2q6c9vHjuRciTukEfkHvuow4EX8utOpOaGxh06mHn6fP6Oi7kbLpUdSr6aFJcY6uZpbGmtvOfo7qTC5lP56adLW45da44+ErXzwrW9lyoPZtccK+gIP1tsGxytYqJn7unhFh5NcTKRU/pEVXuNiZ1E6C7t7Yd0Q7epO7ormNpKWzhK2nnKh+3WC96usXW/4Y4EzfA4uX2n1cMPaHhHath6yjv5KYNUaxd5e3c5S2dpir2Es7eS1yat0O0URw8VOycFO0dlJ3dVe3dZM4fVth5rg90M97pZ73a2hO51sd7tZLnNxiTCTC/IUAOUBOqrbTJQR3qToeYmY60gE51gin4QRX+TmWG4nUXK9rBrh3dd3B2duX/bpd2RJ8P9Dkc5+vppufioG1or2G9Pir7SE37mrPPWsA374tfviXFer23nqebsq2pqK2PjBmdFztBSRsdU2sRWVd9C2dZdx5Cioq4lc/ttcVAV8d33p/8fuGj6GEoVp0IAAAAASUVORK5CYII\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 105,
            "name": "I click the Back icon in Stay Active screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickstarutton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 252417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1782917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 107,
        "name": "Leave the community if already joined",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;leave-the-community-if-already-joined",
        "after": [
          {
            "result": {
              "duration": 411000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1222833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26212844417,
              "status": "passed"
            },
            "line": 108,
            "name": "I clicks on \"${my.communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6217257000,
              "status": "passed"
            },
            "line": 109,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1925204792,
              "status": "passed"
            },
            "line": 110,
            "name": "I click on joined community three dots menu icon",
            "match": {
              "location": "MyCommunitiesSteps.clickOnJoinedCommMenu()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7998114417,
              "status": "passed"
            },
            "line": 111,
            "name": "I click on leave button for joined community",
            "match": {
              "location": "MyCommunitiesSteps.leaveJoinedCommunity()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify My Communities on One Pluse App",
    "description": "",
    "id": "verify-my-communities-on-one-pluse-app",
    "keyword": "Feature",
    "uri": "features/home/mycommunities/PulseMyCommunities.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_communties"
      },
      {
        "line": 1,
        "name": "@pulse_sg"
      },
      {
        "line": 1,
        "name": "@pulse_regression"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 98834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 62958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 94083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7786365291,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 46406969875,
              "status": "passed"
            },
            "comments": [
              {
                "line": 6,
                "value": "# And Logout of pulse app if user is logged in"
              }
            ],
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18990688833,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3020835042,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1839363208,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 31667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 909250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1029125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4251250,
              "status": "passed"
            },
            "line": 13,
            "name": "I assign \"${mychannel.private.user}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${mychannel.private.user}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 50
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5083987208,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 60561724375,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1235185500,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10007492375,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10785994208,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16017320709,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 71917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Verify the My communities screen",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;verify-the-my-communities-screen",
        "after": [
          {
            "result": {
              "duration": 45167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 68875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1089509667,
              "status": "passed"
            },
            "line": 24,
            "name": "I click the MyCommunities icon",
            "match": {
              "location": "MyCommunitiesSteps.clickMyCommunities()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3006729250,
              "status": "passed"
            },
            "comments": [
              {
                "line": 25,
                "value": "#   Given User has pulse app"
              },
              {
                "line": 26,
                "value": "#   And I clicks on \"${my.communities.text}\" in app screen"
              },
              {
                "line": 27,
                "value": "#    And User should be verify \"${my.communities.text}\" tab in Home screen"
              }
            ],
            "line": 28,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1495850750,
              "status": "passed"
            },
            "line": 29,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${icon.communities}"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10166609834,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify the following texts \"All Communities\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "All Communities",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.communities.text}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${All.Communities.text}"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3005316208,
              "status": "passed"
            },
            "line": 34,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 35,
            "value": "#    And I verify the following texts \"Communities\" in Screen"
          },
          {
            "line": 36,
            "value": "#      | ${my.communities.text}  |"
          },
          {
            "line": 37,
            "value": "#      | ${All.Communities.text} |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 46625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1229583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "Verify the Private Communities in communities screen",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;verify-the-private-communities-in-communities-screen",
        "after": [
          {
            "result": {
              "duration": 150542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 523375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1139459583,
              "status": "passed"
            },
            "line": 40,
            "name": "I click the Private \"${All.Communities.text}\" in Communties screen",
            "match": {
              "arguments": [
                {
                  "val": "${All.Communities.text}",
                  "offset": 21
                }
              ],
              "location": "MyCommunitiesSteps.Click_PrivateCommunties(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5101447417,
              "status": "passed"
            },
            "line": 41,
            "name": "I Enter the \"e.g. Be Healthy content, Challenges etc.\" in \"Test\" in home screen",
            "match": {
              "arguments": [
                {
                  "val": "e.g. Be Healthy content, Challenges etc.",
                  "offset": 13
                },
                {
                  "val": "Test",
                  "offset": 59
                }
              ],
              "location": "CustomerConnectSteps.i_Enter_the_in_in_home_screen(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3054954125,
              "status": "passed"
            },
            "line": 42,
            "name": "I Enter the \"e.g. Healthy content, forum for celebrities etc.\" in \"2020\" in home new screen",
            "match": {
              "arguments": [
                {
                  "val": "e.g. Healthy content, forum for celebrities etc.",
                  "offset": 13
                },
                {
                  "val": "2020",
                  "offset": 67
                }
              ],
              "location": "CustomerConnectSteps.EnterTextDescription(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9231729250,
              "status": "passed"
            },
            "line": 43,
            "name": "I clicks on \"Take a Picture\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "Take a Picture",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 899072708,
              "status": "passed"
            },
            "line": 44,
            "name": "I click the Upload Image icon",
            "match": {
              "location": "MyCommunitiesSteps.clickUploadIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8767728791,
              "status": "passed"
            },
            "line": 45,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4254866792,
              "status": "passed"
            },
            "line": 46,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3005470333,
              "status": "passed"
            },
            "line": 47,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6942391000,
              "status": "passed"
            },
            "line": 48,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1496784875,
              "status": "passed"
            },
            "line": 49,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4861387125,
              "status": "passed"
            },
            "line": 50,
            "name": "I click skip button in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.clickSkipbutton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25746005417,
              "status": "passed"
            },
            "line": 51,
            "name": "I clicks on \"OK\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "OK",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Private My Communities on One Pulse App",
    "description": "",
    "id": "verify-private-my-communities-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/mycommunities/PulseMyCommunities_private.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_communties_private"
      },
      {
        "line": 1,
        "name": "@pulse_sg"
      },
      {
        "line": 1,
        "name": "@pulse_regression"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 4387042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 95833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 68792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 101333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7948776583,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2271208,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${pulse.legal.privacy.login.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${pulse.legal.privacy.login.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 56
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 45788393292,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19836988500,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5009350459,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1696663333,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 654375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 426334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1129333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3974095917,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 63799067375,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1208507875,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5019186917,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14224451959,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32043840042,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 306750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Navigate to account screen",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;navigate-to-account-screen",
        "after": [
          {
            "result": {
              "duration": 15542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 30250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 29877284583,
              "status": "passed"
            },
            "line": 24,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 410208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 26,
        "name": "Verify the Legacy and Privacy should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-legacy-and-privacy-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 174208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 29916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6443393167,
              "status": "passed"
            },
            "line": 27,
            "name": "I click the Legacy and Privacy in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickLegalandLegacy()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13700158792,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Terms.conditions.text}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${icon.privacyNotice}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${icon.regulatory}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${app.version.text}"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 407125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 62583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 34,
        "name": "Verify the Terms and condition screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-terms-and-condition-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 14334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 25875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1484741416,
              "status": "passed"
            },
            "line": 35,
            "name": "I click on \"${Terms.conditions.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${Terms.conditions.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2485708125,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the pulse icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickpulseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6675799791,
              "status": "passed"
            },
            "line": 37,
            "name": "I click the Back icon in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1378498875,
              "status": "passed"
            },
            "line": 38,
            "name": "I click the Back icon in Terms and conditions screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInTermsConditionScreen()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 33084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 40,
        "name": "Verify the Privacy screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-privacy-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 34583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 39292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2853123750,
              "status": "passed"
            },
            "line": 41,
            "name": "I click the Privacy icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickprivacyIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2027385792,
              "status": "passed"
            },
            "line": 42,
            "name": "I click the pulse icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickpulseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6968695083,
              "status": "passed"
            },
            "line": 43,
            "name": "I click the Back icon in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2809068334,
              "status": "passed"
            },
            "line": 44,
            "name": "I click the Back icon in Privacy Notice",
            "match": {
              "location": "CustomerConnectSteps.clickBackbuttonPrivacy()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 45,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 54333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 46,
        "name": "Verify the Regulator screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-regulator-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 106458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 37750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2006651917,
              "status": "passed"
            },
            "line": 47,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1491117667,
              "status": "passed"
            },
            "line": 48,
            "name": "I click the Regulatory icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickRegulatory()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1650865000,
              "status": "passed"
            },
            "line": 49,
            "name": "I click the Babylons  icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickBabylon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10131272625,
              "status": "passed"
            },
            "line": 50,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${clinicalSafety.text}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${ai.healthcare.text}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${localisation.text}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${privacy.date.protection.text}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${concern.reporting.text}"
                ],
                "line": 55
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify legal and legacy on One pulse App",
    "description": "",
    "id": "verify-legal-and-legacy-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/MyAccount/LegalAndPrivacy.feature",
    "tags": [
      {
        "line": 1,
        "name": "@Legalandprivacy_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 19375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 10,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 765667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 883208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7315447125,
              "status": "passed"
            },
            "line": 11,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1778208,
              "status": "passed"
            },
            "line": 12,
            "name": "I assign \"${onepulse.login.edit.profile}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.edit.profile}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 55
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51675909833,
              "status": "passed"
            },
            "line": 13,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21262316542,
              "status": "passed"
            },
            "line": 14,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5020133917,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2202184833,
              "status": "passed"
            },
            "line": 16,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 235375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 18,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 790084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 10030750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4025110375,
              "status": "passed"
            },
            "line": 19,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 63085387875,
              "status": "passed"
            },
            "line": 20,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 21
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1781461500,
              "status": "passed"
            },
            "line": 23,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5010271125,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13788570917,
              "status": "passed"
            },
            "line": 25,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17874307333,
              "status": "passed"
            },
            "line": 26,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 222958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 66291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 28,
        "name": "Navigate to account screen and verify all the options",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-to-account-screen-and-verify-all-the-options",
        "after": [
          {
            "result": {
              "duration": 422125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 774334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16500466291,
              "status": "passed"
            },
            "line": 29,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2005758000,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21381670959,
              "status": "passed"
            },
            "line": 31,
            "name": "user should verify following options on account screen",
            "match": {
              "location": "ManageProfileSteps.userShouldVerifyOptionsOnAccountScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.wearable.text}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${my.rewards.text}"
                ],
                "line": 33
              },
              {
                "cells": [
                  "${my.notification.text}"
                ],
                "line": 34
              },
              {
                "cells": [
                  "${icon.mySettings}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${my.feedback.text}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${icon.legal\u0026Privacy}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${pulsePersonalised.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${sign.out.button.text}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${logs.text}"
                ],
                "line": 40
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 373125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 42,
        "name": "Verify wearable screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-wearable-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 218833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 43125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2335221375,
              "status": "passed"
            },
            "line": 43,
            "name": "I click on \"${my.wearable.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.wearable.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2008661958,
              "status": "passed"
            },
            "line": 44,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8327475292,
              "status": "passed"
            },
            "line": 45,
            "name": "I verify following text are displayed under My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyWearablesScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${wearables.title}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${wearables.subTitle}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${wearables.description}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${wearables.fitbitText}"
                ],
                "line": 49
              },
              {
                "cells": [
                  "${wearables.garminText}"
                ],
                "line": 50
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1398455250,
              "status": "passed"
            },
            "line": 51,
            "name": "I verify following wearables are displayed as per the device",
            "match": {
              "location": "ManageProfileSteps.verifyWearables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${apple.health.text}##${wearables.googleFit}"
                ],
                "line": 52
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 43166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 54,
        "name": "navigate back to account screen from my wearable screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-my-wearable-screen",
        "after": [
          {
            "result": {
              "duration": 33333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 44875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1698831834,
              "status": "passed"
            },
            "line": 55,
            "name": "user navigate back to the Home screen from My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.backNavigationMyWearablesHome()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005018375,
              "status": "passed"
            },
            "line": 56,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 39875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 58,
        "name": "Navigate to account screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-to-account-screen",
        "after": [
          {
            "result": {
              "duration": 88583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 117583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16728602459,
              "status": "passed"
            },
            "line": 59,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2008701167,
              "status": "passed"
            },
            "line": 60,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 53208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 62,
        "name": "Verify reward screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-reward-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 28000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 51000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1402268167,
              "status": "passed"
            },
            "line": 63,
            "name": "I click on \"${my.rewards.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.rewards.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005559500,
              "status": "passed"
            },
            "line": 64,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13934575250,
              "status": "passed"
            },
            "line": 65,
            "name": "User verify following texts are displayed in My Rewards screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnRewardsScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myRewards.title}"
                ],
                "line": 66
              },
              {
                "cells": [
                  "${myRewards.badges}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "${myRewards.vouchers}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${myRewards.discover}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${my.rewards.text}"
                ],
                "line": 70
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 55167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 72,
        "name": "User access My Rewards FAQ",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;user-access-my-rewards-faq",
        "after": [
          {
            "result": {
              "duration": 17125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 42875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6969221375,
              "status": "passed"
            },
            "line": 73,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2008835292,
              "status": "passed"
            },
            "line": 74,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2214590166,
              "status": "passed"
            },
            "line": 75,
            "name": "User verify following texts are displayed in My Rewards screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnRewardsScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.title}"
                ],
                "line": 76
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 43250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;2",
        "after": [
          {
            "result": {
              "duration": 46584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 22291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1510312916,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.1}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.1}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1962735584,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.1}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2700313500,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.1.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.1.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2315787333,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.1}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 56083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 71333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 88,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;3",
        "after": [
          {
            "result": {
              "duration": 91292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 100375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2424520167,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.2}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.2}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4238534666,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.2}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1731966250,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.2.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.2.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2831218000,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.2}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 442875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 89,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;4",
        "after": [
          {
            "result": {
              "duration": 17750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 385250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2922211958,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.3}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.3}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2476279750,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.3}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2686919709,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.3.ans.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3.ans.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.3.ans.1}##${myRewards.faq.3.ans.2}##${myRewards.faq.3.ans.3}##${myRewards.faq.3.ans.4}##${myRewards.faq.3.ans.5}##${myRewards.faq.3.ans.6}##${myRewards.faq.3.ans.7}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3133565417,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.3}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 90,
            "value": "#      | ${myRewards.faq.4.2}##${myRewards.faq.4.3} | ${myRewards.faq.4.ans}                                                                                                                                                               | ${myRewards.faq.4.subtext} | ${myRewards.faq.4.ans}         |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 403625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 91,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;5",
        "after": [
          {
            "result": {
              "duration": 35000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 29959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2357707208,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.5}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.5}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2950048917,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.5}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2942613625,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.5.ans.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5.ans.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.5.ans.1}##${myRewards.faq.5.ans.2}##${myRewards.faq.5.ans.3}##${myRewards.faq.5.ans.4}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2454413500,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.5}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 445250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 62875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 92,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;6",
        "after": [
          {
            "result": {
              "duration": 24875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 91875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2617659292,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.6}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.6}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3039575709,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.6}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2549619667,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.6.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.6.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4197312209,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.6}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 29333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 93,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;7",
        "after": [
          {
            "result": {
              "duration": 17166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 33417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2464186333,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.7}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.7}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2240490167,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.7}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2952865458,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.7.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.7.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3082196458,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.7}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 31500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 94,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;8",
        "after": [
          {
            "result": {
              "duration": 81125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 928917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2573591209,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.8}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.8}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2954335417,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.8}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2824246083,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.8.ans.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8.ans.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.8.ans.1}##${myRewards.faq.8.ans.2}##${myRewards.faq.8.ans.3}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2784353125,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.8}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 72834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1616209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 95,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;9",
        "after": [
          {
            "result": {
              "duration": 22875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 30500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2705188167,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.9}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.9}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3077851541,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.9}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2750487000,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.9.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.9.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3108956750,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.9}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 788917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 57084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 97,
        "name": "navigate back to account screen from my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-my-rewards-screen",
        "after": [
          {
            "result": {
              "duration": 55958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 10130500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 45359428500,
              "status": "passed"
            },
            "line": 98,
            "name": "I click on back button on my reward screen to navigate to account screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInRewardScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2009569875,
              "status": "passed"
            },
            "line": 99,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1099583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 101,
        "name": "Verify Notification screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-notification-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 23000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 381125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1298708875,
              "status": "passed"
            },
            "line": 102,
            "name": "I click on \"${my.notification.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.notification.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2688330583,
              "status": "passed"
            },
            "line": 103,
            "name": "User verify following texts are displayed in My Notification screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnNotificationScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${notification.msg}"
                ],
                "line": 104
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 795208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 58625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 106,
        "name": "navigate back to account screen from Notification screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-notification-screen",
        "after": [
          {
            "result": {
              "duration": 27000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 47250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1491350375,
              "status": "passed"
            },
            "line": 107,
            "name": "I click on back button on notification screen to navigate to account screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInNotificationScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005672000,
              "status": "passed"
            },
            "line": 108,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 33875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 110,
        "name": "Verify my feedback screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-my-feedback-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 1236083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 71500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3061138625,
              "status": "passed"
            },
            "line": 111,
            "name": "I click on \"${my.feedback.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.feedback.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4957053834,
              "status": "passed"
            },
            "line": 112,
            "name": "User verify following texts are displayed in My feedback screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyFeedbackScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${feedback.static.text}"
                ],
                "line": 113
              },
              {
                "cells": [
                  "${feedback.improvement}"
                ],
                "line": 114
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10021769000,
              "status": "passed"
            },
            "line": 115,
            "name": "User verify following feedback options are displayed in My feedback screen",
            "match": {
              "location": "ManageProfileSteps.verifyFeedbackOptionOnMyFeedbackScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${aime.text}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "${health.article.text}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "${bmi.text.uppercase}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "${wrinkle.text}"
                ],
                "line": 119
              },
              {
                "cells": [
                  "${health.assessment.text}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "${babylon.symptom.checker}"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1682384750,
              "status": "passed"
            },
            "line": 122,
            "name": "I verify following edit box sample text is displayed in account screen",
            "match": {
              "location": "ManageProfileSteps.verifySampleText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${share.thought.text}"
                ],
                "line": 123
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 71708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 126,
        "name": "Verify the submit functionality in My feedback screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-submit-functionality-in-my-feedback-screen",
        "after": [
          {
            "result": {
              "duration": 31958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 43000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2211644334,
              "status": "passed"
            },
            "line": 127,
            "name": "I select \"5\" star in feedback screen",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 10
                }
              ],
              "location": "ManageProfileSteps.selectStarInFeedbackForm(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2723209667,
              "status": "passed"
            },
            "line": 128,
            "name": "I enter feedback",
            "match": {
              "location": "ManageProfileSteps.enterFeedback(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Feedback",
                  "Test_12345"
                ],
                "line": 129
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13939807000,
              "status": "passed"
            },
            "line": 130,
            "name": "I click the Submit icon in Feedback Screen",
            "match": {
              "location": "CustomerConnectSteps.clickSubmitFeedbackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2008299875,
              "status": "passed"
            },
            "line": 131,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 28542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 133,
        "name": "Verify the Pulse Personalised tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-pulse-personalised-tab",
        "after": [
          {
            "result": {
              "duration": 1916667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 51250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1378490333,
              "status": "passed"
            },
            "line": 134,
            "name": "I click on \"${pulsePersonalised.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${pulsePersonalised.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2010677250,
              "status": "passed"
            },
            "line": 135,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1667695458,
              "status": "passed"
            },
            "line": 136,
            "name": "User verify following texts are displayed in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnPulsePersonalisedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${pulsePersonalised.text}"
                ],
                "line": 137
              },
              {
                "cells": [
                  "${data.privacy.text}"
                ],
                "line": 138
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7670183250,
              "status": "passed"
            },
            "line": 139,
            "name": "I verify data and privacy consent in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyDataAndPrivacyConsent(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${pulse.personalised.consent.text1}"
                ],
                "line": 140
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text2}"
                ],
                "line": 141
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text3}"
                ],
                "line": 142
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text4}"
                ],
                "line": 143
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text5}"
                ],
                "line": 144
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text6}"
                ],
                "line": 145
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text7}"
                ],
                "line": 146
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 18411417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 202333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 148,
        "name": "Save the consent with data privacy check",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;save-the-consent-with-data-privacy-check",
        "after": [
          {
            "result": {
              "duration": 62500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 90208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1211661084,
              "status": "passed"
            },
            "line": 149,
            "name": "I select the data privacy checkbox",
            "match": {
              "location": "ManageProfileSteps.dataPrivacyCheckbox()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1241917125,
              "status": "passed"
            },
            "line": 150,
            "name": "I click the save button in pulse personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickSavebuttonpersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4798524209,
              "status": "passed"
            },
            "line": 151,
            "name": "User verify following texts are displayed in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnPulsePersonalisedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${consent.success.msg.text}"
                ],
                "line": 152
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1321068292,
              "status": "passed"
            },
            "line": 153,
            "name": "I click the Ok button in pulse personlised screen",
            "match": {
              "location": "CustomerConnectSteps.clickpersonalisedscreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006816833,
              "status": "passed"
            },
            "line": 154,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 94209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 156,
        "name": "Save the consent without data privacy check",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;save-the-consent-without-data-privacy-check",
        "after": [
          {
            "result": {
              "duration": 17375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 20458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 831502750,
              "status": "passed"
            },
            "line": 157,
            "name": "I select the data privacy checkbox",
            "match": {
              "location": "ManageProfileSteps.dataPrivacyCheckbox()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1085810417,
              "status": "passed"
            },
            "line": 158,
            "name": "I click the save button in pulse personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickSavebuttonpersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2862448709,
              "status": "passed"
            },
            "line": 159,
            "name": "User verify following texts are displayed in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnPulsePersonalisedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${consent.success.msg.text}"
                ],
                "line": 160
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1914526208,
              "status": "passed"
            },
            "line": 161,
            "name": "I click the Ok button in pulse personlised screen",
            "match": {
              "location": "CustomerConnectSteps.clickpersonalisedscreen()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 152667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 46875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 164,
        "name": "navigate back to account screen from pulse personalised screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-pulse-personalised-screen",
        "after": [
          {
            "result": {
              "duration": 31375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 44459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8950831000,
              "status": "passed"
            },
            "line": 165,
            "name": "I click the Back icon in pulse personalised screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackpersonalisedScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005218542,
              "status": "passed"
            },
            "line": 166,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify My accounts options in Account screen",
    "description": "1)My wearable\n2)My Rewards\n3)My Notifications\n4)My Feedback\n5)Pulse Personalised",
    "id": "verify-my-accounts-options-in-account-screen",
    "keyword": "Feature",
    "uri": "features/my/MyAccount/PulseMyAccount.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MyAccount_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 28542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1374708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1407250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10289252542,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3903042,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${onepulse.login.edit.profile}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.edit.profile}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 55
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 55391653125,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22136513667,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5011045958,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1759343708,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 81625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 448125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 488458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4472200792,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 49551594083,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1418096792,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5002858875,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14520390958,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19891149583,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 376583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Navigate to account screen",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;navigate-to-account-screen",
        "after": [
          {
            "result": {
              "duration": 22292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 21792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16585348625,
              "status": "passed"
            },
            "line": 24,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 26,
        "name": "Verify my setting screen in Account tab",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-my-setting-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 641542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 44875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2005258459,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2472619000,
              "status": "passed"
            },
            "line": 28,
            "name": "I click on \"${icon.mySettings}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${icon.mySettings}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005662542,
              "status": "passed"
            },
            "line": 29,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 30,
            "value": "##below steps are not working in Android"
          },
          {
            "line": 31,
            "value": "#    Then User verify following texts are displayed in My Setting screen"
          },
          {
            "line": 32,
            "value": "#      | ${country.text}          |"
          },
          {
            "line": 33,
            "value": "#      | ${country.name}          |"
          },
          {
            "line": 34,
            "value": "#      | ${language.text}         |"
          },
          {
            "line": 35,
            "value": "#      | ${lang.name.text}        |"
          },
          {
            "line": 36,
            "value": "#      | ${change.password.text}  |"
          },
          {
            "line": 37,
            "value": "##      | ${enable.face.auth.text} | 7 |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 21792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 832542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "navigate back to account screen from my setting screen",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;navigate-back-to-account-screen-from-my-setting-screen",
        "after": [
          {
            "result": {
              "duration": 35042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 30417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 978317708,
              "status": "passed"
            },
            "line": 40,
            "name": "I click on back button on my settings screen to navigate to account screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInMySettingScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005568250,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify MySettings functionality in Account screen",
    "description": "",
    "id": "verify-mysettings-functionality-in-account-screen",
    "keyword": "Feature",
    "uri": "features/my/MyAccount/PulseMySetting.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MySettings_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "comments": [
          {
            "line": 4,
            "value": "# fitness tab is not available in ios device"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 65958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 47458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 898292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1517250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9355438333,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 39984041,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 55278258917,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23092324958,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5010897167,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2977766417,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 497792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 982750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1192083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3907983084,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 50377426459,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3531271834,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5017200209,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13731543958,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18814775000,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 726125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 93708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Verify the user can access My Wearables via Fitness",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;verify-the-user-can-access-my-wearables-via-fitness",
        "after": [
          {
            "result": {
              "duration": 24917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 3742557041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7439947291,
              "status": "passed"
            },
            "line": 24,
            "name": "User clicks on Fitness tab",
            "match": {
              "location": "OptionsInFooterSteps.clickOnFitnessTab()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 20911588334,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: My Wearables expected [true] but found [false],\n\tthe expected text is: Track all your activities at the click of a button expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.OptionsInFooterSteps.verifyStaticTextOnFitnessScreen(OptionsInFooterSteps.java:40)\n\tat ✽.Then I verify My Wearables tile on Fitness screen(features/my/fitness/MyWearable.feature:25)\n",
              "status": "failed"
            },
            "line": 25,
            "name": "I verify My Wearables tile on Fitness screen",
            "match": {
              "location": "OptionsInFooterSteps.verifyStaticTextOnFitnessScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${fitness.myWearables}"
                ],
                "line": 26
              },
              {
                "cells": [
                  "${fitness.myWearables.description}"
                ],
                "line": 27
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 28,
            "name": "I click on Connect Now button on Fitness screen",
            "match": {
              "location": "OptionsInFooterSteps.clickOnConnectNow()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 29,
            "name": "I verify following text are displayed under My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyWearablesScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${wearables.title}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${wearables.subTitle}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${wearables.description}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${wearables.fitbitText}"
                ],
                "line": 33
              },
              {
                "cells": [
                  "${wearables.garminText}"
                ],
                "line": 34
              },
              {
                "cells": [
                  "${wearables.googleFit}"
                ],
                "line": 35
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify My wearable functionality via fitness tab on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/my/fitness/MyWearable.feature",
    "tags": [
      {
        "line": 1,
        "name": "@myWearables_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 4,
            "value": "#  User who has completed the Nutrition Assessment"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 5977084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1772000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1299875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2893250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9917389500,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18393167,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${hra.report.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${hra.report.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 47
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 59052735750,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25437142042,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5089472333,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1645653750,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 443083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 73625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 3347708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1729208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5985250083,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 52040415958,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${hra.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2375082750,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5009319541,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14349291042,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20444826500,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 36215650042,
              "status": "passed"
            },
            "line": 22,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 78206541583,
              "status": "passed"
            },
            "line": 23,
            "name": "I navigate to Babylon health Assessment and Accept TermsAndCondition",
            "match": {
              "location": "BabylonSteps.navigateToBabylonHealthAssessmentAndAcceptTermsAndCondition()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 399709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 467375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 25,
        "name": "User should be able to access Babylon Health Risk Assessment Report",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-health-risk-assessment-report",
        "after": [
          {
            "result": {
              "duration": 569500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 522708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9859018833,
              "status": "passed"
            },
            "line": 26,
            "name": "I click on \"Report\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Report",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5007710625,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 97413221042,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.report.title}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${babylon.hraReport.report.subTitle}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${babylon.hraReport.report.percentage}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${babylon.hraReport.report.statement1}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${babylon.hraReport.report.statement2}"
                ],
                "line": 33
              },
              {
                "cells": [
                  "${babylon.hraReport.report.statement3}"
                ],
                "line": 34
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 459209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 140833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 36,
        "name": "Verify the HRA Activity Report",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-activity-report",
        "after": [
          {
            "result": {
              "duration": 2149625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 415583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 190088582209,
              "status": "passed"
            },
            "line": 37,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.summary.title}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.description}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRiskDescription}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk.statement1}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk.statement2}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk.statement3}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk.statement4}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.organ.title}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.organDescription}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.organ.statement1}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.organ.statement2}"
                ],
                "line": 49
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 69417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 919875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 51,
        "name": "Verify the HRA Activity Report",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-activity-report",
        "after": [
          {
            "result": {
              "duration": 1742416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 551042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 70071625583,
              "status": "passed"
            },
            "line": 52,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.activity.title}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.subTitle}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.statement1}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.statement2}"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 519458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 141500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 58,
        "name": "Verify the HRA Nutrition Report",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-nutrition-report",
        "after": [
          {
            "result": {
              "duration": 2200041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 4319791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 161690170583,
              "status": "passed"
            },
            "line": 59,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.nutrition.title}"
                ],
                "line": 60
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.subTitle}"
                ],
                "line": 61
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement1}"
                ],
                "line": 62
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement2}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement3}"
                ],
                "line": 64
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement4}"
                ],
                "line": 65
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement5}"
                ],
                "line": 66
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement6}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement7}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement8}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement9}"
                ],
                "line": 70
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 69417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 3086833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 73,
        "name": "Verify the HRA Report - Keep It Up sub-section",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-report---keep-it-up-sub-section",
        "after": [
          {
            "result": {
              "duration": 1200500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 481250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 121138937375,
              "status": "passed"
            },
            "line": 74,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.keepItUp}"
                ],
                "line": 75
              },
              {
                "cells": [
                  "${babylon.hraReport.lowFat}"
                ],
                "line": 76
              },
              {
                "cells": [
                  "${babylon.hraReport.lowFat.description}"
                ],
                "line": 77
              },
              {
                "cells": [
                  "${babylon.hraReport.lowAlcohol}"
                ],
                "line": 78
              },
              {
                "cells": [
                  "${babylon.hraReport.lowAlcohol.description}"
                ],
                "line": 79
              },
              {
                "comments": [
                  {
                    "line": 80,
                    "value": "#      | ${babylon.hraReport.lowCaffeine}             |"
                  },
                  {
                    "line": 81,
                    "value": "#      | ${babylon.hraReport.lowCaffeine.description} |"
                  }
                ],
                "cells": [
                  "${babylon.hraReport.redMeat}"
                ],
                "line": 82
              },
              {
                "cells": [
                  "${babylon.hraReport.redMeat.description}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 7485333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 169125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 85,
        "name": "Verify the HRA Report - Make a Change sub-section",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-report---make-a-change-sub-section",
        "after": [
          {
            "result": {
              "duration": 20213834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 9563708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 108298583500,
              "status": "passed"
            },
            "line": 86,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.makeAChange}"
                ],
                "line": 87
              },
              {
                "cells": [
                  "${babylon.hraReport.change1}"
                ],
                "line": 88
              },
              {
                "cells": [
                  "${babylon.hraReport.change2}"
                ],
                "line": 89
              },
              {
                "cells": [
                  "${babylon.hraReport.change3}"
                ],
                "line": 90
              },
              {
                "cells": [
                  "${babylon.hraReport.change4}"
                ],
                "line": 91
              },
              {
                "cells": [
                  "${babylon.hraReport.change5}"
                ],
                "line": 92
              },
              {
                "cells": [
                  "${babylon.hraReport.change6}"
                ],
                "line": 93
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 534250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2657875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 95,
        "name": "User should be able to access Babylon HRA - Healthcheck - Body",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-hra---healthcheck---body",
        "after": [
          {
            "result": {
              "duration": 174875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1791469208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 20633630875,
              "status": "passed"
            },
            "line": 96,
            "name": "I click on \"Healthcheck\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Healthcheck",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7061001125,
              "status": "passed"
            },
            "line": 97,
            "name": "I click on \"Body\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Body",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11448172042,
              "status": "passed"
            },
            "line": 98,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.bodyButtton}"
                ],
                "line": 99
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 44919639291,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Brain expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.verifyHRAStaticText(BabylonSteps.java:689)\n\tat ✽.Then I verify following text is displayed on HRA report(features/my/health/BabylonHRA_Report.feature:100)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 100,
            "name": "I verify following text is displayed on HRA report",
            "match": {
              "location": "BabylonSteps.verifyHRAStaticText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.body.bones}"
                ],
                "line": 101
              },
              {
                "cells": [
                  "${babylon.hraReport.body.heart}"
                ],
                "line": 102
              },
              {
                "cells": [
                  "${babylon.hraReport.body.brain}"
                ],
                "line": 103
              },
              {
                "cells": [
                  "${babylon.hraReport.body.liver}"
                ],
                "line": 104
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 332458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1074583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 106,
        "name": "navigate back to digital twin screen",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-digital-twin-screen",
        "after": [
          {
            "result": {
              "duration": 1025042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 9199667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6039333708,
              "status": "passed"
            },
            "line": 107,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 43709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 127167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 109,
        "name": "User should be able to access Babylon HRA - Healthcheck - Nutrition",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-hra---healthcheck---nutrition",
        "after": [
          {
            "result": {
              "duration": 624708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 968206500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9190030333,
              "status": "passed"
            },
            "line": 110,
            "name": "I click on \"Nutrition\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Nutrition",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 22251213833,
              "status": "passed"
            },
            "line": 111,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.nutrition}"
                ],
                "line": 112
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.description}"
                ],
                "line": 113
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 40678124792,
              "status": "passed"
            },
            "line": 114,
            "name": "I click on \"Retake Assessment\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Retake Assessment",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10732993834,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Nutrition is key to your energy levels and can affect your risk of some medical conditions expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.verifyHRAResult(BabylonSteps.java:616)\n\tat ✽.Then I verify the HRA Results are displayed(features/my/health/BabylonHRA_Report.feature:115)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 115,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.nutrition.retake}"
                ],
                "line": 116
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1195167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1589667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 118,
        "name": "Navigate back to nutrition screen and validate the static text",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-nutrition-screen-and-validate-the-static-text",
        "after": [
          {
            "result": {
              "duration": 2341166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 4021667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3837386292,
              "status": "passed"
            },
            "line": 119,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14252241916,
              "status": "passed"
            },
            "line": 120,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.aboutDisease}"
                ],
                "line": 121
              },
              {
                "cells": [
                  "${babylon.hraReport.about.nutrition.description}"
                ],
                "line": 122
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 768125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1009375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 124,
        "name": "navigate back to digital twin screen",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-digital-twin-screen",
        "after": [
          {
            "result": {
              "duration": 46000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 45458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9762642791,
              "status": "passed"
            },
            "line": 125,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 28708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 40958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 128,
        "name": "User should be able to access Babylon HRA - Healthcheck - Activity",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-hra---healthcheck---activity",
        "after": [
          {
            "result": {
              "duration": 208167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1057865750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9420634958,
              "status": "passed"
            },
            "line": 129,
            "name": "I click on \"Activity\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Activity",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17002027125,
              "status": "passed"
            },
            "line": 130,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.activity}"
                ],
                "line": 131
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.subTitle}"
                ],
                "line": 132
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12803843334,
              "status": "passed"
            },
            "line": 133,
            "name": "I click on \"Retake Assessment\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Retake Assessment",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21511625792,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Exercise-wise, I can expected [true] but found [false],\n\tthe expected text is: How much time each week do you do moderate exercise like walking, casual cycling or cleaning? expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.verifyHRAResult(BabylonSteps.java:616)\n\tat ✽.Then I verify the HRA Results are displayed(features/my/health/BabylonHRA_Report.feature:134)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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eekhd/dZbnpsybH9vb5gu2krGDj+wYlj911uz7e6Nz73dn/Nf+2W23N06ur+Et+zRu7+2gUTIl2dV170qyt5/l+oewNXj0/PfX8orfxzabjUUufodcaqoxWoaAUqWoFqUPcXwMBPG+S9ALgJWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpager+a6W2tnbJkiUhmrkD0oIFC86fP+/9xAa8+6+VdevWDbr/zZs3z/uJDXj3Xyv19fWrV69efj9bsXKlxWLxfmID3v3XCu4VWoGKVqD6P1Q4Pn0w7hhXAAAAAElFTkSuQmCC",
                "mime_type": "image/png"
              }
            ],
            "line": 134,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.activity.retake}"
                ],
                "line": 135
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.retake2}"
                ],
                "line": 136
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 260417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 779333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 138,
        "name": "Navigate back to Activity screen and validate the static text",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-activity-screen-and-validate-the-static-text",
        "after": [
          {
            "result": {
              "duration": 65583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 832417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4583399208,
              "status": "passed"
            },
            "line": 139,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8791277750,
              "status": "passed"
            },
            "line": 140,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.aboutDesease}"
                ],
                "line": 141
              },
              {
                "cells": [
                  "${babylon.hraReport.about.activity.description}"
                ],
                "line": 142
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 43667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 144,
        "name": "navigate back to digital twin screen",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-digital-twin-screen",
        "after": [
          {
            "result": {
              "duration": 15541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 70958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6051901667,
              "status": "passed"
            },
            "line": 145,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 11750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 148,
        "name": "User should be able to access Babylon HRA - Healthcheck - Mood",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-hra---healthcheck---mood",
        "after": [
          {
            "result": {
              "duration": 115791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 882634250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13457566542,
              "status": "passed"
            },
            "line": 149,
            "name": "I click on \"Mood\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Mood",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 12439664292,
              "status": "passed"
            },
            "line": 150,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.mood}"
                ],
                "line": 151
              },
              {
                "comments": [
                  {
                    "line": 152,
                    "value": "#      | ${babylon.start.assesment}         |"
                  }
                ],
                "cells": [
                  "${babylon.hraReport.mood.duration}"
                ],
                "line": 153
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3258241833,
              "status": "passed"
            },
            "line": 154,
            "name": "I start the assessment",
            "match": {
              "location": "BabylonSteps.clickOnStartAssessmnet()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11781083416,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: start by looking at your current mood, stress levels and things that can affect good mental health expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.verifyHRAResult(BabylonSteps.java:616)\n\tat ✽.Then I verify the HRA Results are displayed(features/my/health/BabylonHRA_Report.feature:155)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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urfza/7bP7k9R6eOzi/xPWtkH7IsmBDhau/60G+t5Pn/Qp0buLpdPff+pbTyz6X2ZmO1o8cZq45WoKIVqGgFqgGdXwAD32+A9wLgLmgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAWqh68Vi8WyZMmSOZq3+qUFCxZcuXLF+431ew9fKxs3bhzw8Js3b573G+v3Hr5Wampq1q5du/JhtnrNGrPZ7P3G+r2HrxU8KLQCFa1A9X/qkjZ8a6M6OwAAAABJRU5ErkJggg\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 155,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.mood.assessment}"
                ],
                "line": 156
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 680000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1991083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 158,
        "name": "navigate back to digital twin screen",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-digital-twin-screen",
        "after": [
          {
            "result": {
              "duration": 81708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1816292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5002057708,
              "status": "passed"
            },
            "line": 159,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon HRA Report - Nutrition, Body, Activity",
    "description": "",
    "id": "verify-the-babylon-hra-report---nutrition,-body,-activity",
    "keyword": "Feature",
    "uri": "features/my/health/BabylonHRA_Report.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylon_hra_report_my"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 20125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-that-user-can-access-calendar-under-health-section;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1649208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 469459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8475610667,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 14565750,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 58541212209,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27559067750,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2021811458,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1976350667,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 12,
            "value": "#    Then I verify below language options on toggle bar as per specified lbu on login page"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 96416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 145083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 14,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-access-calendar-under-health-section;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 705542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2511292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3043950208,
              "status": "passed"
            },
            "line": 15,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 55638956833,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2551645875,
              "status": "passed"
            },
            "line": 19,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5034820959,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12305717125,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22064556500,
              "status": "passed"
            },
            "line": 22,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 79292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 236959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 25,
        "name": "User should be able to access Calendar screen",
        "description": "",
        "id": "verify-that-user-can-access-calendar-under-health-section;user-should-be-able-to-access-calendar-screen",
        "after": [
          {
            "result": {
              "duration": 1935792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1926542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3009324708,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34278835083,
              "status": "passed"
            },
            "line": 27,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6502604083,
              "status": "passed"
            },
            "line": 28,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22131982833,
              "status": "passed"
            },
            "line": 29,
            "name": "I click on Calendar tile",
            "match": {
              "location": "LocationSteps.iClicksOnCalendarButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3025558333,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7301018708,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${calendar.text}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${no.events.text}"
                ],
                "line": 33
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5342524959,
              "status": "passed"
            },
            "line": 34,
            "name": "I click on events dropdown button in calendar screen",
            "match": {
              "location": "LocationSteps.iClicksOnEventsButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 49512625417,
              "status": "passed"
            },
            "line": 35,
            "name": "I verify the following texts \"Calendar events\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Calendar events",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${medicine.reminders.text}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${appointments.text}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${vaccination.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${workout.text}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${pulse.tv.text}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${policy.remainder.text}"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify that user can access calendar under health section",
    "description": "",
    "id": "verify-that-user-can-access-calendar-under-health-section",
    "keyword": "Feature",
    "uri": "features/my/health/Calendar.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@my_calendar"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "comments": [
          {
            "line": 6,
            "value": "#  This could fail due to PCAONEPULSE-23264"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 73625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 660833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 7,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 1152917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 3098250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 45825917,
              "status": "passed"
            },
            "line": 8,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2324167,
              "status": "passed"
            },
            "line": 9,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8444629250,
              "status": "passed"
            },
            "line": 10,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2011661917,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 57098781292,
              "status": "passed"
            },
            "line": 12,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2012447084,
              "status": "passed"
            },
            "line": 13,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22866984625,
              "status": "passed"
            },
            "line": 14,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2007754959,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8612600167,
              "status": "passed"
            },
            "line": 16,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2001941833,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 37897253916,
              "status": "passed"
            },
            "line": 18,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 19
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 20
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 21
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1951832458,
              "status": "passed"
            },
            "line": 23,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7354677459,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37079676500,
              "status": "passed"
            },
            "line": 25,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2011891708,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 135728750750,
              "status": "passed"
            },
            "line": 27,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21069801750,
              "status": "passed"
            },
            "line": 28,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4008354500,
              "status": "passed"
            },
            "line": 29,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 319042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 365542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 31,
        "name": "User should be able to access Chinese Medicine screen",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;user-should-be-able-to-access-chinese-medicine-screen",
        "after": [
          {
            "result": {
              "duration": 1133250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2299375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 35463081709,
              "status": "passed"
            },
            "line": 32,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10210765666,
              "status": "passed"
            },
            "line": 33,
            "name": "I click on Chinese Medicine button",
            "match": {
              "location": "ChineseMedicineSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11439487041,
              "status": "passed"
            },
            "line": 34,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.welcomeMessage}"
                ],
                "line": 35
              },
              {
                "comments": [
                  {
                    "line": 36,
                    "value": "#      | ${FirstName}                   |"
                  }
                ],
                "cells": [
                  "${chineseMedicine.statement}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${chineseMedicine.pruLife}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${chineseMedicine.pruLife.research}"
                ],
                "line": 39
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4203845500,
              "status": "passed"
            },
            "line": 40,
            "name": "I click on Continue button on Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnConnectNow()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 109583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 278250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 51,
        "name": "Verify the carousel on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-carousel-on-chinese-medicine-journey;;2",
        "after": [
          {
            "result": {
              "duration": 1145708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 89250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2356652917,
              "status": "passed"
            },
            "line": 44,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.page1.text}"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3180331583,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify following button are displayed on chinese medicine carousal",
            "match": {
              "location": "ChineseMedicineSteps.chineseMedicineBtnOncarosuel(DataTable)"
            },
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "carousel1##${chineseMedicine.skipButton}"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9175541084,
              "status": "passed"
            },
            "line": 48,
            "name": "I swipe to Right for chinese medicine on carousal \"${chineseMedicine.page1.partialText}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.page1.partialText}",
                  "offset": 51
                }
              ],
              "location": "ChineseMedicineSteps.swipeLeftOrRightInChineseMed(String)"
            },
            "matchedColumns": [
              1
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 47291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 425375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 52,
        "name": "Verify the carousel on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-carousel-on-chinese-medicine-journey;;3",
        "after": [
          {
            "result": {
              "duration": 2620542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 670542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1144263334,
              "status": "passed"
            },
            "line": 44,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.page2.text}"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1372604375,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify following button are displayed on chinese medicine carousal",
            "match": {
              "location": "ChineseMedicineSteps.chineseMedicineBtnOncarosuel(DataTable)"
            },
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "carousel2##${chineseMedicine.skipButton}"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10898349500,
              "status": "passed"
            },
            "line": 48,
            "name": "I swipe to Right for chinese medicine on carousal \"${chineseMedicine.page2.partialText}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.page2.partialText}",
                  "offset": 51
                }
              ],
              "location": "ChineseMedicineSteps.swipeLeftOrRightInChineseMed(String)"
            },
            "matchedColumns": [
              1
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 53,
            "value": "#      | ${chineseMedicine.page3.text} | ${chineseMedicine.page3.partialText} | carousel3##${chineseMedicine.startAssessmentBtn} |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 70125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 446958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 55,
        "name": "verify the text and button on final assessment carousel",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-text-and-button-on-final-assessment-carousel",
        "after": [
          {
            "result": {
              "duration": 60416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 22125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1034419750,
              "status": "passed"
            },
            "line": 56,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.page3.text}"
                ],
                "line": 57
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3069358292,
              "status": "passed"
            },
            "line": 58,
            "name": "I verify following button are displayed on chinese medicine carousal",
            "match": {
              "location": "ChineseMedicineSteps.chineseMedicineBtnOncarosuel(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "carousel3##${chineseMedicine.startAssessmentBtn}"
                ],
                "line": 59
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 79958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 44584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 61,
        "name": "User should be able to complete Chinese Medicine profile",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;user-should-be-able-to-complete-chinese-medicine-profile",
        "after": [
          {
            "result": {
              "duration": 1226959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1160458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4180727375,
              "status": "passed"
            },
            "line": 62,
            "name": "I click on Start Assessment button on Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnStartAssessment()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5010896708,
              "status": "passed"
            },
            "line": 63,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5054432709,
              "status": "passed"
            },
            "line": 64,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.profile.title}"
                ],
                "line": 65
              },
              {
                "cells": [
                  "${chineseMedicine.profile.description}"
                ],
                "line": 66
              },
              {
                "cells": [
                  "${chineseMedicine.profile.mandatoryFields}"
                ],
                "line": 67
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 31932453375,
              "status": "passed"
            },
            "line": 68,
            "name": "change Chinese Medicine user profile details",
            "match": {
              "location": "ChineseMedicineSteps.editChineseMedUserProfile(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "City",
                  "${chineseMedicine.profile.cityValue}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "Smoking Habits",
                  "${chineseMedicine.profile.smokingHabitsValue}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "Drinking Habits",
                  "${chineseMedicine.profile.drinkingHabitsValue}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "Exercise Habits",
                  "${chineseMedicine.profile.exerciseHabitsValue}"
                ],
                "line": 72
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 37547948875,
              "status": "passed"
            },
            "line": 73,
            "name": "I click on Next button on Chinese Medicine Profile screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnNext()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3624375500,
              "status": "passed"
            },
            "line": 74,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.question.1}"
                ],
                "line": 75
              },
              {
                "cells": [
                  "${chineseMedicine.statement.1}"
                ],
                "line": 76
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7068107958,
              "status": "passed"
            },
            "line": 77,
            "name": "I verify following answer options are displayed on Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyAnswerOptions(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.answer.option1}"
                ],
                "line": 78
              },
              {
                "cells": [
                  "${chineseMedicine.answer.option2}"
                ],
                "line": 79
              },
              {
                "cells": [
                  "${chineseMedicine.answer.option3}"
                ],
                "line": 80
              },
              {
                "cells": [
                  "${chineseMedicine.answer.option4}"
                ],
                "line": 81
              },
              {
                "cells": [
                  "${chineseMedicine.answer.option5}"
                ],
                "line": 82
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 337333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1034041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 91,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;2",
        "after": [
          {
            "result": {
              "duration": 1509292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 371917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 34511867666,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.1}\" for the question \"${chineseMedicine.question.1}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.1}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.1}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 63375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 140042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 92,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;3",
        "after": [
          {
            "result": {
              "duration": 1541167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 353750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 34802452666,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.2}\" for the question \"${chineseMedicine.question.2}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.2}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.2}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 37000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 502250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 93,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;4",
        "after": [
          {
            "result": {
              "duration": 1136625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 433583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 37322356666,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.3}\" for the question \"${chineseMedicine.question.3}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.3}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.3}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 62042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 82542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 94,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;5",
        "after": [
          {
            "result": {
              "duration": 67333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 29625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 36331845625,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.4}\" for the question \"${chineseMedicine.question.4}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.4}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.4}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 902041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 95,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;6",
        "after": [
          {
            "result": {
              "duration": 69333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 30208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 34734243250,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.5}\" for the question \"${chineseMedicine.question.5}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.5}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.5}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 444083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 874375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 96,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;7",
        "after": [
          {
            "result": {
              "duration": 957583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 356750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 36682435792,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.6}\" for the question \"${chineseMedicine.question.6}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.6}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.6}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 93084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1251333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 97,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;8",
        "after": [
          {
            "result": {
              "duration": 32875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 35625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 34414264833,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.7}\" for the question \"${chineseMedicine.question.7}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.7}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.7}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 359291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 90084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 98,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;9",
        "after": [
          {
            "result": {
              "duration": 483125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 439417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 38469995917,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.8}\" for the question \"${chineseMedicine.question.8}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.8}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.8}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 376958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 66709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 99,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;10",
        "after": [
          {
            "result": {
              "duration": 99750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 46667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 36538575417,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.9}\" for the question \"${chineseMedicine.question.9}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.9}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.9}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 37583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 57500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 100,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;11",
        "after": [
          {
            "result": {
              "duration": 14375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 13625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 34812294542,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.10}\" for the question \"${chineseMedicine.question.10}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.10}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.10}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 379000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 101,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;12",
        "after": [
          {
            "result": {
              "duration": 811708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 109583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 36593624166,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.11}\" for the question \"${chineseMedicine.question.11}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.11}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.11}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 419542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 834208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 102,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;13",
        "after": [
          {
            "result": {
              "duration": 10415417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 4287250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 34618885792,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.12}\" for the question \"${chineseMedicine.question.12}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.12}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.12}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1037208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 9372000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 103,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;14",
        "after": [
          {
            "result": {
              "duration": 151708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 107083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 37494806917,
              "status": "passed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.13}\" for the question \"${chineseMedicine.question.13}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.13}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.13}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 622583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 119125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 104,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;15",
        "after": [
          {
            "result": {
              "duration": 20875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1072178667,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9369074750,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel that I have a weak voice.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.14}\" for the question \"${chineseMedicine.question.14}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.14}\" for the question \"${chineseMedicine.question.14}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.14}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.14}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 18125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 105,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;16",
        "after": [
          {
            "result": {
              "duration": 505875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1038013375,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9158426042,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"In general\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.15}\" for the question \"${chineseMedicine.question.15}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.15}\" for the question \"${chineseMedicine.question.15}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.15}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.15}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 106,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;17",
        "after": [
          {
            "result": {
              "duration": 79250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1020933334,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9161126250,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel that my skin and lips are dry.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.16}\" for the question \"${chineseMedicine.question.16}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.16}\" for the question \"${chineseMedicine.question.16}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.16}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.16}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 268334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 50208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 107,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;18",
        "after": [
          {
            "result": {
              "duration": 518041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1015175834,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9157991875,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get bruises easily for no reason.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.17}\" for the question \"${chineseMedicine.question.17}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.17}\" for the question \"${chineseMedicine.question.17}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.17}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.17}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1285250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 108,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;19",
        "after": [
          {
            "result": {
              "duration": 37333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1016893083,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9127943000,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have broken out in hives (outbreak of swollen\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.18}\" for the question \"${chineseMedicine.question.18}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.18}\" for the question \"${chineseMedicine.question.18}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.18}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.18}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 392042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 109,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;20",
        "after": [
          {
            "result": {
              "duration": 17250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1030675625,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11027505500,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get purple rashes on my skin (purple blood spots\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.19}\" for the question \"${chineseMedicine.question.19}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.19}\" for the question \"${chineseMedicine.question.19}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.19}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.19}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 4032250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 40959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 110,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;21",
        "after": [
          {
            "result": {
              "duration": 39416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1015000041,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9137403292,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I easily get scratch marks on my skin.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.20}\" for the question \"${chineseMedicine.question.20}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.20}\" for the question \"${chineseMedicine.question.20}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.20}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.20}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 73416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 111,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;22",
        "after": [
          {
            "result": {
              "duration": 153000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1023050667,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9106860833,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to feel depressed and moody.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.21}\" for the question \"${chineseMedicine.question.21}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.21}\" for the question \"${chineseMedicine.question.21}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.21}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.21}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 28709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 48209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 112,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;23",
        "after": [
          {
            "result": {
              "duration": 259750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021342500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9327334625,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I easily forget things.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.22}\" for the question \"${chineseMedicine.question.22}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.22}\" for the question \"${chineseMedicine.question.22}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.22}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.22}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 14041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 113,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;24",
        "after": [
          {
            "result": {
              "duration": 13375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1013802167,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9118210459,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to feel tense and\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.23}\" for the question \"${chineseMedicine.question.23}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.23}\" for the question \"${chineseMedicine.question.23}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.23}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.23}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 16084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 114,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;25",
        "after": [
          {
            "result": {
              "duration": 15125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1017054958,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9104566250,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I am sentimental and my feelings get hurt easily.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.24}\" for the question \"${chineseMedicine.question.24}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.24}\" for the question \"${chineseMedicine.question.24}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.24}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.24}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 70041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 115,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;26",
        "after": [
          {
            "result": {
              "duration": 68459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022712333,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 11064771000,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel fearful\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.25}\" for the question \"${chineseMedicine.question.25}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.25}\" for the question \"${chineseMedicine.question.25}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.25}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.25}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 23417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 51625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 116,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;27",
        "after": [
          {
            "result": {
              "duration": 13042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021628167,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9118810000,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I sigh often for no reason.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.26}\" for the question \"${chineseMedicine.question.26}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.26}\" for the question \"${chineseMedicine.question.26}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.26}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.26}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 117,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;28",
        "after": [
          {
            "result": {
              "duration": 12542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1024179042,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9121266833,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get dizzy when changing posture.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.27}\" for the question \"${chineseMedicine.question.27}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.27}\" for the question \"${chineseMedicine.question.27}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.27}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.27}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 32042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 118,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;29",
        "after": [
          {
            "result": {
              "duration": 115958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1016429000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9153781333,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have a pale or anemic complexion.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.28}\" for the question \"${chineseMedicine.question.28}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.28}\" for the question \"${chineseMedicine.question.28}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.28}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.28}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 371625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 47000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 119,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;30",
        "after": [
          {
            "result": {
              "duration": 25208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1040297458,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9181869833,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have rosy cheeks.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.29}\" for the question \"${chineseMedicine.question.29}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.29}\" for the question \"${chineseMedicine.question.29}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.29}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.29}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 309458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 120,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;31",
        "after": [
          {
            "result": {
              "duration": 16833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1017677209,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9110244125,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have visible blood veins on my cheeks\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.30}\" for the question \"${chineseMedicine.question.30}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.30}\" for the question \"${chineseMedicine.question.30}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.30}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.30}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 380625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 121,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;32",
        "after": [
          {
            "result": {
              "duration": 150625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1024102000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10296092750,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have a darker complexion and have pigmentation on my cheeks\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.31}\" for the question \"${chineseMedicine.question.31}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.31}\" for the question \"${chineseMedicine.question.31}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.31}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.31}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 416041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 36417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 122,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;33",
        "after": [
          {
            "result": {
              "duration": 14625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2550232916,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9214604125,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My nose and forehead frequently get oily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.32}\" for the question \"${chineseMedicine.question.32}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.32}\" for the question \"${chineseMedicine.question.32}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.32}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.32}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 87500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 4195334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 123,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;34",
        "after": [
          {
            "result": {
              "duration": 512875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1039505958,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9345149583,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get pimples easily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.33}\" for the question \"${chineseMedicine.question.33}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.33}\" for the question \"${chineseMedicine.question.33}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.33}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.33}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 309125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 91125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 124,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;35",
        "after": [
          {
            "result": {
              "duration": 27625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021012667,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9148757041,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get panda eyes (dark eye bags) easily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.34}\" for the question \"${chineseMedicine.question.34}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.34}\" for the question \"${chineseMedicine.question.34}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.34}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.34}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 27792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 125,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;36",
        "after": [
          {
            "result": {
              "duration": 14500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1016742542,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9137118750,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My lip color is generally gloomy / purplish / blueish\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.35}\" for the question \"${chineseMedicine.question.35}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.35}\" for the question \"${chineseMedicine.question.35}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.35}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.35}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 544792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 70959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 126,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;37",
        "after": [
          {
            "result": {
              "duration": 22583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1028739667,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10344265000,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My lip color is reddish\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.36}\" for the question \"${chineseMedicine.question.36}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.36}\" for the question \"${chineseMedicine.question.36}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.36}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.36}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 411583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 127,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;38",
        "after": [
          {
            "result": {
              "duration": 16208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1028436916,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9157503875,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My lip color is slightly pale or whiteish\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.37}\" for the question \"${chineseMedicine.question.37}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.37}\" for the question \"${chineseMedicine.question.37}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.37}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.37}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 356125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 128,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;39",
        "after": [
          {
            "result": {
              "duration": 6189666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1065480250,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9205024167,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have puffy eyelids\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.38}\" for the question \"${chineseMedicine.question.38}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.38}\" for the question \"${chineseMedicine.question.38}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.38}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.38}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 399500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 65125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 129,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;40",
        "after": [
          {
            "result": {
              "duration": 11958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1024538584,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9095112000,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have dry eyes or blurry vision\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.39}\" for the question \"${chineseMedicine.question.39}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.39}\" for the question \"${chineseMedicine.question.39}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.39}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.39}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1279916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 130,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;41",
        "after": [
          {
            "result": {
              "duration": 1870416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1025440292,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9126379125,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to sneeze even if I am not sick\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.40}\" for the question \"${chineseMedicine.question.40}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.40}\" for the question \"${chineseMedicine.question.40}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.40}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.40}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 398750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 131,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;42",
        "after": [
          {
            "result": {
              "duration": 19583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1302519416,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9334281875,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My nose gets clooged or runny even if I am not sick\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.41}\" for the question \"${chineseMedicine.question.41}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.41}\" for the question \"${chineseMedicine.question.41}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.41}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.41}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 407292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 132,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;43",
        "after": [
          {
            "result": {
              "duration": 22459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1052525500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9793862000,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have a dry tongue\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.42}\" for the question \"${chineseMedicine.question.42}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.42}\" for the question \"${chineseMedicine.question.42}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.42}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.42}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 26208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 133,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;44",
        "after": [
          {
            "result": {
              "duration": 56125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1020882000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9135133667,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have sticky saliva\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.43}\" for the question \"${chineseMedicine.question.43}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.43}\" for the question \"${chineseMedicine.question.43}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.43}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.43}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 122542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 52459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 134,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;45",
        "after": [
          {
            "result": {
              "duration": 21000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1012597834,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9131846667,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to have a bitter taste in my mouth\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.44}\" for the question \"${chineseMedicine.question.44}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.44}\" for the question \"${chineseMedicine.question.44}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.44}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.44}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 326042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 55583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 135,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;46",
        "after": [
          {
            "result": {
              "duration": 27958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1017517542,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9171699625,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"The surface of my tongue feels sticky\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.45}\" for the question \"${chineseMedicine.question.45}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.45}\" for the question \"${chineseMedicine.question.45}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.45}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.45}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 95667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 136,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;47",
        "after": [
          {
            "result": {
              "duration": 41125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1108449000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10029965084,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to have phlegm in my throat even if I am not sick\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.46}\" for the question \"${chineseMedicine.question.46}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.46}\" for the question \"${chineseMedicine.question.46}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.46}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.46}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 417792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 137,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;48",
        "after": [
          {
            "result": {
              "duration": 60209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1050398875,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9189863625,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to have throat irritating even if I am not sick\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.47}\" for the question \"${chineseMedicine.question.47}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.47}\" for the question \"${chineseMedicine.question.47}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.47}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.47}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 354125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 138,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;49",
        "after": [
          {
            "result": {
              "duration": 1245125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1053032625,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9269803208,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have tightness in my chest\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.48}\" for the question \"${chineseMedicine.question.48}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.48}\" for the question \"${chineseMedicine.question.48}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.48}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.48}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 68500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 139,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;50",
        "after": [
          {
            "result": {
              "duration": 529792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1018090000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9135966083,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have asthma or feel the need to occassionally take deep breaths\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.49}\" for the question \"${chineseMedicine.question.49}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.49}\" for the question \"${chineseMedicine.question.49}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.49}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.49}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 453792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 140,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;51",
        "after": [
          {
            "result": {
              "duration": 14833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1043889584,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9143735916,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"l feel conscious of sudden heart palpitations or increased heartbeat\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.50}\" for the question \"${chineseMedicine.question.50}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.50}\" for the question \"${chineseMedicine.question.50}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.50}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.50}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 95000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 211917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 141,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;52",
        "after": [
          {
            "result": {
              "duration": 49416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1020944167,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9474193292,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel pain at the side of my chest or breasts\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.51}\" for the question \"${chineseMedicine.question.51}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.51}\" for the question \"${chineseMedicine.question.51}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.51}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.51}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 28000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 30125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 142,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;53",
        "after": [
          {
            "result": {
              "duration": 23208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1015858292,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9152901292,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My stomach fat is tender\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.52}\" for the question \"${chineseMedicine.question.52}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.52}\" for the question \"${chineseMedicine.question.52}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.52}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.52}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 43084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 143,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;54",
        "after": [
          {
            "result": {
              "duration": 12584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1035486459,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10365979500,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My abdomen\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.53}\" for the question \"${chineseMedicine.question.53}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.53}\" for the question \"${chineseMedicine.question.53}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.53}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.53}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 380458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 144,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;55",
        "after": [
          {
            "result": {
              "duration": 30459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1016323875,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9182266917,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I frequently get diarhea or stomach pains after consuming cold food or beverages\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.54}\" for the question \"${chineseMedicine.question.54}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.54}\" for the question \"${chineseMedicine.question.54}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.54}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.54}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 837000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 65625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 145,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;56",
        "after": [
          {
            "result": {
              "duration": 425542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1410440958,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9439058917,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get constipations\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.55}\" for the question \"${chineseMedicine.question.55}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.55}\" for the question \"${chineseMedicine.question.55}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.55}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.55}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 102292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 467667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 146,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;57",
        "after": [
          {
            "result": {
              "duration": 162041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1011715458,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9388181250,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel that my feces are sticky and not clean\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.56}\" for the question \"${chineseMedicine.question.56}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.56}\" for the question \"${chineseMedicine.question.56}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.56}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.56}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 415750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 150958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 147,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;58",
        "after": [
          {
            "result": {
              "duration": 23667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1020380250,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9131993583,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"Apart from the first urination in the morning\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.57}\" for the question \"${chineseMedicine.question.57}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.57}\" for the question \"${chineseMedicine.question.57}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.57}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.57}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 81917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 148,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;59",
        "after": [
          {
            "result": {
              "duration": 31209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022150500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9110654458,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel feverish on my hands\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.58}\" for the question \"${chineseMedicine.question.58}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.58}\" for the question \"${chineseMedicine.question.58}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.58}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.58}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 448792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 149,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;60",
        "after": [
          {
            "result": {
              "duration": 543458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1032103584,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9968449667,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My feet and hands get cold easily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.59}\" for the question \"${chineseMedicine.question.59}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.59}\" for the question \"${chineseMedicine.question.59}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.59}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.59}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1492000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 150,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;61",
        "after": [
          {
            "result": {
              "duration": 11292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1018178625,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9163000458,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My body and limbs feel numb\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.60}\" for the question \"${chineseMedicine.question.60}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.60}\" for the question \"${chineseMedicine.question.60}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.60}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.60}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 647042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 151,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;62",
        "after": [
          {
            "result": {
              "duration": 92541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1049441792,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9127666750,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My face\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.61}\" for the question \"${chineseMedicine.question.61}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.61}\" for the question \"${chineseMedicine.question.61}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.61}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.61}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 378458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 65292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 152,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;63",
        "after": [
          {
            "result": {
              "duration": 15541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1026970000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9110088875,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My body feels pain easily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.62}\" for the question \"${chineseMedicine.question.62}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.62}\" for the question \"${chineseMedicine.question.62}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.62}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.62}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 339625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 153,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;64",
        "after": [
          {
            "result": {
              "duration": 13958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021173084,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9154926125,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My scrotum feels hot (Limited to men answer)\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.63}\" for the question \"${chineseMedicine.question.63}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.63}\" for the question \"${chineseMedicine.question.63}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.63}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.63}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 379167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 156,
        "name": "Verify the Assessment completion screen",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-assessment-completion-screen",
        "after": [
          {
            "result": {
              "duration": 16875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1039901125,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5015968792,
              "status": "passed"
            },
            "line": 157,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 29629368041,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Great!! expected [true] but found [false],\n\tthe expected text is: You\u0027ve completed the assessment expected [true] but found [false],\n\tthe expected text is: This assessment and health related advice are provided by \u0027Research Center of Big Data, College of Management, Taipei Medical University\u0027 in cooperation with medical doctors. It is only for personal health management reference and does not represent a medical diagnosis. If you feel unwell, please seek the medical doctor\u0027s advice for any health conditions! expected [true] but found [false],\n\tthe expected text is: Your body constitution will change based on your diets, lifestyle, and environment. It is recommended to do the Chinese Constitution Assessment at least every three months to know whether your constitution has improved so as to master your own health! expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(ChineseMedicineSteps.java:49)\n\tat ✽.Then User verify following texts are displayed in Chinese Medicine screen(features/my/health/ChineseMedicine.feature:158)\n",
              "status": "failed"
            },
            "line": 158,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.viewAssessment.header}"
                ],
                "line": 159
              },
              {
                "cells": [
                  "${chineseMedicine.viewAssessment.subTitle}"
                ],
                "line": 160
              },
              {
                "cells": [
                  "${chineseMedicine.viewAssessment.description1}"
                ],
                "line": 161
              },
              {
                "cells": [
                  "${chineseMedicine.viewAssessment.description2}"
                ],
                "line": 162
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 56959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 165,
        "name": "Verify the user can view the Assessment Record",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-user-can-view-the-assessment-record",
        "after": [
          {
            "result": {
              "duration": 87500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1034557042,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7167059291,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: abbef9c4-d556-462e-ba3d-e3067ec49cc7\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"View Results\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.clickViewResultsButton(ChineseMedicineScreen.java:71)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.clickOnViewResults(ChineseMedicineSteps.java:122)\n\tat ✽.When user clicks on View Results button on Chinese Medicine Assessment screen(features/my/health/ChineseMedicine.feature:166)\n",
              "status": "failed"
            },
            "line": 166,
            "name": "user clicks on View Results button on Chinese Medicine Assessment screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnViewResults()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 167,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.assessment.header}"
                ],
                "line": 168
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.subHeader}"
                ],
                "line": 169
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.status}"
                ],
                "line": 170
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.subStatus}"
                ],
                "line": 171
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.status1}"
                ],
                "line": 172
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.status2}"
                ],
                "line": 173
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.status3}"
                ],
                "line": 174
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.constitution.advice}"
                ],
                "line": 175
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 217333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 58291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 178,
        "name": "Verify the Assessment Summary",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-assessment-summary",
        "after": [
          {
            "result": {
              "duration": 2469917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1018815541,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14263569833,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Assessment Summary expected [true] but found [false],\n\tthe expected text is: Your body has moderate deficiency of yang qi. You may easily feel weak and chills, and have cold limbs. This is a symptom of moderate yang deficiency.It is recommended that your eating habits be based on the principle of warmth, and you should eat more glutinous rice, black beans, yams, ginger and other foods, maintain the long-term regular habit of medium intensity exercise, and have daily care and acupoint care matching with four seasons, so that you can gradually improve your body constitution. expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(ChineseMedicineSteps.java:49)\n\tat ✽.Then User verify following texts are displayed in Chinese Medicine screen(features/my/health/ChineseMedicine.feature:179)\n",
              "status": "failed"
            },
            "line": 179,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.assessment.summary.title}"
                ],
                "line": 180
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.summary.description}"
                ],
                "line": 181
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 182,
            "name": "user clicks on View More button on Assessment Record screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnViewMore()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1021292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 189,
        "name": "Verify the \"Constitution\" Details of the Assessment",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-\"\u003ctitle\u003e\"-details-of-the-assessment;;2",
        "after": [
          {
            "result": {
              "duration": 11875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1019353250,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7097465667,
              "error_message": "java.lang.AssertionError: Unable to find the Condition Meaning of Yang-deficiency constitution.\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.verifyAssessmentDetails(ChineseMedicineScreen.java:197)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.verifyAssessmentDetails(ChineseMedicineSteps.java:133)\n\tat ✽.Then User verify Assessment Details for the \"${chineseMedicine.assessment.details.constitution}\" and \"${chineseMedicine.assessment.details.constitutionDescription}\"(features/my/health/ChineseMedicine.feature:186)\n",
              "status": "failed"
            },
            "line": 186,
            "name": "User verify Assessment Details for the \"${chineseMedicine.assessment.details.constitution}\" and \"${chineseMedicine.assessment.details.constitutionDescription}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.assessment.details.constitution}",
                  "offset": 40
                },
                {
                  "val": "${chineseMedicine.assessment.details.constitutionDescription}",
                  "offset": 97
                }
              ],
              "location": "ChineseMedicineSteps.verifyAssessmentDetails(String,String)"
            },
            "matchedColumns": [
              1,
              2
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 2771667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 34708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 190,
        "name": "Verify the \"Change In Tongue\" Details of the Assessment",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-\"\u003ctitle\u003e\"-details-of-the-assessment;;3",
        "after": [
          {
            "result": {
              "duration": 19584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1043374083,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 8799108875,
              "error_message": "java.lang.AssertionError: Unable to find the Condition Change in the tongue of Yang-deficiency constitution.\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.verifyAssessmentDetails(ChineseMedicineScreen.java:197)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.verifyAssessmentDetails(ChineseMedicineSteps.java:133)\n\tat ✽.Then User verify Assessment Details for the \"${chineseMedicine.assessment.details.changeInTongue}\" and \"${chineseMedicine.assessment.details.changeInTongueDescription}\"(features/my/health/ChineseMedicine.feature:186)\n",
              "status": "failed"
            },
            "line": 186,
            "name": "User verify Assessment Details for the \"${chineseMedicine.assessment.details.changeInTongue}\" and \"${chineseMedicine.assessment.details.changeInTongueDescription}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.assessment.details.changeInTongue}",
                  "offset": 40
                },
                {
                  "val": "${chineseMedicine.assessment.details.changeInTongueDescription}",
                  "offset": 99
                }
              ],
              "location": "ChineseMedicineSteps.verifyAssessmentDetails(String,String)"
            },
            "matchedColumns": [
              1,
              2
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      }
    ],
    "name": "Verify that user can access Chinese Medicine feature",
    "description": "",
    "id": "verify-that-user-can-access-chinese-medicine-feature",
    "keyword": "Feature",
    "uri": "features/my/health/ChineseMedicine.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@ChineseMedicine"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 346792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Verify the Home screen validation using \"Continue with Email\"",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-the-home-screen-validation-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 2410250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 16362584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26432625,
              "status": "passed"
            },
            "line": 6,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 418833,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13095167000,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 55529707250,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2020469959,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23579542584,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2012195709,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8917014416,
              "status": "passed"
            },
            "line": 13,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 36361531125,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "Diet"
                ],
                "line": 15
              },
              {
                "cells": [
                  "LastName",
                  "Test"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5504507834,
              "status": "passed"
            },
            "line": 19,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2795468000,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 38836635000,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2010871291,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 140692872875,
              "status": "passed"
            },
            "line": 23,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19300122792,
              "status": "passed"
            },
            "line": 24,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4013280958,
              "status": "passed"
            },
            "line": 25,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 904250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2939833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 27,
        "name": "Verify User should be able to navigate to Dietician page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-dietician-page",
        "after": [
          {
            "result": {
              "duration": 530708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 50875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5450710375,
              "status": "passed"
            },
            "line": 28,
            "name": "I click the Health icon in Home screen",
            "match": {
              "location": "CustomerConnectSteps.Healthicons()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17383274625,
              "status": "passed"
            },
            "comments": [
              {
                "line": 29,
                "value": "#    Then I click the Dietician in Health Screen"
              }
            ],
            "line": 30,
            "name": "I click the Dietician tab for my in Health Screen",
            "match": {
              "location": "DieticianSteps.clickOnMyDieticianTab()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 44875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 116583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 32,
        "name": "Select the expert type as doctor and navigate to next screen",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;select-the-expert-type-as-doctor-and-navigate-to-next-screen",
        "after": [
          {
            "result": {
              "duration": 153917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 819167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6787692041,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${choose.expertise.text}"
                ],
                "line": 34
              },
              {
                "cells": [
                  "${select.expert.type}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${what.expert.text}"
                ],
                "line": 36
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27769012875,
              "status": "passed"
            },
            "line": 37,
            "name": "I clicks on \"${doc.txt}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${doc.txt}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1723737458,
              "status": "passed"
            },
            "line": 38,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2008210791,
              "status": "passed"
            },
            "line": 39,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5628685708,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${what.isyour.service.num.text}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${complete.details.text}"
                ],
                "line": 42
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1985680625,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify following edit field sample text in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyEditSampleTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enterservice.num.text}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${entername.of.institution.text}"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7716625,
              "status": "passed"
            },
            "line": 46,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "service num",
                  "05"
                ],
                "line": 47
              },
              {
                "cells": [
                  "issuing org",
                  "test org"
                ],
                "line": 48
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13196436917,
              "status": "passed"
            },
            "line": 49,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${service.num.text}",
                  "${service num}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${issuing.org.text}",
                  "${issuing org}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${valid.till.text}",
                  "01-01-2030"
                ],
                "line": 52
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1792777334,
              "status": "passed"
            },
            "line": 53,
            "name": "I click on field label \"${valid.till.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${valid.till.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4061022042,
              "status": "passed"
            },
            "line": 54,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 82750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 281459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 56,
        "name": "Verify User should be able to navigate to specialisation page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-specialisation-page",
        "after": [
          {
            "result": {
              "duration": 607416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1767833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6657131292,
              "status": "passed"
            },
            "line": 57,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${what.isyour.specialisation}"
                ],
                "line": 58
              },
              {
                "cells": [
                  "${specility.to.provide}"
                ],
                "line": 59
              },
              {
                "cells": [
                  "${choose.list.text}"
                ],
                "line": 60
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6600865208,
              "status": "passed"
            },
            "line": 61,
            "name": "I verify following specialisation options are displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifySpecialisationOptionsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${mental.health.text}"
                ],
                "line": 62
              },
              {
                "cells": [
                  "${psychologist.text}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "${general.physician.text}"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7918022792,
              "status": "passed"
            },
            "line": 65,
            "name": "I enter \"${physician.text}\" speciality on specilisation screen And select \"${general.physician.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${physician.text}",
                  "offset": 9
                },
                {
                  "val": "${general.physician.text}",
                  "offset": 75
                }
              ],
              "location": "DieticianSteps.searchAndSelectSpeciality(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2174875500,
              "status": "passed"
            },
            "line": 66,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4320436000,
              "status": "passed"
            },
            "line": 67,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.super.specialisation.text}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${other.specialisation.text}"
                ],
                "line": 69
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3348083,
              "status": "passed"
            },
            "line": 70,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "specialisation",
                  "Hypertension"
                ],
                "line": 71
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2059106875,
              "status": "passed"
            },
            "line": 72,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.super.specialisation.text}",
                  "${specialisation}"
                ],
                "line": 73
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2291452375,
              "status": "passed"
            },
            "line": 74,
            "name": "I click on field label \"${enter.super.specialisation.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${enter.super.specialisation.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6924668250,
              "status": "passed"
            },
            "line": 75,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 104250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 45500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 77,
        "name": "Verify User should be able to navigate to Educational Details page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-educational-details-page",
        "after": [
          {
            "result": {
              "duration": 387292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 125000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2074850167,
              "status": "passed"
            },
            "line": 78,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${education.details.text}"
                ],
                "line": 79
              },
              {
                "cells": [
                  "${add.degree.text}"
                ],
                "line": 80
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5597911083,
              "status": "passed"
            },
            "line": 81,
            "name": "I verify following edit field sample text in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyEditSampleTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.degree.name.text}"
                ],
                "line": 82
              },
              {
                "cells": [
                  "${enter.field.of.study.text}"
                ],
                "line": 83
              },
              {
                "cells": [
                  "${institution.name.enter.text}"
                ],
                "line": 84
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13773054959,
              "status": "passed"
            },
            "line": 85,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${degree1.text}",
                  "MBBS"
                ],
                "line": 86
              },
              {
                "cells": [
                  "${year.text}",
                  "2001"
                ],
                "line": 87
              },
              {
                "cells": [
                  "${university.text}",
                  "test university"
                ],
                "line": 88
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3449384167,
              "status": "passed"
            },
            "line": 89,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.field.of.study.text}",
                  "physician"
                ],
                "line": 90
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3879965875,
              "status": "passed"
            },
            "line": 91,
            "name": "I click on field label \"${education.details.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${education.details.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2189890459,
              "status": "passed"
            },
            "line": 92,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 113250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 51250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 94,
        "name": "Verify User should be able to navigate to Add experience page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-add-experience-page",
        "after": [
          {
            "result": {
              "duration": 95459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 108167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4479413459,
              "status": "passed"
            },
            "line": 95,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${add.experience.txt}"
                ],
                "line": 96
              },
              {
                "cells": [
                  "${share.experience.details}"
                ],
                "line": 97
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1109629458,
              "status": "passed"
            },
            "line": 98,
            "name": "I verify following edit field sample text in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyEditSampleTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enterHospital.text}"
                ],
                "line": 99
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1973423375,
              "status": "passed"
            },
            "line": 100,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${profile.title.text}",
                  "Test"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5131022958,
              "status": "passed"
            },
            "line": 102,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${experience1.text}",
                  "Test University"
                ],
                "line": 103
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4283969083,
              "status": "passed"
            },
            "line": 104,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enterLocation.text}",
                  "${country.name}"
                ],
                "line": 105
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2640095209,
              "status": "passed"
            },
            "line": 106,
            "name": "I Enter the \"Start Date\" in \"10\" in dynamic start date Experience screen",
            "match": {
              "arguments": [
                {
                  "val": "Start Date",
                  "offset": 13
                },
                {
                  "val": "10",
                  "offset": 29
                }
              ],
              "location": "CustomerConnectSteps.EnterstartDate(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4447033667,
              "status": "passed"
            },
            "line": 107,
            "name": "I Enter the \"Start Date\" in \"2010\" in dynamic start years Experience screen",
            "match": {
              "arguments": [
                {
                  "val": "Start Date",
                  "offset": 13
                },
                {
                  "val": "2010",
                  "offset": 29
                }
              ],
              "location": "CustomerConnectSteps.EnterStartYear(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5138685500,
              "status": "passed"
            },
            "line": 108,
            "name": "I click on field label \"${add.experience.txt}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${add.experience.txt}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1215757167,
              "status": "passed"
            },
            "line": 109,
            "name": "I click on checkbox next to text \"${currently.praticing.here}\" in dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${currently.praticing.here}",
                  "offset": 34
                }
              ],
              "location": "DieticianSteps.selectCurrentlyWorkingCheckBox(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2242210458,
              "status": "passed"
            },
            "line": 110,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 102541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 39666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 112,
        "name": "Verify User should be able to navigate to Services Offered page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-services-offered-page",
        "after": [
          {
            "result": {
              "duration": 80083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 673625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3546860417,
              "status": "passed"
            },
            "line": 113,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${public.profile.tex}"
                ],
                "line": 114
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4640542,
              "status": "passed"
            },
            "line": 115,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "service offered",
                  "MBBS DOCTOR"
                ],
                "line": 116
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2345795458,
              "status": "passed"
            },
            "line": 117,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${service.offered.text}",
                  "${service offered}"
                ],
                "line": 118
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1948707375,
              "status": "passed"
            },
            "line": 119,
            "name": "I click on field label \"${service.offered.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${service.offered.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3670561916,
              "status": "passed"
            },
            "line": 120,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 107167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 71250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 122,
        "name": "Verify User should be able to navigate to achievement and awards screen",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-achievement-and-awards-screen",
        "after": [
          {
            "result": {
              "duration": 336041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 108458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2178087250,
              "status": "passed"
            },
            "line": 123,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${achievement.award.text}"
                ],
                "line": 124
              },
              {
                "cells": [
                  "${add.seminar.details.text}"
                ],
                "line": 125
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10789416333,
              "status": "passed"
            },
            "line": 126,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.title.award.text}",
                  "TEST award"
                ],
                "line": 127
              },
              {
                "cells": [
                  "${enter.org.name.text}",
                  "Test"
                ],
                "line": 128
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5700647708,
              "status": "passed"
            },
            "line": 129,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${year.text}",
                  "2020"
                ],
                "line": 130
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2878067708,
              "status": "passed"
            },
            "line": 131,
            "name": "I click on field label \"${add.seminar.details.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${add.seminar.details.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5134258791,
              "status": "passed"
            },
            "line": 132,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 372875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 324833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 134,
        "name": "Verify User should be able to navigate to Seminar(s) Attended page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-seminar(s)-attended-page",
        "after": [
          {
            "result": {
              "duration": 424333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 825583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6315690584,
              "status": "passed"
            },
            "line": 135,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${seminar.attended.text}"
                ],
                "line": 136
              },
              {
                "cells": [
                  "${add.seminar.details}"
                ],
                "line": 137
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16078533459,
              "status": "passed"
            },
            "line": 138,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.seminar.title}",
                  "TEST seminar"
                ],
                "line": 139
              },
              {
                "cells": [
                  "${enterLocation.text}",
                  "SINGAPORE"
                ],
                "line": 140
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8611857708,
              "status": "passed"
            },
            "line": 141,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${year.text}",
                  "2020"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6115231792,
              "status": "passed"
            },
            "line": 143,
            "name": "I click on field label \"${seminar.attended.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${seminar.attended.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5058413291,
              "status": "passed"
            },
            "line": 144,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 413125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 144208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 146,
        "name": "Verify User should be able to navigate to linked clinic page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-linked-clinic-page",
        "after": [
          {
            "result": {
              "duration": 46042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 68083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6047413083,
              "status": "passed"
            },
            "line": 147,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${linked.clinic.text}"
                ],
                "line": 148
              },
              {
                "cells": [
                  "${add.clinic.info.text}"
                ],
                "line": 149
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11111947583,
              "status": "passed"
            },
            "line": 150,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.name.of.clinic}",
                  "clinic1"
                ],
                "line": 151
              },
              {
                "cells": [
                  "${enterLocation.text}",
                  "SINGAPORE"
                ],
                "line": 152
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4366072500,
              "status": "passed"
            },
            "line": 153,
            "name": "I click on field label \"${linked.clinic.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${linked.clinic.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4865310208,
              "status": "passed"
            },
            "line": 154,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 39250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 156,
        "name": "Verify User should be able to navigate to Take a Picture page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-take-a-picture-page",
        "after": [
          {
            "result": {
              "duration": 594959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 6795041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8173169041,
              "status": "passed"
            },
            "line": 157,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${about.you.text}"
                ],
                "line": 158
              },
              {
                "cells": [
                  "${profile.photo.text}"
                ],
                "line": 159
              },
              {
                "cells": [
                  "${takephoto.instruction.text}"
                ],
                "line": 160
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5197217166,
              "status": "passed"
            },
            "line": 162,
            "name": "I verify following profile photo options are displayed in Dietician Screen",
            "match": {
              "location": "DieticianSteps.verifyPhotoOptionsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${uploadfile.text}"
                ],
                "line": 163
              },
              {
                "cells": [
                  "${takepicture.text}"
                ],
                "line": 164
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14709436584,
              "status": "passed"
            },
            "line": 165,
            "name": "I clicks on \"${takepicture.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${takepicture.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9404795084,
              "status": "passed"
            },
            "line": 166,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3660171167,
              "status": "passed"
            },
            "line": 167,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4191587000,
              "status": "passed"
            },
            "line": 168,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3010734916,
              "status": "passed"
            },
            "line": 169,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22850267166,
              "status": "passed"
            },
            "line": 170,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${confirmdetails.text}"
                ],
                "line": 171
              },
              {
                "cells": [
                  "${confirmdetails.text2}"
                ],
                "line": 172
              },
              {
                "cells": [
                  "${service num}"
                ],
                "line": 173
              },
              {
                "cells": [
                  "${issuing org}"
                ],
                "line": 174
              },
              {
                "cells": [
                  "${specialisation}"
                ],
                "line": 175
              },
              {
                "cells": [
                  "${service offered}"
                ],
                "line": 176
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6948476500,
              "status": "passed"
            },
            "line": 177,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005229542,
              "status": "passed"
            },
            "line": 178,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2252345625,
              "status": "passed"
            },
            "line": 179,
            "name": "I click Agree button \"Terms and Conditions\" confirm screen",
            "match": {
              "arguments": [
                {
                  "val": "Terms and Conditions",
                  "offset": 22
                }
              ],
              "location": "DieticianSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3495711958,
              "status": "passed"
            },
            "line": 180,
            "name": "I clicks on \"Terms and Conditions\" text in app screen",
            "match": {
              "arguments": [
                {
                  "val": "Terms and Conditions",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.ClickConfirmTexts(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 100500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 386750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 182,
        "name": "Verify User should be able to navigate to schedule Calendar page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-schedule-calendar-page",
        "after": [
          {
            "result": {
              "duration": 2613667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2707542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5008058750,
              "status": "passed"
            },
            "line": 183,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5168620625,
              "status": "passed"
            },
            "line": 184,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${conversation.history.text}"
                ],
                "line": 185
              },
              {
                "cells": [
                  "${no.appointmnt.now.text}"
                ],
                "line": 186
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2506333375,
              "status": "passed"
            },
            "line": 187,
            "name": "User verify following dynamic texts are displayed in Dietician screen",
            "match": {
              "location": "DieticianSteps.verifyDynamicTextOnDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${click.manage.your.availibility.text}"
                ],
                "line": 188
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25983245666,
              "status": "passed"
            },
            "line": 189,
            "name": "I clicks on \"${schedule.cal.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${schedule.cal.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6335000500,
              "status": "passed"
            },
            "line": 190,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${calendar.text}"
                ],
                "line": 191
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2470662208,
              "status": "passed"
            },
            "line": 192,
            "name": "I Select the Date in calendar field",
            "match": {
              "location": "DieticianSteps.Select_Date_Field()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3573285584,
              "status": "passed"
            },
            "line": 193,
            "name": "I click the Select Your Availability icon in calendar screen",
            "match": {
              "location": "DieticianSteps.SelectAvailiablityScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36381834125,
              "status": "passed"
            },
            "line": 194,
            "name": "I clicks on \"10:00 AM\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "10:00 AM",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Dietician Positive Flow for Doctor functionality on one pulse App",
    "description": "",
    "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/health/Dietician_Doctor.feature",
    "tags": [
      {
        "line": 1,
        "name": "@Dietician_my"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@Dietician_doctor_my"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 170875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 261625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 2264875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2250042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 102096958,
              "status": "passed"
            },
            "line": 6,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 146083,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10445714958,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2010114708,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 67567697500,
              "status": "passed"
            },
            "line": 10,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2015041583,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24282695209,
              "status": "passed"
            },
            "line": 12,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2008742250,
              "status": "passed"
            },
            "line": 13,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7692941375,
              "status": "passed"
            },
            "line": 14,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006252792,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 40011551667,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 17
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 19
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 20
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1770275750,
              "status": "passed"
            },
            "line": 21,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6574601917,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36087793667,
              "status": "passed"
            },
            "line": 23,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2007589500,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 138090234458,
              "status": "passed"
            },
            "line": 25,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21393031583,
              "status": "passed"
            },
            "line": 26,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4011375125,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 621875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 59917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 29,
        "name": "User should be able to access my family vaccination calendar",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;user-should-be-able-to-access-my-family-vaccination-calendar",
        "after": [
          {
            "result": {
              "duration": 526667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2001083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 38197159375,
              "status": "passed"
            },
            "line": 30,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2012585958,
              "status": "passed"
            },
            "line": 31,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 394059000,
              "status": "passed"
            },
            "line": 32,
            "name": "I click on vaccine calendar tile",
            "match": {
              "location": "VaccineCalendarSteps.iClicksOnVaccineCalTile()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005138500,
              "status": "passed"
            },
            "line": 33,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1695655875,
              "status": "passed"
            },
            "line": 34,
            "name": "User verifies following texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyVaccineCalText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccineCalendar.title}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${vaccineCalendar.description}"
                ],
                "line": 36
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 114250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 58917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "Verify the user can Add Vaccine Information",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;verify-the-user-can-add-vaccine-information",
        "after": [
          {
            "result": {
              "duration": 85917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1170208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1169425209,
              "status": "passed"
            },
            "line": 40,
            "name": "I click on Add more button in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.clickAddMoreBtn()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2005310792,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6861596083,
              "status": "passed"
            },
            "line": 42,
            "name": "User verifies following texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyVaccineCalText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccineCalendar.addMore.Title}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${vaccineCalendar.addMore.relation}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${vaccineCalendar.addMore.name}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${vaccineCalendar.addMore.dob}"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4714141083,
              "status": "passed"
            },
            "line": 47,
            "name": "User verifies following buttons are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyVaccineCalButtons(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccineCalendar.addMore.cancelButton}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${vaccineCalendar.addMore.saveButton}"
                ],
                "line": 49
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 233583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 225125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 51,
        "name": "enter information on add vaccination popup",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;enter-information-on-add-vaccination-popup",
        "after": [
          {
            "result": {
              "duration": 98292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 186000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2411125,
              "status": "passed"
            },
            "line": 52,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "relation",
                  "Child"
                ],
                "line": 53
              },
              {
                "cells": [
                  "name",
                  "testing_one"
                ],
                "line": 54
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10961938000,
              "status": "passed"
            },
            "line": 55,
            "name": "I add following information in Vaccine Calendar add information screen",
            "match": {
              "location": "VaccineCalendarSteps.enterAddInformationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Name",
                  "${name}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "Relation",
                  "${relation}"
                ],
                "line": 57
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2003394917,
              "status": "passed"
            },
            "line": 58,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1092374041,
              "status": "passed"
            },
            "line": 59,
            "name": "I click on \"${vaccineCalendar.addMore.saveButton}\" button in Vaccine Calendar screen",
            "match": {
              "arguments": [
                {
                  "val": "${vaccineCalendar.addMore.saveButton}",
                  "offset": 12
                }
              ],
              "location": "VaccineCalendarSteps.clickBtnOnVaccineScreen(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 97792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 54917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 62,
        "name": "Verify the added item displayed on the Vaccine Schedule screen",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;verify-the-added-item-displayed-on-the-vaccine-schedule-screen",
        "after": [
          {
            "result": {
              "duration": 1182833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1346334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2005272708,
              "status": "passed"
            },
            "line": 63,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3261296292,
              "status": "passed"
            },
            "line": 64,
            "name": "User verifies following dynamic texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyDynamicTextOnVaccineCal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${relation}"
                ],
                "line": 65
              },
              {
                "cells": [
                  "${name}"
                ],
                "line": 66
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1754818709,
              "status": "passed"
            },
            "line": 67,
            "name": "I click on \"${name} ${relation}\" button in Vaccine Calendar screen",
            "match": {
              "arguments": [
                {
                  "val": "${name} ${relation}",
                  "offset": 12
                }
              ],
              "location": "VaccineCalendarSteps.clickBtnOnVaccineScreen(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2047125250,
              "status": "passed"
            },
            "line": 68,
            "name": "I click on \"${vaccineCalendar.continue.button}\" button in Vaccine Calendar screen",
            "match": {
              "arguments": [
                {
                  "val": "${vaccineCalendar.continue.button}",
                  "offset": 12
                }
              ],
              "location": "VaccineCalendarSteps.clickBtnOnVaccineScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006815250,
              "status": "passed"
            },
            "line": 69,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19038131000,
              "status": "passed"
            },
            "line": 70,
            "name": "User verifies following texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyVaccineCalText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccineCalendar.select.child.text}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "${vaccine.text}"
                ],
                "line": 72
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9830906542,
              "status": "passed"
            },
            "comments": [
              {
                "line": 73,
                "value": "#      | ${next.vaccine.due.text}             |"
              }
            ],
            "line": 74,
            "name": "User verifies following dynamic texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyDynamicTextOnVaccineCal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${name}"
                ],
                "line": 75
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19498400625,
              "status": "passed"
            },
            "comments": [
              {
                "line": 76,
                "value": "#And I verify the following texts \"Vaccine Schedule\" in Screen"
              }
            ],
            "line": 77,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccine.bcg.text}"
                ],
                "line": 78
              },
              {
                "cells": [
                  "${vaccine.hep.text}"
                ],
                "line": 79
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 653625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 25875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 81,
        "name": "Verify reminder options in vaccine schedule",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;verify-reminder-options-in-vaccine-schedule",
        "after": [
          {
            "result": {
              "duration": 606291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1665291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10986015584,
              "status": "passed"
            },
            "line": 82,
            "name": "I click reminder icon for BCG vaccine",
            "match": {
              "location": "VaccineCalendarSteps.iClickReminderIconForBCGVaccine()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9326899333,
              "status": "passed"
            },
            "line": 83,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${reminder.popup.text}"
                ],
                "line": 84
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11125413625,
              "status": "passed"
            },
            "line": 85,
            "name": "I click NO option",
            "match": {
              "location": "VaccineCalendarSteps.iClickNOOption()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 360833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "Verify change reminder functionality in vaccine schedule screen",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;verify-change-reminder-functionality-in-vaccine-schedule-screen",
        "after": [
          {
            "result": {
              "duration": 6052834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 874791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 24136903250,
              "status": "passed"
            },
            "line": 88,
            "name": "I click Yes option",
            "match": {
              "location": "VaccineCalendarSteps.iClickYesOption()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify that user can manage events via the Family Vaccine Calendar feature",
    "description": "",
    "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature",
    "keyword": "Feature",
    "uri": "features/my/health/FamilyVaccineCalendar.feature",
    "tags": [
      {
        "line": 1,
        "name": "@familyVaccine_my"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@Vaccine"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 142000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 218208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1591000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1123541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12242753417,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 63557333,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 63324291083,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26527926208,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10015883708,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1680923875,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 519292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 128084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 827042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 609625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4167022833,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 72578447958,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1720153166,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5016218875,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11367919417,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22588259041,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 23,
            "value": "#  Scenario: User should be able to access Dengue Alert screen"
          },
          {
            "line": 24,
            "value": "#    And I clicks on Dengue Alert tile"
          },
          {
            "line": 25,
            "value": "##   Add the permission grant implementation similar to \"I clicks on My Environment icon\" step"
          },
          {
            "line": 26,
            "value": "#    Then I verify following texts are displayed"
          },
          {
            "line": 27,
            "value": "#      |${dengueAlert.home.title}|"
          },
          {
            "line": 28,
            "value": "#      |${dengueAlert.home.description}|"
          },
          {
            "line": 29,
            "value": "#      |${dengueAlert.home.T\u0026Cconcent}|"
          },
          {
            "line": 30,
            "value": "#      |${dengueAlert.home.aime}|"
          },
          {
            "line": 31,
            "value": "#      And User verifies the T\u0026C link is accessible"
          },
          {
            "line": 32,
            "value": "#      |${dengueAlert.home.T\u0026CLink}|"
          },
          {
            "line": 33,
            "value": "#      When the user accepts the T\u0026C"
          },
          {
            "line": 34,
            "value": "#      And click on Proceed button"
          },
          {
            "line": 35,
            "value": "#      |${dengueAlert.home.proceedButto}|"
          },
          {
            "line": 38,
            "value": "#    If it is required to verify the outbreak \u0026 cases values for other countries, then repeat the Outbreak \u0026 Cases Scenarios"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 292209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 58792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 40,
        "name": "Verify the map can be expanded",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;verify-the-map-can-be-expanded",
        "after": [
          {
            "result": {
              "duration": 438375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 167000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2005985042,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 40065609250,
              "status": "passed"
            },
            "line": 42,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22452512750,
              "status": "passed"
            },
            "line": 43,
            "name": "I clicks on Dengue Alert tile",
            "match": {
              "location": "DengueAlertSteps.clickDengueAlertTile()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7580972583,
              "status": "passed"
            },
            "line": 44,
            "name": "I click on the mapImage",
            "match": {
              "location": "DengueAlertSteps.clickMap()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2984500,
              "status": "passed"
            },
            "line": 45,
            "name": "I click on map back button",
            "match": {
              "location": "DengueAlertSteps.clickMapBackButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 579583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 303166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 47,
        "name": "User should be able to vew the Dengue Outbreak - Malaysia",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;user-should-be-able-to-vew-the-dengue-outbreak---malaysia",
        "after": [
          {
            "result": {
              "duration": 2358167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2242709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15666983750,
              "status": "passed"
            },
            "line": 48,
            "name": "I verify the following texts \"Dengue Alert\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Dengue Alert",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Malaysia"
                ],
                "line": 49
              },
              {
                "cells": [
                  "Outbreaks"
                ],
                "line": 50
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25059348166,
              "status": "passed"
            },
            "line": 51,
            "name": "I verify following dynamic static text is displayed in Dengue Alert Screen",
            "match": {
              "location": "DengueAlertSteps.isDynamicStaticTextDisplayedOnDengueAlertScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.outbreak.new}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.thisWeek}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.total}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.deaths}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.thisWeek}"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6054612375,
              "status": "passed"
            },
            "line": 57,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.outbreak.total.title}"
                ],
                "line": 58
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6557732583,
              "status": "passed"
            },
            "comments": [
              {
                "line": 59,
                "value": "#    Verify the value displayed in this section matches with the value displayed in the summary section"
              },
              {
                "line": 60,
                "value": "#      Validate the dropdown value selection - Current values\u003d Weekly (dengueAlert.outbreak.dropdownValue1)"
              }
            ],
            "line": 61,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 7916376667,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zonal.title}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "${dengueAlert.zonal.country}"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30316414750,
              "status": "passed"
            },
            "comments": [
              {
                "line": 65,
                "value": "#      Validate the dropdown value selection - Current values\u003d Weekly (dengueAlert.outbreak.dropdownValue1)"
              }
            ],
            "line": 66,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zone1}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "${dengueAlert.zone2}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${dengueAlert.zone3}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${dengueAlert.zone4}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "${dengueAlert.zone5}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "${dengueAlert.zone6}"
                ],
                "line": 72
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7084861209,
              "status": "passed"
            },
            "line": 73,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 47773292625,
              "status": "passed"
            },
            "line": 74,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zone7}"
                ],
                "line": 75
              },
              {
                "cells": [
                  "${dengueAlert.zone8}"
                ],
                "line": 76
              },
              {
                "cells": [
                  "${dengueAlert.zone9}"
                ],
                "line": 77
              },
              {
                "cells": [
                  "${dengueAlert.zone10}"
                ],
                "line": 78
              },
              {
                "cells": [
                  "${dengueAlert.zone11}"
                ],
                "line": 79
              },
              {
                "cells": [
                  "${dengueAlert.zone12}"
                ],
                "line": 80
              },
              {
                "cells": [
                  "${dengueAlert.zone13}"
                ],
                "line": 81
              },
              {
                "cells": [
                  "${dengueAlert.zone14}"
                ],
                "line": 82
              },
              {
                "cells": [
                  "${dengueAlert.zone15}"
                ],
                "line": 83
              },
              {
                "cells": [
                  "${dengueAlert.zone16}"
                ],
                "line": 84
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 210542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1657250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "User should be able to vew the Dengue Cases - Malaysia",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;user-should-be-able-to-vew-the-dengue-cases---malaysia",
        "after": [
          {
            "result": {
              "duration": 1238042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 937458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 33533029000,
              "status": "passed"
            },
            "line": 88,
            "name": "I scroll up till \"${dengue.alert.map}\" element displayed",
            "match": {
              "arguments": [
                {
                  "val": "${dengue.alert.map}",
                  "offset": 18
                }
              ],
              "location": "BaseSteps.scrollTillElementDisplayed(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10262260750,
              "status": "passed"
            },
            "line": 89,
            "name": "I select \"Cases\" from outbreaks dropdown",
            "match": {
              "arguments": [
                {
                  "val": "Cases",
                  "offset": 10
                }
              ],
              "location": "DengueAlertSteps.selectFromOutBreakDropdown(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27041727208,
              "status": "passed"
            },
            "line": 90,
            "name": "I verify following dynamic static text is displayed in Dengue Alert Screen",
            "match": {
              "location": "DengueAlertSteps.isDynamicStaticTextDisplayedOnDengueAlertScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.cases.new}"
                ],
                "line": 91
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.thisWeek}"
                ],
                "line": 92
              },
              {
                "cells": [
                  "${dengueAlert.cases.total}"
                ],
                "line": 93
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.deaths}"
                ],
                "line": 94
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.thisWeek}"
                ],
                "line": 95
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5101714417,
              "status": "passed"
            },
            "line": 96,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.cases.total.title}"
                ],
                "line": 97
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9832459417,
              "status": "passed"
            },
            "comments": [
              {
                "line": 98,
                "value": "#    Verify the value displayed in this section matches with the value displayed in the summary section"
              },
              {
                "line": 99,
                "value": "#      Validate the dropdown value selection - Current values\u003d Weekly (dengueAlert.outbreak.dropdownValue1)"
              }
            ],
            "line": 100,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zonal.title}"
                ],
                "line": 101
              },
              {
                "cells": [
                  "${dengueAlert.zonal.country}"
                ],
                "line": 102
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9324166167,
              "status": "passed"
            },
            "line": 103,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 26043374000,
              "status": "passed"
            },
            "comments": [
              {
                "line": 104,
                "value": "#      Validate the dropdown value selection - Current values\u003d Weekly (dengueAlert.outbreak.dropdownValue1)"
              }
            ],
            "line": 105,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zone1}"
                ],
                "line": 106
              },
              {
                "cells": [
                  "${dengueAlert.zone2}"
                ],
                "line": 107
              },
              {
                "cells": [
                  "${dengueAlert.zone3}"
                ],
                "line": 108
              },
              {
                "cells": [
                  "${dengueAlert.zone4}"
                ],
                "line": 109
              },
              {
                "cells": [
                  "${dengueAlert.zone5}"
                ],
                "line": 110
              },
              {
                "cells": [
                  "${dengueAlert.zone6}"
                ],
                "line": 111
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7142632209,
              "status": "passed"
            },
            "line": 112,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 51816428959,
              "status": "passed"
            },
            "line": 113,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zone7}"
                ],
                "line": 114
              },
              {
                "cells": [
                  "${dengueAlert.zone8}"
                ],
                "line": 115
              },
              {
                "cells": [
                  "${dengueAlert.zone9}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "${dengueAlert.zone10}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "${dengueAlert.zone11}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "${dengueAlert.zone12}"
                ],
                "line": 119
              },
              {
                "cells": [
                  "${dengueAlert.zone13}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "${dengueAlert.zone14}"
                ],
                "line": 121
              },
              {
                "cells": [
                  "${dengueAlert.zone15}"
                ],
                "line": 122
              },
              {
                "cells": [
                  "${dengueAlert.zone16}"
                ],
                "line": 123
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify that user can access Dengue Alert feature",
    "description": "",
    "id": "verify-that-user-can-access-dengue-alert-feature",
    "keyword": "Feature",
    "uri": "features/my/home/DengueAlert.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@iOSdropDownTest"
      },
      {
        "line": 1,
        "name": "@dengueAlert"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 93792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 565458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 2668584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 3620541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 150997209,
              "status": "passed"
            },
            "line": 5,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 788083,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10744418209,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005483292,
              "status": "passed"
            },
            "line": 8,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 60227596917,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2010697959,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27277965542,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005708208,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10002302083,
              "status": "passed"
            },
            "line": 13,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005207666,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 38267319625,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 16
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1853052959,
              "status": "passed"
            },
            "line": 20,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5221859583,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 39216276083,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2013362167,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 175215566875,
              "status": "passed"
            },
            "line": 24,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19552023292,
              "status": "passed"
            },
            "line": 25,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4014943417,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 794292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 954834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 28,
        "name": "Navigate to PRU Shoppe screen",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;navigate-to-pru-shoppe-screen",
        "after": [
          {
            "result": {
              "duration": 66708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 68833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2273199125,
              "status": "passed"
            },
            "line": 29,
            "name": "I click on pru shoppe button on the home page",
            "match": {
              "location": "PruShoppeSteps.navigateToPruShoppeHomePage()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 49584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 471000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 31,
        "name": "Verify User should be able to see the infectious disease cover screen options",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-screen-options",
        "after": [
          {
            "result": {
              "duration": 1376667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2187209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2631855500,
              "status": "passed"
            },
            "line": 32,
            "name": "I click on Proceed button on prushoppe screen",
            "match": {
              "location": "PruShoppeSteps.clickOnProceedBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5001813459,
              "status": "passed"
            },
            "line": 33,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2220555333,
              "status": "passed"
            },
            "line": 34,
            "name": "I click on pru infectious disease cover tile on prushoppe screen",
            "match": {
              "location": "PruShoppeSteps.navigateToInfectiousDisease()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5005167959,
              "status": "passed"
            },
            "line": 35,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12979566250,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${infectious.disease.cover.text}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.1}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.2}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.3}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.4}"
                ],
                "line": 41
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17573065250,
              "status": "passed"
            },
            "line": 42,
            "name": "user click on following button \"${show.more.text}\" on prushoppe screen",
            "match": {
              "arguments": [
                {
                  "val": "${show.more.text}",
                  "offset": 32
                }
              ],
              "location": "PruShoppeSteps.clickButtonOnPrushoppeScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6661303959,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${infectious.disease.cover.info.5}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.6}"
                ],
                "line": 45
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35111131625,
              "status": "passed"
            },
            "line": 46,
            "name": "user click on following button \"${show.less.text}\" on prushoppe screen",
            "match": {
              "arguments": [
                {
                  "val": "${show.less.text}",
                  "offset": 32
                }
              ],
              "location": "PruShoppeSteps.clickButtonOnPrushoppeScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 75782552875,
              "status": "passed"
            },
            "line": 47,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${infectious.disease.disclosure.text.1}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.2}"
                ],
                "line": 49
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.3}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.4}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.5}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.6}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.7}"
                ],
                "line": 54
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7228921375,
              "status": "passed"
            },
            "line": 55,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${your.details.text}"
                ],
                "line": 56
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6582061208,
              "status": "passed"
            },
            "comments": [
              {
                "line": 57,
                "value": "#      | ${scan.your.id.text} |"
              },
              {
                "line": 58,
                "value": "#      | ${nric.no.text}      |"
              }
            ],
            "line": 59,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16522917084,
              "status": "passed"
            },
            "line": 60,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.name.as.nric.text}"
                ],
                "line": 61
              },
              {
                "cells": [
                  "${infectious.disease.gender.text}"
                ],
                "line": 62
              },
              {
                "cells": [
                  "${infectious.disease.dob}"
                ],
                "line": 63
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1285125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1260458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "Verify User should be able to see the infectious disease cover Screen options",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-screen-options",
        "after": [
          {
            "result": {
              "duration": 217834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 414292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 35756457583,
              "status": "passed"
            },
            "line": 66,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.residential.text}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "${my.country.of.residence}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${my.resedential.status}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${email.text}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "${my.country.code}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "${my.mobile.phone.number}"
                ],
                "line": 72
              },
              {
                "cells": [
                  "${my.referral.code}"
                ],
                "line": 73
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6473994125,
              "status": "passed"
            },
            "line": 74,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8900800750,
              "status": "passed"
            },
            "line": 75,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${payment.summary.text}"
                ],
                "line": 76
              },
              {
                "cells": [
                  "${insurance.premium.text}"
                ],
                "line": 77
              },
              {
                "cells": [
                  "${total.premium.text}"
                ],
                "line": 78
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7095711833,
              "status": "passed"
            },
            "line": 79,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 82291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 481250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 86,
        "name": "Verify User should be able to see the infectious disease cover term and condition",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-term-and-condition;;2",
        "after": [
          {
            "result": {
              "duration": 522750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 25917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6281733417,
              "status": "passed"
            },
            "line": 83,
            "name": "User accept the term and conitions \"${infectious.disease.tnc.1}\" in infectious disease cover Screen",
            "match": {
              "arguments": [
                {
                  "val": "${infectious.disease.tnc.1}",
                  "offset": 36
                }
              ],
              "location": "PruShoppeSteps.acceptInfectiousDiseaseTerms(String)"
            },
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@prushoppeMY"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@infectiousDiseaseCover_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 372833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "Verify User should be able to see the infectious disease cover term and condition",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-term-and-condition;;3",
        "after": [
          {
            "result": {
              "duration": 211542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 18750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4371095500,
              "status": "passed"
            },
            "line": 83,
            "name": "User accept the term and conitions \"${infectious.disease.tnc.2}\" in infectious disease cover Screen",
            "match": {
              "arguments": [
                {
                  "val": "${infectious.disease.tnc.2}",
                  "offset": 36
                }
              ],
              "location": "PruShoppeSteps.acceptInfectiousDiseaseTerms(String)"
            },
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@prushoppeMY"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@infectiousDiseaseCover_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 12875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 88,
        "name": "Verify User should be able to see the infectious disease cover term and condition",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-term-and-condition;;4",
        "after": [
          {
            "result": {
              "duration": 19750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 20417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6237717417,
              "status": "passed"
            },
            "line": 83,
            "name": "User accept the term and conitions \"${infectious.disease.tnc.3}\" in infectious disease cover Screen",
            "match": {
              "arguments": [
                {
                  "val": "${infectious.disease.tnc.3}",
                  "offset": 36
                }
              ],
              "location": "PruShoppeSteps.acceptInfectiousDiseaseTerms(String)"
            },
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@prushoppeMY"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@infectiousDiseaseCover_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 60709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 89,
        "name": "Verify User should be able to see the infectious disease cover term and condition",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-term-and-condition;;5",
        "after": [
          {
            "result": {
              "duration": 544583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 23083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4299811084,
              "status": "passed"
            },
            "line": 83,
            "name": "User accept the term and conitions \"${infectious.disease.tnc.4}\" in infectious disease cover Screen",
            "match": {
              "arguments": [
                {
                  "val": "${infectious.disease.tnc.4}",
                  "offset": 36
                }
              ],
              "location": "PruShoppeSteps.acceptInfectiousDiseaseTerms(String)"
            },
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@prushoppeMY"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@infectiousDiseaseCover_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 477250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1469541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 91,
        "name": "verify that user can see agreement and proceed button",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-that-user-can-see-agreement-and-proceed-button",
        "after": [
          {
            "result": {
              "duration": 1624875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 815209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 43477418709,
              "status": "passed"
            },
            "line": 92,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${infectious.disease.tnc.3.1}"
                ],
                "line": 93
              },
              {
                "cells": [
                  "${infectious.disease.tnc.4.1}"
                ],
                "line": 94
              },
              {
                "cells": [
                  "${infectious.disease.tnc.4.2}"
                ],
                "line": 95
              },
              {
                "cells": [
                  "${infectious.disease.tnc.4.3}"
                ],
                "line": 96
              },
              {
                "cells": [
                  "${infectious.disease.tnc.4.4}"
                ],
                "line": 97
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.1}"
                ],
                "line": 98
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.2}"
                ],
                "line": 99
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.3}"
                ],
                "line": 100
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.4}"
                ],
                "line": 101
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.5}"
                ],
                "line": 102
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.6}"
                ],
                "line": 103
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4470246500,
              "status": "passed"
            },
            "line": 104,
            "name": "I verify proceed button is displayed on pru shoppe screen",
            "match": {
              "location": "PruShoppeSteps.verifyProceedBtn()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Pru infectious disease cover functionality on one pulse App",
    "description": "",
    "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/home/prushopee/PruInfectiousDiseaseCover.feature",
    "tags": [
      {
        "line": 1,
        "name": "@infectiousDiseaseCover_my"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@prushoppeMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 185708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 42375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1783875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2971791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13075378042,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 11335500,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 57973647583,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28179568458,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5017500125,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1598674125,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 151042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 48042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 6201666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 44438541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5876023416,
              "status": "passed"
            },
            "line": 13,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 53851033166,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2130932166,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5010097333,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11302032333,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24900024750,
              "status": "passed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 97833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 175625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify user can access his policies from Pru Shoppe My Policies screen",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-user-can-access-his-policies-from-pru-shoppe-my-policies-screen",
        "after": [
          {
            "result": {
              "duration": 8134250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 8540083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2531603125,
              "status": "passed"
            },
            "line": 23,
            "name": "I click on pru shoppe button on the home page",
            "match": {
              "location": "PruShoppeSteps.navigateToPruShoppeHomePage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5005841459,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31446745250,
              "status": "passed"
            },
            "line": 25,
            "name": "I click on my policies tile on prushoppe screen",
            "match": {
              "location": "PruShoppeSteps.navigateToMyPoliciesScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2010552875,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2557308833,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.title}"
                ],
                "line": 28
              },
              {
                "cells": [
                  "${myCoverage.information}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${myCoverage.InformationDescription}"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 103833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 40250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 32,
        "name": "Click on Link policy and verify screen to add policy number",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;click-on-link-policy-and-verify-screen-to-add-policy-number",
        "after": [
          {
            "result": {
              "duration": 123916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 140500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 30303165208,
              "status": "passed"
            },
            "line": 33,
            "name": "I clicks on \"${myCoverage.linkPolicyButton}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${myCoverage.linkPolicyButton}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2009427875,
              "status": "passed"
            },
            "line": 34,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1106141541,
              "status": "passed"
            },
            "line": 35,
            "name": "I hide one pulse app mobile keyboard",
            "match": {
              "location": "BaseSteps.hideKeyboard()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3499182208,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.title}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${myCoverage.policyNumber.description}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${myCoverage.policyNumber.description1}"
                ],
                "line": 39
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 95125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 99542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 41,
        "name": "Verify the error message when the Policy Number is blank",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-the-error-message-when-the-policy-number-is-blank",
        "after": [
          {
            "result": {
              "duration": 49042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 24625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 861835250,
              "status": "passed"
            },
            "line": 42,
            "name": "I click on policy number save button on my policies screen",
            "match": {
              "location": "PruShoppeSteps.clickPolicyNumSaveBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3527368083,
              "status": "passed"
            },
            "line": 43,
            "name": "I click on policy number save button on my policies screen",
            "match": {
              "location": "PruShoppeSteps.clickPolicyNumSaveBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 870558125,
              "status": "passed"
            },
            "comments": [
              {
                "line": 44,
                "value": "#    When I click on \"${myCoverage.policyNumber.saveButton}\" button on app"
              },
              {
                "line": 45,
                "value": "#    When I click on \"${myCoverage.policyNumber.saveButton}\" button on app"
              }
            ],
            "line": 46,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.errorMessage}"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 464625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 52958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 49,
        "name": "Verify the error message when the Policy Number is invalid or incorrect",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-the-error-message-when-the-policy-number-is-invalid-or-incorrect",
        "after": [
          {
            "result": {
              "duration": 71167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 4167035291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2884503375,
              "status": "passed"
            },
            "line": 50,
            "name": "I enter \"1234\" as the Policy number",
            "match": {
              "arguments": [
                {
                  "val": "1234",
                  "offset": 9
                }
              ],
              "location": "PruShoppeSteps.enterPolicyNumber(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3052939000,
              "status": "passed"
            },
            "line": 51,
            "name": "I hide one pulse app mobile keyboard",
            "match": {
              "location": "BaseSteps.hideKeyboard()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2951875750,
              "status": "passed"
            },
            "line": 52,
            "name": "I click on policy number save button on my policies screen",
            "match": {
              "location": "PruShoppeSteps.clickPolicyNumSaveBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005244584,
              "status": "passed"
            },
            "line": 53,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7939799333,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tPolicy number not found text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\n\tat ✽.Then I verify following texts are displayed(features/my/home/prushopee/PruShoppeCoverage.feature:54)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 54,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.errorMessage}"
                ],
                "line": 55
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 710917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1510625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 57,
        "name": "Verify the error message when the Cancel Button",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-the-error-message-when-the-cancel-button",
        "after": [
          {
            "result": {
              "duration": 3046500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 3116938125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3456591833,
              "status": "passed"
            },
            "line": 58,
            "name": "I click on policy number cancel button on my policies screen",
            "match": {
              "location": "PruShoppeSteps.clickPolicyNumCancelBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 46332730042,
              "error_message": "java.lang.AssertionError: expected [true] but found [false]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat org.testng.Assert.failNotEquals(Assert.java:513)\n\tat org.testng.Assert.assertTrue(Assert.java:42)\n\tat org.testng.Assert.assertTrue(Assert.java:52)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.landingPageValidation(LoginSteps.java:92)\n\tat ✽.Then user should be landed to \"Home\" screen(features/my/home/prushopee/PruShoppeCoverage.feature:59)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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6K7U3W+9C1jee+VVCpTFSxaDj3nz5wEX5jj7pdkp27bFZWVjytZnX3hh+uzZDCtzFi2avWDBrIWLZi1aPHvx4nmv/B2aPm3yxOsunnzLL5+6+fInbrjssb/898PXXPzgH86778pzH7jy3Ceu+8mM2y994Y6LXnvyd+8+f+3HL928fP4dq165Z917kzZv+OSTtWs/35OxMT09Ky87OystJ31bfvrWvPRNGZuXbV37iVguzRBL9haK82VysVwhksshiZLyLgq1BlJpNVg1dmVmTH/rw6nvr7r4maVXTX/rninTlqz44o4XXr1p/qfvrN+6dPO2pZu3v78x5ZOUXfAoDCufbk//mGZl3oerJi/HYnR9AAANbklEQVR644Gnnr3n0Un3PPrYrX+795a7x0PX3nzTFX+4asG7S7l+Baz89PwfX/qT8y696LxfXHz+r392/m9/fv5Vl19441WX3XHNLx+46arnHr590XMT3przzKevz1n/8Zublr2/bc0n29etXL96+crlyz5b9tnyFctxXLFyBaBZuRIQrcIRuIAVHAEKjsjBfOSKJC+//u7jT097YMJTDz/2zO3jH/zbfY+Ou/v+W8fd/cc///XqP157+a9+fcVvrvzfa/78+6uv+e2Vf7jx5tvH3X3f089OmzF73uTnXrjr3gevvubaS//7svMu+Ml5511w0UUXX/nb3919551Tnnpi5vPPzn1h6txpT8+e8sTsZx6feP/4P1x11c5dO7fv3PHhJx+//uYbAIVlBb6EcS04mb9gfvw1qKpyw9Ytz82cOW3WrFVr10oVCqPJVFxaCpWUlVFHrH5mc0mpSSXOVhZkqESZGnG2Ij9Dlpsuy90jzU6VZqUq8tK0ovRieVapNrdMn19hKLAUS6ylshqrsRkxgNtd52qpRSzgdnu8Ho+71U39u3aNzQ01rsY66vfL/X5snNxU5EiFZHQIiciR+n4CFehRL6aoX+HB5rumsUFRZtmrrcxX6802h7rcKi6pstTW2+obbPWNODoam+wNTdVNLpw4GpsdjS5rXYPZXq03lyt1BplKLVdrxHK5WCaDsPhnZGebLdZQJNI1nJqamlJ379qze1dq6u601NS9e3ZD+/am5mamF+Tsk+RlqWWFRq3CZFBXlBbVWCvrq+2NtdWuemd9bY2zBnEKE6zQ/6diEsQn1F92d1JhSi0+RcMW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",
                "mime_type": "image/png"
              }
            ],
            "line": 59,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify Pru Shoppe My Coverage functionality on one pulse App",
    "description": "",
    "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/home/prushopee/PruShoppeCoverage.feature",
    "tags": [
      {
        "line": 1,
        "name": "@PruShoppe_my_coverage"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@prushoppeMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 606250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2263125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 1028084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 6738166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12101016083,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 19903833,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 67503257833,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25728689083,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10023456208,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1652924792,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 423167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 413625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 646167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1138542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6896394542,
              "status": "passed"
            },
            "line": 13,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 73965392041,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1340733375,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5009568209,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14997800416,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22004974500,
              "status": "passed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 372834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 425792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify User should be able to navigate to wealth page",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-wealth-page",
        "after": [
          {
            "result": {
              "duration": 2345041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1096060959,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 33606061458,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: connect ECONNREFUSED 127.0.0.1:8100\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\n\tat com.prudential.tap.appium.AppiumCommands.swipe(AppiumCommands.java:432)\n\tat com.onepulse.app.screens.TestBasePage.scrollPageDown(TestBasePage.java:206)\n\tat com.onepulse.app.screens.WealthScreen.clickWealthChannelTileForMalaysia(WealthScreen.java:573)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.clickWealthChannelTileMalaysia(WealthSteps.java:338)\n\tat ✽.And I click the Wealth Channel tile for Malaysia(features/my/wealth/WealthChannel.feature:23)\n",
              "status": "failed"
            },
            "line": 23,
            "name": "I click the Wealth Channel tile for Malaysia",
            "match": {
              "location": "WealthSteps.clickWealthChannelTileMalaysia()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 24,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Wealth Channels"
                ],
                "line": 25
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 26,
            "name": "I verify following tile texts are displayed on wealth channel screen",
            "match": {
              "location": "WealthSteps.verifyTileTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Investing 123"
                ],
                "line": 27
              },
              {
                "cells": [
                  "Equip yourself with the basic investment tools"
                ],
                "line": 28
              },
              {
                "cells": [
                  "First Steps"
                ],
                "line": 29
              },
              {
                "cells": [
                  "The importance of investor education"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 32,
            "name": "I verify following tile texts are displayed on wealth channel screen",
            "match": {
              "location": "WealthSteps.verifyTileTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Remove The Weeds"
                ],
                "line": 33
              },
              {
                "cells": [
                  "Dispel investment myths to achieve desired investment outcomes"
                ],
                "line": 34
              },
              {
                "cells": [
                  "Mutual Funds"
                ],
                "line": 35
              },
              {
                "cells": [
                  "Make mutual funds your first investment stop"
                ],
                "line": 36
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 229583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 120625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 38,
        "name": "Verify User should be able to view the story post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-view-the-story-post",
        "after": [
          {
            "result": {
              "duration": 594417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1015927500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12165906458,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: connect ECONNREFUSED 127.0.0.1:8100\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\n\tat com.onepulse.app.screens.TestBasePage.scrollPageUP(TestBasePage.java:379)\n\tat com.onepulse.app.screens.WealthScreen.clickWealthChannelTopic(WealthScreen.java:127)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iClickOnWealthChannelTopic(WealthSteps.java:59)\n\tat ✽.Then I click on \"Mutual Funds\" wealth channel topic(features/my/wealth/WealthChannel.feature:39)\n",
              "status": "failed"
            },
            "line": 39,
            "name": "I click on \"Mutual Funds\" wealth channel topic",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnWealthChannelTopic(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 40,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 41,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Mutual Funds"
                ],
                "line": 42
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "I verify following tile texts are displayed on wealth channel screen",
            "match": {
              "location": "WealthSteps.verifyTileTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Make mutual funds your first investment stop"
                ],
                "line": 44
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "I verify following social cite options are displayed",
            "match": {
              "location": "WealthSteps.iVerifyFollowingSocialCiteOptionsAreDisplayed(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Like"
                ],
                "line": 46
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 47
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 48
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 23208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 50,
        "name": "Verify User should be able to Like the post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-like-the-post",
        "after": [
          {
            "result": {
              "duration": 2588666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1069542042,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 47599735500,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Like\"])[1]/preceding::XCUIElementTypeOther[4]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$22.executeCommand(Commands.java:201)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.getElementAttributeValue(TestBasePage.java:594)\n\tat com.onepulse.app.screens.WealthScreen.readLikeCount(WealthScreen.java:186)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iReadThePostLikeCount(WealthSteps.java:85)\n\tat ✽.And I read the \"Mutual Funds\" post like count(features/my/wealth/WealthChannel.feature:51)\n",
              "status": "failed"
            },
            "line": 51,
            "name": "I read the \"Mutual Funds\" post like count",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iReadThePostLikeCount(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 52,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 53,
            "name": "I verify \"Mutual Funds\" post like count is increased",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 10
                }
              ],
              "location": "WealthSteps.iVerifyPostLikeCountIsIncreased(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 54,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 50333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 177958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 56,
        "name": "Verify User should be able to Share the post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-share-the-post",
        "after": [
          {
            "result": {
              "duration": 6478917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1023323917,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12654632666,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Share\"])[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.WealthScreen.clickShareButton(WealthScreen.java:215)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iShareThePost(WealthSteps.java:90)\n\tat ✽.And I share the post(features/my/wealth/WealthChannel.feature:57)\n",
              "status": "failed"
            },
            "line": 57,
            "name": "I share the post",
            "match": {
              "location": "WealthSteps.iShareThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "I Verify the share with friends popup",
            "match": {
              "location": "WealthSteps.iVerifyTheShareWithFriendsPopup()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 716583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 423250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 60,
        "name": "Verify User should be able to Comment the post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-comment-the-post",
        "after": [
          {
            "result": {
              "duration": 214417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1008934250,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 18188694083,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Like\"])[1]/preceding::XCUIElementTypeOther[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$22.executeCommand(Commands.java:201)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.getElementAttributeValue(TestBasePage.java:594)\n\tat com.onepulse.app.screens.WealthScreen.readCommentCount(WealthScreen.java:240)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iReadThePostCommentCount(WealthSteps.java:100)\n\tat ✽.And I read the \"Mutual Funds\" post comment count(features/my/wealth/WealthChannel.feature:61)\n",
              "status": "failed"
            },
            "line": 61,
            "name": "I read the \"Mutual Funds\" post comment count",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iReadThePostCommentCount(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "I commented in the post \"${wealth.topic.comment}\"",
            "match": {
              "arguments": [
                {
                  "val": "${wealth.topic.comment}",
                  "offset": 25
                }
              ],
              "location": "WealthSteps.iCommentedInThePost(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 63,
            "name": "I verify \"Mutual Funds\" post comment count is increased",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 10
                }
              ],
              "location": "WealthSteps.iVerifyPostCommentCountIsIncreased(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 42167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "Verify User should be able to view the full page article post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-view-the-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 622833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1049105458,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 32630577417,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeStaticText[@name\u003d\"Mutual Funds\"]/following:: XCUIElementTypeScrollView[1]/XCUIElementTypeOther/XCUIElementTypeOther[2]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.WealthScreen.clickWealthChannelTopicDetailView(WealthScreen.java:135)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iClickOnTopicForDetailsFullView(WealthSteps.java:64)\n\tat ✽.Then I click on \"Mutual Funds\" topic for details full view(features/my/wealth/WealthChannel.feature:66)\n",
              "status": "failed"
            },
            "line": 66,
            "name": "I click on \"Mutual Funds\" topic for details full view",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnTopicForDetailsFullView(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 68,
        "name": "Verify User should be able to see the Like, Share, Comment options on full page article post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-like,-share,-comment-options-on-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 46792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021487459,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3008379333,
              "status": "passed"
            },
            "line": 69,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17224807541,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: connect ECONNREFUSED 127.0.0.1:8100\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\n\tat com.prudential.tap.appium.AppiumCommands.swipe(AppiumCommands.java:432)\n\tat com.onepulse.app.screens.TestBasePage.scrollPageDown(TestBasePage.java:206)\n\tat com.onepulse.app.screens.WealthScreen.isWealthStaticTextDisplayed(WealthScreen.java:527)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iVerifyFollowingSocialCiteOptionsAreDisplayed(WealthSteps.java:317)\n\tat ✽.And I verify following social cite options are displayed(features/my/wealth/WealthChannel.feature:70)\n",
              "status": "failed"
            },
            "line": 70,
            "name": "I verify following social cite options are displayed",
            "match": {
              "location": "WealthSteps.iVerifyFollowingSocialCiteOptionsAreDisplayed(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Like"
                ],
                "line": 71
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 72
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 73
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 58125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 75,
        "name": "Verify User should be able to Like the post in full article view screen",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-like-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 327084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021380959,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 28809623083,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Like\"])[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.WealthScreen.clickLikeButton(WealthScreen.java:175)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iLikeThePost(WealthSteps.java:75)\n\tat ✽.And I Like the post(features/my/wealth/WealthChannel.feature:76)\n",
              "status": "failed"
            },
            "line": 76,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 77,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 84584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 79,
        "name": "Verify User should be able to Share the post in full article view screen",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-share-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 656875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1020678375,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12184160042,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Share\"])[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.WealthScreen.clickShareButton(WealthScreen.java:215)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iShareThePost(WealthSteps.java:90)\n\tat ✽.And I share the post(features/my/wealth/WealthChannel.feature:80)\n",
              "status": "failed"
            },
            "line": 80,
            "name": "I share the post",
            "match": {
              "location": "WealthSteps.iShareThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "I navigate back to previous page",
            "match": {
              "location": "WealthSteps.iNavigateBackToPreviousPage()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 78791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 83,
        "name": "Verify User should be able to Comment the post in full article view screen",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-comment-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 353917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1013741250,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12145941375,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Comment\"])[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.WealthScreen.enterCommentOnFullViewPage(WealthScreen.java:280)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iCommentInFullViewPostArticle(WealthSteps.java:115)\n\tat ✽.And I comment in full view post article \"${wealth.topic.comment}\"(features/my/wealth/WealthChannel.feature:84)\n",
              "status": "failed"
            },
            "line": 84,
            "name": "I comment in full view post article \"${wealth.topic.comment}\"",
            "match": {
              "arguments": [
                {
                  "val": "${wealth.topic.comment}",
                  "offset": 37
                }
              ],
              "location": "WealthSteps.iCommentInFullViewPostArticle(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 31250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 86,
        "name": "Verify User can navigate to wealth homepage",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-can-navigate-to-wealth-homepage",
        "after": [
          {
            "result": {
              "duration": 14333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022361458,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3129079584,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: connect ECONNREFUSED 127.0.0.1:8100\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat io.appium.java_client.PerformsTouchActions.performTouchAction(PerformsTouchActions.java:41)\n\tat io.appium.java_client.TouchAction.perform(TouchAction.java:187)\n\tat com.onepulse.app.screens.TestBasePage.clickBasedOnElementLocation(TestBasePage.java:449)\n\tat com.onepulse.app.screens.WealthScreen.clickFullViewBackButton(WealthScreen.java:169)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iNavigateToStoryPostPage(WealthSteps.java:70)\n\tat ✽.Then I navigate to story post page(features/my/wealth/WealthChannel.feature:87)\n",
              "status": "failed"
            },
            "line": 87,
            "name": "I navigate to story post page",
            "match": {
              "location": "WealthSteps.iNavigateToStoryPostPage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 88,
            "name": "I click on \"Mutual Funds\" back button",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnBackButton(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 89,
            "name": "I click on \"Wealth Channels\" back button",
            "match": {
              "arguments": [
                {
                  "val": "Wealth Channels",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnBackButton(String)"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify wealth channel functionality on one pulse App",
    "description": "",
    "id": "verify-wealth-channel-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/wealth/WealthChannel.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_wealth_channel"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 22792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "Navigate to notification screen via home screen",
        "description": "",
        "id": "verify-notification-center-functionality-on-one-pulse-app;navigate-to-notification-screen-via-home-screen",
        "after": [
          {
            "result": {
              "duration": 124959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2099505875,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7152602959,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:95b8:7a7:1d5b:d396%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: ee1fa9d1-833b-4615-919d-92cae650c80c\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeImage/following::XCUIElementTypeOther[5]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:165)\n\tat com.onepulse.app.screens.PulseManageProfileScreen.navigateToNotificationScreenFromHomePage(PulseManageProfileScreen.java:1049)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ManageProfileSteps.navigateToNotificationScreenFromHomePage(ManageProfileSteps.java:240)\n\tat ✽.Given I navigate to notification screen from home page(features/ph/NotificationCenter.feature:66)\n",
              "status": "failed"
            },
            "line": 66,
            "name": "I navigate to notification screen from home page",
            "match": {
              "location": "ManageProfileSteps.navigateToNotificationScreenFromHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 67,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 64,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 64,
            "name": "@NotificationCenter_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 33042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 42458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 70,
        "name": "Verify User should be able to see the Notification screen texts",
        "description": "",
        "id": "verify-notification-center-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-notification-screen-texts",
        "after": [
          {
            "result": {
              "duration": 418208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022663333,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:96)\n\tat jdk.internal.reflect.GeneratedMethodAccessor43.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7177260375,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNotification Center text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\n\tat ✽.And I verify following texts are displayed(features/ph/NotificationCenter.feature:71)\n",
              "status": "failed"
            },
            "line": 71,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${notification.msg}"
                ],
                "line": 72
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 69,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 69,
            "name": "@NotificationCenter_my"
          }
        ]
      }
    ],
    "name": "Verify Notification Center functionality on one pulse App",
    "description": "",
    "id": "verify-notification-center-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/ph/NotificationCenter.feature",
    "tags": [
      {
        "line": 1,
        "name": "@NotificationCenterPH"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 133458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 450917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 912083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9561323167,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 7669875,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "# And Logout of pulse app if user is logged in"
              }
            ],
            "line": 8,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53970118625,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25952505541,
              "status": "passed"
            },
            "line": 10,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2010996666,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1414768458,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 159500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 82833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 941667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1304583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5995080041,
              "status": "passed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 69002495250,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2346029542,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10025651167,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11594990667,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18022968917,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 598875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 593166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 26,
        "name": "Verify User should be able to share the link with Whatsapp",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-whatsapp",
        "after": [
          {
            "result": {
              "duration": 12250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 14083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 20893549125,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify the share with friends links",
            "match": {
              "location": "LoginSteps.iVerifyTheShareWithFriendsLinks()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 39125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 29,
        "name": "Verify User should be able to share the link with Contacts app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-contacts-app",
        "after": [
          {
            "result": {
              "duration": 1524041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 117875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 37255490750,
              "status": "passed"
            },
            "line": 30,
            "name": "I verify the contacts share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheContactsShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 372958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 140500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 32,
        "name": "Verify User should be able to share the link with Messenger app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-messenger-app",
        "after": [
          {
            "result": {
              "duration": 12375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 14875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8526289125,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify the fb messenger share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheFbMessengerShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 58958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 57833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "Verify User should be able to share the link with Viber app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-viber-app",
        "after": [
          {
            "result": {
              "duration": 314291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 96791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27118177583,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify the Viber share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheViberShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 92375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 87125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 38,
        "name": "Verify User should be able to share the link with Line app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-line-app",
        "after": [
          {
            "result": {
              "duration": 68584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 37917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26510887167,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify the Line share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheLineShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify share with friends functionality in onepulse app",
    "description": "",
    "id": "verify-share-with-friends-functionality-in-onepulse-app",
    "keyword": "Feature",
    "uri": "features/share/ShareWithFriends.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@ShareWithFriendsE2E"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@shareWithFriends"
      }
    ]
  }
]