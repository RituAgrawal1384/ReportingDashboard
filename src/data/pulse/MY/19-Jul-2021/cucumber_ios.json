[
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 163406333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 389991667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 366750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 417333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8303395125,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8250500,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34246666209,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23156156667,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005249834,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 275042,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1365627000,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3390762041,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 61916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 30000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 341125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 575208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3464072000,
              "status": "passed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 68508543750,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1663363500,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5002398167,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13511491458,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17875776916,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 185083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 52667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 25,
        "name": "Verify the Invalid Email id in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-invalid-email-id-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 302459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1719791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6524357334,
              "status": "passed"
            },
            "line": 26,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2006173083,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 48991575125,
              "status": "passed"
            },
            "line": 28,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19189922167,
              "status": "passed"
            },
            "line": 29,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005935458,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2075850791,
              "status": "passed"
            },
            "comments": [
              {
                "line": 31,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 32,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005807500,
              "status": "passed"
            },
            "line": 33,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3518474542,
              "status": "passed"
            },
            "line": 34,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 62758371416,
              "status": "passed"
            },
            "line": 35,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "t@gmai"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1596812375,
              "status": "passed"
            },
            "comments": [
              {
                "line": 38,
                "value": "#    And I scroll down"
              }
            ],
            "line": 39,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1336937084,
              "status": "passed"
            },
            "comments": [
              {
                "line": 40,
                "value": "## need to check validation message"
              }
            ],
            "line": 41,
            "name": "verify invalid email message \"Email is required\"",
            "match": {
              "arguments": [
                {
                  "val": "Email is required",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1413662916,
              "status": "passed"
            },
            "comments": [
              {
                "line": 42,
                "value": "#    Then verify invalid email message \"E-mail is invalid\""
              }
            ],
            "line": 43,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27971448042,
              "status": "passed"
            },
            "line": 44,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "t@gmai"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1369949959,
              "status": "passed"
            },
            "line": 46,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 486000000,
              "status": "passed"
            },
            "line": 47,
            "name": "verify invalid email message \"${email.invalid.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${email.invalid.text}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 803750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 72167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 49,
        "name": "Verify the User not registerd email in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-user-not-registerd-email-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 76208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 188167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15724459,
              "status": "passed"
            },
            "line": 50,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 576250,
              "status": "passed"
            },
            "line": 51,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "USER_NAME",
                  "taf-${RANDOM_NUMBER}@mailinator.com"
                ],
                "line": 52
              },
              {
                "cells": [
                  "USER_PASSWORD",
                  "Pas$1234"
                ],
                "line": 53
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6655809375,
              "status": "passed"
            },
            "line": 54,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 30922759792,
              "status": "passed"
            },
            "line": 55,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19499086833,
              "status": "passed"
            },
            "line": 56,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006022666,
              "status": "passed"
            },
            "line": 57,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1879981792,
              "status": "passed"
            },
            "comments": [
              {
                "line": 58,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 59,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2004238792,
              "status": "passed"
            },
            "line": 60,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3406800291,
              "status": "passed"
            },
            "line": 61,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 42718587834,
              "status": "passed"
            },
            "line": 62,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${USER_NAME}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "Password",
                  "${USER_PASSWORD}"
                ],
                "line": 64
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6861520875,
              "status": "passed"
            },
            "line": 65,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1512064666,
              "status": "passed"
            },
            "line": 66,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1735373417,
              "status": "passed"
            },
            "line": 67,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1485270500,
              "status": "passed"
            },
            "line": 68,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 33589851708,
              "status": "passed"
            },
            "line": 69,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${USER_NAME}"
                ],
                "line": 70
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1360366667,
              "status": "passed"
            },
            "line": 71,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1217400375,
              "status": "passed"
            },
            "line": 72,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 167875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 118000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 75,
        "name": "User should be able to retrieve the reset password using forget password link",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;user-should-be-able-to-retrieve-the-reset-password-using-forget-password-link",
        "after": [
          {
            "result": {
              "duration": 577958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 200042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 706958,
              "status": "passed"
            },
            "line": 76,
            "name": "I assign \"${forgot.password.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${forgot.password.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 82497350375,
              "status": "passed"
            },
            "line": 77,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 78
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1280864208,
              "status": "passed"
            },
            "line": 79,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27021761916,
              "status": "passed"
            },
            "line": 80,
            "name": "I read the otp for emailid \"${PULSE_EMAIL}\" using mailsac api and store into a variable \"EMAIL_OTP\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 28
                },
                {
                  "val": "EMAIL_OTP",
                  "offset": 89
                }
              ],
              "location": "RegistrationSteps.readOTP(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5006703958,
              "status": "passed"
            },
            "line": 81,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2404100875,
              "status": "passed"
            },
            "line": 82,
            "name": "I enter \"${EMAIL_OTP}\" reset code",
            "match": {
              "arguments": [
                {
                  "val": "${EMAIL_OTP}",
                  "offset": 9
                }
              ],
              "location": "LoginSteps.enterResetOTP(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5005945541,
              "status": "passed"
            },
            "line": 83,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13661622250,
              "status": "passed"
            },
            "comments": [
              {
                "line": 84,
                "value": "## password reset success message is not displaying in ios build"
              }
            ],
            "line": 85,
            "name": "Verify message: \"${password.reset.success.text}\" for Reset Password",
            "match": {
              "arguments": [
                {
                  "val": "${password.reset.success.text}",
                  "offset": 17
                }
              ],
              "location": "LoginSteps.verifyResetPasswordMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 415959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "Verify Account should be locked after entering more than 7 times incorrect passwords",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-account-should-be-locked-after-entering-more-than-7-times-incorrect-passwords",
        "after": [
          {
            "result": {
              "duration": 657833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 6990333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3417458,
              "status": "passed"
            },
            "line": 88,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 322500,
              "status": "passed"
            },
            "line": 89,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6704483208,
              "status": "passed"
            },
            "line": 90,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006279917,
              "status": "passed"
            },
            "line": 91,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 29172473459,
              "status": "passed"
            },
            "line": 92,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 18897386125,
              "status": "passed"
            },
            "line": 93,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5002575334,
              "status": "passed"
            },
            "line": 94,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7092684583,
              "status": "passed"
            },
            "line": 95,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004606042,
              "status": "passed"
            },
            "line": 96,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20909088625,
              "status": "passed"
            },
            "line": 97,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 98
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 99
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 100
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 101
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1641176750,
              "status": "passed"
            },
            "line": 102,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8282847083,
              "status": "passed"
            },
            "line": 103,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 34197525292,
              "status": "passed"
            },
            "line": 104,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 112846396209,
              "status": "passed"
            },
            "comments": [
              {
                "line": 105,
                "value": "#    Then I wait for 10 sec"
              },
              {
                "line": 106,
                "value": "#    Then I click skip button"
              },
              {
                "line": 107,
                "value": "#    Then I wait for 5 sec"
              }
            ],
            "line": 108,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15897369500,
              "status": "passed"
            },
            "line": 109,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4002303667,
              "status": "passed"
            },
            "line": 110,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2107931500,
              "status": "passed"
            },
            "line": 111,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12268867042,
              "status": "passed"
            },
            "line": 112,
            "name": "I click the sign out from pulse app",
            "match": {
              "location": "LoginSteps.Signout_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2003718750,
              "status": "passed"
            },
            "line": 113,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 59170760916,
              "status": "passed"
            },
            "line": 114,
            "name": "I enter invalid password on login screen and verify the error message",
            "match": {
              "location": "LoginSteps.verifyInvalidPasswordErrorMsg(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 115
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 119
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 121
              },
              {
                "cells": [
                  "Pas$123##${account.locked.message}"
                ],
                "line": 122
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 111334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 112375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 144,
        "name": "Verify the Login Functionality using \"Continue with Facebook\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-login-functionality-using-\"continue-with-facebook\"",
        "after": [
          {
            "result": {
              "duration": 463666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 265375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6853321792,
              "status": "passed"
            },
            "line": 145,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2005489583,
              "status": "passed"
            },
            "line": 146,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 28649865375,
              "status": "passed"
            },
            "line": 147,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2014547583,
              "status": "passed"
            },
            "line": 148,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20495225792,
              "status": "passed"
            },
            "line": 149,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004931292,
              "status": "passed"
            },
            "line": 150,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5840904083,
              "status": "passed"
            },
            "line": 151,
            "name": "I navigate to pulse registration page and select the lang on toggle bar",
            "match": {
              "location": "RegistrationSteps.navigateToRegPageAndSelectTheLangUsingToggle()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 901599625,
              "status": "passed"
            },
            "line": 152,
            "name": "I click on connect with facebook button",
            "match": {
              "location": "RegistrationSteps.selectConnectWithFacebookBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000288916,
              "status": "passed"
            },
            "line": 153,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18680393875,
              "status": "passed"
            },
            "line": 154,
            "name": "I click the \"Email\" in Continue with Facebook",
            "match": {
              "arguments": [
                {
                  "val": "Email",
                  "offset": 13
                }
              ],
              "location": "LoginSteps.EnterFacebookLogin(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Emailid",
                  "${emailid.text}"
                ],
                "line": 155
              },
              {
                "cells": [
                  "Password",
                  "${password.texts}"
                ],
                "line": 156
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10001861250,
              "status": "passed"
            },
            "line": 157,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16024279000,
              "status": "passed"
            },
            "line": 158,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12575532459,
              "status": "passed"
            },
            "line": 159,
            "name": "I logout from onepulse app",
            "match": {
              "location": "WealthSteps.iLogoutFromOnepulseApp()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify login functionality on One pulse App",
    "description": "",
    "id": "verify-login-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/PulseLoginTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@onepulseLogins"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 62333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 59375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 6,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 384625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2485707417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4087417,
              "status": "passed"
            },
            "line": 7,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 126792,
              "status": "passed"
            },
            "line": 8,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6609943250,
              "status": "passed"
            },
            "line": 9,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005549541,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 94766878167,
              "status": "passed"
            },
            "line": 11,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005953667,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25577463083,
              "status": "passed"
            },
            "line": 13,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2001337459,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7599895625,
              "status": "passed"
            },
            "comments": [
              {
                "line": 15,
                "value": "#    Then I change the language as required on registration page"
              }
            ],
            "line": 16,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2001009000,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 29624692750,
              "status": "passed"
            },
            "line": 18,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 19
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 20
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 21
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2407640666,
              "status": "passed"
            },
            "line": 23,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9148488250,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 34420255375,
              "status": "passed"
            },
            "line": 25,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005707125,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6584986291,
              "status": "passed"
            },
            "line": 27,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "${registration.mobile.number}"
                ],
                "line": 28
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4589698166,
              "status": "passed"
            },
            "comments": [
              {
                "line": 29,
                "value": "#    And I click the continue button"
              }
            ],
            "line": 30,
            "name": "I choose my wellness goals under wellness plan screen",
            "match": {
              "location": "RegistrationSteps.iChooseMyWellnessGoalsUnderWellnessPlanScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2087058334,
              "status": "passed"
            },
            "comments": [
              {
                "line": 31,
                "value": "#    And I click the continue button"
              }
            ],
            "line": 32,
            "name": "I click the date in Date of Birth field",
            "match": {
              "location": "RegistrationSteps.enterDateOfBirth()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1528001666,
              "status": "passed"
            },
            "line": 33,
            "name": "I click the Done icon",
            "match": {
              "location": "RegistrationSteps.doneButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1746899375,
              "status": "passed"
            },
            "line": 34,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1436042291,
              "status": "passed"
            },
            "line": 35,
            "name": "I select the  Male icon",
            "match": {
              "location": "RegistrationSteps.MaleImage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1706424875,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8653741083,
              "status": "passed"
            },
            "comments": [
              {
                "line": 37,
                "value": "# And I enter my height and weight details"
              }
            ],
            "line": 38,
            "name": "I click on Calculate BMI button",
            "match": {
              "location": "RegistrationSteps.iClickOnCalculateBMIButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2725539459,
              "status": "passed"
            },
            "line": 39,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3749960958,
              "status": "passed"
            },
            "line": 40,
            "name": "I select the \"How active are you?\" in doing exercise",
            "match": {
              "arguments": [
                {
                  "val": "How active are you?",
                  "offset": 14
                }
              ],
              "location": "RegistrationSteps.iSelectTheInDoingExercise(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2014862333,
              "status": "passed"
            },
            "line": 41,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1519513125,
              "status": "passed"
            },
            "line": 42,
            "name": "I select my favorite food dietary",
            "match": {
              "location": "RegistrationSteps.iSelectMyFavoriteFoodDietary()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2696880458,
              "status": "passed"
            },
            "line": 43,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6477443792,
              "status": "passed"
            },
            "line": 44,
            "name": "I answer as \"${option.yes.text}\" to \"Any Food allergies?\"",
            "match": {
              "arguments": [
                {
                  "val": "${option.yes.text}",
                  "offset": 13
                },
                {
                  "val": "Any Food allergies?",
                  "offset": 37
                }
              ],
              "location": "RegistrationSteps.iAnswerAsTo(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3288712375,
              "status": "passed"
            },
            "line": 45,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3472268125,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify that \"Tracking your activity is trending\" is displayed",
            "match": {
              "arguments": [
                {
                  "val": "Tracking your activity is trending",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.iVerifyThatIsDisplayed(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2034420000,
              "status": "passed"
            },
            "line": 47,
            "name": "I click on connect Later button",
            "match": {
              "location": "RegistrationSteps.clickOnConnectLaterBtn()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8749322917,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 2dc59f12-2a69-425e-a646-28b179d60c6c\n*** Element info: {Using\u003dxpath, value\u003d}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.PulseRegistrationScreen.verifyWelcomeToPulseScreen(PulseRegistrationScreen.java:967)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.iSeeThatTextIsDisplayed(RegistrationSteps.java:236)\n\tat ✽.And I see that \"Welcome to Pulse\" text is displayed(features/PulseRegistrationTest.feature:49)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 48,
                "value": "#    And I click the continue button"
              }
            ],
            "line": 49,
            "name": "I see that \"Welcome to Pulse\" text is displayed",
            "match": {
              "arguments": [
                {
                  "val": "Welcome to Pulse",
                  "offset": 12
                }
              ],
              "location": "RegistrationSteps.iSeeThatTextIsDisplayed(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 50,
                "value": "#    And I click the continue button"
              }
            ],
            "line": 51,
            "name": "I see that fitness subscription exclusive offers screen is displayed",
            "match": {
              "location": "RegistrationSteps.iSeeThatFitnessSubscriptionExclusiveOffersScreenIsDisplayed()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 52,
            "name": "I click on close icon",
            "match": {
              "location": "RegistrationSteps.iClickOnCloseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 53,
                "value": "#Specific for SG reg flow"
              }
            ],
            "line": 54,
            "name": "I enter NRIC number last 4 digits \"122F\"",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 25
                },
                {
                  "val": "122F",
                  "offset": 35
                }
              ],
              "location": "RegistrationSteps.iEnterNRICNumberLastDigits(int,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 55,
                "value": "#And I click the continue button"
              }
            ],
            "line": 56,
            "name": "I click skip buttons",
            "match": {
              "location": "LoginSteps.iClickSkipsButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "I click the sign out from pulse app",
            "match": {
              "location": "LoginSteps.Signout_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "user enters password credentials in sigin screen",
            "match": {
              "location": "LoginSteps.EnterPasswordRegister(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 63
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 64,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 65,
            "name": "I wait for 8 sec",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 66,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 5,
            "name": "@regtst"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 873375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 5038708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 69,
        "name": "verify the field label on registration screen",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-field-label-on-registration-screen",
        "after": [
          {
            "result": {
              "duration": 529375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 644875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8131055000,
              "status": "passed"
            },
            "line": 70,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2006129667,
              "status": "passed"
            },
            "line": 71,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 60072166167,
              "status": "passed"
            },
            "line": 72,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005843375,
              "status": "passed"
            },
            "line": 73,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22121585542,
              "status": "passed"
            },
            "line": 74,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2002895584,
              "status": "passed"
            },
            "line": 75,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7262047875,
              "status": "passed"
            },
            "line": 76,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005691125,
              "status": "passed"
            },
            "line": 77,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5525495334,
              "status": "passed"
            },
            "comments": [
              {
                "line": 78,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 79,
            "name": "I verify following field label should be displayed on registration screen",
            "match": {
              "location": "RegistrationSteps.verifyRegistrationScreenFieldLabel(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${firstname.label.text}"
                ],
                "line": 80
              },
              {
                "cells": [
                  "${lastname.label.text}"
                ],
                "line": 81
              },
              {
                "cells": [
                  "${email.text}"
                ],
                "line": 82
              },
              {
                "cells": [
                  "${password.text}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 84,
            "value": "## below validation is not working in Android device"
          },
          {
            "line": 85,
            "value": "#      | ${country.text}         |"
          },
          {
            "line": 86,
            "value": "#      | ${language.text}        |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 87042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 265917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 89,
        "name": "verify the validation message for mandatory fields",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-validation-message-for-mandatory-fields",
        "after": [
          {
            "result": {
              "duration": 42667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 43542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1614117041,
              "status": "passed"
            },
            "line": 90,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5580749042,
              "status": "passed"
            },
            "line": 91,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${firstname.mandatoryField.message}"
                ],
                "line": 92
              },
              {
                "cells": [
                  "LastName",
                  "${lastname.mandatoryField.message}"
                ],
                "line": 93
              },
              {
                "cells": [
                  "Email",
                  "${email.mandatoryField.message}"
                ],
                "line": 94
              },
              {
                "cells": [
                  "Password",
                  "${password.validation.message}"
                ],
                "line": 95
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 276959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 874166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 106,
        "name": "verify validation message when user enters Invalid password: Pulse@1 on registration page",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-validation-message-when-user-enters-invalid-password:-\u003cinvalid-password\u003e-on-registration-page;;2",
        "after": [
          {
            "result": {
              "duration": 28709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 29500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6290106542,
              "status": "passed"
            },
            "line": 99,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "Password",
                  "Pulse@1"
                ],
                "line": 100
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2309356959,
              "status": "passed"
            },
            "line": 101,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1561794833,
              "status": "passed"
            },
            "line": 102,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Password",
                  "${password.validation.message}"
                ],
                "line": 103
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@Registrations"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionSG"
          },
          {
            "line": 1,
            "name": "@sanityTest"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 681875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 388541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 107,
        "name": "verify validation message when user enters Invalid password: Pulse123 on registration page",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-validation-message-when-user-enters-invalid-password:-\u003cinvalid-password\u003e-on-registration-page;;3",
        "after": [
          {
            "result": {
              "duration": 26875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 33375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6657261750,
              "status": "passed"
            },
            "line": 99,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "Password",
                  "Pulse123"
                ],
                "line": 100
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2319785792,
              "status": "passed"
            },
            "line": 101,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1515755291,
              "status": "passed"
            },
            "line": 102,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Password",
                  "${password.validation.message}"
                ],
                "line": 103
              }
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@Registrations"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionSG"
          },
          {
            "line": 1,
            "name": "@sanityTest"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 47333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 37083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 110,
        "name": "Verify the validation message when user enter already registered email id on registration page",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-validation-message-when-user-enter-already-registered-email-id-on-registration-page",
        "after": [
          {
            "result": {
              "duration": 448458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 72958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6725326709,
              "status": "passed"
            },
            "line": 111,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2005344625,
              "status": "passed"
            },
            "line": 112,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30627651542,
              "status": "passed"
            },
            "line": 113,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2002317584,
              "status": "passed"
            },
            "line": 114,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22510247500,
              "status": "passed"
            },
            "line": 115,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005653542,
              "status": "passed"
            },
            "line": 116,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7309045834,
              "status": "passed"
            },
            "comments": [
              {
                "line": 117,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 118,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006036916,
              "status": "passed"
            },
            "line": 119,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 29335437125,
              "status": "passed"
            },
            "line": 120,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 121
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 122
              },
              {
                "cells": [
                  "Email",
                  "${login.email.id}"
                ],
                "line": 123
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 124
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2247498083,
              "status": "passed"
            },
            "line": 125,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2756115917,
              "status": "passed"
            },
            "line": 126,
            "name": "I verify the validation error message is displayed for following field on registration page",
            "match": {
              "location": "RegistrationSteps.verifyValidationMessage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${user.exist.text}"
                ],
                "line": 127
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 103666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 58791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 130,
        "name": "Verify the mobile number screen validation using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-mobile-number-screen-validation-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 622875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 58375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10201833,
              "status": "passed"
            },
            "line": 131,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 84958,
              "status": "passed"
            },
            "line": 132,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6645957167,
              "status": "passed"
            },
            "line": 133,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2005666334,
              "status": "passed"
            },
            "line": 134,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 31581483708,
              "status": "passed"
            },
            "line": 135,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005202125,
              "status": "passed"
            },
            "line": 136,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23098364250,
              "status": "passed"
            },
            "line": 137,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006195583,
              "status": "passed"
            },
            "line": 138,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6662135167,
              "status": "passed"
            },
            "comments": [
              {
                "line": 139,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 140,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005439708,
              "status": "passed"
            },
            "line": 141,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 32121124000,
              "status": "passed"
            },
            "line": 142,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "NewAutomation"
                ],
                "line": 143
              },
              {
                "cells": [
                  "LastName",
                  "NewAutomation"
                ],
                "line": 144
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 145
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 146
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3072950125,
              "status": "passed"
            },
            "line": 147,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5792025000,
              "status": "passed"
            },
            "line": 148,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 33822504333,
              "status": "passed"
            },
            "line": 149,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10005712667,
              "status": "passed"
            },
            "line": 150,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1170344792,
              "status": "passed"
            },
            "line": 151,
            "name": "I verify the country code should be displayed correctly on phone number screen",
            "match": {
              "location": "RegistrationSteps.verifyCountryCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6357732750,
              "status": "passed"
            },
            "line": 152,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "917670"
                ],
                "line": 153
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1985828333,
              "status": "passed"
            },
            "line": 154,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005894333,
              "status": "passed"
            },
            "line": 155,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1326013791,
              "status": "passed"
            },
            "line": 156,
            "name": "verify Again invalid Mobile message \"${invalid.mobile.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.mobile.text}",
                  "offset": 37
                }
              ],
              "location": "LoginSteps.verifyAgainInvalidMobilelMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 158,
            "value": "#Not adding to PH regression as the reg screen order keeps changing for the LBU"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 84833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 38458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 159,
        "name": "Verify the Registration screen validation using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-registration-screen-validation-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 555375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1350587916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6189023250,
              "status": "passed"
            },
            "line": 160,
            "name": "I enter the \"mobile number\" in welcome to pulse",
            "match": {
              "arguments": [
                {
                  "val": "mobile number",
                  "offset": 13
                }
              ],
              "location": "RegistrationSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "${registration.mobile.number}"
                ],
                "line": 161
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1001226708,
              "status": "passed"
            },
            "line": 162,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2008424542,
              "status": "passed"
            },
            "line": 163,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10957616417,
              "error_message": "java.lang.AssertionError: ${wellness.goal.alert.text} expected [true] but found [false]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat org.testng.Assert.failNotEquals(Assert.java:513)\n\tat org.testng.Assert.assertTrue(Assert.java:42)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.verifyInvalidMsg(RegistrationSteps.java:384)\n\tat ✽.Then verify validation message \"${wellness.goal.alert.text}\" on registration workflow screen(features/PulseRegistrationTest.feature:164)\n",
              "status": "failed"
            },
            "line": 164,
            "name": "verify validation message \"${wellness.goal.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${wellness.goal.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 165,
            "name": "I choose my wellness goals under wellness plan screen",
            "match": {
              "location": "RegistrationSteps.iChooseMyWellnessGoalsUnderWellnessPlanScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 166,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 167,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 168,
            "name": "verify validation message \"${dob.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${dob.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 169,
            "name": "I click the date in Date of Birth field",
            "match": {
              "location": "RegistrationSteps.enterDateOfBirth()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 170,
            "name": "I click the Done icon",
            "match": {
              "location": "RegistrationSteps.doneButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 171,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 172,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 173,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 174,
            "name": "verify validation message \"${gender.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${gender.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 175,
            "name": "I select the  Male icon",
            "match": {
              "location": "RegistrationSteps.MaleImage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 176,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 177,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 178,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 179,
            "name": "verify BMI validation message \"${bmi.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${bmi.alert.text}",
                  "offset": 31
                }
              ],
              "location": "RegistrationSteps.verifyBMIMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 180,
            "name": "I click on Calculate BMI button",
            "match": {
              "location": "RegistrationSteps.iClickOnCalculateBMIButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 181,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 182,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 183,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 184,
            "name": "verify validation message \"${activity.level.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${activity.level.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 185,
            "name": "I select the \"How active are you?\" in doing exercise",
            "match": {
              "arguments": [
                {
                  "val": "How active are you?",
                  "offset": 14
                }
              ],
              "location": "RegistrationSteps.iSelectTheInDoingExercise(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 186,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 187,
            "name": "I wait for 1 sec",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 188,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 189,
            "name": "verify validation message \"${diet.preference.alert.text}\" on registration workflow screen",
            "match": {
              "arguments": [
                {
                  "val": "${diet.preference.alert.text}",
                  "offset": 27
                }
              ],
              "location": "RegistrationSteps.verifyInvalidMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 751541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1859875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 192,
        "name": "Verify the resend OTP functionality on Enter OTP Screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-registration-functionality-on-one-pulse-app;verify-the-resend-otp-functionality-on-enter-otp-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 1857250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 892349292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4938125,
              "status": "passed"
            },
            "line": 193,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 174917,
              "status": "passed"
            },
            "line": 194,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7049641292,
              "status": "passed"
            },
            "line": 195,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2001383125,
              "status": "passed"
            },
            "line": 196,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 61146682209,
              "status": "passed"
            },
            "line": 197,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005667125,
              "status": "passed"
            },
            "line": 198,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24797814084,
              "status": "passed"
            },
            "line": 199,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005266291,
              "status": "passed"
            },
            "line": 200,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7066283125,
              "status": "passed"
            },
            "comments": [
              {
                "line": 201,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 202,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005760375,
              "status": "passed"
            },
            "line": 203,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30505719667,
              "status": "passed"
            },
            "line": 204,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 205
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 206
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 207
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 208
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1737054708,
              "status": "passed"
            },
            "line": 209,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5842045625,
              "status": "passed"
            },
            "line": 210,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 90005549458,
              "status": "passed"
            },
            "line": 211,
            "name": "I wait for 90 sec",
            "match": {
              "arguments": [
                {
                  "val": "90",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3501258500,
              "status": "passed"
            },
            "line": 212,
            "name": "I click the Resend button in OTP screen",
            "match": {
              "location": "RegistrationSteps.ClickResendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 34232473541,
              "status": "passed"
            },
            "line": 213,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2002500166,
              "status": "passed"
            },
            "line": 214,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 613348083,
              "error_message": "java.lang.AssertionError: expected [false] but found [true]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat org.testng.Assert.failNotEquals(Assert.java:513)\n\tat org.testng.Assert.assertFalse(Assert.java:63)\n\tat org.testng.Assert.assertFalse(Assert.java:73)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.ValidateEnterOtpScreen(RegistrationSteps.java:196)\n\tat ✽.And I verify enter otp screen is not displayed(features/PulseRegistrationTest.feature:215)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 215,
            "name": "I verify enter otp screen is not displayed",
            "match": {
              "location": "RegistrationSteps.ValidateEnterOtpScreen()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 191,
            "name": "@otpreset_tst"
          }
        ]
      }
    ],
    "name": "Verify registration functionality on one pulse App",
    "description": "",
    "id": "verify-registration-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/PulseRegistrationTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@Registrations"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 606750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1179584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 103541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 959625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7185958500,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4519834,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${onepulse.login.edit.profile}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.edit.profile}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 55
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 48193258333,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21951520708,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5006482750,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1624640708,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 732541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1209250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 401208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 70375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4318707541,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 64324374125,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1207645458,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5008890250,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12627285917,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16429520584,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5015725792,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 128208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 42458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 25,
        "name": "Verify User should be able to navigate to Edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-be-able-to-navigate-to-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 81666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 96583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 29741778875,
              "status": "passed"
            },
            "line": 26,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 20210526084,
              "status": "passed"
            },
            "line": 27,
            "name": "user click on Edit profile link",
            "match": {
              "location": "EditProfileSteps.clickEditProfileLink()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5008436458,
              "status": "passed"
            },
            "line": 28,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 47042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1153333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 30,
        "name": "Verify User should be able to change the profile picture in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-be-able-to-change-the-profile-picture-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 38500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 485375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26904256375,
              "status": "passed"
            },
            "line": 31,
            "name": "I give manage profile camera permission",
            "match": {
              "location": "EditProfileSteps.iGiveCameraPermission()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4000397333,
              "status": "passed"
            },
            "line": 32,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 65958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 141292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 34,
        "name": "Verify the email,country code and COR fields are non-editable in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-the-email,country-code-and-cor-fields-are-non-editable-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 156291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1147500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4421192375,
              "status": "passed"
            },
            "line": 35,
            "name": "verify email field is non-editable",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableEmailField()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12451820916,
              "status": "passed"
            },
            "line": 36,
            "name": "verify country code field is non-editable and country code is \"${country.code}\"",
            "match": {
              "arguments": [
                {
                  "val": "${country.code}",
                  "offset": 63
                }
              ],
              "location": "EditProfileSteps.verifyNonEditableCountryCodeField(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12492762083,
              "status": "passed"
            },
            "line": 37,
            "name": "verify country of Residence is \"${country.name}\" and non-editable",
            "match": {
              "arguments": [
                {
                  "val": "${country.name}",
                  "offset": 32
                }
              ],
              "location": "EditProfileSteps.verifyCORField(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 58417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 89625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "Verify user can able to change the details in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-can-able-to-change-the-details-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 84250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 25167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7713500,
              "status": "passed"
            },
            "line": 40,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 119167,
              "status": "passed"
            },
            "line": 41,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "First Name",
                  "Automation-${RANDOM_NUMBER}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "Last Name",
                  "Testing-${RANDOM_NUMBER}"
                ],
                "line": 43
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31309014375,
              "status": "passed"
            },
            "line": 44,
            "name": "I update following profile details in edit profile screen",
            "match": {
              "location": "EditProfileSteps.updateUserProfileDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19705858459,
              "status": "passed"
            },
            "comments": [
              {
                "line": 47,
                "value": "#      | PhoneNumber | 81069586                    |"
              },
              {
                "line": 48,
                "value": "#      | Address     | Singapore                   |"
              },
              {
                "line": 49,
                "value": "#      | PostalCode  | 576612                      |"
              },
              {
                "line": 50,
                "value": "#      | DOB         | 13-January-2003             |"
              }
            ],
            "line": 51,
            "name": "I click on update button in edit profile screen",
            "match": {
              "location": "EditProfileSteps.clickOnUpdateBtn()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 53,
            "value": "##defect - PCAONEPULSE-22930"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 39791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 54,
        "name": "Verify Details updated during pulse profile registration should be reflected in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-details-updated-during-pulse-profile-registration-should-be-reflected-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 508417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1056892542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9692090458,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 271634a0-2831-4aeb-954e-9ad7ec60ae76\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeStaticText[contains(@name,\"+60\")]//parent::XCUIElementTypeOther//following-sibling::XCUIElementTypeOther/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.PulseManageProfileScreen.clickeditProfileLink(PulseManageProfileScreen.java:181)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.EditProfileSteps.clickEditProfileLink(EditProfileSteps.java:37)\n\tat ✽.Given user click on Edit profile link(features/editProfile/PulseEditProfileTest.feature:55)\n",
              "status": "failed"
            },
            "line": 55,
            "name": "user click on Edit profile link",
            "match": {
              "location": "EditProfileSteps.clickEditProfileLink()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 56,
            "name": "I verify following values in edit profile screen",
            "match": {
              "location": "EditProfileSteps.verifyFieldValue(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 57
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 58
              },
              {
                "cells": [
                  "Email",
                  "${onepulse.login.edit.profile}"
                ],
                "line": 59
              },
              {
                "cells": [
                  "Gender",
                  "${pulse.edit.gender}"
                ],
                "line": 60
              },
              {
                "cells": [
                  "PhoneNumber",
                  "${pulse.edit.number}"
                ],
                "line": 61
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 63,
            "value": "##defect - PCAONEPULSE-22930"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 521875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1450667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 64,
        "name": "verify the user details should be correctly on babylon screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-the-user-details-should-be-correctly-on-babylon-screen",
        "after": [
          {
            "result": {
              "duration": 198959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1645419292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4725509291,
              "status": "passed"
            },
            "line": 65,
            "name": "I navigate to Home page from edit profile screen",
            "match": {
              "location": "EditProfileSteps.navigateToHomeScreenFromEditProfile()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 65263341000,
              "status": "passed"
            },
            "line": 66,
            "name": "I navigate to Babylon health Assessment and Accept TermsAndCondition",
            "match": {
              "location": "BabylonSteps.navigateToBabylonHealthAssessmentAndAcceptTermsAndCondition()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2016520500,
              "status": "passed"
            },
            "line": 67,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1284452459,
              "error_message": "java.lang.AssertionError: actual value is Automation-58030068638 expected [Automation-256190710737] but found [Automation-58030068638]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat org.testng.Assert.failNotEquals(Assert.java:513)\n\tat org.testng.Assert.assertEqualsImpl(Assert.java:135)\n\tat org.testng.Assert.assertEquals(Assert.java:116)\n\tat org.testng.Assert.assertEquals(Assert.java:190)\n\tat com.onepulse.app.screens.PulseManageProfileScreen.verifyDefaultValuesOnBabylonRegPage(PulseManageProfileScreen.java:535)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.EditProfileSteps.verifyDefaultValuesOnBabylonRegPage(EditProfileSteps.java:156)\n\tat ✽.Then I verify the default values in babylon registration page is updated as below(features/editProfile/PulseEditProfileTest.feature:68)\n",
              "status": "failed"
            },
            "line": 68,
            "name": "I verify the default values in babylon registration page is updated as below",
            "match": {
              "location": "EditProfileSteps.verifyDefaultValuesOnBabylonRegPage(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Gender",
                  "${pulse.edit.gender}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "FirstName",
                  "${First Name}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "LastName",
                  "${Last Name}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "Email",
                  "${onepulse.login.edit.profile}"
                ],
                "line": 72
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 73,
            "name": "verify email field is non-editable",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableEmailField()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 74,
            "name": "verify country of Residence is \"${country.name}\" and non-editable",
            "match": {
              "arguments": [
                {
                  "val": "${country.name}",
                  "offset": 32
                }
              ],
              "location": "EditProfileSteps.verifyCORField(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 239833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1105416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 76,
        "name": "navigate back to health screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;navigate-back-to-health-screen",
        "after": [
          {
            "result": {
              "duration": 91083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1621833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3550625125,
              "status": "passed"
            },
            "line": 77,
            "name": "I navigate to health page from babylon registration screen",
            "match": {
              "location": "BabylonSteps.navigateBackToHealthScreenFromBabylonReg()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5008447291,
              "status": "passed"
            },
            "line": 78,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Edit Profile functionality on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/editProfile/PulseEditProfileTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@PulseEditProfile"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 66708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 166875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "User should be able to Register for Babylon HRA",
        "description": "",
        "id": "verify-the-babylon-registration-via-hra-journey;user-should-be-able-to-register-for-babylon-hra",
        "after": [
          {
            "result": {
              "duration": 82750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 87458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8006250,
              "status": "passed"
            },
            "line": 5,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 703000,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7080157083,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005708333,
              "status": "passed"
            },
            "line": 8,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 58391120291,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006238625,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24261447292,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005301083,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7133696750,
              "status": "passed"
            },
            "line": 13,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004540875,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 32573270834,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 16
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1803978375,
              "status": "passed"
            },
            "line": 20,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6436970958,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35527121208,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2004071416,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 137447509417,
              "status": "passed"
            },
            "line": 24,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20796008375,
              "status": "passed"
            },
            "line": 25,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4007446125,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 76209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 630250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 28,
        "name": "User should be able to Register for Babylon HRA",
        "description": "",
        "id": "verify-the-babylon-registration-via-hra-journey;user-should-be-able-to-register-for-babylon-hra",
        "after": [
          {
            "result": {
              "duration": 163208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 44333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 24467832375,
              "status": "passed"
            },
            "line": 29,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 49461231125,
              "status": "passed"
            },
            "line": 30,
            "name": "I navigate to Babylon health Assessment and Accept TermsAndCondition",
            "match": {
              "location": "BabylonSteps.navigateToBabylonHealthAssessmentAndAcceptTermsAndCondition()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15000433000,
              "status": "passed"
            },
            "line": 31,
            "name": "I confirm the registration",
            "match": {
              "location": "BabylonSteps.clickOnCofirmButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19097057708,
              "status": "passed"
            },
            "line": 32,
            "name": "I click on Babylon Health Assessment Get Started button",
            "match": {
              "location": "BabylonSteps.healthAssessmentGetStarted()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9702971416,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify following options are present for assessment",
            "match": {
              "location": "BabylonSteps.verifyAssessmentOptions(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Full Assessment"
                ],
                "line": 34
              },
              {
                "cells": [
                  "Nutrition"
                ],
                "line": 35
              },
              {
                "cells": [
                  "Activity"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Mood"
                ],
                "line": 37
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify the Babylon Registration via HRA journey",
    "description": "",
    "id": "verify-the-babylon-registration-via-hra-journey",
    "keyword": "Feature",
    "uri": "features/health/BabylonHRA_Registration.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylon_hra_registration"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "comments": [
          {
            "line": 5,
            "value": "# This feature will fail due to the defect PCAONEPULSE-21990"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 109792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 87000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 6,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 174833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 79792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7724744208,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2132041,
              "status": "passed"
            },
            "line": 8,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 63004617917,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25362932833,
              "status": "passed"
            },
            "line": 10,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006253250,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2305583458,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 126334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 39000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 14,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 91500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 46458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4752765667,
              "status": "passed"
            },
            "line": 15,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34037512917,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2397942750,
              "status": "passed"
            },
            "line": 19,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5005521542,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9585554333,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22516174625,
              "status": "passed"
            },
            "line": 22,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 23875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 34958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 24,
        "name": "User should be able to locate Hospitals using PruShoppe location",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-should-be-able-to-locate-hospitals-using-prushoppe-location",
        "after": [
          {
            "result": {
              "duration": 27375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 453108000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 40568561042,
              "status": "passed"
            },
            "line": 25,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21131255625,
              "status": "passed"
            },
            "comments": [
              {
                "line": 26,
                "value": "#  This step may fail due to Location locator - the xpath has updated according to MyEnv in PCAONEPULSE-19412, which is passed during execution"
              }
            ],
            "line": 27,
            "name": "I clicks on Location button",
            "match": {
              "location": "LocationSteps.iClicksOnLocationButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14639283875,
              "status": "passed"
            },
            "line": 28,
            "name": "I clicks on Search here text field",
            "match": {
              "location": "LocationSteps.iClicksOnSearchHereTextField()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6044502792,
              "status": "passed"
            },
            "line": 29,
            "name": "I clicks on \"Hospitals\" under Pulse Search",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnUnderPulseSearch(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8486451709,
              "status": "passed"
            },
            "line": 30,
            "name": "User can see the list of \"Hospitals\" near by to user\u0027s current location",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 26
                }
              ],
              "location": "LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2230663958,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed \n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifySearchResults(LocationScreen.java:102)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(LocationSteps.java:51)\n\tat ✽.And User can see that Call, Navigate and See Details links are displayed under \"Hospitals\" search results(features/health/Hospital_Clinic_Locator.feature:31)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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cmxvbQ1UVdmXxoV6PQeZk1RihcbGRnMhYi5ZzA37Sp1xvSLqvhXzBgere9uXorZg0LW/xy8W9cj0ZD4293CuMbu/Hz/omstfs0H7UnSn+1aMoMvdWFXV/e76ezIfiL0Xylqbezt4mCNHv3zPKEwo16LHVgzzcdNbcs7/5VlfVY2vuu7vPX5HbcMXp33xL6312ahpxXzGMdHEPhhfI/MQ82HKXMr04/HpVtBbK19L/L3qdZjEc2FgkloBOmgFOlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqG6+Vlwu1/z582dqnhmQ5syZc/HiRfsLG/BuvlbeeeedQTe/WbNm2V/YgHfzteL1eletWvXazWzFm29WVlbaX9iAd/O1ghuFVqCiFaj+DzApnsPyo05KAAAAAElFTkSuQmCC",
                "mime_type": "image/png"
              }
            ],
            "line": 31,
            "name": "User can see that Call, Navigate and See Details links are displayed under \"Hospitals\" search results",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 76
                }
              ],
              "location": "LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 96166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 811333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 33,
        "name": "User can see details of listed hospitals in detail",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-see-details-of-listed-hospitals-in-detail",
        "after": [
          {
            "result": {
              "duration": 349375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 496262333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2034915042,
              "status": "passed"
            },
            "line": 34,
            "name": "I clicks on See Details button on First result",
            "match": {
              "location": "LocationSteps.iClicksOnSeeDetailsButtonOnFirstResult()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 23893365750,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifyHospitalInformationScreen(LocationScreen.java:151)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(LocationSteps.java:81)\n\tat ✽.Then I can see the \"Hospital\" Information screen with Navigate and Call Now buttons(features/health/Hospital_Clinic_Locator.feature:35)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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cmxvbQ1UVdmXxoV6PQeZk1RihcbGRnMhYi5ZzA37Sp1xvSLqvhXzBgere9uXorZg0LW/xy8W9cj0ZD4293CuMbu/Hz/omstfs0H7UnSn+1aMoMvdWFXV/e76ezIfiL0Xylqbezt4mCNHv3zPKEwo16LHVgzzcdNbcs7/5VlfVY2vuu7vPX5HbcMXp33xL6312ahpxXzGMdHEPhhfI/MQ82HKXMr04/HpVtBbK19L/L3qdZjEc2FgkloBOmgFOlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqG6+Vlwu1/z582dqnhmQ5syZc/HiRfsLG/BuvlbeeeedQTe/WbNm2V/YgHfzteL1eletWvXazWzFm29WVlbaX9iAd/O1ghuFVqCiFaj+DzApnsPyo05KAAAAAElFTkSuQmCC",
                "mime_type": "image/png"
              }
            ],
            "line": 35,
            "name": "I can see the \"Hospital\" Information screen with Navigate and Call Now buttons",
            "match": {
              "arguments": [
                {
                  "val": "Hospital",
                  "offset": 15
                }
              ],
              "location": "LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 286209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2370667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 37,
        "name": "User can see the details in speciality tab",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-see-the-details-in-speciality-tab",
        "after": [
          {
            "result": {
              "duration": 239459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 650906541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8483324417,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 1b3c4773-92e4-47f6-8448-15ed26acecfc\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Speciality, tab, 2 of 4\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.LocationScreen.clickOnHospitalTab(LocationScreen.java:140)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnTab(LocationSteps.java:61)\n\tat ✽.When I clicks on \"Speciality\" tab(features/health/Hospital_Clinic_Locator.feature:38)\n",
              "status": "failed"
            },
            "line": 38,
            "name": "I clicks on \"Speciality\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Speciality",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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cmxvbQ1UVdmXxoV6PQeZk1RihcbGRnMhYi5ZzA37Sp1xvSLqvhXzBgere9uXorZg0LW/xy8W9cj0ZD4293CuMbu/Hz/omstfs0H7UnSn+1aMoMvdWFXV/e76ezIfiL0Xylqbezt4mCNHv3zPKEwo16LHVgzzcdNbcs7/5VlfVY2vuu7vPX5HbcMXp33xL6312ahpxXzGMdHEPhhfI/MQ82HKXMr04/HpVtBbK19L/L3qdZjEc2FgkloBOmgFOlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqG6+Vlwu1/z582dqnhmQ5syZc/HiRfsLG/BuvlbeeeedQTe/WbNm2V/YgHfzteL1eletWvXazWzFm29WVlbaX9iAd/O1ghuFVqCiFaj+DzApnsPyo05KAAAAAElFTkSuQmCC",
                "mime_type": "image/png"
              }
            ],
            "line": 39,
            "name": "I verify the Speciality screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheSpecialityScreenIsDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 286916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1523458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 41,
        "name": "User can see the details in doctor\u0027s tab",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-see-the-details-in-doctor\u0027s-tab",
        "after": [
          {
            "result": {
              "duration": 19083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 497805708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8672122959,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 1b3c4773-92e4-47f6-8448-15ed26acecfc\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Doctors, tab, 3 of 4\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.LocationScreen.clickOnHospitalTab(LocationScreen.java:140)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnTab(LocationSteps.java:61)\n\tat ✽.When I clicks on \"Doctors\" tab(features/health/Hospital_Clinic_Locator.feature:42)\n",
              "status": "failed"
            },
            "line": 42,
            "name": "I clicks on \"Doctors\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Doctors",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 43,
            "name": "I verify the Doctors screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheDoctorsScreenIsDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 221583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1418875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 45,
        "name": "User can see the details in rooms  tab",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-see-the-details-in-rooms--tab",
        "after": [
          {
            "result": {
              "duration": 34000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 531976500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8672405167,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 1b3c4773-92e4-47f6-8448-15ed26acecfc\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Rooms, tab, 4 of 4\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.LocationScreen.clickOnHospitalTab(LocationScreen.java:140)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnTab(LocationSteps.java:61)\n\tat ✽.When I clicks on \"Rooms\" tab(features/health/Hospital_Clinic_Locator.feature:46)\n",
              "status": "failed"
            },
            "line": 46,
            "name": "I clicks on \"Rooms\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Rooms",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 47,
            "name": "I verify the Rooms screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheRoomsScreenIsDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 379916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1479584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 49,
        "name": "User can navigate out of the hospital details screen",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-navigate-out-of-the-hospital-details-screen",
        "after": [
          {
            "result": {
              "duration": 22541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 561511542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8892926583,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 1b3c4773-92e4-47f6-8448-15ed26acecfc\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Navigate\"]/../../preceding-sibling:: XCUIElementTypeOther[1]/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.LocationScreen.navigateBackToListScreen(LocationScreen.java:204)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnBackButtonInSeeDetailsScreen(LocationSteps.java:86)\n\tat ✽.When I clicks on back button in See Details screen(features/health/Hospital_Clinic_Locator.feature:50)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 50,
            "name": "I clicks on back button in See Details screen",
            "match": {
              "location": "LocationSteps.iClicksOnBackButtonInSeeDetailsScreen()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 240583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1122167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 53,
        "name": "User should be able to locate cli using PruShoppe location",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-should-be-able-to-locate-cli-using-prushoppe-location",
        "after": [
          {
            "result": {
              "duration": 97042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 759955083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3613416125,
              "status": "passed"
            },
            "line": 54,
            "name": "I clicks on back button in \"Hospitals\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 28
                }
              ],
              "location": "LocationSteps.iClicksOnBackButtonInScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14268290333,
              "status": "passed"
            },
            "line": 55,
            "name": "I clicks on Search here text field",
            "match": {
              "location": "LocationSteps.iClicksOnSearchHereTextField()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5822652208,
              "status": "passed"
            },
            "line": 56,
            "name": "I clicks on \"Clinics\" under Pulse Search",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnUnderPulseSearch(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7870345917,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifyHospitalScreenLaunch(LocationScreen.java:85)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(LocationSteps.java:46)\n\tat ✽.Then User can see the list of \"Clinics\" near by to user\u0027s current location(features/health/Hospital_Clinic_Locator.feature:57)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 57,
            "name": "User can see the list of \"Clinics\" near by to user\u0027s current location",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 26
                }
              ],
              "location": "LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 304041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1953000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 59,
        "name": "User can verify the clinic page",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-verify-the-clinic-page",
        "after": [
          {
            "result": {
              "duration": 147709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 423624417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2094231416,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false],\n\tNear you Clinics are not displayed \n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifySearchResults(LocationScreen.java:102)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(LocationSteps.java:51)\n\tat ✽.And User can see that Call, Navigate and See Details links are displayed under \"Clinics\" search results(features/health/Hospital_Clinic_Locator.feature:60)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 60,
            "name": "User can see that Call, Navigate and See Details links are displayed under \"Clinics\" search results",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 76
                }
              ],
              "location": "LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 217166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 810833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 62,
        "name": "User can view listed clinic details",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-view-listed-clinic-details",
        "after": [
          {
            "result": {
              "duration": 16042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 577708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2321614541,
              "status": "passed"
            },
            "line": 63,
            "name": "I clicks on See Details button on First result",
            "match": {
              "location": "LocationSteps.iClicksOnSeeDetailsButtonOnFirstResult()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 17333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "User can view listed clinic info",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-view-listed-clinic-info",
        "after": [
          {
            "result": {
              "duration": 49500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 504408458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 25844596541,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNear you Hospitals are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false],\n\tNear you Clinics are not displayed ,\n\tNear you search results are not displayed ,\n\tCall Now button is not displayed for the firstClinic tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstClinic tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Clinic tile See Details screen expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.screens.LocationScreen.verifyHospitalInformationScreen(LocationScreen.java:151)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(LocationSteps.java:81)\n\tat ✽.Then I can see the \"Clinic\" Information screen with Navigate and Call Now buttons(features/health/Hospital_Clinic_Locator.feature:66)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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0IlA8pfWLtmoacV8xjHRJD4YXybzEPNhylzKXMH16VowWCtf6vlz1e9ger4XhiapFaCbVqCjFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoHq6mvF7XZnZWU9qpk9JGVmZp47d87+xIa8q6+VZcuWDbv6PfHEE/YnNuRdfa34/f4lS5a8fDV7ddGi2tpa+xMb8q6+VvB9oRWoaAWq/wOKitA+1jH6AQAAAABJRU5ErkJggg\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 66,
            "name": "I can see the \"Clinic\" Information screen with Navigate and Call Now buttons",
            "match": {
              "arguments": [
                {
                  "val": "Clinic",
                  "offset": 15
                }
              ],
              "location": "LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 287000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1432834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 68,
        "name": "User can view listed clinic info details",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-view-listed-clinic-info-details",
        "after": [
          {
            "result": {
              "duration": 86916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 506317000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8719040083,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 1b3c4773-92e4-47f6-8448-15ed26acecfc\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Navigate\"]/../../preceding-sibling:: XCUIElementTypeOther[1]/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.LocationScreen.navigateBackToListScreen(LocationScreen.java:204)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnBackButtonInSeeDetailsScreen(LocationSteps.java:86)\n\tat ✽.When I clicks on back button in See Details screen(features/health/Hospital_Clinic_Locator.feature:69)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALkAAAGQCAIAAAB9G1ZBAAAOg0lEQVR4Xu3bi3eU9Z3Hcf6PGutxe7Bu5ZYqCBa0S6wriGAvUhd77O6KHmuNAtEV3aK0VrRQluOCBIXIXZPmMqAIQQQEYhAIyD2EXMh1Ls9kbklmJplksr+ZoE6eXPigqGF5v8735IzPPPPEmeed3zwDZJj3upEMc+lJGzHMvolh+pvm62iF0YZWGHVohVGHVhh1mr/hta2VZi6PzY0RKRtHJb6mjUhM4sZIq2e3Po9lvoUZ0fNSD/CCj7p4dlL2Tz4k9fQNON+0lbp/Ht/wrw86b0z/ckvjjT+tGnlH5aiJ1T+ZYP7Tff2o2knTGm//Rd/HMld2zM9k7c3jGmfMapg2s3742NS73GkjXWMzrEnTPYm53z1mUsMDs9y3ZXgnTbUmTvUOH9/3aH3n67diyq2bOLX15Jnw5vzI0ZOe4bfX/9t/es3XzPmxz09G3t8RXJbtSRvZsGJ1tHhv5OAh3/y/9F5+mCs5F0ZNano3P9YWjje64y53Zyjky17n+qKY5junv/eHKS8tvHvBnzM2Pj75wtz5dStXvvRyxhtZkz0/Ghu8d2bzDbf2PaZtlFZ6Fi77mFaasnOczy5wP/JH6zePWjfdEcrO8Y+f0vTKYuv5l12P/MH54wkXbh4fLa+svedXrn/P9N05o8+Rv/exP6mU6bvzkB7PgtejRdvrHni4PvO5piefdT7w++iektBjcy7+fN41fWrh9PTjszJKHvo06/FYuLX0d49kZ91316cPVt821nNbhv+OqZ7rR3sTF7CpM8L0kTK3DN5K4v2s3zFrhn/n7uDuT4ILF0eqarzpd3vSRiW+wRurWgsc/iUrzGLTlPFA1Nvc8saaoGNb66r1Q+8c2J9U7+m7/9AdK21U/dSHOoLB6L7S8KGymGX5xt/rvW7MxR3unD6laPqY47M2zLs/XFvfHYvFu7pOLX715/tnViVamRx8+NHALZOSx0kc6ov54rozOYlWrB+MMNP32yfHnN3R/Y45lnfNhtb5f7XSbrHe3+5/+MmGNTnNE6bU3feQO32SeYMMnCmv/9m0uNvjvT69euKUruMnklfBQ2rsTypl+q4039ck/lc9N03w/micdeOt1o8neK4fY/1konlVzW3rn25L7JD8hOH+4WjrngebXlvq/e+/WpNneNNSDvLzX96fP2308VnTt/x6zZOTXdu2O3Pfm543fcKRh2vGjHWPuydw691WIizbEzfdJK58eybxZ/yeH4y4OMnro96vZu8ftZTKPGkjXJNnRM+Uuzflth87Yd18e/NvZ/uGj3M/Nid89IS7aGt0205v2ujm1RuCO3b5Dx1pe/6VZvPtez43fWeTeAr21/2r6bVzr2c3ZNaVi6+8/65poXH3NqdntN7zoPem24NTZnqHTwhN/mUgPcMy1wNfjOuG9OCW7ZHV75nbzSnjH/+Lo7N+9cEzv/lgzq8PzLyvrXjfyan3vv/0jP3/cb/3p//in/pbzw3p7rRR5p3Bc91XYyVesdSzf8uw+rz8+ryChsQUNuYVNtmnaMDJLWrc/lHw5Jkmx7am3Iv7O3Mdrr37fcc+b8zf0pQ4ZpF15Kh14KDZob+Df+vjzC105g00RQNP352/z2kqcDT9w+E0k+8wr7yzYEvia/4WZ57DtmeDuesfjsa8gl4Pzy10bdvZvHufd/d+5649np0f+3Z/YqZ5917vx3uaCraaU5k8lCP1RUie5ZQXM9cxrBvQ0ApUtAIVrUBFK1DRClS0ApXaSktbm30TrjFSK6VlZStz3onbN+PaculWSo+ULc1+qy0Ssd+RwmRUXl5eUlISSe5W8mmJx+M5UlaWuk+T03n02NHULbi6XKKVz8qO/s/K7JbwYKEYy5e/+felSwsLC2fPnh0MBufMnePz+8+cOdNzbzyeWJK8Xu/Z8vJeD8NVZbBWSo8cnf/KoiMnTpWfrzRz9nxVz1ReqE19P2ptbX3qqWd6bp87d662rnbuvLlVVVX5+fkffrh90aLXFy5cuGnTpsrKyq1bt5afOzf/hRdeePHFw4cPnz1bvmDBS3/604KKioqU42GIGrAVU8OqdRv+6y+LNhc43i3YkpjCi/NB8a7UVmpr6xYtei1lQ/e8efPMorLqrbc2bdpcXPyR2fLkH586derU2nVrs7KeM23FOjsPHTq0fsPGnJy1ltdrJvXhGJoGbMXoiHWuWLd+x559nd3dXcl6vpxUiXUl8+K60tDQ6Ha7U1sxTZjtTz8zJ9HK2rWZmXN6Ht4RM8F0Fu/86Nnnnt++o/irw2GoGqwVo6Ozc+W6DTs+3mu/o7c338xevPjvBYVFsx973OfzzZ2Xdfr06VWrViVbOWx2ePrpnlbWORxbX3v9b9nZq3LeeafI4Xj77dVLly4rLCyyHxFDzyVa6U4uANnrN360+xP7Hb2dP3++tPRgOBw2t10uVzQaNdEEAoGeT0ZOZ2KL3x8wt2vr6ioqzifWp3jc3KipuWA7FIamS7fSnVxdKqs5o9c6qRWgm1agoxWoaAUqWoGKVqCiFahoBSpagYpWoLqMVgb6e2ZcIy6jFVzjLqOV1HWFpeUadBmt4Bo3WCvxeLzlQn1bbV2wsipQWRW0T/UVnEBldaiquq22sb05KC5a0aTI19LzWPsRMagBW4lHO6zjp2MdkXh34p/hfwfTI2JZwfKK+Fcb+tHe0RH5xmfa/CS0hcOdnZ32OzCA/luJd8Wbz1aknMHvUjzWFg5UVA6Uizm77e3t9q1fVzgS6ezqsm9Ff/ppxZyiUE1DvGvAHzizQ3t1TeJGe0fU5bHde0W0+wPtPp99a5KyovS8v5jlpyMWa7vUb9cqB0R3v60YwZo6+6YUphXfi6+GthXH3V4rz9HtC4Z37Yu3huOBUNvH+7uCoY6a+vDBxK8Yxiyrqy3c6XLHwpHogYOx8sp4e6y90dUVCHX4Ev/2dhCtFeftm5KLSnjQ34A0ou3tlVVV5kYoFGppbW1yOu179MaFi6j/Vtpdln1Tb9abawLrc6NHT5hWrNeXt+0t9axYHTxxMvxZmXd5jrVkebC62uzW2eTybd3pXL2xZVuxt/RQ8/K3Y9U1rs25sbLj3pKD9oP2FnX3s2KZRaLntxgH4fF4Qi0toaRWoZUr+I72/1v/rbTVN9o3pTDnyrvirXh7tPmFV628AteflwRKP/MfOOjNXufbd8Cz+H9dK1bH44mLAHNeg9kbXe8W+N8tbK+rD2zIj1acd7+zKbb3U29Jqf24vcTDVRfs25Ln9ZKntrauzuv1mkRo5crqv5VQde0gF7bmDn/ZMdNCR21d4Gx55Ow57+bcQGVla9nnHseHwYOHfYePdSdbMYI5m1uq6+KRiPe9Qs/OPV3xLr/jA2vr9ta6pt5H7aWroyNUX2/fmhQZ9D3IvEn17NDS0mIuRMwli7lh36k3rldE/bdiXuBww2BLi6gzHHbvusQvFvUjHvebj80DvNeY038FP+iay19zQPtW9Kf/Voyw29NSX9//6fo2mQ/E/vKqjrbBFg+zcsRiMfvWy9dOKJdjwFYM83HTf/pM8PNTgfrGQIPz255gXZPv0IlA8pfWLtmoacV8xjHRJD4YXybzEPNhylzKXMH16VowWCtf6vlz1e9ger4XhiapFaCbVqCjFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoHq6mvF7XZnZWU9qpk9JGVmZp47d87+xIa8q6+VZcuWDbv6PfHEE/YnNuRdfa34/f4lS5a8fDV7ddGi2tpa+xMb8q6+VvB9oRWoaAWq/wOKitA+1jH6AQAAAABJRU5ErkJggg\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 69,
            "name": "I clicks on back button in See Details screen",
            "match": {
              "location": "LocationSteps.iClicksOnBackButtonInSeeDetailsScreen()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 524875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1100959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 71,
        "name": "User can navigate back to clinics screen",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature;user-can-navigate-back-to-clinics-screen",
        "after": [
          {
            "result": {
              "duration": 37541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 662625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3495405958,
              "status": "passed"
            },
            "line": 72,
            "name": "I clicks on back button in \"Clinic\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Clinic",
                  "offset": 28
                }
              ],
              "location": "LocationSteps.iClicksOnBackButtonInScreen(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify that user can locate near by Hospitals,clinics using PruShoppe Location feature",
    "description": "",
    "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-prushoppe-location-feature",
    "keyword": "Feature",
    "uri": "features/health/Hospital_Clinic_Locator.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@StoreLocator"
      },
      {
        "line": 1,
        "name": "@iOSdropDownTest"
      },
      {
        "line": 1,
        "name": "@18JunTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@18MayFailures"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 373792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 470959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 200333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1845339291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6964417,
              "status": "passed"
            },
            "line": 6,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 361583,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7257793625,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 61005592292,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005711375,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23433853666,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000482667,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8828230542,
              "status": "passed"
            },
            "line": 13,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 32795102959,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "medicine"
                ],
                "line": 15
              },
              {
                "cells": [
                  "LastName",
                  "reminder"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2316392084,
              "status": "passed"
            },
            "line": 19,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5601178084,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35266720333,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005499333,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 117949520792,
              "status": "passed"
            },
            "line": 23,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 43127937417,
              "error_message": "java.lang.AssertionError: expected [true] but found [false]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat org.testng.Assert.failNotEquals(Assert.java:513)\n\tat org.testng.Assert.assertTrue(Assert.java:42)\n\tat org.testng.Assert.assertTrue(Assert.java:52)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.landingPageValidation(LoginSteps.java:92)\n\tat ✽.Then user should be landed to \"Home\" screen(features/health/MedicineReminder.feature:24)\n",
              "status": "failed"
            },
            "line": 24,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 25,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 254709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1143500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 28,
        "name": "Verify User should be able to navigate to medical reminder page",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-medical-reminder-page",
        "after": [
          {
            "result": {
              "duration": 47292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1558880583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2000292,
              "status": "passed"
            },
            "line": 29,
            "name": "I relaunch the app on registration failure",
            "match": {
              "location": "RegistrationSteps.iRelaunchTheAppOnRegistrationFailure()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8347603042,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: fb557abb-52a0-4509-837f-a91eaffac581\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@label\u003d\u0027Health\u0027]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.CustomerConnectScreen.HealthIcons(CustomerConnectScreen.java:1379)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.Healthicons(CustomerConnectSteps.java:412)\n\tat ✽.Then I click the Health icon in Home screen(features/health/MedicineReminder.feature:30)\n",
              "status": "failed"
            },
            "line": 30,
            "name": "I click the Health icon in Home screen",
            "match": {
              "location": "CustomerConnectSteps.Healthicons()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 31,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 32,
            "name": "I clicks on click here icon in medical Reminder",
            "match": {
              "location": "DieticianSteps.ClickMedicalRemainder()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 33,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 177583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 792292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "verify the static text on medicine reminder screen",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-the-static-text-on-medicine-reminder-screen",
        "after": [
          {
            "result": {
              "duration": 1191250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 923848833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 32905497500,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tNo medicine added! text is displayed on page  expected [true] but found [false],\n\tMedicine Reminder text is displayed on page  expected [true] but found [false],\n\tTrack the medicine and set reminder text is displayed on page  expected [true] but found [false],\n\tbefore for important dose text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.VerifyAddMedicine(MyDocSteps.java:885)\n\tat ✽.And I verify following text displayed in Add medicine screen(features/health/MedicineReminder.feature:36)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 36,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${no.medicine.text}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${Medicalremainder.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${track.medicine.text}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${important.dose.text}"
                ],
                "line": 40
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 311542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1630042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 42,
        "name": "click on add reminder button",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;click-on-add-reminder-button",
        "after": [
          {
            "result": {
              "duration": 187667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 973417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 120321248750,
              "status": "passed"
            },
            "line": 43,
            "name": "I clicks on \"${add.new.reminder}\" in app screens",
            "match": {
              "arguments": [
                {
                  "val": "${add.new.reminder}",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.clickDietician(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006496042,
              "status": "passed"
            },
            "line": 44,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 56208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 46,
        "name": "verify add medicine screen is launched and user can enter the required info on medical info screen",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-add-medicine-screen-is-launched-and-user-can-enter-the-required-info-on-medical-info-screen",
        "after": [
          {
            "result": {
              "duration": 329500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1041104667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 25943082875,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tMedicine Info text is displayed on page  expected [true] but found [false],\n\tSchedule text is displayed on page  expected [true] but found [false],\n\tMore Setting text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.VerifyAddMedicine(MyDocSteps.java:885)\n\tat ✽.And I verify following text displayed in Add medicine screen(features/health/MedicineReminder.feature:48)\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 47,
                "value": "##defect PCAONEPULSE-20944"
              }
            ],
            "line": 48,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "comments": [
                  {
                    "line": 49,
                    "value": "#      | ${add.medicine.text} |"
                  }
                ],
                "cells": [
                  "${medicine.info.field}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${schedule.field}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${more.setting.field}"
                ],
                "line": 52
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 53,
            "name": "I assign \"Paracetamol\" to variable \"Medicine_Info\"",
            "match": {
              "arguments": [
                {
                  "val": "Paracetamol",
                  "offset": 10
                },
                {
                  "val": "Medicine_Info",
                  "offset": 36
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 54,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Medicine Info",
                  "${Medicine_Info}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "Unit",
                  "Tablet (unit)"
                ],
                "line": 56
              },
              {
                "cells": [
                  "Quantity",
                  "2"
                ],
                "line": 57
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 58,
            "name": "I clicks on Next icon in app screens",
            "match": {
              "location": "DieticianSteps.clickNextIcons()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 234834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1009791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 60,
        "name": "verify user navigated to schedule screen and user can enter the required info",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-user-navigated-to-schedule-screen-and-user-can-enter-the-required-info",
        "after": [
          {
            "result": {
              "duration": 67542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1121111750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 44692735750,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tFrequency text is displayed on page  expected [true] but found [false],\n\tDosage Timing text is displayed on page  expected [true] but found [false],\n\tStart Date text is displayed on page  expected [true] but found [false],\n\tEnd Date text is displayed on page  expected [true] but found [false],\n\tDose Intake text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.VerifyAddMedicine(MyDocSteps.java:885)\n\tat ✽.And I verify following text displayed in Add medicine screen(features/health/MedicineReminder.feature:61)\n",
              "status": "failed"
            },
            "line": 61,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${frequency.text}"
                ],
                "line": 62
              },
              {
                "cells": [
                  "${dosage.timing.text}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "${start.date.text}"
                ],
                "line": 64
              },
              {
                "cells": [
                  "${end.date.text}"
                ],
                "line": 65
              },
              {
                "cells": [
                  "${dose.intake.text}"
                ],
                "line": 66
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 67,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Frequency",
                  "Once"
                ],
                "line": 68
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "I clicks on Timing in Add medcine screen",
            "match": {
              "location": "DieticianSteps.clickTiming_Icon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 70,
            "name": "I clicks on \"${before.meal.text}\" in app screens",
            "match": {
              "arguments": [
                {
                  "val": "${before.meal.text}",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.clickDietician(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 71,
            "name": "I clicks on Next icon in app screens",
            "match": {
              "location": "DieticianSteps.clickNextIcons()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 249584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1742000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 73,
        "name": "Verify User should be able to navigate to More Setting page",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-more-setting-page",
        "after": [
          {
            "result": {
              "duration": 18959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1819212625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2007260375,
              "status": "passed"
            },
            "line": 74,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 18969159916,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: fb557abb-52a0-4509-837f-a91eaffac581\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeStaticText[@name\u003d\"What are you taking this medication for?\"]/following::XCUIElementTypeTextField)[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$16.executeCommand(Commands.java:148)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.setTextWithTab(TestBasePage.java:260)\n\tat com.onepulse.app.screens.PulseHealthScreen.enterDetailsInAddMedScreen(PulseHealthScreen.java:395)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MedicineReminderSteps.enterInfoInAddMedicineScreen(MedicineReminderSteps.java:30)\n\tat ✽.And I enter following details in add medicine screen(features/health/MedicineReminder.feature:75)\n",
              "status": "failed"
            },
            "line": 75,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Medication For",
                  "fever"
                ],
                "line": 76
              },
              {
                "cells": [
                  "Medicine Stock",
                  "5"
                ],
                "line": 77
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 78,
            "name": "I clicks the Done button in Add medicine screen",
            "match": {
              "location": "DieticianSteps.ClickDoneButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 79,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Medicine_Info} added successfully!"
                ],
                "line": 80
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 81,
            "value": "#      | ${add.another.med}                   |"
          },
          {
            "line": 82,
            "value": "#      | ${notNow.text}                       |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 431042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1287292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 84,
        "name": "verify Add medicine screen is displayed when user click on add new reminder on success popup",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-add-medicine-screen-is-displayed-when-user-click-on-add-new-reminder-on-success-popup",
        "after": [
          {
            "result": {
              "duration": 133375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1853392375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 123364949375,
              "status": "passed"
            },
            "line": 85,
            "name": "I clicks on \"${add.another.med}\" in app screens",
            "match": {
              "arguments": [
                {
                  "val": "${add.another.med}",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.clickDietician(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1376667,
              "status": "passed"
            },
            "line": 86,
            "name": "I assign \"cold\" to variable \"Medicine_Info\"",
            "match": {
              "arguments": [
                {
                  "val": "cold",
                  "offset": 10
                },
                {
                  "val": "Medicine_Info",
                  "offset": 29
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20535835541,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: fb557abb-52a0-4509-837f-a91eaffac581\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeStaticText[@name\u003d\"Medicine Info\"]/following::XCUIElementTypeTextField)[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$16.executeCommand(Commands.java:148)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.setTextWithTab(TestBasePage.java:260)\n\tat com.onepulse.app.screens.PulseHealthScreen.enterDetailsInAddMedScreen(PulseHealthScreen.java:369)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MedicineReminderSteps.enterInfoInAddMedicineScreen(MedicineReminderSteps.java:30)\n\tat ✽.And I enter following details in add medicine screen(features/health/MedicineReminder.feature:87)\n",
              "status": "failed"
            },
            "line": 87,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Medicine Info",
                  "${Medicine_Info}"
                ],
                "line": 88
              },
              {
                "cells": [
                  "Unit",
                  "Tablet (unit)"
                ],
                "line": 89
              },
              {
                "cells": [
                  "Quantity",
                  "5"
                ],
                "line": 90
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 91,
            "name": "I clicks on Next icon in app screens",
            "match": {
              "location": "DieticianSteps.clickNextIcons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 92,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Frequency",
                  "Daily"
                ],
                "line": 93
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 94,
            "name": "I clicks on Timing in Add medcine screen",
            "match": {
              "location": "DieticianSteps.clickTiming_Icon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 95,
            "name": "I clicks on \"After meal\" in app screens",
            "match": {
              "arguments": [
                {
                  "val": "After meal",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.clickDietician(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 96,
            "name": "I clicks on Next icon in app screens",
            "match": {
              "location": "DieticianSteps.clickNextIcons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 97,
            "name": "I enter following details in add medicine screen",
            "match": {
              "location": "MedicineReminderSteps.enterInfoInAddMedicineScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Medication For",
                  "Cold"
                ],
                "line": 98
              },
              {
                "cells": [
                  "Medicine Stock",
                  "5"
                ],
                "line": 99
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 100,
            "name": "I clicks the Done button in Add medicine screen",
            "match": {
              "location": "DieticianSteps.ClickDoneButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 223458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 821000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 102,
        "name": "verify medicine reminder home screen is displayed when user click on not now button on success popup",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-medicine-reminder-home-screen-is-displayed-when-user-click-on-not-now-button-on-success-popup",
        "after": [
          {
            "result": {
              "duration": 31458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1080376541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 44295792625,
              "status": "passed"
            },
            "line": 103,
            "name": "I clicks on Not now icon in app screen",
            "match": {
              "location": "DieticianSteps.clickNotNowButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9610931459,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tMedicine Reminder text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.VerifyAddMedicine(MyDocSteps.java:885)\n\tat ✽.And I verify following text displayed in Add medicine screen(features/health/MedicineReminder.feature:104)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 104,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Medicalremainder.text}"
                ],
                "line": 105
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 256667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 901667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 107,
        "name": "navigate to health screen",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;navigate-to-health-screen",
        "after": [
          {
            "result": {
              "duration": 26625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 847736167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10259753833,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: fb557abb-52a0-4509-837f-a91eaffac581\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"home\"])[2]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.DieticianScreen.SelectBack_Icon(DieticianScreen.java:422)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.DieticianSteps.Back_MedicalRemainder(DieticianSteps.java:197)\n\tat ✽.And I click the Back button in medical remainder(features/health/MedicineReminder.feature:108)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 108,
            "name": "I click the Back button in medical remainder",
            "match": {
              "location": "DieticianSteps.Back_MedicalRemainder()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 523750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1104792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 110,
        "name": "Verify User should be able to navigate to calendar page",
        "description": "",
        "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-calendar-page",
        "after": [
          {
            "result": {
              "duration": 15834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1035314125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2006853125,
              "status": "passed"
            },
            "line": 111,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6386880042,
              "status": "passed"
            },
            "line": 112,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 25517014542,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: fb557abb-52a0-4509-837f-a91eaffac581\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Medicine Reminder Track and set reminder daily medicine. Click Here\"])[1]/preceding::XCUIElementTypeOther[2]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.PulseHealthScreen.clickCalendarTile(PulseHealthScreen.java:295)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnCalendarButton(LocationSteps.java:96)\n\tat ✽.Then I click on Calendar tile(features/health/MedicineReminder.feature:113)\n",
              "status": "failed"
            },
            "line": 113,
            "name": "I click on Calendar tile",
            "match": {
              "location": "LocationSteps.iClicksOnCalendarButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 114,
            "name": "I verify following text displayed in Add medicine screen",
            "match": {
              "location": "MyDocSteps.VerifyAddMedicine(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Medicalremainder.text}"
                ],
                "line": 115
              },
              {
                "cells": [
                  "${Medicine_Info}"
                ],
                "line": 116
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Medicine Reminder Positive Flow functionality on one pulse App",
    "description": "",
    "id": "verify-medicine-reminder-positive-flow-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/health/MedicineReminder.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MedicineReminder"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 469042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1664333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 141959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 160167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7293853917,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2761333,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${onepulse.events.user}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.events.user}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 48
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 62855124917,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26350679750,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005791709,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2187183209,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 92791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 33083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 132250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4963187458,
              "status": "passed"
            },
            "line": 13,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 56196363500,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2017328834,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5005664875,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12017224792,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22938666083,
              "status": "passed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 69750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 42083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify MyEvent Functionality in Home screen",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-myevent-functionality-in-home-screen",
        "after": [
          {
            "result": {
              "duration": 27458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 33292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2005406417,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9476607958,
              "status": "passed"
            },
            "line": 24,
            "name": "I click the MyEvent icons",
            "match": {
              "location": "CustomerConnectSteps.clickMyEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5002238333,
              "status": "passed"
            },
            "line": 25,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2978552750,
              "status": "passed"
            },
            "line": 26,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events enrolled yet"
                ],
                "line": 27
              },
              {
                "cells": [
                  "Please choose from the open events and get started"
                ],
                "line": 28
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 76000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 25709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 30,
        "name": "Verify Events Archive tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-events-archive-tab",
        "after": [
          {
            "result": {
              "duration": 21250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 24250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 31655980458,
              "status": "passed"
            },
            "line": 31,
            "name": "I click the Events Archive icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyEventsArchive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 822845792,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events in your archive."
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 31041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "Verify Open Events tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-open-events-tab",
        "after": [
          {
            "result": {
              "duration": 17167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 71209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 31309260375,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the Open Events icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyOpenEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 744375,
              "status": "passed"
            },
            "line": 37,
            "name": "I verify either static text or available open events are displayed on screen",
            "match": {
              "location": "CustomerConnectSteps.verifyOpenEventsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "There are no events available at the moment"
                ],
                "line": 38
              },
              {
                "cells": [
                  "Stay tuned for events on health and fitness"
                ],
                "line": 39
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify MY Event channel functionality on one pulse App",
    "description": "",
    "id": "verify-my-event-channel-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/MyEvents.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MyEvent"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 49917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 89042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 121208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6789299125,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 50278421208,
              "status": "passed"
            },
            "comments": [
              {
                "line": 7,
                "value": "#And Logout of pulse app if user is logged in"
              }
            ],
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19130046000,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3005348917,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1697554417,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 150167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 18000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 22375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1549709,
              "status": "passed"
            },
            "line": 14,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3932419625,
              "status": "passed"
            },
            "line": 15,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 65343579250,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5872838583,
              "status": "passed"
            },
            "line": 19,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10004021750,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13103822291,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22344996917,
              "status": "passed"
            },
            "line": 22,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 28417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 24,
        "name": "Verify User should be able to navigate to Health page",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-health-page",
        "after": [
          {
            "result": {
              "duration": 30417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 49125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2005773708,
              "status": "passed"
            },
            "line": 25,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 9465348459,
              "status": "passed"
            },
            "line": 26,
            "name": "I navigate to Health Content screen",
            "match": {
              "location": "CustomerConnectSteps.iNavigateToWealthScreenz()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8005807708,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 8 sec",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4384771958,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Health Channels"
                ],
                "line": 29
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23116499875,
              "status": "passed"
            },
            "line": 30,
            "name": "I verify the following texts \"My Health Content\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My Health Content",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Category"
                ],
                "line": 31
              },
              {
                "cells": [
                  "Like"
                ],
                "line": 32
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 33
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 34
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 36,
            "value": "#  Scenario: Verify User should be able to Like the post"
          },
          {
            "line": 37,
            "value": "#    And I read the \"Brisk Walking\" post like count"
          },
          {
            "line": 38,
            "value": "#    And I Like the post"
          },
          {
            "line": 39,
            "value": "#    Then I verify \"Brisk Walking\" post like count is increased"
          },
          {
            "line": 40,
            "value": "#    And I Like the post"
          },
          {
            "line": 42,
            "value": "#  Scenario: Verify User should be able to Share the post"
          },
          {
            "line": 43,
            "value": "#    And I share the post"
          },
          {
            "line": 44,
            "value": "#    Then I Verify the share with friends popup"
          },
          {
            "line": 46,
            "value": "#  Scenario: Verify User should be able to Comment the post"
          },
          {
            "line": 47,
            "value": "#    And I read the \"Health Channels\" post comment count"
          },
          {
            "line": 48,
            "value": "#    And I commented in the post \"${wealth.topic.comment}\""
          },
          {
            "line": 49,
            "value": "#    Then I verify \"Health Channels\" post comment count is increased"
          },
          {
            "line": 52,
            "value": "#  Scenario: Verify User should be able to view the story post"
          },
          {
            "line": 53,
            "value": "#    Then I click on \"Brisk Walking\" wealth channel topic"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 86500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 55,
        "name": "Verify User should be able to view the full page article post",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-view-the-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 90042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 120625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 29846541541,
              "status": "passed"
            },
            "line": 56,
            "name": "I click on \"Health Channels\" topic for details full view",
            "match": {
              "arguments": [
                {
                  "val": "Health Channels",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnTopicForDetailsFullView(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10004663834,
              "status": "passed"
            },
            "line": 57,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 75167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 44667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 59,
        "name": "Verify User should be able to see the Like, Share, Comment options on full page article post",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-like,-share,-comment-options-on-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 59375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 44834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15937773333,
              "status": "passed"
            },
            "line": 60,
            "name": "I verify the following texts \"My Health Content\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My Health Content",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Like"
                ],
                "line": 61
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 62
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 63
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 231916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 439500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "Verify User should be able to Like the post in full article view screen",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-like-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 84042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 97708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6597413083,
              "status": "passed"
            },
            "line": 66,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6643885708,
              "status": "passed"
            },
            "comments": [
              {
                "line": 67,
                "value": "##Defect#PCAONEPULSE-22541"
              }
            ],
            "line": 68,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 55916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 37333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 70,
        "name": "Verify User should be able to Share the post in full article view screen",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-share-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 28792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 67042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6338640084,
              "status": "passed"
            },
            "line": 71,
            "name": "I share the post",
            "match": {
              "location": "WealthSteps.iShareThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4603704250,
              "status": "passed"
            },
            "line": 72,
            "name": "I navigate back to previous page",
            "match": {
              "location": "WealthSteps.iNavigateBackToPreviousPage()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1938917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 864000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 74,
        "name": "Verify User can navigate to Health homepage",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-can-navigate-to-health-homepage",
        "after": [
          {
            "result": {
              "duration": 128959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 117375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3423297250,
              "status": "passed"
            },
            "line": 75,
            "name": "I navigate to story post page",
            "match": {
              "location": "WealthSteps.iNavigateToStoryPostPage()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify My Health Content functionality on One Pulse App",
    "description": "",
    "id": "verify-my-health-content-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/MyHealthContent.feature",
    "tags": [
      {
        "line": 1,
        "name": "@HealthChannel"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 29583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-notification-center-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 73792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1552542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 20513250,
              "status": "passed"
            },
            "line": 6,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 570875,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8782600333,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005947458,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 67696351542,
              "status": "passed"
            },
            "line": 10,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006767583,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 24220957708,
              "status": "passed"
            },
            "line": 12,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006963042,
              "status": "passed"
            },
            "line": 13,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7650023292,
              "status": "passed"
            },
            "line": 14,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005254042,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 34716044291,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 17
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 19
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 20
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1859845750,
              "status": "passed"
            },
            "line": 21,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7062505500,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35762738834,
              "status": "passed"
            },
            "line": 23,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2001446792,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 139965664833,
              "status": "passed"
            },
            "line": 25,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21725131833,
              "status": "passed"
            },
            "line": 26,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4005327209,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 4,
            "name": "@NotificationCenter_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 38667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 30,
        "name": "Navigate to notification screen via home screen",
        "description": "",
        "id": "verify-notification-center-functionality-on-one-pulse-app;navigate-to-notification-screen-via-home-screen",
        "after": [
          {
            "result": {
              "duration": 30834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2779125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 314875,
              "status": "passed"
            },
            "line": 31,
            "name": "I relaunch the app on registration failure",
            "match": {
              "location": "RegistrationSteps.iRelaunchTheAppOnRegistrationFailure()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1952571375,
              "status": "passed"
            },
            "line": 32,
            "name": "I navigate to notification screen from home page",
            "match": {
              "location": "ManageProfileSteps.navigateToNotificationScreenFromHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2004840584,
              "status": "passed"
            },
            "line": 33,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 29,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 29,
            "name": "@NotificationCenter_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 31166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 36,
        "name": "Verify User should be able to see the Notification screen texts",
        "description": "",
        "id": "verify-notification-center-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-notification-screen-texts",
        "after": [
          {
            "result": {
              "duration": 21583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 34625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 690290333,
              "status": "passed"
            },
            "line": 37,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${notification.msg}"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 35,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 35,
            "name": "@NotificationCenter_my"
          }
        ]
      }
    ],
    "name": "Verify Notification Center functionality on one pulse App",
    "description": "",
    "id": "verify-notification-center-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/NotificationCenter.feature",
    "tags": [
      {
        "line": 1,
        "name": "@NotificationCenter"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@notificationiOS"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 38250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 47333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 125958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8867396375,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 58433126542,
              "status": "passed"
            },
            "comments": [
              {
                "line": 6,
                "value": "#And Logout of pulse app if user is logged in"
              }
            ],
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23720517042,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3005728000,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1668612625,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 60459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 362500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 349125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 689416,
              "status": "passed"
            },
            "line": 13,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4966400375,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 55489219875,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1776752000,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10002859291,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12570792083,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23097448000,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 104667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Verify My Challenges texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;verify-my-challenges-texts",
        "after": [
          {
            "result": {
              "duration": 44583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 708236916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6309281000,
              "status": "passed"
            },
            "line": 24,
            "name": "I click on My Challenges tile on one pulse app",
            "match": {
              "location": "LoginSteps.myChallengesTile()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 32262310250,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tYou do not have any challenges yet. Please click below to select a challenge and get started text is displayed on page  expected [true] but found [false],\n\tGet Started text is displayed on page  expected [true] but found [false],\n\tYou do not have any challenges yet. Please click below to select a challenge and get started text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\n\tat ✽.And I verify following texts are displayed(features/home/mychallenges/PulseMyChallenges.feature:25)\n",
              "status": "failed"
            },
            "line": 25,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.challenges.text}"
                ],
                "line": 26
              },
              {
                "cells": [
                  "${do.not.have.challenges}"
                ],
                "line": 27
              },
              {
                "cells": [
                  "${challenge.getstarted}"
                ],
                "line": 28
              },
              {
                "comments": [
                  {
                    "line": 29,
                    "value": "#      | ${my.challenges.text}     |"
                  }
                ],
                "cells": [
                  "${do.not.have.challenges}"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "comments": [
              {
                "line": 31,
                "value": "#      | ${challenge.getstarted}   |"
              }
            ],
            "line": 32,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${all.challenges.text}"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 34,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 94292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 59083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "Click on All challenges and and verify texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;click-on-all-challenges-and-and-verify-texts",
        "after": [
          {
            "result": {
              "duration": 49917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 74750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 29622891625,
              "status": "passed"
            },
            "line": 36,
            "name": "I clicks on \"${all.challenges.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${all.challenges.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35285387333,
              "status": "passed"
            },
            "line": 37,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.challenges.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${all.challenges.text}"
                ],
                "line": 39
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13978839792,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${not.connected.wearable}"
                ],
                "line": 41
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify  My Challenges on One Pulse App",
    "description": "",
    "id": "verify--my-challenges-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/mychallenges/PulseMyChallenges.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_challenges"
      },
      {
        "line": 1,
        "name": "@pulse_sg"
      },
      {
        "line": 1,
        "name": "@pulse_regression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@pulse_my"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@my_challengesSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 101250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 74417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 38583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 69583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7108499583,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 63873843125,
              "status": "passed"
            },
            "comments": [
              {
                "line": 6,
                "value": "#    And Logout of pulse app if user is logged in"
              }
            ],
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26482211500,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3005637083,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1578019709,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 53500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "User should be able to login on app with correct credentials using \"Continue with Gmail\"",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-gmail\"",
        "after": [
          {
            "result": {
              "duration": 30583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 31875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3383458,
              "status": "passed"
            },
            "line": 13,
            "name": "I assign \"${onepulse.login.global.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5778328042,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 34386338000,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1995379625,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10015785958,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17174179625,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25020557250,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 28583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\" and Verify the Mycommunities screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"-and-verify-the-mycommunities-screen",
        "after": [
          {
            "result": {
              "duration": 35666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 139042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6005425708,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 6 sec",
            "match": {
              "arguments": [
                {
                  "val": "6",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1081521625,
              "status": "passed"
            },
            "line": 25,
            "name": "I click the MyCommunities icon",
            "match": {
              "location": "MyCommunitiesSteps.clickMyCommunities()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6005478333,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 6 sec",
            "match": {
              "arguments": [
                {
                  "val": "6",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 687018000,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${icon.communities}"
                ],
                "line": 28
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9646141042,
              "status": "passed"
            },
            "line": 29,
            "name": "I verify the following texts \"All Communities\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "All Communities",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.communities.text}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${All.Communities.text}"
                ],
                "line": 31
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 100458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 33,
        "name": "Leave the community if already joined",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;leave-the-community-if-already-joined",
        "after": [
          {
            "result": {
              "duration": 32208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 80875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 25965907291,
              "status": "passed"
            },
            "line": 34,
            "name": "I clicks on \"${my.communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5005598875,
              "status": "passed"
            },
            "line": 35,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2165823625,
              "status": "passed"
            },
            "line": 36,
            "name": "I leave all joined communities by clicking on three dots menu icon on my My communities screen",
            "match": {
              "location": "MyCommunitiesSteps.leaveAllJoinedCommunities()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 37,
            "value": "#    When I click on joined community three dots menu icon"
          },
          {
            "line": 38,
            "value": "#    And I click on leave button for joined community"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 78541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 41,
        "name": "Verify the All Communities Post screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-all-communities-post-screen",
        "after": [
          {
            "result": {
              "duration": 17042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1411262791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5005454167,
              "status": "passed"
            },
            "line": 42,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 28089470583,
              "status": "passed"
            },
            "line": 43,
            "name": "I clicks on \"${All.Communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${All.Communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15805433375,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: c0f9dfc5-9e8d-4efb-a408-a0ddf816393c\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"All Communities\"]/following::XCUIElementTypeOther[@name\u003d\"JOIN\"][1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.Joinbuttons(MyCommunitiesScreen.java:191)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.Joinbuttons(MyCommunitiesSteps.java:57)\n\tat ✽.And I click the Join button in Communties tab(features/home/mycommunities/PulseMyCommunities.feature:44)\n",
              "status": "failed"
            },
            "line": 44,
            "name": "I click the Join button in Communties tab",
            "match": {
              "location": "MyCommunitiesSteps.Joinbuttons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "I click the static Active icon in community screen",
            "match": {
              "location": "MyCommunitiesSteps.StaryActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "I click Edit icon in stay Active icon",
            "match": {
              "location": "MyCommunitiesSteps.clickEditiconstayActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 47,
            "name": "Enter the post in community screen",
            "match": {
              "location": "MyCommunitiesSteps.enterNric(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "TEST1"
                ],
                "line": 48
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 49,
            "name": "Enter the post in community large text screen",
            "match": {
              "location": "MyCommunitiesSteps.enterlargeText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "welcome"
                ],
                "line": 50
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I click the Post icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.clickPostIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 52,
            "name": "I verify the following text \"TEST1\" in post Screen",
            "match": {
              "arguments": [
                {
                  "val": "TEST1",
                  "offset": 29
                }
              ],
              "location": "MyCommunitiesSteps.verifypostscreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "TEST1"
                ],
                "line": 53
              },
              {
                "cells": [
                  "welcome"
                ],
                "line": 54
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 297375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1795542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 56,
        "name": "Verify the Likes and comments counts in All communities tab",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-likes-and-comments-counts-in-all-communities-tab",
        "after": [
          {
            "result": {
              "duration": 57375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 831442250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10334879292,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: c0f9dfc5-9e8d-4efb-a408-a0ddf816393c\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"TEST1 welcome\"])[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickFeeds(MyCommunitiesScreen.java:320)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.clickIcons(MyCommunitiesSteps.java:106)\n\tat ✽.And I click the Post icon in My communities(features/home/mycommunities/PulseMyCommunities.feature:57)\n",
              "status": "failed"
            },
            "line": 57,
            "name": "I click the Post icon in My communities",
            "match": {
              "location": "MyCommunitiesSteps.clickIcons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "I click the like button in Post screen",
            "match": {
              "location": "MyCommunitiesSteps.Clicklikesbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "Verify the like count in Post screen \" 1 Likes\" likes",
            "match": {
              "arguments": [
                {
                  "val": " 1 Likes",
                  "offset": 38
                }
              ],
              "location": "MyCommunitiesSteps.verifyLikescountInFeeds(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "I click the Comment icon in feed screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickCommentsbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "Enter the comments in Feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.FeedsComments(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Comments",
                  "TEST1"
                ],
                "line": 63
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 64,
            "name": "I click the submit icon in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickfeedssubmitbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 65,
            "name": "Verify the comments count in Feeds screen \" 0 Comments\" comments",
            "match": {
              "arguments": [
                {
                  "val": " 0 Comments",
                  "offset": 43
                }
              ],
              "location": "MyCommunitiesSteps.verifyCommentsscountInFeeds(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 514834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1199250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 67,
        "name": "Verify the Share with Friends Functionality in All communities tab",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-share-with-friends-functionality-in-all-communities-tab",
        "after": [
          {
            "result": {
              "duration": 52834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 925040708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12489518542,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: c0f9dfc5-9e8d-4efb-a408-a0ddf816393c\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Share\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickShareIcon(MyCommunitiesScreen.java:566)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.ClickShareIcon(MyCommunitiesSteps.java:173)\n\tat ✽.And I click the share icon in Post screen(features/home/mycommunities/PulseMyCommunities.feature:68)\n",
              "status": "failed"
            },
            "line": 68,
            "name": "I click the share icon in Post screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickShareIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "Verify the pop up in \"Share with Friends\"",
            "match": {
              "arguments": [
                {
                  "val": "Share with Friends",
                  "offset": 22
                }
              ],
              "location": "MyCommunitiesSteps.VerifySharewithFriends(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 70,
            "name": "I click the phone icon in share with friends",
            "match": {
              "location": "MyCommunitiesSteps.clickPhoneIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 71,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 581041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2212875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 74,
        "name": "Verify the Post Functionality in All communities",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-post-functionality-in-all-communities",
        "after": [
          {
            "result": {
              "duration": 56375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1202559000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 17652283167,
              "status": "passed"
            },
            "line": 75,
            "name": "I click skip button in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.clickSkipbutton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2008346833,
              "status": "passed"
            },
            "line": 76,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20380472042,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: c0f9dfc5-9e8d-4efb-a408-a0ddf816393c\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Dance for Wellness\"])[2]/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.Clickstaricon(MyCommunitiesScreen.java:479)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.Clickstarutton(MyCommunitiesSteps.java:153)\n\tat ✽.And I click the Back icon in Stay Active screen(features/home/mycommunities/PulseMyCommunities.feature:77)\n",
              "status": "failed"
            },
            "line": 77,
            "name": "I click the Back icon in Stay Active screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickstarutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 78,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 79,
            "name": "I click Edit icon in stay Active icon",
            "match": {
              "location": "MyCommunitiesSteps.clickEditiconstayActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 80,
            "name": "I click the Camera icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickCameraIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "I click the Upload Image icon",
            "match": {
              "location": "MyCommunitiesSteps.clickUploadIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 82,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 83,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 84,
            "name": "Enter the post in community screen",
            "match": {
              "location": "MyCommunitiesSteps.enterNric(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "TEST1"
                ],
                "line": 85
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 86,
            "name": "Enter the post in community large text screen",
            "match": {
              "location": "MyCommunitiesSteps.enterlargeText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "welcome"
                ],
                "line": 87
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 88,
            "name": "I click the Post icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.clickPostIcon()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 924833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1612167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 90,
        "name": "Verify the Category list and search feature",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-category-list-and-search-feature",
        "after": [
          {
            "result": {
              "duration": 92000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1024368792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15008964250,
              "status": "passed"
            },
            "comments": [
              {
                "line": 91,
                "value": "#   And I click the Back icon in Stay Active screen"
              }
            ],
            "line": 92,
            "name": "I wait for 15 sec",
            "match": {
              "arguments": [
                {
                  "val": "15",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 37499603583,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: c0f9dfc5-9e8d-4efb-a408-a0ddf816393c\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"Category\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1738)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:534)\n\tat ✽.And I clicks on \"${category.text}\" in app screen(features/home/mycommunities/PulseMyCommunities.feature:93)\n",
              "status": "failed"
            },
            "line": 93,
            "name": "I clicks on \"${category.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${category.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 94,
            "name": "I verify the following texts \"Category\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Category",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "COVID-19"
                ],
                "line": 95
              },
              {
                "cells": [
                  "Fitness"
                ],
                "line": 96
              },
              {
                "cells": [
                  "Global Awareness Days"
                ],
                "line": 97
              },
              {
                "cells": [
                  "Mental Health"
                ],
                "line": 98
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 99,
            "name": "I clicks on \"${no.post.category}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${no.post.category}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 100,
            "name": "I clicks on \"${apply.button}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${apply.button}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 101,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${no.post.found.text}"
                ],
                "line": 102
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1093625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1741584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 104,
        "name": "User navigates back to the community screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-navigates-back-to-the-community-screen",
        "after": [
          {
            "result": {
              "duration": 30708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1991465125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 21354391083,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: c0f9dfc5-9e8d-4efb-a408-a0ddf816393c\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeOther[@name\u003d\"Dance for Wellness\"])[2]/XCUIElementTypeOther}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.Clickstaricon(MyCommunitiesScreen.java:479)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.Clickstarutton(MyCommunitiesSteps.java:153)\n\tat ✽.And I click the Back icon in Stay Active screen(features/home/mycommunities/PulseMyCommunities.feature:105)\n",
              "status": "failed"
            },
            "line": 105,
            "name": "I click the Back icon in Stay Active screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickstarutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 106,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 499000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1146291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 108,
        "name": "Leave the community if already joined",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;leave-the-community-if-already-joined",
        "after": [
          {
            "result": {
              "duration": 99292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 725042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 36469772250,
              "status": "passed"
            },
            "line": 109,
            "name": "I clicks on \"${my.communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6299442416,
              "status": "passed"
            },
            "line": 110,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1744969042,
              "status": "passed"
            },
            "line": 111,
            "name": "I click on joined community three dots menu icon",
            "match": {
              "location": "MyCommunitiesSteps.clickOnJoinedCommMenu()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10144296875,
              "status": "passed"
            },
            "line": 112,
            "name": "I click on leave button for joined community",
            "match": {
              "location": "MyCommunitiesSteps.leaveJoinedCommunity()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify My Communities on One Pluse App",
    "description": "",
    "id": "verify-my-communities-on-one-pluse-app",
    "keyword": "Feature",
    "uri": "features/home/mycommunities/PulseMyCommunities.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_communties"
      },
      {
        "line": 1,
        "name": "@pulse_sg"
      },
      {
        "line": 1,
        "name": "@pulse_regression"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 18000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 72583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 91708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9521565250,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 67910862333,
              "status": "passed"
            },
            "comments": [
              {
                "line": 6,
                "value": "# And Logout of pulse app if user is logged in"
              }
            ],
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24015345417,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3006048042,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1582620500,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 111292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 30875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 76583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 101208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 734709,
              "status": "passed"
            },
            "line": 13,
            "name": "I assign \"${mychannel.private.user}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${mychannel.private.user}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 50
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4745051750,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36611773500,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1865948958,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10005535959,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14174607208,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24319920292,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 68666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 265708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Verify the My communities screen",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;verify-the-my-communities-screen",
        "after": [
          {
            "result": {
              "duration": 45917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 75084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1222744833,
              "status": "passed"
            },
            "line": 24,
            "name": "I click the MyCommunities icon",
            "match": {
              "location": "MyCommunitiesSteps.clickMyCommunities()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3005488167,
              "status": "passed"
            },
            "comments": [
              {
                "line": 25,
                "value": "#   Given User has pulse app"
              },
              {
                "line": 26,
                "value": "#   And I clicks on \"${my.communities.text}\" in app screen"
              },
              {
                "line": 27,
                "value": "#    And User should be verify \"${my.communities.text}\" tab in Home screen"
              }
            ],
            "line": 28,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2469301458,
              "status": "passed"
            },
            "line": 29,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${icon.communities}"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9368976084,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify the following texts \"All Communities\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "All Communities",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.communities.text}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${All.Communities.text}"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3005572750,
              "status": "passed"
            },
            "line": 34,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 35,
            "value": "#    And I verify the following texts \"Communities\" in Screen"
          },
          {
            "line": 36,
            "value": "#      | ${my.communities.text}  |"
          },
          {
            "line": 37,
            "value": "#      | ${All.Communities.text} |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 55166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "Verify the Private Communities in communities screen",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;verify-the-private-communities-in-communities-screen",
        "after": [
          {
            "result": {
              "duration": 483875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 124833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 912594708,
              "status": "passed"
            },
            "line": 40,
            "name": "I click the Private \"${All.Communities.text}\" in Communties screen",
            "match": {
              "arguments": [
                {
                  "val": "${All.Communities.text}",
                  "offset": 21
                }
              ],
              "location": "MyCommunitiesSteps.Click_PrivateCommunties(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9868779541,
              "status": "passed"
            },
            "line": 41,
            "name": "I Enter the \"e.g. Be Healthy content, Challenges etc.\" in \"Test\" in home screen",
            "match": {
              "arguments": [
                {
                  "val": "e.g. Be Healthy content, Challenges etc.",
                  "offset": 13
                },
                {
                  "val": "Test",
                  "offset": 59
                }
              ],
              "location": "CustomerConnectSteps.i_Enter_the_in_in_home_screen(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7923862667,
              "status": "passed"
            },
            "line": 42,
            "name": "I Enter the \"e.g. Healthy content, forum for celebrities etc.\" in \"2020\" in home new screen",
            "match": {
              "arguments": [
                {
                  "val": "e.g. Healthy content, forum for celebrities etc.",
                  "offset": 13
                },
                {
                  "val": "2020",
                  "offset": 67
                }
              ],
              "location": "CustomerConnectSteps.EnterTextDescription(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14124125125,
              "status": "passed"
            },
            "line": 43,
            "name": "I clicks on \"Take a Picture\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "Take a Picture",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2399641042,
              "status": "passed"
            },
            "line": 44,
            "name": "I click the Upload Image icon",
            "match": {
              "location": "MyCommunitiesSteps.clickUploadIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11218070834,
              "status": "passed"
            },
            "line": 45,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7299748042,
              "status": "passed"
            },
            "line": 46,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3005703625,
              "status": "passed"
            },
            "line": 47,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6887699333,
              "status": "passed"
            },
            "line": 48,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4718400333,
              "status": "passed"
            },
            "line": 49,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 72041149334,
              "status": "passed"
            },
            "line": 50,
            "name": "I click skip button in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.clickSkipbutton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30791760291,
              "status": "passed"
            },
            "line": 51,
            "name": "I clicks on \"OK\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "OK",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Private My Communities on One Pulse App",
    "description": "",
    "id": "verify-private-my-communities-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/home/mycommunities/PulseMyCommunities_private.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_communties_private"
      },
      {
        "line": 1,
        "name": "@pulse_sg"
      },
      {
        "line": 1,
        "name": "@pulse_regression"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@Sanity"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 78041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 271750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 331583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 878000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9234566500,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1674000,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${pulse.legal.privacy.login.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${pulse.legal.privacy.login.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 56
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 78909397167,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28253306000,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5005575250,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1625456500,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 378083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 111833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6082140459,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 58269766667,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2973545417,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5006658625,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11904469916,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22734319916,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 245416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Navigate to account screen",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;navigate-to-account-screen",
        "after": [
          {
            "result": {
              "duration": 13083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 19750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 19549558417,
              "status": "passed"
            },
            "line": 24,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 56792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 34583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 26,
        "name": "Verify the Legacy and Privacy should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-legacy-and-privacy-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 24208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 38583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6656188958,
              "status": "passed"
            },
            "line": 27,
            "name": "I click the Legacy and Privacy in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickLegalandLegacy()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13182773042,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Terms.conditions.text}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${icon.privacyNotice}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${icon.regulatory}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${app.version.text}"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 63292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 44375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 34,
        "name": "Verify the Terms and condition screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-terms-and-condition-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 16959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 83417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3352082125,
              "status": "passed"
            },
            "line": 35,
            "name": "I click on \"${Terms.conditions.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${Terms.conditions.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3021072375,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the pulse icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickpulseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7848734125,
              "status": "passed"
            },
            "line": 37,
            "name": "I click the Back icon in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5239967750,
              "status": "passed"
            },
            "line": 38,
            "name": "I click the Back icon in Terms and conditions screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInTermsConditionScreen()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 81750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 380750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 40,
        "name": "Verify the Privacy screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-privacy-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 35458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 41125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2812305083,
              "status": "passed"
            },
            "line": 41,
            "name": "I click the Privacy icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickprivacyIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2392689750,
              "status": "passed"
            },
            "line": 42,
            "name": "I click the pulse icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickpulseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9927106875,
              "status": "passed"
            },
            "line": 43,
            "name": "I click the Back icon in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3374388875,
              "status": "passed"
            },
            "line": 44,
            "name": "I click the Back icon in Privacy Notice",
            "match": {
              "location": "CustomerConnectSteps.clickBackbuttonPrivacy()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 45,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 82583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 46,
        "name": "Verify the Regulator screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pulse-app;verify-the-regulator-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 65708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 112000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2002018208,
              "status": "passed"
            },
            "line": 47,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1430730041,
              "status": "passed"
            },
            "line": 48,
            "name": "I click the Regulatory icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickRegulatory()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2611390417,
              "status": "passed"
            },
            "line": 49,
            "name": "I click the Babylons  icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickBabylon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17222417375,
              "status": "passed"
            },
            "line": 50,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${clinicalSafety.text}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${ai.healthcare.text}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${localisation.text}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${privacy.date.protection.text}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${concern.reporting.text}"
                ],
                "line": 55
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify legal and legacy on One pulse App",
    "description": "",
    "id": "verify-legal-and-legacy-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/MyAccount/LegalAndPrivacy.feature",
    "tags": [
      {
        "line": 1,
        "name": "@Legalandprivacy_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 53834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 40542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 10,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 61333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 93417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10497249958,
              "status": "passed"
            },
            "line": 11,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2056334,
              "status": "passed"
            },
            "line": 12,
            "name": "I assign \"${onepulse.login.edit.profile}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.edit.profile}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 55
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 69650033167,
              "status": "passed"
            },
            "line": 13,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24508371709,
              "status": "passed"
            },
            "line": 14,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5006376834,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1706464458,
              "status": "passed"
            },
            "line": 16,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 62375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 18,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 113167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 29375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4245197375,
              "status": "passed"
            },
            "line": 19,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 57699916125,
              "status": "passed"
            },
            "line": 20,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 21
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2158797500,
              "status": "passed"
            },
            "line": 23,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5007477625,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11552528000,
              "status": "passed"
            },
            "line": 25,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19996542125,
              "status": "passed"
            },
            "line": 26,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 115541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 28,
        "name": "Navigate to account screen and verify all the options",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-to-account-screen-and-verify-all-the-options",
        "after": [
          {
            "result": {
              "duration": 27750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 29708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 19247505250,
              "status": "passed"
            },
            "line": 29,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2005035500,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25746804167,
              "status": "passed"
            },
            "line": 31,
            "name": "user should verify following options on account screen",
            "match": {
              "location": "ManageProfileSteps.userShouldVerifyOptionsOnAccountScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.wearable.text}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${my.rewards.text}"
                ],
                "line": 33
              },
              {
                "cells": [
                  "${my.notification.text}"
                ],
                "line": 34
              },
              {
                "cells": [
                  "${icon.mySettings}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${my.feedback.text}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${icon.legal\u0026Privacy}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${pulsePersonalised.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${sign.out.button.text}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${logs.text}"
                ],
                "line": 40
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 22000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 42,
        "name": "Verify wearable screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-wearable-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 1176459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 131333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2578942625,
              "status": "passed"
            },
            "line": 43,
            "name": "I click on \"${my.wearable.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.wearable.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2004700417,
              "status": "passed"
            },
            "line": 44,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12510502125,
              "status": "passed"
            },
            "line": 45,
            "name": "I verify following text are displayed under My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyWearablesScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${wearables.title}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${wearables.subTitle}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${wearables.description}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${wearables.fitbitText}"
                ],
                "line": 49
              },
              {
                "cells": [
                  "${wearables.garminText}"
                ],
                "line": 50
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1294566250,
              "status": "passed"
            },
            "line": 51,
            "name": "I verify following wearables are displayed as per the device",
            "match": {
              "location": "ManageProfileSteps.verifyWearables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${apple.health.text}##${wearables.googleFit}"
                ],
                "line": 52
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 26458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 54,
        "name": "navigate back to account screen from my wearable screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-my-wearable-screen",
        "after": [
          {
            "result": {
              "duration": 28708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 41208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2578679541,
              "status": "passed"
            },
            "line": 55,
            "name": "user navigate back to the Home screen from My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.backNavigationMyWearablesHome()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2004715625,
              "status": "passed"
            },
            "line": 56,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 14166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 58,
        "name": "Navigate to account screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-to-account-screen",
        "after": [
          {
            "result": {
              "duration": 31167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 38708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 19004576792,
              "status": "passed"
            },
            "line": 59,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2005409208,
              "status": "passed"
            },
            "line": 60,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 39708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 62,
        "name": "Verify reward screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-reward-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 51375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 36291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1833437042,
              "status": "passed"
            },
            "line": 63,
            "name": "I click on \"${my.rewards.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.rewards.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2004914416,
              "status": "passed"
            },
            "line": 64,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20045788833,
              "status": "passed"
            },
            "line": 65,
            "name": "User verify following texts are displayed in My Rewards screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnRewardsScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myRewards.title}"
                ],
                "line": 66
              },
              {
                "cells": [
                  "${myRewards.badges}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "${myRewards.vouchers}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${myRewards.discover}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${my.rewards.text}"
                ],
                "line": 70
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 36416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 30625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 72,
        "name": "User access My Rewards FAQ",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;user-access-my-rewards-faq",
        "after": [
          {
            "result": {
              "duration": 21833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 518166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7821027875,
              "status": "passed"
            },
            "line": 73,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2005115917,
              "status": "passed"
            },
            "line": 74,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1614225584,
              "status": "passed"
            },
            "line": 75,
            "name": "User verify following texts are displayed in My Rewards screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnRewardsScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.title}"
                ],
                "line": 76
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 127625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;2",
        "after": [
          {
            "result": {
              "duration": 18292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 940500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2643500333,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.1}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.1}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4483321416,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.1}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3364913542,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.1.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.1.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4362336500,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.1}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.1}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 112750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 88,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;3",
        "after": [
          {
            "result": {
              "duration": 16500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 89750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 3907113459,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.2}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.2}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3466529333,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.2}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4263787083,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.2.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.2.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4371764417,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.2}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.2}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 16000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 89,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;4",
        "after": [
          {
            "result": {
              "duration": 50125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 36916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 3083905333,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.3}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.3}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5813575167,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.3}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2509417916,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.3.ans.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3.ans.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.3.ans.1}##${myRewards.faq.3.ans.2}##${myRewards.faq.3.ans.3}##${myRewards.faq.3.ans.4}##${myRewards.faq.3.ans.5}##${myRewards.faq.3.ans.6}##${myRewards.faq.3.ans.7}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3226804000,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.3}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.3}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 90,
            "value": "#      | ${myRewards.faq.4.2}##${myRewards.faq.4.3} | ${myRewards.faq.4.ans}                                                                                                                                                               | ${myRewards.faq.4.subtext} | ${myRewards.faq.4.ans}         |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 60500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 51208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 91,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;5",
        "after": [
          {
            "result": {
              "duration": 24084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 39916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4673908083,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.5}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.5}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3960683167,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.5}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3580708458,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.5.ans.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5.ans.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.5.ans.1}##${myRewards.faq.5.ans.2}##${myRewards.faq.5.ans.3}##${myRewards.faq.5.ans.4}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3868580334,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.5}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.5}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 44125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 92,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;6",
        "after": [
          {
            "result": {
              "duration": 24584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 42209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5683606166,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.6}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.6}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2329469625,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.6}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3104470625,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.6.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.6.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4639320458,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.6}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.6}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 50375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 93,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;7",
        "after": [
          {
            "result": {
              "duration": 35750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 27958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 3401086916,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.7}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.7}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3601878750,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.7}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4133330625,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.7.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.7.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3980857209,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.7}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.7}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 94,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;8",
        "after": [
          {
            "result": {
              "duration": 38000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 30000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 6760327250,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.8}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.8}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1710809084,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.8}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2768062417,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.8.ans.subtext}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8.ans.subtext}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.8.ans.1}##${myRewards.faq.8.ans.2}##${myRewards.faq.8.ans.3}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4355962333,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.8}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.8}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 63375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 95,
        "name": "Verify the FAQ on my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-faq-on-my-rewards-screen;;9",
        "after": [
          {
            "result": {
              "duration": 57250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 76291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 4874052917,
              "status": "passed"
            },
            "line": 79,
            "name": "User verify following faqs and answers \"${myRewards.faq.9}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              0,
              2
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.9}"
                ],
                "line": 80
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3593613334,
              "status": "passed"
            },
            "line": 81,
            "name": "I expand faq \"${myRewards.faq.9}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4398702583,
              "status": "passed"
            },
            "line": 82,
            "name": "User verify following faqs and answers \"${myRewards.faq.9.ans}\" are displayed in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9.ans}",
                  "offset": 40
                }
              ],
              "location": "ManageProfileSteps.verifyFAQOnRewardsScreen(String,DataTable)"
            },
            "matchedColumns": [
              1,
              3
            ],
            "rows": [
              {
                "cells": [
                  "${myRewards.faq.9.ans}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3620173333,
              "status": "passed"
            },
            "line": 84,
            "name": "I expand faq \"${myRewards.faq.9}\" in My Rewards screen",
            "match": {
              "arguments": [
                {
                  "val": "${myRewards.faq.9}",
                  "offset": 14
                }
              ],
              "location": "ManageProfileSteps.expandFAQOnRewardsScreen(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@MyAccount_my"
          },
          {
            "line": 1,
            "name": "@OnepulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 97,
        "name": "navigate back to account screen from my rewards screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-my-rewards-screen",
        "after": [
          {
            "result": {
              "duration": 72042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1799542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 49135567583,
              "status": "passed"
            },
            "line": 98,
            "name": "I click on back button on my reward screen to navigate to account screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInRewardScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006510209,
              "status": "passed"
            },
            "line": 99,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 26500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 101,
        "name": "Verify Notification screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-notification-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 19375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 16292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3006732667,
              "status": "passed"
            },
            "line": 102,
            "name": "I click on \"${my.notification.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.notification.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3446059958,
              "status": "passed"
            },
            "line": 103,
            "name": "User verify following texts are displayed in My Notification screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnNotificationScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${notification.msg}"
                ],
                "line": 104
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 25875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 41500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 106,
        "name": "navigate back to account screen from Notification screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-notification-screen",
        "after": [
          {
            "result": {
              "duration": 23166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 33000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2464195583,
              "status": "passed"
            },
            "line": 107,
            "name": "I click on back button on notification screen to navigate to account screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInNotificationScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005691166,
              "status": "passed"
            },
            "line": 108,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 110,
        "name": "Verify my feedback screen in Account tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-my-feedback-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 14709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 17541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2401609584,
              "status": "passed"
            },
            "line": 111,
            "name": "I click on \"${my.feedback.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.feedback.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9577694292,
              "status": "passed"
            },
            "line": 112,
            "name": "User verify following texts are displayed in My feedback screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyFeedbackScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${feedback.static.text}"
                ],
                "line": 113
              },
              {
                "cells": [
                  "${feedback.improvement}"
                ],
                "line": 114
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14603819417,
              "status": "passed"
            },
            "line": 115,
            "name": "User verify following feedback options are displayed in My feedback screen",
            "match": {
              "location": "ManageProfileSteps.verifyFeedbackOptionOnMyFeedbackScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${aime.text}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "${health.article.text}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "${bmi.text.uppercase}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "${wrinkle.text}"
                ],
                "line": 119
              },
              {
                "cells": [
                  "${health.assessment.text}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "${babylon.symptom.checker}"
                ],
                "line": 121
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5304637042,
              "status": "passed"
            },
            "line": 122,
            "name": "I verify following edit box sample text is displayed in account screen",
            "match": {
              "location": "ManageProfileSteps.verifySampleText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${share.thought.text}"
                ],
                "line": 123
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 16917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 126,
        "name": "Verify the submit functionality in My feedback screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-submit-functionality-in-my-feedback-screen",
        "after": [
          {
            "result": {
              "duration": 31958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 38417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1074484667,
              "status": "passed"
            },
            "line": 127,
            "name": "I select \"5\" star in feedback screen",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 10
                }
              ],
              "location": "ManageProfileSteps.selectStarInFeedbackForm(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3010282209,
              "status": "passed"
            },
            "line": 128,
            "name": "I enter feedback",
            "match": {
              "location": "ManageProfileSteps.enterFeedback(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Feedback",
                  "Test_12345"
                ],
                "line": 129
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12982957125,
              "status": "passed"
            },
            "line": 130,
            "name": "I click the Submit icon in Feedback Screen",
            "match": {
              "location": "CustomerConnectSteps.clickSubmitFeedbackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005838250,
              "status": "passed"
            },
            "line": 131,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 48042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 133,
        "name": "Verify the Pulse Personalised tab",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;verify-the-pulse-personalised-tab",
        "after": [
          {
            "result": {
              "duration": 17084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 20125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3531124750,
              "status": "passed"
            },
            "line": 134,
            "name": "I click on \"${pulsePersonalised.text}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${pulsePersonalised.text}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005194917,
              "status": "passed"
            },
            "line": 135,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4524442083,
              "status": "passed"
            },
            "line": 136,
            "name": "User verify following texts are displayed in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnPulsePersonalisedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${pulsePersonalised.text}"
                ],
                "line": 137
              },
              {
                "cells": [
                  "${data.privacy.text}"
                ],
                "line": 138
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12362029291,
              "status": "passed"
            },
            "line": 139,
            "name": "I verify data and privacy consent in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyDataAndPrivacyConsent(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${pulse.personalised.consent.text1}"
                ],
                "line": 140
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text2}"
                ],
                "line": 141
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text3}"
                ],
                "line": 142
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text4}"
                ],
                "line": 143
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text5}"
                ],
                "line": 144
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text6}"
                ],
                "line": 145
              },
              {
                "cells": [
                  "${pulse.personalised.consent.text7}"
                ],
                "line": 146
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 18750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 148,
        "name": "Save the consent with data privacy check",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;save-the-consent-with-data-privacy-check",
        "after": [
          {
            "result": {
              "duration": 29500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 34000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1995374416,
              "status": "passed"
            },
            "line": 149,
            "name": "I select the data privacy checkbox",
            "match": {
              "location": "ManageProfileSteps.dataPrivacyCheckbox()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2340550708,
              "status": "passed"
            },
            "line": 150,
            "name": "I click the save button in pulse personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickSavebuttonpersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6496591125,
              "status": "passed"
            },
            "line": 151,
            "name": "User verify following texts are displayed in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnPulsePersonalisedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${consent.success.msg.text}"
                ],
                "line": 152
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2029235875,
              "status": "passed"
            },
            "line": 153,
            "name": "I click the Ok button in pulse personlised screen",
            "match": {
              "location": "CustomerConnectSteps.clickpersonalisedscreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2002273000,
              "status": "passed"
            },
            "line": 154,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 87292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 156,
        "name": "Save the consent without data privacy check",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;save-the-consent-without-data-privacy-check",
        "after": [
          {
            "result": {
              "duration": 26750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 30208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4708180125,
              "status": "passed"
            },
            "line": 157,
            "name": "I select the data privacy checkbox",
            "match": {
              "location": "ManageProfileSteps.dataPrivacyCheckbox()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 958650791,
              "status": "passed"
            },
            "line": 158,
            "name": "I click the save button in pulse personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickSavebuttonpersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4403035750,
              "status": "passed"
            },
            "line": 159,
            "name": "User verify following texts are displayed in pulse personalised screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnPulsePersonalisedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${consent.success.msg.text}"
                ],
                "line": 160
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2751945125,
              "status": "passed"
            },
            "line": 161,
            "name": "I click the Ok button in pulse personlised screen",
            "match": {
              "location": "CustomerConnectSteps.clickpersonalisedscreen()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 54500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 164,
        "name": "navigate back to account screen from pulse personalised screen",
        "description": "",
        "id": "verify-my-accounts-options-in-account-screen;navigate-back-to-account-screen-from-pulse-personalised-screen",
        "after": [
          {
            "result": {
              "duration": 14875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 20334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8830386667,
              "status": "passed"
            },
            "line": 165,
            "name": "I click the Back icon in pulse personalised screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackpersonalisedScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2000742791,
              "status": "passed"
            },
            "line": 166,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify My accounts options in Account screen",
    "description": "1)My wearable\n2)My Rewards\n3)My Notifications\n4)My Feedback\n5)Pulse Personalised",
    "id": "verify-my-accounts-options-in-account-screen",
    "keyword": "Feature",
    "uri": "features/my/MyAccount/PulseMyAccount.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MyAccount_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 178208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 63917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 78250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8720911500,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2386250,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${onepulse.login.edit.profile}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.edit.profile}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 55
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 67115364375,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 27472393792,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5005756417,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1570938708,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 155166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 52000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 48083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 59000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5190443250,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36045189458,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2072972500,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5005914167,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14461274000,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19436694833,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 59958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 60791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Navigate to account screen",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;navigate-to-account-screen",
        "after": [
          {
            "result": {
              "duration": 17291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 22542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 20299551833,
              "status": "passed"
            },
            "line": 24,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Given "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 26,
        "name": "Verify my setting screen in Account tab",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-my-setting-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 15875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 22208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2005340333,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1881608958,
              "status": "passed"
            },
            "line": 28,
            "name": "I click on \"${icon.mySettings}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${icon.mySettings}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005239125,
              "status": "passed"
            },
            "line": 29,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 30,
            "value": "##below steps are not working in Android"
          },
          {
            "line": 31,
            "value": "#    Then User verify following texts are displayed in My Setting screen"
          },
          {
            "line": 32,
            "value": "#      | ${country.text}          |"
          },
          {
            "line": 33,
            "value": "#      | ${country.name}          |"
          },
          {
            "line": 34,
            "value": "#      | ${language.text}         |"
          },
          {
            "line": 35,
            "value": "#      | ${lang.name.text}        |"
          },
          {
            "line": 36,
            "value": "#      | ${change.password.text}  |"
          },
          {
            "line": 37,
            "value": "##      | ${enable.face.auth.text} | 7 |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 19625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "navigate back to account screen from my setting screen",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;navigate-back-to-account-screen-from-my-setting-screen",
        "after": [
          {
            "result": {
              "duration": 16833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 18000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3437028542,
              "status": "passed"
            },
            "line": 40,
            "name": "I click on back button on my settings screen to navigate to account screen",
            "match": {
              "location": "ManageProfileSteps.clickBackButtonInMySettingScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005179292,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify MySettings functionality in Account screen",
    "description": "",
    "id": "verify-mysettings-functionality-in-account-screen",
    "keyword": "Feature",
    "uri": "features/my/MyAccount/PulseMySetting.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MySettings_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "comments": [
          {
            "line": 4,
            "value": "# fitness tab is not available in ios device"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 17666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 49250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 79000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9515060583,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1100666,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 67668809125,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26546587459,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5005314917,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1566361083,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 38833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 82000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 3116542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8176079917,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38119322458,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2023671209,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5003166292,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15957542167,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22806811333,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 79125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 43792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Verify the user can access My Wearables via Fitness",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;verify-the-user-can-access-my-wearables-via-fitness",
        "after": [
          {
            "result": {
              "duration": 31083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 4194921416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9095433042,
              "status": "passed"
            },
            "line": 24,
            "name": "User clicks on Fitness tab",
            "match": {
              "location": "OptionsInFooterSteps.clickOnFitnessTab()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 21342922875,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: My Wearables expected [true] but found [false],\n\tthe expected text is: Track all your activities at the click of a button expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.OptionsInFooterSteps.verifyStaticTextOnFitnessScreen(OptionsInFooterSteps.java:40)\n\tat ✽.Then I verify My Wearables tile on Fitness screen(features/my/fitness/MyWearable.feature:25)\n",
              "status": "failed"
            },
            "line": 25,
            "name": "I verify My Wearables tile on Fitness screen",
            "match": {
              "location": "OptionsInFooterSteps.verifyStaticTextOnFitnessScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${fitness.myWearables}"
                ],
                "line": 26
              },
              {
                "cells": [
                  "${fitness.myWearables.description}"
                ],
                "line": 27
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 28,
            "name": "I click on Connect Now button on Fitness screen",
            "match": {
              "location": "OptionsInFooterSteps.clickOnConnectNow()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 29,
            "name": "I verify following text are displayed under My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyWearablesScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${wearables.title}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${wearables.subTitle}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${wearables.description}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${wearables.fitbitText}"
                ],
                "line": 33
              },
              {
                "cells": [
                  "${wearables.garminText}"
                ],
                "line": 34
              },
              {
                "cells": [
                  "${wearables.googleFit}"
                ],
                "line": 35
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify My wearable functionality via fitness tab on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/my/fitness/MyWearable.feature",
    "tags": [
      {
        "line": 1,
        "name": "@myWearables_my"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "comments": [
          {
            "line": 4,
            "value": "#  User who has completed the Nutrition Assessment"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 863333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1425958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 273625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1164375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7831798750,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 6669833,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${hra.report.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${hra.report.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 47
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 63808023208,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26612164500,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5007641167,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1683421583,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 574375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 90791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4556836417,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 38780266792,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${hra.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1948111083,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5002579417,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17431540209,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23693754083,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 52685085125,
              "status": "passed"
            },
            "line": 22,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 93208449541,
              "status": "passed"
            },
            "line": 23,
            "name": "I navigate to Babylon health Assessment and Accept TermsAndCondition",
            "match": {
              "location": "BabylonSteps.navigateToBabylonHealthAssessmentAndAcceptTermsAndCondition()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1046292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 84833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 25,
        "name": "User should be able to access Babylon Health Risk Assessment Report",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-health-risk-assessment-report",
        "after": [
          {
            "result": {
              "duration": 178792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1942092875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14374357375,
              "status": "passed"
            },
            "line": 26,
            "name": "I click on \"Report\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Report",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5006889833,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 131374041291,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Your Health Check score expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.verifyHRAResult(BabylonSteps.java:616)\n\tat ✽.Then I verify the HRA Results are displayed(features/my/health/BabylonHRA_Report.feature:28)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 28,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.report.title}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${babylon.hraReport.report.subTitle}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${babylon.hraReport.report.percentage}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${babylon.hraReport.report.statement1}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${babylon.hraReport.report.statement2}"
                ],
                "line": 33
              },
              {
                "cells": [
                  "${babylon.hraReport.report.statement3}"
                ],
                "line": 34
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1018208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1765916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 36,
        "name": "Verify the HRA Activity Report",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-activity-report",
        "after": [
          {
            "result": {
              "duration": 466291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 847125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 263645767000,
              "status": "passed"
            },
            "line": 37,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.summary.title}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.description}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRiskDescription}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk.statement1}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk.statement2}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk.statement3}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.diseaseRisk.statement4}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.organ.title}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.organDescription}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.organ.statement1}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${babylon.hraReport.summary.organ.statement2}"
                ],
                "line": 49
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 35834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 103959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 51,
        "name": "Verify the HRA Activity Report",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-activity-report",
        "after": [
          {
            "result": {
              "duration": 27583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 33208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 92523647916,
              "status": "passed"
            },
            "line": 52,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.activity.title}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.subTitle}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.statement1}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.statement2}"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 31334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 58,
        "name": "Verify the HRA Nutrition Report",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-nutrition-report",
        "after": [
          {
            "result": {
              "duration": 127459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 123375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 225215694792,
              "status": "passed"
            },
            "line": 59,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.nutrition.title}"
                ],
                "line": 60
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.subTitle}"
                ],
                "line": 61
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement1}"
                ],
                "line": 62
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement2}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement3}"
                ],
                "line": 64
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement4}"
                ],
                "line": 65
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement5}"
                ],
                "line": 66
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement6}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement7}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement8}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.statement9}"
                ],
                "line": 70
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 118709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 161125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 73,
        "name": "Verify the HRA Report - Keep It Up sub-section",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-report---keep-it-up-sub-section",
        "after": [
          {
            "result": {
              "duration": 144375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 102667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 152064012875,
              "status": "passed"
            },
            "line": 74,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.keepItUp}"
                ],
                "line": 75
              },
              {
                "cells": [
                  "${babylon.hraReport.lowFat}"
                ],
                "line": 76
              },
              {
                "cells": [
                  "${babylon.hraReport.lowFat.description}"
                ],
                "line": 77
              },
              {
                "cells": [
                  "${babylon.hraReport.lowAlcohol}"
                ],
                "line": 78
              },
              {
                "cells": [
                  "${babylon.hraReport.lowAlcohol.description}"
                ],
                "line": 79
              },
              {
                "comments": [
                  {
                    "line": 80,
                    "value": "#      | ${babylon.hraReport.lowCaffeine}             |"
                  },
                  {
                    "line": 81,
                    "value": "#      | ${babylon.hraReport.lowCaffeine.description} |"
                  }
                ],
                "cells": [
                  "${babylon.hraReport.redMeat}"
                ],
                "line": 82
              },
              {
                "cells": [
                  "${babylon.hraReport.redMeat.description}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 46625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 128750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 85,
        "name": "Verify the HRA Report - Make a Change sub-section",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;verify-the-hra-report---make-a-change-sub-section",
        "after": [
          {
            "result": {
              "duration": 70708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 40375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 154520676750,
              "status": "passed"
            },
            "line": 86,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.makeAChange}"
                ],
                "line": 87
              },
              {
                "cells": [
                  "${babylon.hraReport.change1}"
                ],
                "line": 88
              },
              {
                "cells": [
                  "${babylon.hraReport.change2}"
                ],
                "line": 89
              },
              {
                "cells": [
                  "${babylon.hraReport.change3}"
                ],
                "line": 90
              },
              {
                "cells": [
                  "${babylon.hraReport.change4}"
                ],
                "line": 91
              },
              {
                "cells": [
                  "${babylon.hraReport.change5}"
                ],
                "line": 92
              },
              {
                "cells": [
                  "${babylon.hraReport.change6}"
                ],
                "line": 93
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1943000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 95,
        "name": "User should be able to access Babylon HRA - Healthcheck - Body",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-hra---healthcheck---body",
        "after": [
          {
            "result": {
              "duration": 89250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 61042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26560553250,
              "status": "passed"
            },
            "line": 96,
            "name": "I click on \"Healthcheck\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Healthcheck",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 8514531000,
              "status": "passed"
            },
            "line": 97,
            "name": "I click on \"Body\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Body",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11759482500,
              "status": "passed"
            },
            "line": 98,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.bodyButtton}"
                ],
                "line": 99
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 42620475250,
              "status": "passed"
            },
            "line": 100,
            "name": "I verify following text is displayed on HRA report",
            "match": {
              "location": "BabylonSteps.verifyHRAStaticText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.body.bones}"
                ],
                "line": 101
              },
              {
                "cells": [
                  "${babylon.hraReport.body.heart}"
                ],
                "line": 102
              },
              {
                "cells": [
                  "${babylon.hraReport.body.brain}"
                ],
                "line": 103
              },
              {
                "cells": [
                  "${babylon.hraReport.body.liver}"
                ],
                "line": 104
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 382208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 234042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 106,
        "name": "navigate back to digital twin screen",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-digital-twin-screen",
        "after": [
          {
            "result": {
              "duration": 26750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 28875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6585144333,
              "status": "passed"
            },
            "line": 107,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 91125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 29666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 109,
        "name": "User should be able to access Babylon HRA - Healthcheck - Nutrition",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-hra---healthcheck---nutrition",
        "after": [
          {
            "result": {
              "duration": 932750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1160166083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16612026792,
              "status": "passed"
            },
            "line": 110,
            "name": "I click on \"Nutrition\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Nutrition",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 23850794792,
              "status": "passed"
            },
            "line": 111,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.nutrition}"
                ],
                "line": 112
              },
              {
                "cells": [
                  "${babylon.hraReport.nutrition.description}"
                ],
                "line": 113
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 54485076459,
              "status": "passed"
            },
            "line": 114,
            "name": "I click on \"Retake Assessment\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Retake Assessment",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14670889167,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Nutrition is key to your energy levels and can affect your risk of some medical conditions expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.verifyHRAResult(BabylonSteps.java:616)\n\tat ✽.Then I verify the HRA Results are displayed(features/my/health/BabylonHRA_Report.feature:115)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 115,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.nutrition.retake}"
                ],
                "line": 116
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 418708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1346292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 118,
        "name": "Navigate back to nutrition screen and validate the static text",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-nutrition-screen-and-validate-the-static-text",
        "after": [
          {
            "result": {
              "duration": 38459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 416375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5702381541,
              "status": "passed"
            },
            "line": 119,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17269789959,
              "status": "passed"
            },
            "line": 120,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.aboutDisease}"
                ],
                "line": 121
              },
              {
                "cells": [
                  "${babylon.hraReport.about.nutrition.description}"
                ],
                "line": 122
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 36000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 124,
        "name": "navigate back to digital twin screen",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-digital-twin-screen",
        "after": [
          {
            "result": {
              "duration": 25500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 32125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14763541500,
              "status": "passed"
            },
            "line": 125,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 61541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 458958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 128,
        "name": "User should be able to access Babylon HRA - Healthcheck - Activity",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-hra---healthcheck---activity",
        "after": [
          {
            "result": {
              "duration": 67334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1221239583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13011255208,
              "status": "passed"
            },
            "line": 129,
            "name": "I click on \"Activity\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Activity",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 19597108500,
              "status": "passed"
            },
            "line": 130,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.activity}"
                ],
                "line": 131
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.subTitle}"
                ],
                "line": 132
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15078361292,
              "status": "passed"
            },
            "line": 133,
            "name": "I click on \"Retake Assessment\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Retake Assessment",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 28086997833,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Exercise-wise, I can expected [true] but found [false],\n\tthe expected text is: How much time each week do you do moderate exercise like walking, casual cycling or cleaning? expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.verifyHRAResult(BabylonSteps.java:616)\n\tat ✽.Then I verify the HRA Results are displayed(features/my/health/BabylonHRA_Report.feature:134)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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9qmBce1kfOHnrx55fVzY29Oj8i9UGGexUVtMS8eHB02PWftaUnF+zaevHn7n19FvjN8XvTXDOPa0NnbM/dm3ly9UGKuHbsgqvmLNSa98e2rsG89EJPw1q9rcun1Vqsv94cmVGnn97NEeX7DdsRU8OP6PE8euu5xOl8e39K4OY6d6/Ghwuk8+3QVkJVvf8o9w3vpfglvLdLjfddwZ9CixF1r5x1Jf21jt6HHGqqMVqGgFKlqBql/XZ2vgB/XzvgG4A1qBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoHq4WvFYrEEBQUt0bz2QFqxYsXVq1e9n9gD7+FrZdOmTf0efsuWLfN+Yg+8h6+VmpqaL774Ys3DLHjt2pKSEu8n9sB7+FrB/UIrUNEKVP8LmD9IyUsxO4IAAAAASUVORK5CYII\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 134,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.activity.retake}"
                ],
                "line": 135
              },
              {
                "cells": [
                  "${babylon.hraReport.activity.retake2}"
                ],
                "line": 136
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 581833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1702542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 138,
        "name": "Navigate back to Activity screen and validate the static text",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-activity-screen-and-validate-the-static-text",
        "after": [
          {
            "result": {
              "duration": 98667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 415750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6242914708,
              "status": "passed"
            },
            "line": 139,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15837691125,
              "status": "passed"
            },
            "line": 140,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.aboutDesease}"
                ],
                "line": 141
              },
              {
                "cells": [
                  "${babylon.hraReport.about.activity.description}"
                ],
                "line": 142
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 46000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 144,
        "name": "navigate back to digital twin screen",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-digital-twin-screen",
        "after": [
          {
            "result": {
              "duration": 300458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 104709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7238282500,
              "status": "passed"
            },
            "line": 145,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 450125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 148,
        "name": "User should be able to access Babylon HRA - Healthcheck - Mood",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;user-should-be-able-to-access-babylon-hra---healthcheck---mood",
        "after": [
          {
            "result": {
              "duration": 90125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1037083500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 17449004542,
              "status": "passed"
            },
            "line": 149,
            "name": "I click on \"Mood\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Mood",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 15468258667,
              "status": "passed"
            },
            "line": 150,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.mood}"
                ],
                "line": 151
              },
              {
                "comments": [
                  {
                    "line": 152,
                    "value": "#      | ${babylon.start.assesment}         |"
                  }
                ],
                "cells": [
                  "${babylon.hraReport.mood.duration}"
                ],
                "line": 153
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3844472375,
              "status": "passed"
            },
            "line": 154,
            "name": "I start the assessment",
            "match": {
              "location": "BabylonSteps.clickOnStartAssessmnet()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15161044792,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: start by looking at your current mood, stress levels and things that can affect good mental health expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BabylonSteps.verifyHRAResult(BabylonSteps.java:616)\n\tat ✽.Then I verify the HRA Results are displayed(features/my/health/BabylonHRA_Report.feature:155)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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2DxiU27ZVUfeieo3pib8dkJ00pe5tba2HasyvOaHJ2/GgaIzqT2+YOuzFfQf/8+F4527PB5vt2/pvZ3GTu32V4PHvPg0C8g96ng9ONpz938J7q7TaZ51zAx6lNgLrfx9aaxvrnX3uGLV0QpUtAIVrUA14M5na+BbDfBdAPSBVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoKIVqGgFKlqBilagohWoaAUqWoGKVqCiFahoBSpagYpWoHr0WrHb7aGhoUs0r/ZLK1asuHbtmu8L6/cevVY++eSTAY++ZcuW+b6wfu/Ra6Wurm7Dhg1rHmVr160rLy/3fWH93qPXCh4WWoGKVqD6P/vgPzMWwEMYAAAAAElFTkSuQmCC",
                "mime_type": "image/png"
              }
            ],
            "line": 155,
            "name": "I verify the HRA Results are displayed",
            "match": {
              "location": "BabylonSteps.verifyHRAResult(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${babylon.hraReport.mood.assessment}"
                ],
                "line": 156
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 660875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1639125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 158,
        "name": "navigate back to digital twin screen",
        "description": "",
        "id": "verify-the-babylon-hra-report---nutrition,-body,-activity;navigate-back-to-digital-twin-screen",
        "after": [
          {
            "result": {
              "duration": 65041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 756584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5729256291,
              "status": "passed"
            },
            "line": 159,
            "name": "I click on \"Back\" link on digital twin screen",
            "match": {
              "arguments": [
                {
                  "val": "Back",
                  "offset": 12
                }
              ],
              "location": "BabylonSteps.clickOnDigitalTwin(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify the BabyLon HRA Report - Nutrition, Body, Activity",
    "description": "",
    "id": "verify-the-babylon-hra-report---nutrition,-body,-activity",
    "keyword": "Feature",
    "uri": "features/my/health/BabylonHRA_Report.feature",
    "tags": [
      {
        "line": 1,
        "name": "@babylon_hra_report_my"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 22417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-that-user-can-access-calendar-under-health-section;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 264583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 167583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16022521750,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2800375,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 72611418459,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28434278875,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2007928500,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2487438292,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 12,
            "value": "#    Then I verify below language options on toggle bar as per specified lbu on login page"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 87167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 76125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 14,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-access-calendar-under-health-section;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 306750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 65708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6195302083,
              "status": "passed"
            },
            "line": 15,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 37498839625,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3817428125,
              "status": "passed"
            },
            "line": 19,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5006086958,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11582161041,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24241905125,
              "status": "passed"
            },
            "line": 22,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 26083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 29500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 25,
        "name": "User should be able to access Calendar screen",
        "description": "",
        "id": "verify-that-user-can-access-calendar-under-health-section;user-should-be-able-to-access-calendar-screen",
        "after": [
          {
            "result": {
              "duration": 184875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 101041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3005938875,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 51679900833,
              "status": "passed"
            },
            "line": 27,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 6362701583,
              "status": "passed"
            },
            "line": 28,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21349204000,
              "status": "passed"
            },
            "line": 29,
            "name": "I click on Calendar tile",
            "match": {
              "location": "LocationSteps.iClicksOnCalendarButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3006321625,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17879346792,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${calendar.text}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${no.events.text}"
                ],
                "line": 33
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8861728708,
              "status": "passed"
            },
            "line": 34,
            "name": "I click on events dropdown button in calendar screen",
            "match": {
              "location": "LocationSteps.iClicksOnEventsButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 52334943958,
              "status": "passed"
            },
            "line": 35,
            "name": "I verify the following texts \"Calendar events\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Calendar events",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${medicine.reminders.text}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${appointments.text}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${vaccination.text}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${workout.text}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${pulse.tv.text}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${policy.remainder.text}"
                ],
                "line": 41
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify that user can access calendar under health section",
    "description": "",
    "id": "verify-that-user-can-access-calendar-under-health-section",
    "keyword": "Feature",
    "uri": "features/my/health/Calendar.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@my_calendar"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "comments": [
          {
            "line": 6,
            "value": "#  This could fail due to PCAONEPULSE-23264"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 112709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 7,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 515417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 190458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12573292,
              "status": "passed"
            },
            "line": 8,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 124083,
              "status": "passed"
            },
            "line": 9,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12164787083,
              "status": "passed"
            },
            "line": 10,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005861375,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 67596503792,
              "status": "passed"
            },
            "line": 12,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2007850875,
              "status": "passed"
            },
            "line": 13,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 32697959125,
              "status": "passed"
            },
            "line": 14,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005463333,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10340885500,
              "status": "passed"
            },
            "line": 16,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005820458,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 38081490041,
              "status": "passed"
            },
            "line": 18,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 19
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 20
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 21
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 22
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1854771083,
              "status": "passed"
            },
            "line": 23,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8109962083,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35898394167,
              "status": "passed"
            },
            "line": 25,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2001342458,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 156699697208,
              "status": "passed"
            },
            "line": 27,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 23531453042,
              "status": "passed"
            },
            "line": 28,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4002757042,
              "status": "passed"
            },
            "line": 29,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 69167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 31,
        "name": "User should be able to access Chinese Medicine screen",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;user-should-be-able-to-access-chinese-medicine-screen",
        "after": [
          {
            "result": {
              "duration": 19334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 30500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 47560149292,
              "status": "passed"
            },
            "line": 32,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 10391625875,
              "status": "passed"
            },
            "line": 33,
            "name": "I click on Chinese Medicine button",
            "match": {
              "location": "ChineseMedicineSteps.navigateToBabylonSymptomsPage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17974217167,
              "status": "passed"
            },
            "line": 34,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.welcomeMessage}"
                ],
                "line": 35
              },
              {
                "comments": [
                  {
                    "line": 36,
                    "value": "#      | ${FirstName}                   |"
                  }
                ],
                "cells": [
                  "${chineseMedicine.statement}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${chineseMedicine.pruLife}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${chineseMedicine.pruLife.research}"
                ],
                "line": 39
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3913922791,
              "status": "passed"
            },
            "line": 40,
            "name": "I click on Continue button on Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnConnectNow()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 556500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 262375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 51,
        "name": "Verify the carousel on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-carousel-on-chinese-medicine-journey;;2",
        "after": [
          {
            "result": {
              "duration": 40667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 20166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 2818697458,
              "status": "passed"
            },
            "line": 44,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.page1.text}"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2289575792,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify following button are displayed on chinese medicine carousal",
            "match": {
              "location": "ChineseMedicineSteps.chineseMedicineBtnOncarosuel(DataTable)"
            },
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "carousel1##${chineseMedicine.skipButton}"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11340170000,
              "status": "passed"
            },
            "line": 48,
            "name": "I swipe to Right for chinese medicine on carousal \"${chineseMedicine.page1.partialText}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.page1.partialText}",
                  "offset": 51
                }
              ],
              "location": "ChineseMedicineSteps.swipeLeftOrRightInChineseMed(String)"
            },
            "matchedColumns": [
              1
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 13667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 52,
        "name": "Verify the carousel on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-carousel-on-chinese-medicine-journey;;3",
        "after": [
          {
            "result": {
              "duration": 32541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 26125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1553764416,
              "status": "passed"
            },
            "line": 44,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "matchedColumns": [
              0
            ],
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.page2.text}"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4155142375,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify following button are displayed on chinese medicine carousal",
            "match": {
              "location": "ChineseMedicineSteps.chineseMedicineBtnOncarosuel(DataTable)"
            },
            "matchedColumns": [
              2
            ],
            "rows": [
              {
                "cells": [
                  "carousel2##${chineseMedicine.skipButton}"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13589563083,
              "status": "passed"
            },
            "line": 48,
            "name": "I swipe to Right for chinese medicine on carousal \"${chineseMedicine.page2.partialText}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.page2.partialText}",
                  "offset": 51
                }
              ],
              "location": "ChineseMedicineSteps.swipeLeftOrRightInChineseMed(String)"
            },
            "matchedColumns": [
              1
            ],
            "keyword": "When "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 53,
            "value": "#      | ${chineseMedicine.page3.text} | ${chineseMedicine.page3.partialText} | carousel3##${chineseMedicine.startAssessmentBtn} |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 15834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 55,
        "name": "verify the text and button on final assessment carousel",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-text-and-button-on-final-assessment-carousel",
        "after": [
          {
            "result": {
              "duration": 17417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 15583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1433124000,
              "status": "passed"
            },
            "line": 56,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.page3.text}"
                ],
                "line": 57
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2218674750,
              "status": "passed"
            },
            "line": 58,
            "name": "I verify following button are displayed on chinese medicine carousal",
            "match": {
              "location": "ChineseMedicineSteps.chineseMedicineBtnOncarosuel(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "carousel3##${chineseMedicine.startAssessmentBtn}"
                ],
                "line": 59
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 61,
        "name": "User should be able to complete Chinese Medicine profile",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;user-should-be-able-to-complete-chinese-medicine-profile",
        "after": [
          {
            "result": {
              "duration": 21958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1066908084,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4634363167,
              "status": "passed"
            },
            "line": 62,
            "name": "I click on Start Assessment button on Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnStartAssessment()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5005513125,
              "status": "passed"
            },
            "line": 63,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8598539542,
              "status": "passed"
            },
            "line": 64,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.profile.title}"
                ],
                "line": 65
              },
              {
                "cells": [
                  "${chineseMedicine.profile.description}"
                ],
                "line": 66
              },
              {
                "cells": [
                  "${chineseMedicine.profile.mandatoryFields}"
                ],
                "line": 67
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 33499587458,
              "status": "passed"
            },
            "line": 68,
            "name": "change Chinese Medicine user profile details",
            "match": {
              "location": "ChineseMedicineSteps.editChineseMedUserProfile(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "City",
                  "${chineseMedicine.profile.cityValue}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "Smoking Habits",
                  "${chineseMedicine.profile.smokingHabitsValue}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "Drinking Habits",
                  "${chineseMedicine.profile.drinkingHabitsValue}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "Exercise Habits",
                  "${chineseMedicine.profile.exerciseHabitsValue}"
                ],
                "line": 72
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 36413278333,
              "status": "passed"
            },
            "line": 73,
            "name": "I click on Next button on Chinese Medicine Profile screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnNext()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 14350862333,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Based on your experience in past 3 months expected [true] but found [false],\n\tthe expected text is: I feel energetic most of the time. expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(ChineseMedicineSteps.java:49)\n\tat ✽.When User verify following texts are displayed in Chinese Medicine screen(features/my/health/ChineseMedicine.feature:74)\n",
              "status": "failed"
            },
            "line": 74,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.question.1}"
                ],
                "line": 75
              },
              {
                "cells": [
                  "${chineseMedicine.statement.1}"
                ],
                "line": 76
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 77,
            "name": "I verify following answer options are displayed on Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyAnswerOptions(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.answer.option1}"
                ],
                "line": 78
              },
              {
                "cells": [
                  "${chineseMedicine.answer.option2}"
                ],
                "line": 79
              },
              {
                "cells": [
                  "${chineseMedicine.answer.option3}"
                ],
                "line": 80
              },
              {
                "cells": [
                  "${chineseMedicine.answer.option4}"
                ],
                "line": 81
              },
              {
                "cells": [
                  "${chineseMedicine.answer.option5}"
                ],
                "line": 82
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 185250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 91,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;2",
        "after": [
          {
            "result": {
              "duration": 148125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022300750,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9231997208,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"Based on your experience in past 3 months\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.1}\" for the question \"${chineseMedicine.question.1}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.1}\" for the question \"${chineseMedicine.question.1}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.1}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.1}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 63750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 86083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 92,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;3",
        "after": [
          {
            "result": {
              "duration": 17250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1034203209,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9115627750,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get fatigued or tired easily.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.2}\" for the question \"${chineseMedicine.question.2}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.2}\" for the question \"${chineseMedicine.question.2}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.2}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.2}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 22958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 93,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;4",
        "after": [
          {
            "result": {
              "duration": 108917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1039708084,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9878817625,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I suffer from insomnia\")] and Answer //XCUIElementTypeOther[@name\u003d\"Disagree\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.3}\" for the question \"${chineseMedicine.question.3}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.3}\" for the question \"${chineseMedicine.question.3}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.3}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.3}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 39208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 94,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;5",
        "after": [
          {
            "result": {
              "duration": 67167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1025644792,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9179510958,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I adapt quickly to changes in the weather or the surrounding environment.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Strongly Disagree\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.4}\" for the question \"${chineseMedicine.question.4}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.4}\" for the question \"${chineseMedicine.question.4}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.4}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.4}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 95,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;6",
        "after": [
          {
            "result": {
              "duration": 12875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1020215250,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9117957333,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I am prone to catch a cold more often than most people.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Strongly Agree\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.5}\" for the question \"${chineseMedicine.question.5}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.5}\" for the question \"${chineseMedicine.question.5}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.5}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.5}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 34666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 25750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 96,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;7",
        "after": [
          {
            "result": {
              "duration": 27375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021112625,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9140598542,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel tense in my torso or lower body.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Agree\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.6}\" for the question \"${chineseMedicine.question.6}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.6}\" for the question \"${chineseMedicine.question.6}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.6}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.6}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 26458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 97,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;8",
        "after": [
          {
            "result": {
              "duration": 12292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1023927291,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9499912666,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I cough or get asmethic symptoms due to changes in seasons\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.7}\" for the question \"${chineseMedicine.question.7}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.7}\" for the question \"${chineseMedicine.question.7}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.7}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.7}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 53542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 98,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;9",
        "after": [
          {
            "result": {
              "duration": 15875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1014708083,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9132052458,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I am allergic to drugs\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.8}\" for the question \"${chineseMedicine.question.8}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.8}\" for the question \"${chineseMedicine.question.8}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.8}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.8}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 99,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;10",
        "after": [
          {
            "result": {
              "duration": 532167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1034338375,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9792141292,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I frequently catch a chill\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.9}\" for the question \"${chineseMedicine.question.9}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.9}\" for the question \"${chineseMedicine.question.9}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.9}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.9}",
                  "offset": 61
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 16458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 100,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;11",
        "after": [
          {
            "result": {
              "duration": 14625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1019653208,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9141290375,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I can\u0027t stand feeling cold\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.10}\" for the question \"${chineseMedicine.question.10}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.10}\" for the question \"${chineseMedicine.question.10}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.10}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.10}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 101,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;12",
        "after": [
          {
            "result": {
              "duration": 11750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1016305958,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9094932666,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel uncomfortable after consuming cold food or beverages.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.11}\" for the question \"${chineseMedicine.question.11}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.11}\" for the question \"${chineseMedicine.question.11}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.11}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.11}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 102,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;13",
        "after": [
          {
            "result": {
              "duration": 25291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1025468417,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9107208500,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel my face\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.12}\" for the question \"${chineseMedicine.question.12}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.12}\" for the question \"${chineseMedicine.question.12}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.12}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.12}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 23042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 103,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;14",
        "after": [
          {
            "result": {
              "duration": 15833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021085125,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9123212333,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My hands and legs sweat even if the weather is not hot or when I\u0027m not doing intense exercise.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.13}\" for the question \"${chineseMedicine.question.13}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.13}\" for the question \"${chineseMedicine.question.13}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.13}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.13}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 104,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;15",
        "after": [
          {
            "result": {
              "duration": 11583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1016775917,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9160717166,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel that I have a weak voice.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.14}\" for the question \"${chineseMedicine.question.14}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.14}\" for the question \"${chineseMedicine.question.14}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.14}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.14}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 105,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;16",
        "after": [
          {
            "result": {
              "duration": 19167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1037966417,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10082372708,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"In general\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.15}\" for the question \"${chineseMedicine.question.15}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.15}\" for the question \"${chineseMedicine.question.15}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.15}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.15}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 17542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 106,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;17",
        "after": [
          {
            "result": {
              "duration": 143666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1030681333,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9201938833,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel that my skin and lips are dry.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.16}\" for the question \"${chineseMedicine.question.16}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.16}\" for the question \"${chineseMedicine.question.16}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.16}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.16}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 77834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 107,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;18",
        "after": [
          {
            "result": {
              "duration": 19708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1025694750,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9150368791,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get bruises easily for no reason.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.17}\" for the question \"${chineseMedicine.question.17}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.17}\" for the question \"${chineseMedicine.question.17}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.17}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.17}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 17666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 108,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;19",
        "after": [
          {
            "result": {
              "duration": 17084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1010705708,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9159018708,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have broken out in hives (outbreak of swollen\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.18}\" for the question \"${chineseMedicine.question.18}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.18}\" for the question \"${chineseMedicine.question.18}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.18}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.18}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 33917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 109,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;20",
        "after": [
          {
            "result": {
              "duration": 18959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1025787709,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9148471166,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get purple rashes on my skin (purple blood spots\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.19}\" for the question \"${chineseMedicine.question.19}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.19}\" for the question \"${chineseMedicine.question.19}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.19}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.19}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 124834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 110,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;21",
        "after": [
          {
            "result": {
              "duration": 20250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1018488625,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9142027250,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I easily get scratch marks on my skin.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.20}\" for the question \"${chineseMedicine.question.20}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.20}\" for the question \"${chineseMedicine.question.20}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.20}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.20}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 111,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;22",
        "after": [
          {
            "result": {
              "duration": 15958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1057244875,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9395114958,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to feel depressed and moody.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.21}\" for the question \"${chineseMedicine.question.21}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.21}\" for the question \"${chineseMedicine.question.21}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.21}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.21}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 22583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 112,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;23",
        "after": [
          {
            "result": {
              "duration": 12625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1016173958,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9150896917,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I easily forget things.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.22}\" for the question \"${chineseMedicine.question.22}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.22}\" for the question \"${chineseMedicine.question.22}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.22}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.22}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 15583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 113,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;24",
        "after": [
          {
            "result": {
              "duration": 18542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1024665292,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9153233125,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to feel tense and\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.23}\" for the question \"${chineseMedicine.question.23}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.23}\" for the question \"${chineseMedicine.question.23}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.23}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.23}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 18542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 114,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;25",
        "after": [
          {
            "result": {
              "duration": 37000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1016877958,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9160614375,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I am sentimental and my feelings get hurt easily.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.24}\" for the question \"${chineseMedicine.question.24}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.24}\" for the question \"${chineseMedicine.question.24}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.24}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.24}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 34459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 94875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 115,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;26",
        "after": [
          {
            "result": {
              "duration": 12791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1037073167,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9208607125,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel fearful\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.25}\" for the question \"${chineseMedicine.question.25}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.25}\" for the question \"${chineseMedicine.question.25}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.25}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.25}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 116,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;27",
        "after": [
          {
            "result": {
              "duration": 18750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1026058042,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9205750875,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I sigh often for no reason.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.26}\" for the question \"${chineseMedicine.question.26}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.26}\" for the question \"${chineseMedicine.question.26}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.26}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.26}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 22750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 117,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;28",
        "after": [
          {
            "result": {
              "duration": 14959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022527250,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9825226459,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get dizzy when changing posture.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.27}\" for the question \"${chineseMedicine.question.27}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.27}\" for the question \"${chineseMedicine.question.27}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.27}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.27}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 118,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;29",
        "after": [
          {
            "result": {
              "duration": 15875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1028341375,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9164526459,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have a pale or anemic complexion.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.28}\" for the question \"${chineseMedicine.question.28}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.28}\" for the question \"${chineseMedicine.question.28}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.28}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.28}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 119,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;30",
        "after": [
          {
            "result": {
              "duration": 46167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1008777750,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9123187208,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have rosy cheeks.\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.29}\" for the question \"${chineseMedicine.question.29}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.29}\" for the question \"${chineseMedicine.question.29}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.29}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.29}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 205958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 120,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;31",
        "after": [
          {
            "result": {
              "duration": 687000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1027676084,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9168357291,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have visible blood veins on my cheeks\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.30}\" for the question \"${chineseMedicine.question.30}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.30}\" for the question \"${chineseMedicine.question.30}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.30}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.30}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 121,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;32",
        "after": [
          {
            "result": {
              "duration": 864250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022496916,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9154775292,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have a darker complexion and have pigmentation on my cheeks\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.31}\" for the question \"${chineseMedicine.question.31}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.31}\" for the question \"${chineseMedicine.question.31}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.31}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.31}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 122,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;33",
        "after": [
          {
            "result": {
              "duration": 12750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1923700625,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9143725500,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My nose and forehead frequently get oily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.32}\" for the question \"${chineseMedicine.question.32}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.32}\" for the question \"${chineseMedicine.question.32}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.32}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.32}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 17333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 123,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;34",
        "after": [
          {
            "result": {
              "duration": 13125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021850709,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9202486583,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get pimples easily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.33}\" for the question \"${chineseMedicine.question.33}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.33}\" for the question \"${chineseMedicine.question.33}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.33}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.33}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 249666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 124,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;35",
        "after": [
          {
            "result": {
              "duration": 13667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1019268792,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9161816000,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get panda eyes (dark eye bags) easily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.34}\" for the question \"${chineseMedicine.question.34}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.34}\" for the question \"${chineseMedicine.question.34}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.34}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.34}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 125,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;36",
        "after": [
          {
            "result": {
              "duration": 19792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1035193375,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9141008875,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My lip color is generally gloomy / purplish / blueish\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.35}\" for the question \"${chineseMedicine.question.35}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.35}\" for the question \"${chineseMedicine.question.35}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.35}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.35}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 126,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;37",
        "after": [
          {
            "result": {
              "duration": 16500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1036723209,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9137252875,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My lip color is reddish\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.36}\" for the question \"${chineseMedicine.question.36}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.36}\" for the question \"${chineseMedicine.question.36}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.36}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.36}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 40625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 127,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;38",
        "after": [
          {
            "result": {
              "duration": 167625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1029700333,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9192735416,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My lip color is slightly pale or whiteish\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.37}\" for the question \"${chineseMedicine.question.37}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.37}\" for the question \"${chineseMedicine.question.37}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.37}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.37}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 25708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 128,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;39",
        "after": [
          {
            "result": {
              "duration": 14792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1041366375,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9596414833,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have puffy eyelids\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.38}\" for the question \"${chineseMedicine.question.38}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.38}\" for the question \"${chineseMedicine.question.38}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.38}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.38}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 17583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 30000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 129,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;40",
        "after": [
          {
            "result": {
              "duration": 15292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1025555334,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9179349750,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have dry eyes or blurry vision\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.39}\" for the question \"${chineseMedicine.question.39}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.39}\" for the question \"${chineseMedicine.question.39}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.39}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.39}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 486875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 130,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;41",
        "after": [
          {
            "result": {
              "duration": 13958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1020579458,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9142354084,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to sneeze even if I am not sick\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.40}\" for the question \"${chineseMedicine.question.40}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.40}\" for the question \"${chineseMedicine.question.40}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.40}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.40}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 23750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 131,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;42",
        "after": [
          {
            "result": {
              "duration": 21042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1019885541,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9143824625,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My nose gets clooged or runny even if I am not sick\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.41}\" for the question \"${chineseMedicine.question.41}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.41}\" for the question \"${chineseMedicine.question.41}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.41}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.41}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 601416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 132,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;43",
        "after": [
          {
            "result": {
              "duration": 878209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1014161791,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9125397833,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have a dry tongue\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.42}\" for the question \"${chineseMedicine.question.42}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.42}\" for the question \"${chineseMedicine.question.42}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.42}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.42}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 18750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 133,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;44",
        "after": [
          {
            "result": {
              "duration": 16750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1016753584,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9129918459,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have sticky saliva\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.43}\" for the question \"${chineseMedicine.question.43}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.43}\" for the question \"${chineseMedicine.question.43}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.43}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.43}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 134,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;45",
        "after": [
          {
            "result": {
              "duration": 177375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1026817084,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9621630917,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to have a bitter taste in my mouth\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.44}\" for the question \"${chineseMedicine.question.44}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.44}\" for the question \"${chineseMedicine.question.44}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.44}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.44}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 22458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 135,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;46",
        "after": [
          {
            "result": {
              "duration": 18250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021059791,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9129089542,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"The surface of my tongue feels sticky\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.45}\" for the question \"${chineseMedicine.question.45}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.45}\" for the question \"${chineseMedicine.question.45}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.45}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.45}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 22167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 136,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;47",
        "after": [
          {
            "result": {
              "duration": 19417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1027339875,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9131606875,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to have phlegm in my throat even if I am not sick\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.46}\" for the question \"${chineseMedicine.question.46}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.46}\" for the question \"${chineseMedicine.question.46}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.46}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.46}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 137,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;48",
        "after": [
          {
            "result": {
              "duration": 24416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1032568083,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9135903417,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I tend to have throat irritating even if I am not sick\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.47}\" for the question \"${chineseMedicine.question.47}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.47}\" for the question \"${chineseMedicine.question.47}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.47}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.47}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 412167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 138,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;49",
        "after": [
          {
            "result": {
              "duration": 21792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022385334,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9207496375,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have tightness in my chest\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.48}\" for the question \"${chineseMedicine.question.48}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.48}\" for the question \"${chineseMedicine.question.48}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.48}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.48}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 50833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 29334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 139,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;50",
        "after": [
          {
            "result": {
              "duration": 14125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1024665292,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9151147334,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I have asthma or feel the need to occassionally take deep breaths\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.49}\" for the question \"${chineseMedicine.question.49}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.49}\" for the question \"${chineseMedicine.question.49}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.49}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.49}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 27042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 140,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;51",
        "after": [
          {
            "result": {
              "duration": 17500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1032614375,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10148336875,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"l feel conscious of sudden heart palpitations or increased heartbeat\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.50}\" for the question \"${chineseMedicine.question.50}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.50}\" for the question \"${chineseMedicine.question.50}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.50}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.50}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 22709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 141,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;52",
        "after": [
          {
            "result": {
              "duration": 13791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1019115250,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9133380125,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel pain at the side of my chest or breasts\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.51}\" for the question \"${chineseMedicine.question.51}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.51}\" for the question \"${chineseMedicine.question.51}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.51}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.51}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 142,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;53",
        "after": [
          {
            "result": {
              "duration": 14250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1020532917,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9129259500,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My stomach fat is tender\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.52}\" for the question \"${chineseMedicine.question.52}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.52}\" for the question \"${chineseMedicine.question.52}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.52}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.52}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 143,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;54",
        "after": [
          {
            "result": {
              "duration": 120875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1030909959,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9150394000,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My abdomen\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.53}\" for the question \"${chineseMedicine.question.53}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.53}\" for the question \"${chineseMedicine.question.53}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.53}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.53}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 144,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;55",
        "after": [
          {
            "result": {
              "duration": 13375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1012175375,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9107943167,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I frequently get diarhea or stomach pains after consuming cold food or beverages\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.54}\" for the question \"${chineseMedicine.question.54}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.54}\" for the question \"${chineseMedicine.question.54}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.54}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.54}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 17417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 145,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;56",
        "after": [
          {
            "result": {
              "duration": 20750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022221125,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9129172459,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I get constipations\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.55}\" for the question \"${chineseMedicine.question.55}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.55}\" for the question \"${chineseMedicine.question.55}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.55}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.55}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 18500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 146,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;57",
        "after": [
          {
            "result": {
              "duration": 13167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1029811375,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9217194250,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel that my feces are sticky and not clean\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.56}\" for the question \"${chineseMedicine.question.56}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.56}\" for the question \"${chineseMedicine.question.56}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.56}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.56}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 18583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 147,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;58",
        "after": [
          {
            "result": {
              "duration": 12208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1018537625,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9155270209,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"Apart from the first urination in the morning\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.57}\" for the question \"${chineseMedicine.question.57}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.57}\" for the question \"${chineseMedicine.question.57}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.57}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.57}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 148,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;59",
        "after": [
          {
            "result": {
              "duration": 41584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1019267000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9121832833,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"I feel feverish on my hands\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.58}\" for the question \"${chineseMedicine.question.58}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.58}\" for the question \"${chineseMedicine.question.58}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.58}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.58}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 119083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 149,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;60",
        "after": [
          {
            "result": {
              "duration": 11375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1017098916,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9104183958,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My feet and hands get cold easily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.59}\" for the question \"${chineseMedicine.question.59}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.59}\" for the question \"${chineseMedicine.question.59}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.59}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.59}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 38167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 32042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 150,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;61",
        "after": [
          {
            "result": {
              "duration": 14292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1015238333,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9121994792,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My body and limbs feel numb\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.60}\" for the question \"${chineseMedicine.question.60}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.60}\" for the question \"${chineseMedicine.question.60}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.60}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.60}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 22666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 151,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;62",
        "after": [
          {
            "result": {
              "duration": 10833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1021431458,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9182240750,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My face\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.61}\" for the question \"${chineseMedicine.question.61}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.61}\" for the question \"${chineseMedicine.question.61}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.61}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.61}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 152,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;63",
        "after": [
          {
            "result": {
              "duration": 13000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1019160541,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10224647083,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My body feels pain easily\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.62}\" for the question \"${chineseMedicine.question.62}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.62}\" for the question \"${chineseMedicine.question.62}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.62}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.62}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 22417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 153,
        "name": "Verify the Q\u0026A on Chinese Medicine journey",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-q\u0026a-on-chinese-medicine-journey;;64",
        "after": [
          {
            "result": {
              "duration": 35833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1014277125,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9108135292,
              "error_message": "java.lang.AssertionError: Unable to find the Question //XCUIElementTypeStaticText[contains(@name,\"My scrotum feels hot (Limited to men answer)\")] and Answer //XCUIElementTypeOther[@name\u003d\"Occassionally\"]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.handleQnA(ChineseMedicineScreen.java:168)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.handleQnA(ChineseMedicineSteps.java:104)\n\tat ✽.And user selects \"${chineseMedicine.answer.63}\" for the question \"${chineseMedicine.question.63}\"(features/my/health/ChineseMedicine.feature:88)\n",
              "status": "failed"
            },
            "line": 88,
            "name": "user selects \"${chineseMedicine.answer.63}\" for the question \"${chineseMedicine.question.63}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.answer.63}",
                  "offset": 14
                },
                {
                  "val": "${chineseMedicine.question.63}",
                  "offset": 62
                }
              ],
              "location": "ChineseMedicineSteps.handleQnA(String,String)"
            },
            "matchedColumns": [
              0,
              1
            ],
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 615500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 156,
        "name": "Verify the Assessment completion screen",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-assessment-completion-screen",
        "after": [
          {
            "result": {
              "duration": 13709,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1022213042,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5006307375,
              "status": "passed"
            },
            "line": 157,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 28554475083,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Great!! expected [true] but found [false],\n\tthe expected text is: You\u0027ve completed the assessment expected [true] but found [false],\n\tthe expected text is: This assessment and health related advice are provided by \u0027Research Center of Big Data, College of Management, Taipei Medical University\u0027 in cooperation with medical doctors. It is only for personal health management reference and does not represent a medical diagnosis. If you feel unwell, please seek the medical doctor\u0027s advice for any health conditions! expected [true] but found [false],\n\tthe expected text is: Your body constitution will change based on your diets, lifestyle, and environment. It is recommended to do the Chinese Constitution Assessment at least every three months to know whether your constitution has improved so as to master your own health! expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(ChineseMedicineSteps.java:49)\n\tat ✽.Then User verify following texts are displayed in Chinese Medicine screen(features/my/health/ChineseMedicine.feature:158)\n",
              "status": "failed"
            },
            "line": 158,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.viewAssessment.header}"
                ],
                "line": 159
              },
              {
                "cells": [
                  "${chineseMedicine.viewAssessment.subTitle}"
                ],
                "line": 160
              },
              {
                "cells": [
                  "${chineseMedicine.viewAssessment.description1}"
                ],
                "line": 161
              },
              {
                "cells": [
                  "${chineseMedicine.viewAssessment.description2}"
                ],
                "line": 162
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 29167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 165,
        "name": "Verify the user can view the Assessment Record",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-user-can-view-the-assessment-record",
        "after": [
          {
            "result": {
              "duration": 14708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1038318333,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7130102666,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 66d21f86-ce01-421d-8b7a-7f6b66f24f51\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeOther[@name\u003d\"View Results\"]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.clickViewResultsButton(ChineseMedicineScreen.java:71)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.clickOnViewResults(ChineseMedicineSteps.java:122)\n\tat ✽.When user clicks on View Results button on Chinese Medicine Assessment screen(features/my/health/ChineseMedicine.feature:166)\n",
              "status": "failed"
            },
            "line": 166,
            "name": "user clicks on View Results button on Chinese Medicine Assessment screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnViewResults()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 167,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.assessment.header}"
                ],
                "line": 168
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.subHeader}"
                ],
                "line": 169
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.status}"
                ],
                "line": 170
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.subStatus}"
                ],
                "line": 171
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.status1}"
                ],
                "line": 172
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.status2}"
                ],
                "line": 173
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.status3}"
                ],
                "line": 174
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.constitution.advice}"
                ],
                "line": 175
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 320750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 178,
        "name": "Verify the Assessment Summary",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-assessment-summary",
        "after": [
          {
            "result": {
              "duration": 17166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1024114250,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14287947416,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tthe expected text is: Assessment Summary expected [true] but found [false],\n\tthe expected text is: Your body has moderate deficiency of yang qi. You may easily feel weak and chills, and have cold limbs. This is a symptom of moderate yang deficiency.It is recommended that your eating habits be based on the principle of warmth, and you should eat more glutinous rice, black beans, yams, ginger and other foods, maintain the long-term regular habit of medium intensity exercise, and have daily care and acupoint care matching with four seasons, so that you can gradually improve your body constitution. expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(ChineseMedicineSteps.java:49)\n\tat ✽.Then User verify following texts are displayed in Chinese Medicine screen(features/my/health/ChineseMedicine.feature:179)\n",
              "status": "failed"
            },
            "line": 179,
            "name": "User verify following texts are displayed in Chinese Medicine screen",
            "match": {
              "location": "ChineseMedicineSteps.verifyFollowingTextsDisplayedInChineseMedScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${chineseMedicine.assessment.summary.title}"
                ],
                "line": 180
              },
              {
                "cells": [
                  "${chineseMedicine.assessment.summary.description}"
                ],
                "line": 181
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 182,
            "name": "user clicks on View More button on Assessment Record screen",
            "match": {
              "location": "ChineseMedicineSteps.clickOnViewMore()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 268875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 189,
        "name": "Verify the \"Constitution\" Details of the Assessment",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-\"\u003ctitle\u003e\"-details-of-the-assessment;;2",
        "after": [
          {
            "result": {
              "duration": 22583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1041449791,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7189822792,
              "error_message": "java.lang.AssertionError: Unable to find the Condition Meaning of Yang-deficiency constitution.\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.verifyAssessmentDetails(ChineseMedicineScreen.java:197)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.verifyAssessmentDetails(ChineseMedicineSteps.java:133)\n\tat ✽.Then User verify Assessment Details for the \"${chineseMedicine.assessment.details.constitution}\" and \"${chineseMedicine.assessment.details.constitutionDescription}\"(features/my/health/ChineseMedicine.feature:186)\n",
              "status": "failed"
            },
            "line": 186,
            "name": "User verify Assessment Details for the \"${chineseMedicine.assessment.details.constitution}\" and \"${chineseMedicine.assessment.details.constitutionDescription}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.assessment.details.constitution}",
                  "offset": 40
                },
                {
                  "val": "${chineseMedicine.assessment.details.constitutionDescription}",
                  "offset": 97
                }
              ],
              "location": "ChineseMedicineSteps.verifyAssessmentDetails(String,String)"
            },
            "matchedColumns": [
              1,
              2
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 190,
        "name": "Verify the \"Change In Tongue\" Details of the Assessment",
        "description": "",
        "id": "verify-that-user-can-access-chinese-medicine-feature;verify-the-\"\u003ctitle\u003e\"-details-of-the-assessment;;3",
        "after": [
          {
            "result": {
              "duration": 12167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1038017042,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\n\tat jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\n\tat jdk.internal.reflect.GeneratedMethodAccessor42.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\n\tat org.testng.TestRunner.run(TestRunner.java:632)\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\n\tat org.testng.TestNG.run(TestNG.java:1064)\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7142296459,
              "error_message": "java.lang.AssertionError: Unable to find the Condition Change in the tongue of Yang-deficiency constitution.\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat com.onepulse.app.screens.ChineseMedicineScreen.verifyAssessmentDetails(ChineseMedicineScreen.java:197)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ChineseMedicineSteps.verifyAssessmentDetails(ChineseMedicineSteps.java:133)\n\tat ✽.Then User verify Assessment Details for the \"${chineseMedicine.assessment.details.changeInTongue}\" and \"${chineseMedicine.assessment.details.changeInTongueDescription}\"(features/my/health/ChineseMedicine.feature:186)\n",
              "status": "failed"
            },
            "line": 186,
            "name": "User verify Assessment Details for the \"${chineseMedicine.assessment.details.changeInTongue}\" and \"${chineseMedicine.assessment.details.changeInTongueDescription}\"",
            "match": {
              "arguments": [
                {
                  "val": "${chineseMedicine.assessment.details.changeInTongue}",
                  "offset": 40
                },
                {
                  "val": "${chineseMedicine.assessment.details.changeInTongueDescription}",
                  "offset": 99
                }
              ],
              "location": "ChineseMedicineSteps.verifyAssessmentDetails(String,String)"
            },
            "matchedColumns": [
              1,
              2
            ],
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@ChineseMedicine"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          }
        ]
      }
    ],
    "name": "Verify that user can access Chinese Medicine feature",
    "description": "",
    "id": "verify-that-user-can-access-chinese-medicine-feature",
    "keyword": "Feature",
    "uri": "features/my/health/ChineseMedicine.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@ChineseMedicine"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 30416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 445000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Verify the Home screen validation using \"Continue with Email\"",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-the-home-screen-validation-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 1122167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 69708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1734458,
              "status": "passed"
            },
            "line": 6,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 86291,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7832542916,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 53826036041,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005996833,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21544063750,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2003351333,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8060945250,
              "status": "passed"
            },
            "line": 13,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26932765334,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "Diet"
                ],
                "line": 15
              },
              {
                "cells": [
                  "LastName",
                  "Test"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 18
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 986599708,
              "status": "passed"
            },
            "line": 19,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3390636958,
              "status": "passed"
            },
            "line": 20,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34894195250,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005621417,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 130034035917,
              "status": "passed"
            },
            "line": 23,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17812639709,
              "status": "passed"
            },
            "line": 24,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4005448208,
              "status": "passed"
            },
            "line": 25,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 24875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 30292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 27,
        "name": "Verify User should be able to navigate to Dietician page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-dietician-page",
        "after": [
          {
            "result": {
              "duration": 130834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 23500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1797125292,
              "status": "passed"
            },
            "line": 28,
            "name": "I click the Health icon in Home screen",
            "match": {
              "location": "CustomerConnectSteps.Healthicons()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19257651208,
              "status": "passed"
            },
            "comments": [
              {
                "line": 29,
                "value": "#    Then I click the Dietician in Health Screen"
              }
            ],
            "line": 30,
            "name": "I click the Dietician tab for my in Health Screen",
            "match": {
              "location": "DieticianSteps.clickOnMyDieticianTab()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 17333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 32,
        "name": "Select the expert type as doctor and navigate to next screen",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;select-the-expert-type-as-doctor-and-navigate-to-next-screen",
        "after": [
          {
            "result": {
              "duration": 90125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 39292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8256641167,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${choose.expertise.text}"
                ],
                "line": 34
              },
              {
                "cells": [
                  "${select.expert.type}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${what.expert.text}"
                ],
                "line": 36
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 28543192667,
              "status": "passed"
            },
            "line": 37,
            "name": "I clicks on \"${doc.txt}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${doc.txt}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2089077709,
              "status": "passed"
            },
            "line": 38,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005371167,
              "status": "passed"
            },
            "line": 39,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3492532209,
              "status": "passed"
            },
            "line": 40,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${what.isyour.service.num.text}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${complete.details.text}"
                ],
                "line": 42
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1906254833,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify following edit field sample text in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyEditSampleTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enterservice.num.text}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${entername.of.institution.text}"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1444208,
              "status": "passed"
            },
            "line": 46,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "service num",
                  "05"
                ],
                "line": 47
              },
              {
                "cells": [
                  "issuing org",
                  "test org"
                ],
                "line": 48
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13317673917,
              "status": "passed"
            },
            "line": 49,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${service.num.text}",
                  "${service num}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${issuing.org.text}",
                  "${issuing org}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${valid.till.text}",
                  "01-01-2030"
                ],
                "line": 52
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4073147375,
              "status": "passed"
            },
            "line": 53,
            "name": "I click on field label \"${valid.till.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${valid.till.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1817696250,
              "status": "passed"
            },
            "line": 54,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 75833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 56,
        "name": "Verify User should be able to navigate to specialisation page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-specialisation-page",
        "after": [
          {
            "result": {
              "duration": 17625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 24958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5994483209,
              "status": "passed"
            },
            "line": 57,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${what.isyour.specialisation}"
                ],
                "line": 58
              },
              {
                "cells": [
                  "${specility.to.provide}"
                ],
                "line": 59
              },
              {
                "cells": [
                  "${choose.list.text}"
                ],
                "line": 60
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6889592708,
              "status": "passed"
            },
            "line": 61,
            "name": "I verify following specialisation options are displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifySpecialisationOptionsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${mental.health.text}"
                ],
                "line": 62
              },
              {
                "cells": [
                  "${psychologist.text}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "${general.physician.text}"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11807156333,
              "status": "passed"
            },
            "line": 65,
            "name": "I enter \"${physician.text}\" speciality on specilisation screen And select \"${general.physician.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${physician.text}",
                  "offset": 9
                },
                {
                  "val": "${general.physician.text}",
                  "offset": 75
                }
              ],
              "location": "DieticianSteps.searchAndSelectSpeciality(String,String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7307610459,
              "status": "passed"
            },
            "line": 66,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8944017041,
              "status": "passed"
            },
            "line": 67,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.super.specialisation.text}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${other.specialisation.text}"
                ],
                "line": 69
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 263125,
              "status": "passed"
            },
            "line": 70,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "specialisation",
                  "Hypertension"
                ],
                "line": 71
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9854979750,
              "status": "passed"
            },
            "line": 72,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.super.specialisation.text}",
                  "${specialisation}"
                ],
                "line": 73
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8505902875,
              "status": "passed"
            },
            "line": 74,
            "name": "I click on field label \"${enter.super.specialisation.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${enter.super.specialisation.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10651150083,
              "status": "passed"
            },
            "line": 75,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 17333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 77,
        "name": "Verify User should be able to navigate to Educational Details page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-educational-details-page",
        "after": [
          {
            "result": {
              "duration": 58625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 46334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10681934292,
              "status": "passed"
            },
            "line": 78,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${education.details.text}"
                ],
                "line": 79
              },
              {
                "cells": [
                  "${add.degree.text}"
                ],
                "line": 80
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14467223167,
              "status": "passed"
            },
            "line": 81,
            "name": "I verify following edit field sample text in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyEditSampleTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.degree.name.text}"
                ],
                "line": 82
              },
              {
                "cells": [
                  "${enter.field.of.study.text}"
                ],
                "line": 83
              },
              {
                "cells": [
                  "${institution.name.enter.text}"
                ],
                "line": 84
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21252532792,
              "status": "passed"
            },
            "line": 85,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${degree1.text}",
                  "MBBS"
                ],
                "line": 86
              },
              {
                "cells": [
                  "${year.text}",
                  "2001"
                ],
                "line": 87
              },
              {
                "cells": [
                  "${university.text}",
                  "test university"
                ],
                "line": 88
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4849094375,
              "status": "passed"
            },
            "line": 89,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.field.of.study.text}",
                  "physician"
                ],
                "line": 90
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3653892208,
              "status": "passed"
            },
            "line": 91,
            "name": "I click on field label \"${education.details.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${education.details.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5930143666,
              "status": "passed"
            },
            "line": 92,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 396167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 94,
        "name": "Verify User should be able to navigate to Add experience page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-add-experience-page",
        "after": [
          {
            "result": {
              "duration": 156834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1432131166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5626583958,
              "status": "passed"
            },
            "line": 95,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${add.experience.txt}"
                ],
                "line": 96
              },
              {
                "cells": [
                  "${share.experience.details}"
                ],
                "line": 97
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3554458416,
              "status": "passed"
            },
            "line": 98,
            "name": "I verify following edit field sample text in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyEditSampleTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enterHospital.text}"
                ],
                "line": 99
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4483107542,
              "status": "passed"
            },
            "line": 100,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${profile.title.text}",
                  "Test"
                ],
                "line": 101
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7634697375,
              "status": "passed"
            },
            "line": 102,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${experience1.text}",
                  "Test University"
                ],
                "line": 103
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5634148875,
              "status": "passed"
            },
            "line": 104,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enterLocation.text}",
                  "${country.name}"
                ],
                "line": 105
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16512355458,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 59deb386-38b5-49f8-9a16-0ce3ad85e473\n*** Element info: {Using\u003dxpath, value\u003d}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.CustomerConnectScreen.FollowingStartDate(CustomerConnectScreen.java:1914)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.EnterstartDate(CustomerConnectSteps.java:602)\n\tat ✽.And I Enter the \"Start Date\" in \"10\" in dynamic start date Experience screen(features/my/health/Dietician_Doctor.feature:106)\n",
              "status": "failed"
            },
            "line": 106,
            "name": "I Enter the \"Start Date\" in \"10\" in dynamic start date Experience screen",
            "match": {
              "arguments": [
                {
                  "val": "Start Date",
                  "offset": 13
                },
                {
                  "val": "10",
                  "offset": 29
                }
              ],
              "location": "CustomerConnectSteps.EnterstartDate(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 107,
            "name": "I Enter the \"Start Date\" in \"2010\" in dynamic start years Experience screen",
            "match": {
              "arguments": [
                {
                  "val": "Start Date",
                  "offset": 13
                },
                {
                  "val": "2010",
                  "offset": 29
                }
              ],
              "location": "CustomerConnectSteps.EnterStartYear(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 108,
            "name": "I click on field label \"${add.experience.txt}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${add.experience.txt}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 109,
            "name": "I click on checkbox next to text \"${currently.praticing.here}\" in dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${currently.praticing.here}",
                  "offset": 34
                }
              ],
              "location": "DieticianSteps.selectCurrentlyWorkingCheckBox(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 110,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 612750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1308292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 112,
        "name": "Verify User should be able to navigate to Services Offered page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-services-offered-page",
        "after": [
          {
            "result": {
              "duration": 141209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1183179667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3248838417,
              "status": "passed"
            },
            "line": 113,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${public.profile.tex}"
                ],
                "line": 114
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1320208,
              "status": "passed"
            },
            "line": 115,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "service offered",
                  "MBBS DOCTOR"
                ],
                "line": 116
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21842796458,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: 59deb386-38b5-49f8-9a16-0ce3ad85e473\n*** Element info: {Using\u003dxpath, value\u003d(//XCUIElementTypeStaticText[@name\u003d\"Services Offered\"]/following::XCUIElementTypeTextField)[1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$16.executeCommand(Commands.java:148)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.setTextWithTab(TestBasePage.java:260)\n\tat com.onepulse.app.screens.DieticianScreen.enterDetailsDieticianScreen(DieticianScreen.java:544)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.DieticianSteps.enterInfoInDieticianScreen(DieticianSteps.java:285)\n\tat ✽.And I enter following details in dietician screen(features/my/health/Dietician_Doctor.feature:117)\n",
              "status": "failed"
            },
            "line": 117,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${service.offered.text}",
                  "${service offered}"
                ],
                "line": 118
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 119,
            "name": "I click on field label \"${service.offered.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${service.offered.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 120,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 577334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1655792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 122,
        "name": "Verify User should be able to navigate to achievement and awards screen",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-achievement-and-awards-screen",
        "after": [
          {
            "result": {
              "duration": 376792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2379684250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 19351070875,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tAchievements \u0026 Awards text is displayed on page  expected [true] but found [false],\n\tAdd seminar details whether you attended as a participant or as a speaker. text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.DieticianSteps.VerifyStaticTextInDieticianScreen(DieticianSteps.java:265)\n\tat ✽.And I verify following text is displayed in dietician screen(features/my/health/Dietician_Doctor.feature:123)\n",
              "status": "failed"
            },
            "line": 123,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${achievement.award.text}"
                ],
                "line": 124
              },
              {
                "cells": [
                  "${add.seminar.details.text}"
                ],
                "line": 125
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 126,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.title.award.text}",
                  "TEST award"
                ],
                "line": 127
              },
              {
                "cells": [
                  "${enter.org.name.text}",
                  "Test"
                ],
                "line": 128
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 129,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${year.text}",
                  "2020"
                ],
                "line": 130
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 131,
            "name": "I click on field label \"${add.seminar.details.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${add.seminar.details.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 132,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 738375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1149834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 134,
        "name": "Verify User should be able to navigate to Seminar(s) Attended page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-seminar(s)-attended-page",
        "after": [
          {
            "result": {
              "duration": 31458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1865418000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 20483665584,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tSeminar(s) Attended text is displayed on page  expected [true] but found [false],\n\tAdd seminar details whether you attended as a participant or as a speaker. text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.DieticianSteps.VerifyStaticTextInDieticianScreen(DieticianSteps.java:265)\n\tat ✽.And I verify following text is displayed in dietician screen(features/my/health/Dietician_Doctor.feature:135)\n",
              "status": "failed"
            },
            "line": 135,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${seminar.attended.text}"
                ],
                "line": 136
              },
              {
                "cells": [
                  "${add.seminar.details}"
                ],
                "line": 137
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 138,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.seminar.title}",
                  "TEST seminar"
                ],
                "line": 139
              },
              {
                "cells": [
                  "${enterLocation.text}",
                  "SINGAPORE"
                ],
                "line": 140
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 141,
            "name": "I enter following details in dietician screen",
            "match": {
              "location": "DieticianSteps.enterInfoInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${year.text}",
                  "2020"
                ],
                "line": 142
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 143,
            "name": "I click on field label \"${seminar.attended.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${seminar.attended.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 144,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1203625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1333250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 146,
        "name": "Verify User should be able to navigate to linked clinic page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-linked-clinic-page",
        "after": [
          {
            "result": {
              "duration": 128875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1788874583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 20097311500,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tLinked Clinics/Hospitals text is displayed on page  expected [true] but found [false],\n\tAdd Clinics and Hospitals details where you practice text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.DieticianSteps.VerifyStaticTextInDieticianScreen(DieticianSteps.java:265)\n\tat ✽.Given I verify following text is displayed in dietician screen(features/my/health/Dietician_Doctor.feature:147)\n",
              "status": "failed"
            },
            "line": 147,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${linked.clinic.text}"
                ],
                "line": 148
              },
              {
                "cells": [
                  "${add.clinic.info.text}"
                ],
                "line": 149
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 150,
            "name": "I enter following details in edit text field in dietician screen",
            "match": {
              "location": "DieticianSteps.enterDetailsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${enter.name.of.clinic}",
                  "clinic1"
                ],
                "line": 151
              },
              {
                "cells": [
                  "${enterLocation.text}",
                  "SINGAPORE"
                ],
                "line": 152
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 153,
            "name": "I click on field label \"${linked.clinic.text}\" to close keyboard on dietician screen",
            "match": {
              "arguments": [
                {
                  "val": "${linked.clinic.text}",
                  "offset": 24
                }
              ],
              "location": "DieticianSteps.clickOnFieldLabelOnDieticianScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 154,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 734667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1265917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 156,
        "name": "Verify User should be able to navigate to Take a Picture page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-take-a-picture-page",
        "after": [
          {
            "result": {
              "duration": 132500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1818535666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 30932936917,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tAbout You text is displayed on page  expected [true] but found [false],\n\tProfile Photo text is displayed on page  expected [true] but found [false],\n\tPlease take/upload your profile photo text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.DieticianSteps.VerifyStaticTextInDieticianScreen(DieticianSteps.java:265)\n\tat ✽.Given I verify following text is displayed in dietician screen(features/my/health/Dietician_Doctor.feature:157)\n",
              "status": "failed"
            },
            "line": 157,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${about.you.text}"
                ],
                "line": 158
              },
              {
                "cells": [
                  "${profile.photo.text}"
                ],
                "line": 159
              },
              {
                "cells": [
                  "${takephoto.instruction.text}"
                ],
                "line": 160
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 162,
            "name": "I verify following profile photo options are displayed in Dietician Screen",
            "match": {
              "location": "DieticianSteps.verifyPhotoOptionsInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${uploadfile.text}"
                ],
                "line": 163
              },
              {
                "cells": [
                  "${takepicture.text}"
                ],
                "line": 164
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 165,
            "name": "I clicks on \"${takepicture.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${takepicture.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 166,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 167,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 168,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 169,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 170,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${confirmdetails.text}"
                ],
                "line": 171
              },
              {
                "cells": [
                  "${confirmdetails.text2}"
                ],
                "line": 172
              },
              {
                "cells": [
                  "${service num}"
                ],
                "line": 173
              },
              {
                "cells": [
                  "${issuing org}"
                ],
                "line": 174
              },
              {
                "cells": [
                  "${specialisation}"
                ],
                "line": 175
              },
              {
                "cells": [
                  "${service offered}"
                ],
                "line": 176
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 177,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 178,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 179,
            "name": "I click Agree button \"Terms and Conditions\" confirm screen",
            "match": {
              "arguments": [
                {
                  "val": "Terms and Conditions",
                  "offset": 22
                }
              ],
              "location": "DieticianSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 180,
            "name": "I clicks on \"Terms and Conditions\" text in app screen",
            "match": {
              "arguments": [
                {
                  "val": "Terms and Conditions",
                  "offset": 13
                }
              ],
              "location": "DieticianSteps.ClickConfirmTexts(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 499875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1610500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 182,
        "name": "Verify User should be able to navigate to schedule Calendar page",
        "description": "",
        "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-schedule-calendar-page",
        "after": [
          {
            "result": {
              "duration": 49625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1247799750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5008694500,
              "status": "passed"
            },
            "line": 183,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20194376334,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tConversation History text is displayed on page  expected [true] but found [false],\n\tNo Appointments Now text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.DieticianSteps.VerifyStaticTextInDieticianScreen(DieticianSteps.java:265)\n\tat ✽.And I verify following text is displayed in dietician screen(features/my/health/Dietician_Doctor.feature:184)\n",
              "status": "failed"
            },
            "line": 184,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${conversation.history.text}"
                ],
                "line": 185
              },
              {
                "cells": [
                  "${no.appointmnt.now.text}"
                ],
                "line": 186
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 187,
            "name": "User verify following dynamic texts are displayed in Dietician screen",
            "match": {
              "location": "DieticianSteps.verifyDynamicTextOnDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${click.manage.your.availibility.text}"
                ],
                "line": 188
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 189,
            "name": "I clicks on \"${schedule.cal.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${schedule.cal.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 190,
            "name": "I verify following text is displayed in dietician screen",
            "match": {
              "location": "DieticianSteps.VerifyStaticTextInDieticianScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${calendar.text}"
                ],
                "line": 191
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 192,
            "name": "I Select the Date in calendar field",
            "match": {
              "location": "DieticianSteps.Select_Date_Field()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 193,
            "name": "I click the Select Your Availability icon in calendar screen",
            "match": {
              "location": "DieticianSteps.SelectAvailiablityScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 194,
            "name": "I clicks on \"10:00 AM\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "10:00 AM",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Dietician Positive Flow for Doctor functionality on one pulse App",
    "description": "",
    "id": "verify-dietician-positive-flow-for-doctor-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/health/Dietician_Doctor.feature",
    "tags": [
      {
        "line": 1,
        "name": "@Dietician_my"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@Dietician_doctor_my"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 1323542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1775500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 1152875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 874959,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 16613792,
              "status": "passed"
            },
            "line": 6,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 224792,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7997976125,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2004315208,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 65049093583,
              "status": "passed"
            },
            "line": 10,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2001064375,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25564145125,
              "status": "passed"
            },
            "line": 12,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005227625,
              "status": "passed"
            },
            "line": 13,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10055027166,
              "status": "passed"
            },
            "line": 14,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005203667,
              "status": "passed"
            },
            "line": 15,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 36103577042,
              "status": "passed"
            },
            "line": 16,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 17
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 19
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 20
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2513107542,
              "status": "passed"
            },
            "line": 21,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5939308375,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 35335537958,
              "status": "passed"
            },
            "line": 23,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005582000,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 150559129334,
              "status": "passed"
            },
            "line": 25,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21850073333,
              "status": "passed"
            },
            "line": 26,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4006228833,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 64250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 42542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 29,
        "name": "User should be able to access my family vaccination calendar",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;user-should-be-able-to-access-my-family-vaccination-calendar",
        "after": [
          {
            "result": {
              "duration": 68417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 75792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 44406787958,
              "status": "passed"
            },
            "line": 30,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2008043500,
              "status": "passed"
            },
            "line": 31,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 411034875,
              "status": "passed"
            },
            "line": 32,
            "name": "I click on vaccine calendar tile",
            "match": {
              "location": "VaccineCalendarSteps.iClicksOnVaccineCalTile()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005111208,
              "status": "passed"
            },
            "line": 33,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1701220042,
              "status": "passed"
            },
            "line": 34,
            "name": "User verifies following texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyVaccineCalText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccineCalendar.title}"
                ],
                "line": 35
              },
              {
                "cells": [
                  "${vaccineCalendar.description}"
                ],
                "line": 36
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 130792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 29417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "Verify the user can Add Vaccine Information",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;verify-the-user-can-add-vaccine-information",
        "after": [
          {
            "result": {
              "duration": 16458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 37084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1255199292,
              "status": "passed"
            },
            "line": 40,
            "name": "I click on Add more button in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.clickAddMoreBtn()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2005160875,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11600953041,
              "status": "passed"
            },
            "line": 42,
            "name": "User verifies following texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyVaccineCalText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccineCalendar.addMore.Title}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${vaccineCalendar.addMore.relation}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${vaccineCalendar.addMore.name}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${vaccineCalendar.addMore.dob}"
                ],
                "line": 46
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2182303208,
              "status": "passed"
            },
            "line": 47,
            "name": "User verifies following buttons are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyVaccineCalButtons(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccineCalendar.addMore.cancelButton}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${vaccineCalendar.addMore.saveButton}"
                ],
                "line": 49
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 49708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 51,
        "name": "enter information on add vaccination popup",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;enter-information-on-add-vaccination-popup",
        "after": [
          {
            "result": {
              "duration": 27625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 66083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1642917,
              "status": "passed"
            },
            "line": 52,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "relation",
                  "Child"
                ],
                "line": 53
              },
              {
                "cells": [
                  "name",
                  "testing_one"
                ],
                "line": 54
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10737607333,
              "status": "passed"
            },
            "line": 55,
            "name": "I add following information in Vaccine Calendar add information screen",
            "match": {
              "location": "VaccineCalendarSteps.enterAddInformationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Name",
                  "${name}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "Relation",
                  "${relation}"
                ],
                "line": 57
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005488250,
              "status": "passed"
            },
            "line": 58,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1891298042,
              "status": "passed"
            },
            "line": 59,
            "name": "I click on \"${vaccineCalendar.addMore.saveButton}\" button in Vaccine Calendar screen",
            "match": {
              "arguments": [
                {
                  "val": "${vaccineCalendar.addMore.saveButton}",
                  "offset": 12
                }
              ],
              "location": "VaccineCalendarSteps.clickBtnOnVaccineScreen(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 114750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 62,
        "name": "Verify the added item displayed on the Vaccine Schedule screen",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;verify-the-added-item-displayed-on-the-vaccine-schedule-screen",
        "after": [
          {
            "result": {
              "duration": 77625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 89833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2005150875,
              "status": "passed"
            },
            "line": 63,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5707439042,
              "status": "passed"
            },
            "line": 64,
            "name": "User verifies following dynamic texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyDynamicTextOnVaccineCal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${relation}"
                ],
                "line": 65
              },
              {
                "cells": [
                  "${name}"
                ],
                "line": 66
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1500788209,
              "status": "passed"
            },
            "line": 67,
            "name": "I click on \"${name} ${relation}\" button in Vaccine Calendar screen",
            "match": {
              "arguments": [
                {
                  "val": "${name} ${relation}",
                  "offset": 12
                }
              ],
              "location": "VaccineCalendarSteps.clickBtnOnVaccineScreen(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1722374417,
              "status": "passed"
            },
            "line": 68,
            "name": "I click on \"${vaccineCalendar.continue.button}\" button in Vaccine Calendar screen",
            "match": {
              "arguments": [
                {
                  "val": "${vaccineCalendar.continue.button}",
                  "offset": 12
                }
              ],
              "location": "VaccineCalendarSteps.clickBtnOnVaccineScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005218834,
              "status": "passed"
            },
            "line": 69,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 25450558125,
              "status": "passed"
            },
            "line": 70,
            "name": "User verifies following texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyVaccineCalText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccineCalendar.select.child.text}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "${vaccine.text}"
                ],
                "line": 72
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9772270833,
              "status": "passed"
            },
            "comments": [
              {
                "line": 73,
                "value": "#      | ${next.vaccine.due.text}             |"
              }
            ],
            "line": 74,
            "name": "User verifies following dynamic texts are displayed in Vaccine Calendar screen",
            "match": {
              "location": "VaccineCalendarSteps.verifyDynamicTextOnVaccineCal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${name}"
                ],
                "line": 75
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 22828888584,
              "status": "passed"
            },
            "comments": [
              {
                "line": 76,
                "value": "#And I verify the following texts \"Vaccine Schedule\" in Screen"
              }
            ],
            "line": 77,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${vaccine.bcg.text}"
                ],
                "line": 78
              },
              {
                "cells": [
                  "${vaccine.hep.text}"
                ],
                "line": 79
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 53834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 587917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 81,
        "name": "Verify reminder options in vaccine schedule",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;verify-reminder-options-in-vaccine-schedule",
        "after": [
          {
            "result": {
              "duration": 15958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 24416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13464593208,
              "status": "passed"
            },
            "line": 82,
            "name": "I click reminder icon for BCG vaccine",
            "match": {
              "location": "VaccineCalendarSteps.iClickReminderIconForBCGVaccine()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11752218916,
              "status": "passed"
            },
            "line": 83,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${reminder.popup.text}"
                ],
                "line": 84
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13527231333,
              "status": "passed"
            },
            "line": 85,
            "name": "I click NO option",
            "match": {
              "location": "VaccineCalendarSteps.iClickNOOption()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 10616583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "Verify change reminder functionality in vaccine schedule screen",
        "description": "",
        "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature;verify-change-reminder-functionality-in-vaccine-schedule-screen",
        "after": [
          {
            "result": {
              "duration": 23333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 69167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 28339385208,
              "status": "passed"
            },
            "line": 88,
            "name": "I click Yes option",
            "match": {
              "location": "VaccineCalendarSteps.iClickYesOption()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify that user can manage events via the Family Vaccine Calendar feature",
    "description": "",
    "id": "verify-that-user-can-manage-events-via-the-family-vaccine-calendar-feature",
    "keyword": "Feature",
    "uri": "features/my/health/FamilyVaccineCalendar.feature",
    "tags": [
      {
        "line": 1,
        "name": "@familyVaccine_my"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@Vaccine"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 62917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 71792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 70541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8176214000,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1784542,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 60876952791,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25829435708,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10007033209,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1644105917,
              "status": "passed"
            },
            "line": 11,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 74291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 13,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 168791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 25375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3600578333,
              "status": "passed"
            },
            "line": 14,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 37899580125,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1544064792,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5005443250,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12578798625,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22211217458,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 23,
            "value": "#  Scenario: User should be able to access Dengue Alert screen"
          },
          {
            "line": 24,
            "value": "#    And I clicks on Dengue Alert tile"
          },
          {
            "line": 25,
            "value": "##   Add the permission grant implementation similar to \"I clicks on My Environment icon\" step"
          },
          {
            "line": 26,
            "value": "#    Then I verify following texts are displayed"
          },
          {
            "line": 27,
            "value": "#      |${dengueAlert.home.title}|"
          },
          {
            "line": 28,
            "value": "#      |${dengueAlert.home.description}|"
          },
          {
            "line": 29,
            "value": "#      |${dengueAlert.home.T\u0026Cconcent}|"
          },
          {
            "line": 30,
            "value": "#      |${dengueAlert.home.aime}|"
          },
          {
            "line": 31,
            "value": "#      And User verifies the T\u0026C link is accessible"
          },
          {
            "line": 32,
            "value": "#      |${dengueAlert.home.T\u0026CLink}|"
          },
          {
            "line": 33,
            "value": "#      When the user accepts the T\u0026C"
          },
          {
            "line": 34,
            "value": "#      And click on Proceed button"
          },
          {
            "line": 35,
            "value": "#      |${dengueAlert.home.proceedButto}|"
          },
          {
            "line": 38,
            "value": "#    If it is required to verify the outbreak \u0026 cases values for other countries, then repeat the Outbreak \u0026 Cases Scenarios"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 110917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 40,
        "name": "Verify the map can be expanded",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;verify-the-map-can-be-expanded",
        "after": [
          {
            "result": {
              "duration": 30458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 146583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2005479792,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 43834039917,
              "status": "passed"
            },
            "line": 42,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21525634208,
              "status": "passed"
            },
            "line": 43,
            "name": "I clicks on Dengue Alert tile",
            "match": {
              "location": "DengueAlertSteps.clickDengueAlertTile()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9269763875,
              "status": "passed"
            },
            "line": 44,
            "name": "I click on the mapImage",
            "match": {
              "location": "DengueAlertSteps.clickMap()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 552375,
              "status": "passed"
            },
            "line": 45,
            "name": "I click on map back button",
            "match": {
              "location": "DengueAlertSteps.clickMapBackButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 74416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 47,
        "name": "User should be able to vew the Dengue Outbreak - Malaysia",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;user-should-be-able-to-vew-the-dengue-outbreak---malaysia",
        "after": [
          {
            "result": {
              "duration": 81834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 21583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12608667917,
              "status": "passed"
            },
            "line": 48,
            "name": "I verify the following texts \"Dengue Alert\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Dengue Alert",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Malaysia"
                ],
                "line": 49
              },
              {
                "cells": [
                  "Outbreaks"
                ],
                "line": 50
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 27622162666,
              "status": "passed"
            },
            "line": 51,
            "name": "I verify following dynamic static text is displayed in Dengue Alert Screen",
            "match": {
              "location": "DengueAlertSteps.isDynamicStaticTextDisplayedOnDengueAlertScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.outbreak.new}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.thisWeek}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.total}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.deaths}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.thisWeek}"
                ],
                "line": 56
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5359844083,
              "status": "passed"
            },
            "line": 57,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.outbreak.total.title}"
                ],
                "line": 58
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6592250083,
              "status": "passed"
            },
            "comments": [
              {
                "line": 59,
                "value": "#    Verify the value displayed in this section matches with the value displayed in the summary section"
              },
              {
                "line": 60,
                "value": "#      Validate the dropdown value selection - Current values\u003d Weekly (dengueAlert.outbreak.dropdownValue1)"
              }
            ],
            "line": 61,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 9692592666,
              "status": "passed"
            },
            "line": 62,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zonal.title}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "${dengueAlert.zonal.country}"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 33394618417,
              "status": "passed"
            },
            "comments": [
              {
                "line": 65,
                "value": "#      Validate the dropdown value selection - Current values\u003d Weekly (dengueAlert.outbreak.dropdownValue1)"
              }
            ],
            "line": 66,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zone1}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "${dengueAlert.zone2}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${dengueAlert.zone3}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${dengueAlert.zone4}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "${dengueAlert.zone5}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "${dengueAlert.zone6}"
                ],
                "line": 72
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7069834208,
              "status": "passed"
            },
            "line": 73,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 53931793084,
              "status": "passed"
            },
            "line": 74,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zone7}"
                ],
                "line": 75
              },
              {
                "cells": [
                  "${dengueAlert.zone8}"
                ],
                "line": 76
              },
              {
                "cells": [
                  "${dengueAlert.zone9}"
                ],
                "line": 77
              },
              {
                "cells": [
                  "${dengueAlert.zone10}"
                ],
                "line": 78
              },
              {
                "cells": [
                  "${dengueAlert.zone11}"
                ],
                "line": 79
              },
              {
                "cells": [
                  "${dengueAlert.zone12}"
                ],
                "line": 80
              },
              {
                "cells": [
                  "${dengueAlert.zone13}"
                ],
                "line": 81
              },
              {
                "cells": [
                  "${dengueAlert.zone14}"
                ],
                "line": 82
              },
              {
                "cells": [
                  "${dengueAlert.zone15}"
                ],
                "line": 83
              },
              {
                "cells": [
                  "${dengueAlert.zone16}"
                ],
                "line": 84
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 16000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 53416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "User should be able to vew the Dengue Cases - Malaysia",
        "description": "",
        "id": "verify-that-user-can-access-dengue-alert-feature;user-should-be-able-to-vew-the-dengue-cases---malaysia",
        "after": [
          {
            "result": {
              "duration": 100708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 81542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 35860529458,
              "status": "passed"
            },
            "line": 88,
            "name": "I scroll up till \"${dengue.alert.map}\" element displayed",
            "match": {
              "arguments": [
                {
                  "val": "${dengue.alert.map}",
                  "offset": 18
                }
              ],
              "location": "BaseSteps.scrollTillElementDisplayed(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 11747926708,
              "status": "passed"
            },
            "line": 89,
            "name": "I select \"Cases\" from outbreaks dropdown",
            "match": {
              "arguments": [
                {
                  "val": "Cases",
                  "offset": 10
                }
              ],
              "location": "DengueAlertSteps.selectFromOutBreakDropdown(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 28943021750,
              "status": "passed"
            },
            "line": 90,
            "name": "I verify following dynamic static text is displayed in Dengue Alert Screen",
            "match": {
              "location": "DengueAlertSteps.isDynamicStaticTextDisplayedOnDengueAlertScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.cases.new}"
                ],
                "line": 91
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.thisWeek}"
                ],
                "line": 92
              },
              {
                "cells": [
                  "${dengueAlert.cases.total}"
                ],
                "line": 93
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.deaths}"
                ],
                "line": 94
              },
              {
                "cells": [
                  "${dengueAlert.outbreak.thisWeek}"
                ],
                "line": 95
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7359188250,
              "status": "passed"
            },
            "line": 96,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.cases.total.title}"
                ],
                "line": 97
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8717197500,
              "status": "passed"
            },
            "comments": [
              {
                "line": 98,
                "value": "#    Verify the value displayed in this section matches with the value displayed in the summary section"
              },
              {
                "line": 99,
                "value": "#      Validate the dropdown value selection - Current values\u003d Weekly (dengueAlert.outbreak.dropdownValue1)"
              }
            ],
            "line": 100,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zonal.title}"
                ],
                "line": 101
              },
              {
                "cells": [
                  "${dengueAlert.zonal.country}"
                ],
                "line": 102
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6732677417,
              "status": "passed"
            },
            "line": 103,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 29981298417,
              "status": "passed"
            },
            "comments": [
              {
                "line": 104,
                "value": "#      Validate the dropdown value selection - Current values\u003d Weekly (dengueAlert.outbreak.dropdownValue1)"
              }
            ],
            "line": 105,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zone1}"
                ],
                "line": 106
              },
              {
                "cells": [
                  "${dengueAlert.zone2}"
                ],
                "line": 107
              },
              {
                "cells": [
                  "${dengueAlert.zone3}"
                ],
                "line": 108
              },
              {
                "cells": [
                  "${dengueAlert.zone4}"
                ],
                "line": 109
              },
              {
                "cells": [
                  "${dengueAlert.zone5}"
                ],
                "line": 110
              },
              {
                "cells": [
                  "${dengueAlert.zone6}"
                ],
                "line": 111
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7096230667,
              "status": "passed"
            },
            "line": 112,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 49067638000,
              "status": "passed"
            },
            "line": 113,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${dengueAlert.zone7}"
                ],
                "line": 114
              },
              {
                "cells": [
                  "${dengueAlert.zone8}"
                ],
                "line": 115
              },
              {
                "cells": [
                  "${dengueAlert.zone9}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "${dengueAlert.zone10}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "${dengueAlert.zone11}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "${dengueAlert.zone12}"
                ],
                "line": 119
              },
              {
                "cells": [
                  "${dengueAlert.zone13}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "${dengueAlert.zone14}"
                ],
                "line": 121
              },
              {
                "cells": [
                  "${dengueAlert.zone15}"
                ],
                "line": 122
              },
              {
                "cells": [
                  "${dengueAlert.zone16}"
                ],
                "line": 123
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify that user can access Dengue Alert feature",
    "description": "",
    "id": "verify-that-user-can-access-dengue-alert-feature",
    "keyword": "Feature",
    "uri": "features/my/home/DengueAlert.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@iOSdropDownTest"
      },
      {
        "line": 1,
        "name": "@dengueAlert"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 78875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 220375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "User should be able to register on app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;user-should-be-able-to-register-on-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 599333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 721250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10925292,
              "status": "passed"
            },
            "line": 5,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 628959,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9594233334,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006616083,
              "status": "passed"
            },
            "line": 8,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 62238842417,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005624459,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21819558958,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004948250,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9192479708,
              "status": "passed"
            },
            "line": 13,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005284458,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 36192446375,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 16
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 17
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2327054667,
              "status": "passed"
            },
            "line": 20,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5316106875,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 34634096625,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005929625,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 146394687000,
              "status": "passed"
            },
            "line": 24,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20926591750,
              "status": "passed"
            },
            "line": 25,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4002482667,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 51042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 28,
        "name": "Navigate to PRU Shoppe screen",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;navigate-to-pru-shoppe-screen",
        "after": [
          {
            "result": {
              "duration": 17334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 44125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2509549625,
              "status": "passed"
            },
            "line": 29,
            "name": "I click on pru shoppe button on the home page",
            "match": {
              "location": "PruShoppeSteps.navigateToPruShoppeHomePage()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 31,
        "name": "Verify User should be able to see the infectious disease cover screen options",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-screen-options",
        "after": [
          {
            "result": {
              "duration": 29000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1005686334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4478615208,
              "status": "passed"
            },
            "line": 32,
            "name": "I click on Proceed button on prushoppe screen",
            "match": {
              "location": "PruShoppeSteps.clickOnProceedBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5005564250,
              "status": "passed"
            },
            "line": 33,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4107256167,
              "status": "passed"
            },
            "line": 34,
            "name": "I click on pru infectious disease cover tile on prushoppe screen",
            "match": {
              "location": "PruShoppeSteps.navigateToInfectiousDisease()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5000838208,
              "status": "passed"
            },
            "line": 35,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 41338098792,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tInfectious Disease Cover text is displayed on page  expected [true] but found [false],\n\tGet RM 1,000 cash relief upon diagnosis text is displayed on page  expected [true] but found [false],\n\tOnly at RM 12.50/year text is displayed on page  expected [true] but found [false],\n\tMalaysians residing in Malaysia text is displayed on page  expected [true] but found [false],\n\tAge Next Birthday 19 to 55 years old text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\n\tat ✽.And I verify following texts are displayed(features/my/home/prushopee/PruInfectiousDiseaseCover.feature:36)\n",
              "status": "failed"
            },
            "line": 36,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${infectious.disease.cover.text}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.1}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.2}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.3}"
                ],
                "line": 40
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.4}"
                ],
                "line": 41
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 42,
            "name": "user click on following button \"${show.more.text}\" on prushoppe screen",
            "match": {
              "arguments": [
                {
                  "val": "${show.more.text}",
                  "offset": 32
                }
              ],
              "location": "PruShoppeSteps.clickButtonOnPrushoppeScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${infectious.disease.cover.info.5}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${infectious.disease.cover.info.6}"
                ],
                "line": 45
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "user click on following button \"${show.less.text}\" on prushoppe screen",
            "match": {
              "arguments": [
                {
                  "val": "${show.less.text}",
                  "offset": 32
                }
              ],
              "location": "PruShoppeSteps.clickButtonOnPrushoppeScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 47,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${infectious.disease.disclosure.text.1}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.2}"
                ],
                "line": 49
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.3}"
                ],
                "line": 50
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.4}"
                ],
                "line": 51
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.5}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.6}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${infectious.disease.disclosure.text.7}"
                ],
                "line": 54
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 55,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${your.details.text}"
                ],
                "line": 56
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 57,
                "value": "#      | ${scan.your.id.text} |"
              },
              {
                "line": 58,
                "value": "#      | ${nric.no.text}      |"
              }
            ],
            "line": 59,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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",
                "mime_type": "image/png"
              }
            ],
            "line": 60,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.name.as.nric.text}"
                ],
                "line": 61
              },
              {
                "cells": [
                  "${infectious.disease.gender.text}"
                ],
                "line": 62
              },
              {
                "cells": [
                  "${infectious.disease.dob}"
                ],
                "line": 63
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 283000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 37792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "Verify User should be able to see the infectious disease cover Screen options",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-screen-options",
        "after": [
          {
            "result": {
              "duration": 374958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 4271252625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 67540439250,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tResidential address text is displayed on page  expected [true] but found [false],\n\tCountry of Residence text is displayed on page  expected [true] but found [false],\n\tResidential status and Nationality text is displayed on page  expected [true] but found [false],\n\tEmail text is displayed on page  expected [true] but found [false],\n\tCountry Code text is displayed on page  expected [true] but found [false],\n\tMobile Phone Number text is displayed on page  expected [true] but found [false],\n\tReferral code (optional) text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\n\tat ✽.And I verify following texts are displayed(features/my/home/prushopee/PruInfectiousDiseaseCover.feature:66)\n",
              "status": "failed"
            },
            "line": 66,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.residential.text}"
                ],
                "line": 67
              },
              {
                "cells": [
                  "${my.country.of.residence}"
                ],
                "line": 68
              },
              {
                "cells": [
                  "${my.resedential.status}"
                ],
                "line": 69
              },
              {
                "cells": [
                  "${email.text}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "${my.country.code}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "${my.mobile.phone.number}"
                ],
                "line": 72
              },
              {
                "cells": [
                  "${my.referral.code}"
                ],
                "line": 73
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 74,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 75,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${payment.summary.text}"
                ],
                "line": 76
              },
              {
                "cells": [
                  "${insurance.premium.text}"
                ],
                "line": 77
              },
              {
                "cells": [
                  "${total.premium.text}"
                ],
                "line": 78
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 79,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 939583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2648542,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 86,
        "name": "Verify User should be able to see the infectious disease cover term and condition",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-term-and-condition;;2",
        "after": [
          {
            "result": {
              "duration": 687166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1001982125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9842504708,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: d0b6a90b-0066-49fe-86b4-e8c666721958\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeStaticText[contains(@name,\"I am aware that the product provides coverage/pays out RM1,000 upon diagnosis of Dengue Fever, Malaria, Measles or Typhoid. This benefit is only payable once.\")]/../parent::XCUIElementTypeOther/preceding-sibling::XCUIElementTypeOther[@name\u003d\"termsandcondition\"][1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.PruShoppeScreen.acceptInfectiousDiseaseTerms(PruShoppeScreen.java:153)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.PruShoppeSteps.acceptInfectiousDiseaseTerms(PruShoppeSteps.java:111)\n\tat ✽.Given User accept the term and conitions \"${infectious.disease.tnc.1}\" in infectious disease cover Screen(features/my/home/prushopee/PruInfectiousDiseaseCover.feature:83)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALkAAAGQCAIAAAB9G1ZBAAASXklEQVR4Xu3beXgUdZrA8YRnn332ecbZ/XuXBF0VGWeESEZAcOUQPAAx4jAwgPPIcojHo+iMzo6MF86gqw6OjqMSIgoKSIAkXMrhckO4wUDuAAm5On0knb7S1ff+qhNC0tUJr4oc9vd9PpMnVFUX6a4vVdVtJsmW0g+4sNS+SbGLgHgaU2gFMrQCKVqBFK1AqvH73NtaU2O/iUpTf7Sm9lU6bNnXmpJm3AMutr6tx6LzEWmXFtVp++hDzh+pbnyvVpSqXwyuGfPrhuv7ty9puC69ot+Qin53nr7lDvVHq9pm8H21g0YaH4uLS73UZ28eVPfg1Npxk2puGthxlTm1X8PAUdahGRbdA+b+Q2vHTzUPGGUbOtZ651jbTYONezP6Xq3U3jPBU1basny1dvSYrfeAuvFTbf1HmCdO95ef1jZs0VZvsKX2Ozv3Nf/ew9rhI01P/aHRsAdcLFVpQ+u/WBPwtITrzOEGc9DpbFq4tOFcMY3DMlY+MeaVeXe//NqoZbNHVv3uheqPPnrl1VF/f26k5caBjtGTGq+7zbjPGJJWWk9ccZgXvO/50/zG1H6W9V85Zv/ONn+B4/4ptTOfMb+90PTIE/XpQ0290pxnqhrTRtTePjpQXGJLTVP1WC6hLk7FF35qhi2vdJaX39TyNlWPf7jm6T/UP/m8afw0bcc+56PPRq8y/WzDM8bmZqQXTB21b3L+c7MDLe79v31k4XP3D8+feGbAQMuAUfY7xlp63WrTb2A76qv66OCW7lvRr2ddMU+ZrRWW1L/2pr203PHy27YU9Zel1c15wfP1Lue8BS1lp8/2GxZqaFALq/4zPdRgaYj+NCqXSyf26XyLZ2fY+IpmTU2rGTvZ73Bou/e3HDoasFqbBo+2pZy7NxiWMSYvo3/B1M9//0DL2ZpIIBAOhQrffn3Enkmn9VZGOh6e2XzL0Oh+9F2do17Dvu30Vqw9+yrGvz4qLVpAXGnm9BHWKY/ZJ8yqW57tnPHM2TffbRo3pW5ERsMd91t6pdk2bbWPmdJSWWlNu6tqyH3B4rIr7/bW+KTOP7sfWmPKrTGM20TpP6qlzxDbjYOs199m/dkQS6/+1l/caeuVrr633jBA3yD6D8N87a3WeyfW/+87thfnW0c+qJ/F23cy4qEH1oy7tWBqxroJi58c2fDlJlP2yoxVGUOOPFzZf6B50L3Nt91t1cOK+Rna3qO0vVNR1yBLz75tovdHnV/Nzv/UOlRmTb2l4e6HvEXFluWrfflHmq4f1PTAb+39R5rHTvUWlppWZHsPHrXeeJtt7p9d+/bbDx5yPT3Xoj8qLXolulTive7ndToJdXp2V8x5pe2Vtw8f5xw0ujF9lPveibY+tzvGTLLdNMQ58qHm9FHqX2A79cbCsW6T9+OVVr3F8+yD7zk29Vcbn/n1xmcn7J10v2fL7pNjR2+Y8+Ce6Q/YfnmXfexvLNelm1PTLErKedF/2x2P/i1JNavW1KzKqdXl1q3KrY+V15U69XXLNntBcX3uxobstYpJl1f39c7mE8X1eRv1vWXnWfIPW/YeOLer1m0umTxTdq5pVVfyumbc+KLKzqlfuUYxdZKjy86J3Vi9dDlr61evNSlr1qqX0ZSzTv+6Zp1JvZ6dt6xVq1avrVvVaSf12bkNX25t3L7btn2P6f92WLZua9q+S2ncvtO2bUd9znp1mKK7WtvxRYgerw4lZK9NijCXfsLhSDCgC3TQuiQSjt34ihlauRyjWgkF47QSoBWmq1HRhEO6UDAcpS+5UodWGOnQCiMdWmGkQyuMdLprxef3vzpvXmFhYewK5uofZyTiiV12gemyFc3nm/nY4wNuH3z6TGXsOuaHmZi3QHHfEcVd+B3GGQm7FLf7TGXl2epqr0+L3cIw8Vvxer0zHp09YPAdxWXlseuYH2Z83xxtzs12bFobarS51ufYN+a5DuzzV5S5ykr01aGga90aW25288a8QIPJX3SyaeVS2+rP3ft2Ondsbk3IX1jQmL2sKXuZffmSpuzPnJs3uE8cD+t7PtJyqky9O/ds26LZrWpL/c253xd2NgetVmfl6dL1a09tWh8KBjv/RLETpxUVyvRZswYO+a/S8orYdczFmKLSUktTUyisT0T/kEX/Wj//Jcvu7Y69O2qfmlY8elhLQ03dq/9TO3Ny1eJF+mMCWumYoT5zg7OosGrm1Ma5v6/+5CO3ucF/sqCof2/H1i/VJo5F7zds26qVFxeMu6vFVNf48Qd1H74bDgVqn5h+Zs7scCRknjOzqbxYbWnP313/4YKK556ybN9ae/zQmYP7zTu3eT2empqa1h8m7sRpZfrMWb8cNLjs1KkuH8R8vykoLPxq89YNW77esWdfaVl5vcmkFpr+8pKrtCR4quTMjN+UjhketpnMr/yxcsbkqswP9QMR8OkLA371rfvLnIq+11X/+aXmbVs9u7efevWFUw+N9pwsUK00Hj8SsdsKHrxbbda8fIlqxX9gb82nWTUzJmtnT5nnzLJHW1F5ana702YxNZjMFmuD2Xzg4MFgKLRj585uDnqcVjIXZfX+2c9z166NXcFcpFGtVJw+rVopKCre8NXm1oWm+S+eeePlqvf/6jxxtGjEgLr33ioZe5cze0nV+wvU5SPi14rHjgjrl4mwa8WSsvTeVR/8zVFeoh07UPWPd71lhRUZ99nm/dHWoRXH8k9rP1jQMOdR09/eqHt6Rs1b8y3trURn1+7dTXa7+sbt8Zw6fdpssaho2tcaJ04rajKzsnrf/POcvLzYFczFGHWEjp84caa6Wl2Jduza07qwfv6LzopS/c7D0VRy/4iI32V+48WaF56teGJ62NXsy99VMWNyxGn3FxyumDi2/rW5pk+zwlZz+Nj+yg/eDanjvXNref8b1XklHG1F5aW38tyTpXOf95pMWnVV+a/GmKZNsn+90X+qItpcZPOWzfn79ztdLnViKysvr6mtDXR7yxK/FTVZixerXFatWRO7grkYE45qarKHQm1n/ab9e7xNNv07X0vN6iVB59mg016fs9JxaP/Zj96rWra48UB+9YqlNXmrPQ113orS2hVLa1d8VrP888YTx9r2sHu7x2IJa966jXnq7sRTVmJavcJVXdW61n7ogCl7Rf3yT+tWLg9o+ruenNzcUHSqa6rVqWXnrl1adHlX02UrahYvWXJDn5v37d8fu4L5/qP/p+ZQJBAVDOnfx05Xdw6tmXW19ltMqMNfGggE1HuaDivjTHetqNm5c5fFor/LYi7m6L+/Euz0Cwn67yR0d/6/iBNQdzzhQOxSwVygFeYHmXBIL6PbXJr9xjNNJHo6UcfaF4moN0RxN7jwuMNBS6DlO5yXaOVyjGolppJ2564LcY5l2K9uQiJBdyTo0oXc4bAvzmbdjro70kKRllDIGwx5Q+rxXX+cYhhauRwjaCV2woFweyXnucMBLXqKUmsD+u/adXvo/eGIKxR2hiLu4HmeoNp17JZxh1Yux3TXSty7FnXz2xbH+fNK0BX2NUc0Z8SvRQL+SNDftocuclEXLVcwPncwHOriUR2HVi7H6O+ADJV004q6QQk6Y04qYb8jpKlWmsN+T6df3Y13j6xC8ITCxkraaV2dzzoMrVyOUQem9bf2Y3TVSshnuPq4wioUb7P+VXNFAp1vk8OxBz6gn1TCrRcdYyjRU0vkgqcWWrkc0/7/+TCKd1MbCWvqTva8gDqpOKOV6LlEW4k5OcW2ol+AQiF1s9IVUSs+vx+Xmk/zad4YWpS+Ks72Xr/mbufT3JrXpbU4z3EZd+XrPC0+n1PT1HaK/ngj42MMk+R0uXB1cbh1xuVO9znGVR02aH14u9htukYrPxLfuQA5WoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStBLLFf3qcDsd7thVCY5WOjHvPLgt47/X97vn6/HTa/MPGjdIZLRynmXP4aXX9M5MTlmUlJKZlPLJv/WpO3jEuFnCopU27ubmLXeMz0rSQ2mlvs8dPt7laDZunJhopU1l1hdZyT07tqKfXZJTipZ+Ydw4MdGKzlFdv+Lf01tDWfXgwxVbtm3ImLYouaf649KU9Mb6euNDEhCt6P879NgLWUn6SSUzObXq2EnNF7AeOZHZo+1KtGPOi8ZHJaBEb0VN06Fjn/zzdVnRLDJ7pNYUlvm0oL2oIrPHta1XooX/cn3dNyeNj000Cd+Ko3nziInqvqS1lYU9UquLSr1awF5UltmjV/uNS949k5wOh/HhCSXRWzmzOHthD/0eVm8iOVW1crao1KP5mwpLFnVoRV2bTi7LS/BP5xK6FVdt7cqUASqUTq0Ulrq9/saTJaqP9laUz68dZK83GXeSOBK6laPPv7YoSX+z0ybaSlVhidvrazxZmtmjwyp9bUr+n9407iRxJGgrDper8cg3i39yQ6ca9HvblIJlazwe7+nPcjOj75k7yvpJ7/pvCo17SxAJ2oq72bF15KTMpE5XmTY/7ZM7JOPja/rELo9+8J8zZorL6TTuMBEkYitqqj7P+dhw2tAlp6wYOX7vG+9tnDBjUef7lbZcevQsXL3OuM9EkHituF0uk3nVjbd3ulM5Z9mwjBa3R/P5/Zp/+yPPtt3zdoqp54o+wxxmc+xuE0DiteLynHjlnUVJ/xEbQbSD3fP+qnn9Sovmr1iWF/fUkpXUM/+Nvxt2++OXcK24nc4vB42L30pSyroxU1o8vhZNa/Fqh558eVHcG5qknquGP+RMvM9aEq4V5athE+K3Ev2gZfOEWaVZKw48Pvfjfzr/WVxsK2MmJ+DncgnXijrGpYuXL2z/7CT524g+ZGGPXoeXrTLu+Ucv4VrROZ0HX3or85o+mcmpH30bavt//Gvv7X95JzH/21BCthJlPVtdse9g2a595bvyhU7tO2itrjHuKkEkbitKs0e/JMkZ95BQEroVfCu0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoHU1dfKmcrKp+fMmTZt2iMXpMa48Arw2OOPHzt+3PjUrnBXXytvvvVWcnJy0lU+M2fOND61K9zV10pNbe3811+fezXPq/PmFZeUGJ/aFe7qawWXC61AilYg9f8vD9pY9NqsHwAAAABJRU5ErkJggg\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 83,
            "name": "User accept the term and conitions \"${infectious.disease.tnc.1}\" in infectious disease cover Screen",
            "match": {
              "arguments": [
                {
                  "val": "${infectious.disease.tnc.1}",
                  "offset": 36
                }
              ],
              "location": "PruShoppeSteps.acceptInfectiousDiseaseTerms(String)"
            },
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@prushoppeMY"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@infectiousDiseaseCover_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 771916,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1305500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "Verify User should be able to see the infectious disease cover term and condition",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-term-and-condition;;3",
        "after": [
          {
            "result": {
              "duration": 516292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 642661250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 10241511667,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: d0b6a90b-0066-49fe-86b4-e8c666721958\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeStaticText[contains(@name,\"I am aware that the product does not provide coverage/pay out benefits within the first 15 days from the Commencement Date.\")]/../parent::XCUIElementTypeOther/preceding-sibling::XCUIElementTypeOther[@name\u003d\"termsandcondition\"][1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.PruShoppeScreen.acceptInfectiousDiseaseTerms(PruShoppeScreen.java:153)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.PruShoppeSteps.acceptInfectiousDiseaseTerms(PruShoppeSteps.java:111)\n\tat ✽.Given User accept the term and conitions \"${infectious.disease.tnc.2}\" in infectious disease cover Screen(features/my/home/prushopee/PruInfectiousDiseaseCover.feature:83)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 83,
            "name": "User accept the term and conitions \"${infectious.disease.tnc.2}\" in infectious disease cover Screen",
            "match": {
              "arguments": [
                {
                  "val": "${infectious.disease.tnc.2}",
                  "offset": 36
                }
              ],
              "location": "PruShoppeSteps.acceptInfectiousDiseaseTerms(String)"
            },
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@prushoppeMY"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@infectiousDiseaseCover_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 657333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 1947250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 88,
        "name": "Verify User should be able to see the infectious disease cover term and condition",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-term-and-condition;;4",
        "after": [
          {
            "result": {
              "duration": 23792,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 843136167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 7864457458,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: d0b6a90b-0066-49fe-86b4-e8c666721958\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeStaticText[contains(@name,\"I am aware that if I change my mind, I have 15 days from the policy commencement date to cancel my coverage and I can obtain a refund.\")]/../parent::XCUIElementTypeOther/preceding-sibling::XCUIElementTypeOther[@name\u003d\"termsandcondition\"][1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.PruShoppeScreen.acceptInfectiousDiseaseTerms(PruShoppeScreen.java:153)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.PruShoppeSteps.acceptInfectiousDiseaseTerms(PruShoppeSteps.java:111)\n\tat ✽.Given User accept the term and conitions \"${infectious.disease.tnc.3}\" in infectious disease cover Screen(features/my/home/prushopee/PruInfectiousDiseaseCover.feature:83)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 83,
            "name": "User accept the term and conitions \"${infectious.disease.tnc.3}\" in infectious disease cover Screen",
            "match": {
              "arguments": [
                {
                  "val": "${infectious.disease.tnc.3}",
                  "offset": 36
                }
              ],
              "location": "PruShoppeSteps.acceptInfectiousDiseaseTerms(String)"
            },
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@prushoppeMY"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@infectiousDiseaseCover_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 1420125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 3114166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 89,
        "name": "Verify User should be able to see the infectious disease cover term and condition",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-infectious-disease-cover-term-and-condition;;5",
        "after": [
          {
            "result": {
              "duration": 35708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 685432875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 9263032417,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027Prudentials-MacBook-Pro.local\u0027, ip: \u00272401:7400:c802:5759:824:74bb:77c0:84a2%en0\u0027, os.name: \u0027Mac OS X\u0027, os.arch: \u0027x86_64\u0027, os.version: \u002710.16\u0027, java.version: \u002711.0.10\u0027\nDriver info: io.appium.java_client.ios.IOSDriver\nCapabilities {autoDismissAlerts: false, automationName: XCUITest, browserName: , bundleId: com.prudential.pulse.uat, databaseEnabled: false, deviceName: iOS-Test, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: false, newCommandTimeout: 10000, noReset: false, platform: MAC, platformName: iOS, platformVersion: 14.4.1, takesScreenshot: true, udid: 00008101-001145000212001E, webStorageEnabled: false}\nSession ID: d0b6a90b-0066-49fe-86b4-e8c666721958\n*** Element info: {Using\u003dxpath, value\u003d//XCUIElementTypeStaticText[contains(@name,\"I give my consent to Prudential Assurance Malaysia Berhad\")]/../parent::XCUIElementTypeOther/preceding-sibling::XCUIElementTypeOther[@name\u003d\"termsandcondition\"][1]}\n\tat jdk.internal.reflect.GeneratedConstructorAccessor19.newInstance(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElementByXPath(IOSDriver.java:1)\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\n\tat io.appium.java_client.ios.IOSDriver.findElement(IOSDriver.java:1)\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\n\tat com.onepulse.app.screens.PruShoppeScreen.acceptInfectiousDiseaseTerms(PruShoppeScreen.java:153)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.PruShoppeSteps.acceptInfectiousDiseaseTerms(PruShoppeSteps.java:111)\n\tat ✽.Given User accept the term and conitions \"${infectious.disease.tnc.4}\" in infectious disease cover Screen(features/my/home/prushopee/PruInfectiousDiseaseCover.feature:83)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALkAAAGQCAIAAAB9G1ZBAAASI0lEQVR4Xu3beXQUBZ7A8YS3b9++N87u37skyKqIzsipgKByCB6AGHEYkEEfCHjhE9Yd3RldL9xBR2ec0fGAJKKggCSQhEsF5AhXuMFAIAkBEtKd7vSVPpOuvreqE3J0dcJPRQH7+3sf80JVdZHu+lpV3cY0e0Zf4MIy+6QlLgKScWTQCmRoBVK0AilagZTjB9/b9nFk9LVl9GtbkqmxZfZRd63bGD+2PrZM7Zvmrzr94jpsH3+I6Ej90FYsPfqeu2Occei97XOp7T2oqs/tVX1vN143SP2j8dqB524YbMtM+Clxkdky+p67cUjdA9OME6YYrh/cfpUls2/94DG24VlWzf2WAcONE6dZBo2xDx9vu2O8/fqh+r3p/dBWzi3MDW7bpZTsd77857prBpqnz7Vm9nUUrmvaUuxfv9Eze67hvt+6T5YHt+/pcO7BxVbTb7jpi9WhxqZonSVabwl7PA2LltafL8YxImvlnHGvzr/rldfHLHtidM1/v1C7cOGrr435x3OjrdcNdo+d4uh5i36fCSStNJ+49Pqaru4fMhjtPQfU9B0RrbcZ+o9QlhfYM/s5thRXT3iofvKj1h79bNPn1D06V2vlcjyv6J9U27O7slhfeUsp+rp24sOGuf9jevp588QZyvY9nsefjV9l+tpHZo0vzBpYOm3Mnqklzz0RavLtfWT6oufuG1ky+eygwdZBY5y3jbf26G/XbmDb024k2rmp61a061ln1Iui66strk+WmRYvU6yOumtutmX+Wj2vOPcfdv3lA0/hBs9Hn1gz+huzHrlcW0l8Rh3pt798qS+vYfzUoNut7NzbdOBwyGZrGDrWnjGgZYMRWeOKsgaUTvv89/c3nTPEQqFoJFL2lzdG7ZpyRmtltPvh2a6bhsf3o+3qPO2z2lZaK7bufVT6vz5OPcD9O6Hu6ybz+MnOaXNq754UqjEY+o2w5xdZM/vXTn/GevXN1UPvDR08ol56LuNW9E+q7dn92BwZ/RPot4nTflRr72H264bYrrnFdsMwa48Btl/fYe8xUP3edq12R9j8fsJydX/bPZNNf/6b/aUFttEP2LUX/LxRD96/ekL/0mlZayctfnp0/Zdfm/NWZuVnDTv0cPWAwZYh97huucumhZXwM2jvUVppn/Fbu/dpEb8/6vhqdvxXrV1l8ZvnPo6PcjxbdjhK9vn+8LrlP/u5ps+xZvZzf7rCvXFrw76DvhcWqJvVTXgkuGW3+mQ6nt9+IvrXvU38JT6vw7O7bM4rLa+8c+QEz5CxjoFjfPdMtve+1T1uiv36YZ7RD7oGjlH/bWxV33Oge+3X/o9X2rQW2ziH3n1k2m82/NdvNzw7afeU+xo37Tw+fuz6eQ/smnm//eY7neMfsvYcaMnspx47a0ab+C1m+6N/U5ohf7Uhv8CoKazLLzQlKuqCcVWR7eBhy56SulXqlmvMmqK6VWvsh0qtu/fFtyk0Fq4zbNxqziuozyv8iZmb5XemqHP6jS+qvALTytUqcwcFmryCxI3Vo1CwxrRqjVm1eo36qpoL1mpfV6+Nv+AdtjSqq1atqcvvsBOT+mp8udmxbad92y7zlu3WzVsbtu1QObYV27duNxWsM+UVxXelHb5WzYevTd6atBjz0080GguHNKF2mpfEookbXzZDK5di1FYi4SSthGiF6WzUaKIRTSQcjdOWXK5DK4x0aIWRDq0w0qEVRjpdtRIIBl+bP7+srCxxBXPljycWa0xcdoHptBUlEJj95FODbh165mx14jrmx5mEt0BJ3xElXfg9xhOLelU+39nq6nO1tf6AkriFbpK34vf7Zz3+xKCht52sPJW4jvlxJvDtYVdhnvvrNRGH3buuwLmhyLtvT7Cq0ltZrq2OhL1rV9sL81wbikL15uCJ4w0rl9pXfe7bU+zZvrE5oWBZqSNvWUPeMufyJQ15n3k2rvcdOxrV9nyo6XSl+u68cesmxWlTt9TenAcDUY8rbLN5qs9UrFtz+ut1kXC440+UOElaUUOZ+dhjg4fdXnGqKnEdczHmREWFtaEhEtUmpn3Ion01LXjZunObe/d24zMzTo4d0VRvqHvtD8bZU2sW52iPCSkV44YHLPWeE2U1s6c5Xvx97ScLfZb64PHSEwN6uTd/qW7iznm/futm5dTJ0gl3NpnrHB9/WPfRu9FIyDhn5tl5T0RjEcu82Q2nTqpbOkt2mj56p+q5Z6zbNhuPHji7f6+leKu/sdFgMDT/MEknSSszZz9285ChladPd/og5odNaVnZVxs3r9/0zfZdeyoqT5nMZnWh+U8veyvKw6fLz856qGLcyKjdbHn1j9WzptZkf6QdiFBAWxgKqt/6viyo6tOz9v9edm3d3Lhz2+nXXjj94NjG46VqK46jh2JOe+kDd6mbuZYvUVsJ7ttt+DTXMGuqcu60Zd5jzngrap6K0+mxW831ZovVVm+x7Nu/PxyJbC8u7uKgJ2klOye31w2/KlyzJnEFc5FGbaXqzBm1ldITJ9d/tbF5oXnBS2fffKXm/b96jh0+MWpQ3Xtvl4+/05O3pOb9d9TLRyyonBw/KqpdJqLeFUsqB/aq+fDv7lPlypF9NR+8668sq8q61z7/j/Z2rbiXf2r88J36eY+b//5m3dxZhrcXWFtbic+OnTsbnE71G19j4+kzZyxWqxpN61r9JGlFnezc3F43/qqgqChxBXMxRj1CR48dO1tbq16Jtu/Y1bzQtOAlT1WFdufhbii/b1Qs6LW8+ZLhhWer5syMel2Bkh1Vs6bGPM5g6cGqyeNNr79o/jQ3arNEj+yt/vDdiHq8izefGnCdel6JxltR89Jaee7pihef95vNSm3Nqd+MM8+Y4vxmQ/B0Vby52MZNG0v27vV4veqJrfLUKYPRGOryliV5K+rkLl6s5pK/enXiCuZiTDSuocEZibSc9Rv27vI32LXvAk2GVUvCnnNhj9NUsNJ9YO+5he/VLFvs2FdSu2KpoWhVY32dv6rCuGKpccVnhuWfO44dadnDzm2NVmtU8ddtKFLvThory82rVnhra5rXOg/sM+etMC3/tG7l8pCivespKCyMxKfWUKueWop37FDiyzubTltRZ/GSJdf2vnHP3r2JK5gfPtp/ao7EQnHhiPZ94nR259CcWWdrv8NE2v2loVBIfU/TbmWS6aoVdYqLd1it2rss5mKO9vsr4Q6/kKD9TkJX5/+LOCH1jicaSlwqmAu0wvwoE41oZXSZiyuoP9PE4qcT9VgHYjH1DVHSDS48vmjYGmr6HuclWrkUo7aSUEmr89eFJMcyGlRvQmJhXyzs1UR80WggyWZdjnp3pERiTZGIPxzxR9THd/5xim5o5VKMoJXEiYairZW08UVDSvwUpa4Nab9r1+WhD0Zj3kjUE4n5wm0aw+quE7dMOrRyKaarVpLetag3vy1xtJ1Xwt5owBVTPLGgEgsFY+Fgyx46yUW9aHnDyfnC0Ugnj2o/tHIpRnsHpKuki1bUG5SwJ+GkEg26I4raiisabOzwq7vJ7pHVEBojUX0lrZTOzmfthlYuxagHpvm39hN01kokoLv6eKNqKH6X9lXxxkIdb5OjiQc+pJ1Uos0XHX0o8VNL7IKnFlq5FNP6/3zoJbupjUUV9U62TUg9qXjilWi5xFtJODkltqJdgCIR9WalM6JWAsEgfmoBJaD4Eyhx2qok2/uDiq9VQPEpfq/S5DnPq99VoOM0BQIeRVG3U2mP19M/RjdpHq8XVxa3T6Nf7vGdp1/VboPmh7dK3KZztPIz8b0LkKMVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUribzxr26fx+1LXJXiaKUDS/H+rVmPrut79zcTZxpL9us3SGW00sa66+DSq3plp2fkpGVkp2V88m+96/Yf0m+Wsmilhc/l2nTbxNw0LZRm6veFIyd63S79xqmJVlpU536Rm969fSva2SU948TSL/QbpyZa0bhrTSv+fWBzKPkPPFy1aev6rBk56d3VPy7NGOgwmfQPSUG0ov1z4MkXctO0k0p2embNkeNKIGQ7dCy7W8uVaPu8l/SPSkGp3oo6DQeOfPLPPXPjWWR3yzSUVQaUsPNEVXa3q5uvRIv+5Zq6b4/rH5tqUr4Vt2vjqMnqfUlzK4u6ZdaeqPArIeeJyuxuPVpvXIrunuJxu/UPTymp3srZxXmLumn3sFoT6ZlqK+dOVDQqwYay8px2rajXpuPLilL807mUbsVrNK7MGKSG0qGVsgqfP+g4Xq720dqK6vOrhzhNZv1OUkdKt3L4+ddz0rQ3Oy3irdSUlfv8Acfxiuxu7VZpazNK/vct/U5SR4q24vZ6HYe+XfyLazvUoN3bZpQuW93Y6D/zWWF2/D1ze7m/6GX6tky/txSRoq34XO7No6dkp3W4yrT4Ze/CYVkfX9U7cXn8g/+Ccb/zejz6HaaCVGxFnZrPCz7WnTY06RkrRk/c/eZ7GybNyul4v9KSS7fuZavW6veZClKvFZ/Xa7bkX3drhzuV85aNyGryNSqBYFAJbpv+bMs9b4eYuq/oPcJtsSTuNgWkXivexmOv/i0n7T8SI4h3sHP+XxV/UNWkBKuWFSU9teSmdS958x+63f78pVwrPo/nyyETkreSlrF23O+aGgNNitLkVw48/UpO0huatO75Ix/0pN5nLSnXiuqrEZOStxL/oGXjpMcqclfse+rFj/+p7bO4xFbGTU3Bz+VSrhX1GFcsXr6o9bOT9O8i/pBF3XocXJav3/PPXsq1ovF49r/8dvZVvbPTMxd+F+r2H/xrr21/+ltq/rehlGwlznautmrP/sode07tKBE6vWe/rdag31WKSN1WVK5G7ZIkp99DSknpVvCd0AqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUrQCKVqBFK1AilYgRSuQohVI0QqkaAVStAIpWoEUrUCKViBFK5CiFUjRCqRoBVK0AilagRStQIpWIEUrkKIVSNEKpGgFUldeK2erq+fOmzdjxozpF6SOfuFl4Mmnnjpy9Kj+qV3mrrxW3nr77fT09LQrfGbPnq1/ape5K68Vg9G44I03XryS57X580+Wl+uf2mXuymsFlwqtQIpWIPX/Y/rR2sl0Xy8AAAAASUVORK5CYII\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 83,
            "name": "User accept the term and conitions \"${infectious.disease.tnc.4}\" in infectious disease cover Screen",
            "match": {
              "arguments": [
                {
                  "val": "${infectious.disease.tnc.4}",
                  "offset": 36
                }
              ],
              "location": "PruShoppeSteps.acceptInfectiousDiseaseTerms(String)"
            },
            "matchedColumns": [
              0
            ],
            "keyword": "Given "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@prushoppeMY"
          },
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionMY"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@infectiousDiseaseCover_my"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 615083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2084583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 91,
        "name": "verify that user can see agreement and proceed button",
        "description": "",
        "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app;verify-that-user-can-see-agreement-and-proceed-button",
        "after": [
          {
            "result": {
              "duration": 426333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1103191416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 103656383500,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tI am aware that if I am unsure, and for more details on exclusions, terms and conditions as well as claims guide, I can refer to the Product Materials below. I may also reach customer service at customer.mys@prudential.com.my for any other enquiries. text is displayed on page  expected [true] but found [false],\n\tPAMB text is displayed on page  expected [true] but found [false],\n\tthe insurer text is displayed on page  expected [true] but found [false],\n\tto release my personal data to third parties for direct marketing purposes. text is displayed on page  expected [true] but found [false],\n\tI can withdraw my consent at any time by letting PAMB know in writing. text is displayed on page  expected [true] but found [false],\n\tBy clicking Proceed, I acknowledge the information provided is accurate and that I have read and fully understood the text is displayed on page  expected [true] but found [false],\n\tDeclarations and text is displayed on page  expected [true] but found [false],\n\tProduct Materials text is displayed on page  expected [true] but found [false],\n\tPAMB text is displayed on page  expected [true] but found [false],\n\tPrivacy Policy and text is displayed on page  expected [true] but found [false],\n\tI agree that they are binding on me. text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\n\tat ✽.Given I verify following texts are displayed(features/my/home/prushopee/PruInfectiousDiseaseCover.feature:92)\n",
              "status": "failed"
            },
            "line": 92,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${infectious.disease.tnc.3.1}"
                ],
                "line": 93
              },
              {
                "cells": [
                  "${infectious.disease.tnc.4.1}"
                ],
                "line": 94
              },
              {
                "cells": [
                  "${infectious.disease.tnc.4.2}"
                ],
                "line": 95
              },
              {
                "cells": [
                  "${infectious.disease.tnc.4.3}"
                ],
                "line": 96
              },
              {
                "cells": [
                  "${infectious.disease.tnc.4.4}"
                ],
                "line": 97
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.1}"
                ],
                "line": 98
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.2}"
                ],
                "line": 99
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.3}"
                ],
                "line": 100
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.4}"
                ],
                "line": 101
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.5}"
                ],
                "line": 102
              },
              {
                "cells": [
                  "${infectious.disease.agreement.text.6}"
                ],
                "line": 103
              }
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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",
                "mime_type": "image/png"
              }
            ],
            "line": 104,
            "name": "I verify proceed button is displayed on pru shoppe screen",
            "match": {
              "location": "PruShoppeSteps.verifyProceedBtn()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Pru infectious disease cover functionality on one pulse App",
    "description": "",
    "id": "verify-pru-infectious-disease-cover-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/home/prushopee/PruInfectiousDiseaseCover.feature",
    "tags": [
      {
        "line": 1,
        "name": "@infectiousDiseaseCover_my"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@prushoppeMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 5591459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 6905625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 118459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 221958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9697263917,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2329250,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 60972646208,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25296707959,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5002220750,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1620923375,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 649292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 575208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 531334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 4142917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4010892625,
              "status": "passed"
            },
            "line": 13,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 36039115584,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1493100458,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5005700875,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14289096375,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23650651417,
              "status": "passed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 36417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 526584,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify user can access his policies from Pru Shoppe My Policies screen",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-user-can-access-his-policies-from-pru-shoppe-my-policies-screen",
        "after": [
          {
            "result": {
              "duration": 179875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 937459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4322267042,
              "status": "passed"
            },
            "line": 23,
            "name": "I click on pru shoppe button on the home page",
            "match": {
              "location": "PruShoppeSteps.navigateToPruShoppeHomePage()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5002236500,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 31624625666,
              "status": "passed"
            },
            "line": 25,
            "name": "I click on my policies tile on prushoppe screen",
            "match": {
              "location": "PruShoppeSteps.navigateToMyPoliciesScreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2005603500,
              "status": "passed"
            },
            "line": 26,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3674826584,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.title}"
                ],
                "line": 28
              },
              {
                "cells": [
                  "${myCoverage.information}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${myCoverage.InformationDescription}"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 32500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 32,
        "name": "Click on Link policy and verify screen to add policy number",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;click-on-link-policy-and-verify-screen-to-add-policy-number",
        "after": [
          {
            "result": {
              "duration": 19083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 13375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27046265375,
              "status": "passed"
            },
            "line": 33,
            "name": "I clicks on \"${myCoverage.linkPolicyButton}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${myCoverage.linkPolicyButton}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006273417,
              "status": "passed"
            },
            "line": 34,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1325244667,
              "status": "passed"
            },
            "line": 35,
            "name": "I hide one pulse app mobile keyboard",
            "match": {
              "location": "BaseSteps.hideKeyboard()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2580820583,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.title}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${myCoverage.policyNumber.description}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${myCoverage.policyNumber.description1}"
                ],
                "line": 39
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 25333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 41,
        "name": "Verify the error message when the Policy Number is blank",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-the-error-message-when-the-policy-number-is-blank",
        "after": [
          {
            "result": {
              "duration": 12917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 15292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 894419250,
              "status": "passed"
            },
            "line": 42,
            "name": "I click on policy number save button on my policies screen",
            "match": {
              "location": "PruShoppeSteps.clickPolicyNumSaveBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 999084000,
              "status": "passed"
            },
            "line": 43,
            "name": "I click on policy number save button on my policies screen",
            "match": {
              "location": "PruShoppeSteps.clickPolicyNumSaveBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6839576000,
              "status": "passed"
            },
            "comments": [
              {
                "line": 44,
                "value": "#    When I click on \"${myCoverage.policyNumber.saveButton}\" button on app"
              },
              {
                "line": 45,
                "value": "#    When I click on \"${myCoverage.policyNumber.saveButton}\" button on app"
              }
            ],
            "line": 46,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.errorMessage}"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 16750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12458,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 49,
        "name": "Verify the error message when the Policy Number is invalid or incorrect",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-the-error-message-when-the-policy-number-is-invalid-or-incorrect",
        "after": [
          {
            "result": {
              "duration": 42500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 1286474042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3779373959,
              "status": "passed"
            },
            "line": 50,
            "name": "I enter \"1234\" as the Policy number",
            "match": {
              "arguments": [
                {
                  "val": "1234",
                  "offset": 9
                }
              ],
              "location": "PruShoppeSteps.enterPolicyNumber(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 4472425292,
              "status": "passed"
            },
            "line": 51,
            "name": "I hide one pulse app mobile keyboard",
            "match": {
              "location": "BaseSteps.hideKeyboard()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3471939916,
              "status": "passed"
            },
            "line": 52,
            "name": "I click on policy number save button on my policies screen",
            "match": {
              "location": "PruShoppeSteps.clickPolicyNumSaveBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2002155792,
              "status": "passed"
            },
            "line": 53,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8182599750,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tPolicy number not found text is displayed on page  expected [true] but found [false]\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\n\tat ✽.Then I verify following texts are displayed(features/my/home/prushopee/PruShoppeCoverage.feature:54)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 54,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${myCoverage.policyNumber.errorMessage}"
                ],
                "line": 55
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 547333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 936666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 57,
        "name": "Verify the error message when the Cancel Button",
        "description": "",
        "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app;verify-the-error-message-when-the-cancel-button",
        "after": [
          {
            "result": {
              "duration": 254625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 2891926666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1414175834,
              "status": "passed"
            },
            "line": 58,
            "name": "I click on policy number cancel button on my policies screen",
            "match": {
              "location": "PruShoppeSteps.clickPolicyNumCancelBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 48487163417,
              "error_message": "java.lang.AssertionError: expected [true] but found [false]\n\tat org.testng.Assert.fail(Assert.java:94)\n\tat org.testng.Assert.failNotEquals(Assert.java:513)\n\tat org.testng.Assert.assertTrue(Assert.java:42)\n\tat org.testng.Assert.assertTrue(Assert.java:52)\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.landingPageValidation(LoginSteps.java:92)\n\tat ✽.Then user should be landed to \"Home\" screen(features/my/home/prushopee/PruShoppeCoverage.feature:59)\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 59,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify Pru Shoppe My Coverage functionality on one pulse App",
    "description": "",
    "id": "verify-pru-shoppe-my-coverage-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/home/prushopee/PruShoppeCoverage.feature",
    "tags": [
      {
        "line": 1,
        "name": "@PruShoppe_my_coverage"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@prushoppeMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 653041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 2581042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 341167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 673042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7678886750,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4686042,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 65553079792,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24333075292,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10008227375,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2446968792,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 77334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 41917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 33375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 35375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3847292166,
              "status": "passed"
            },
            "line": 13,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 58584842875,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2171230583,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5011420750,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11266606958,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 24710021333,
              "status": "passed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 391500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify User should be able to navigate to wealth page",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-wealth-page",
        "after": [
          {
            "result": {
              "duration": 16500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 17625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 41315003791,
              "status": "passed"
            },
            "line": 23,
            "name": "I click the Wealth Channel tile for Malaysia",
            "match": {
              "location": "WealthSteps.clickWealthChannelTileMalaysia()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2459350250,
              "status": "passed"
            },
            "line": 24,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Wealth Channels"
                ],
                "line": 25
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6445280333,
              "status": "passed"
            },
            "line": 26,
            "name": "I verify following tile texts are displayed on wealth channel screen",
            "match": {
              "location": "WealthSteps.verifyTileTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Investing 123"
                ],
                "line": 27
              },
              {
                "cells": [
                  "Equip yourself with the basic investment tools"
                ],
                "line": 28
              },
              {
                "cells": [
                  "First Steps"
                ],
                "line": 29
              },
              {
                "cells": [
                  "The importance of investor education"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6354676167,
              "status": "passed"
            },
            "line": 31,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4860017209,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify following tile texts are displayed on wealth channel screen",
            "match": {
              "location": "WealthSteps.verifyTileTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Remove The Weeds"
                ],
                "line": 33
              },
              {
                "cells": [
                  "Dispel investment myths to achieve desired investment outcomes"
                ],
                "line": 34
              },
              {
                "cells": [
                  "Mutual Funds"
                ],
                "line": 35
              },
              {
                "cells": [
                  "Make mutual funds your first investment stop"
                ],
                "line": 36
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 23625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 38,
        "name": "Verify User should be able to view the story post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-view-the-story-post",
        "after": [
          {
            "result": {
              "duration": 170834,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 23625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8518635625,
              "status": "passed"
            },
            "line": 39,
            "name": "I click on \"Mutual Funds\" wealth channel topic",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnWealthChannelTopic(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2005302292,
              "status": "passed"
            },
            "line": 40,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4890397625,
              "status": "passed"
            },
            "line": 41,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Mutual Funds"
                ],
                "line": 42
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2973658792,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify following tile texts are displayed on wealth channel screen",
            "match": {
              "location": "WealthSteps.verifyTileTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Make mutual funds your first investment stop"
                ],
                "line": 44
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 17692489042,
              "status": "passed"
            },
            "line": 45,
            "name": "I verify following social cite options are displayed",
            "match": {
              "location": "WealthSteps.iVerifyFollowingSocialCiteOptionsAreDisplayed(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Like"
                ],
                "line": 46
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 47
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 48
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 11041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 50,
        "name": "Verify User should be able to Like the post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-like-the-post",
        "after": [
          {
            "result": {
              "duration": 310708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 50334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14985323042,
              "status": "passed"
            },
            "line": 51,
            "name": "I read the \"Mutual Funds\" post like count",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iReadThePostLikeCount(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9518271250,
              "status": "passed"
            },
            "line": 52,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7216284333,
              "status": "passed"
            },
            "line": 53,
            "name": "I verify \"Mutual Funds\" post like count is increased",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 10
                }
              ],
              "location": "WealthSteps.iVerifyPostLikeCountIsIncreased(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9562945708,
              "status": "passed"
            },
            "line": 54,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 37583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 137500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 56,
        "name": "Verify User should be able to Share the post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-share-the-post",
        "after": [
          {
            "result": {
              "duration": 55250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 13167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6584859458,
              "status": "passed"
            },
            "line": 57,
            "name": "I share the post",
            "match": {
              "location": "WealthSteps.iShareThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17452438917,
              "status": "passed"
            },
            "line": 58,
            "name": "I Verify the share with friends popup",
            "match": {
              "location": "WealthSteps.iVerifyTheShareWithFriendsPopup()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 120333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 27625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 60,
        "name": "Verify User should be able to Comment the post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-comment-the-post",
        "after": [
          {
            "result": {
              "duration": 14750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 10333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6363314000,
              "status": "passed"
            },
            "line": 61,
            "name": "I read the \"Mutual Funds\" post comment count",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iReadThePostCommentCount(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21305543625,
              "status": "passed"
            },
            "line": 62,
            "name": "I commented in the post \"${wealth.topic.comment}\"",
            "match": {
              "arguments": [
                {
                  "val": "${wealth.topic.comment}",
                  "offset": 25
                }
              ],
              "location": "WealthSteps.iCommentedInThePost(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6370518292,
              "status": "passed"
            },
            "line": 63,
            "name": "I verify \"Mutual Funds\" post comment count is increased",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 10
                }
              ],
              "location": "WealthSteps.iVerifyPostCommentCountIsIncreased(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 39417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "Verify User should be able to view the full page article post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-view-the-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 24125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 21417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27617633292,
              "status": "passed"
            },
            "line": 66,
            "name": "I click on \"Mutual Funds\" topic for details full view",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnTopicForDetailsFullView(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 29417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 68,
        "name": "Verify User should be able to see the Like, Share, Comment options on full page article post",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-like,-share,-comment-options-on-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 16041,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 19583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3008044208,
              "status": "passed"
            },
            "line": 69,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12787331625,
              "status": "passed"
            },
            "line": 70,
            "name": "I verify following social cite options are displayed",
            "match": {
              "location": "WealthSteps.iVerifyFollowingSocialCiteOptionsAreDisplayed(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Like"
                ],
                "line": 71
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 72
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 73
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 38125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 75,
        "name": "Verify User should be able to Like the post in full article view screen",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-like-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 63875,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 58125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6797524458,
              "status": "passed"
            },
            "line": 76,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 7618514375,
              "status": "passed"
            },
            "line": 77,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 218084,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 79,
        "name": "Verify User should be able to Share the post in full article view screen",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-share-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 2456708,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 913250,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6188225917,
              "status": "passed"
            },
            "line": 80,
            "name": "I share the post",
            "match": {
              "location": "WealthSteps.iShareThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5265264792,
              "status": "passed"
            },
            "line": 81,
            "name": "I navigate back to previous page",
            "match": {
              "location": "WealthSteps.iNavigateBackToPreviousPage()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 26750,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 42416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 83,
        "name": "Verify User should be able to Comment the post in full article view screen",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-should-be-able-to-comment-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 171375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 69333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 45490683333,
              "status": "passed"
            },
            "line": 84,
            "name": "I comment in full view post article \"${wealth.topic.comment}\"",
            "match": {
              "arguments": [
                {
                  "val": "${wealth.topic.comment}",
                  "offset": 37
                }
              ],
              "location": "WealthSteps.iCommentInFullViewPostArticle(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 15167,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12917,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 86,
        "name": "Verify User can navigate to wealth homepage",
        "description": "",
        "id": "verify-wealth-channel-functionality-on-one-pulse-app;verify-user-can-navigate-to-wealth-homepage",
        "after": [
          {
            "result": {
              "duration": 15166,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 23416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3380221833,
              "status": "passed"
            },
            "line": 87,
            "name": "I navigate to story post page",
            "match": {
              "location": "WealthSteps.iNavigateToStoryPostPage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6437434125,
              "status": "passed"
            },
            "line": 88,
            "name": "I click on \"Mutual Funds\" back button",
            "match": {
              "arguments": [
                {
                  "val": "Mutual Funds",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnBackButton(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6270014167,
              "status": "passed"
            },
            "line": 89,
            "name": "I click on \"Wealth Channels\" back button",
            "match": {
              "arguments": [
                {
                  "val": "Wealth Channels",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnBackButton(String)"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify wealth channel functionality on one pulse App",
    "description": "",
    "id": "verify-wealth-channel-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/my/wealth/WealthChannel.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_wealth_channel"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 59958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 42042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 25291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 37083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9964586416,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2022792,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${onepulse.events.user}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.events.user}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 48
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 67400437500,
              "status": "passed"
            },
            "line": 7,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 25968589042,
              "status": "passed"
            },
            "line": 8,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2003722125,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2153056375,
              "status": "passed"
            },
            "line": 10,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 25459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 12,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 783667,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 41625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5100422459,
              "status": "passed"
            },
            "line": 13,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 35954557083,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1909960625,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5006120291,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9753664625,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21144482917,
              "status": "passed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 35833,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 524000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify MyEvent Functionality in Home screen",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-myevent-functionality-in-home-screen",
        "after": [
          {
            "result": {
              "duration": 10459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 17500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9464912250,
              "status": "passed"
            },
            "line": 23,
            "name": "I click the MyEvent icons",
            "match": {
              "location": "CustomerConnectSteps.clickMyEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40005395708,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 40 sec",
            "match": {
              "arguments": [
                {
                  "val": "40",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2750635750,
              "status": "passed"
            },
            "line": 25,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events enrolled yet"
                ],
                "line": 26
              },
              {
                "cells": [
                  "Please choose from the open events and get started"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15333,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 29,
        "name": "Verify Events Archive tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-events-archive-tab",
        "after": [
          {
            "result": {
              "duration": 23083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 22000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 31514520167,
              "status": "passed"
            },
            "line": 30,
            "name": "I click the Events Archive icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyEventsArchive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40005564166,
              "status": "passed"
            },
            "line": 31,
            "name": "I wait for 40 sec",
            "match": {
              "arguments": [
                {
                  "val": "40",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 866154291,
              "status": "passed"
            },
            "line": 32,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events in your archive."
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 33666,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "Verify Open Events tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-open-events-tab",
        "after": [
          {
            "result": {
              "duration": 19625,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 37500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 32349894625,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the Open Events icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyOpenEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 40005943458,
              "status": "passed"
            },
            "line": 37,
            "name": "I wait for 40 sec",
            "match": {
              "arguments": [
                {
                  "val": "40",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2324333,
              "status": "passed"
            },
            "line": 38,
            "name": "I verify either static text or available open events are displayed on screen",
            "match": {
              "location": "CustomerConnectSteps.verifyOpenEventsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "There are no events available at the moment"
                ],
                "line": 39
              },
              {
                "cells": [
                  "Stay tuned for events on health and fitness"
                ],
                "line": 40
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify MY Event channel functionality on one pulse App",
    "description": "",
    "id": "verify-my-event-channel-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/ph/home/MyEvents.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MyEventPH"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionPH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 26083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21291,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 26083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 57125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7182378625,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2381584,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 55334122000,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 26252475792,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2006297042,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 58542,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 782858417,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3847826958,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 101791,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 48292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 45042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 134583,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3158009500,
              "status": "passed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 66880349917,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1687994042,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8941582125,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5005878166,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 19646366583,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 27292,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 26,
        "name": "Verify User should be able to share the link with Whatsapp",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-whatsapp",
        "after": [
          {
            "result": {
              "duration": 151958,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 42000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 18794448958,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify the share with friends links",
            "match": {
              "location": "LoginSteps.iVerifyTheShareWithFriendsLinks()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 284125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 29,
        "name": "Verify User should be able to share the link with Contacts app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-contacts-app",
        "after": [
          {
            "result": {
              "duration": 509417,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 18208,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 43542802417,
              "status": "passed"
            },
            "line": 30,
            "name": "I verify the contacts share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheContactsShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 14042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 32,
        "name": "Verify User should be able to share the link with Messenger app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-messenger-app",
        "after": [
          {
            "result": {
              "duration": 10083,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 12416,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15038967292,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify the fb messenger share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheFbMessengerShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 15375,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13334,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "Verify User should be able to share the link with Viber app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-viber-app",
        "after": [
          {
            "result": {
              "duration": 20541,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 28125,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27201906916,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify the Viber share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheViberShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 23209,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22459,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 38,
        "name": "Verify User should be able to share the link with Line app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-line-app",
        "after": [
          {
            "result": {
              "duration": 17000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          },
          {
            "result": {
              "duration": 14042,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 27263188042,
              "status": "passed"
            },
            "line": 39,
            "name": "I verify the Line share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheLineShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify share with friends functionality in OnePulse app",
    "description": "",
    "id": "verify-share-with-friends-functionality-in-onepulse-app",
    "keyword": "Feature",
    "uri": "features/share/ShareWithFriends.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@ShareWithFriendsE2E"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@shareWithFriends"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  }
]