[
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 668368900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 209091200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 171000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 53700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11577631600,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4685600,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16466419200,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23177733100,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2013676400,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10244257900,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4803556200,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1568150100,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 108500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 22599500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2303158600,
              "status": "passed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10018683000,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 274905600,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5013630700,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5015898500,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5096090900,
              "error_message": "java.lang.AssertionError: expected [true] but found [false]\r\n\tat org.testng.Assert.fail(Assert.java:94)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:513)\r\n\tat org.testng.Assert.assertTrue(Assert.java:42)\r\n\tat org.testng.Assert.assertTrue(Assert.java:52)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.landingPageValidation(LoginSteps.java:92)\r\n\tat ✽.Then user should be landed to \"Home\" screen(features/PulseLoginTest.feature:23)\r\n",
              "status": "failed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 75800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 25,
        "name": "Verify the Invalid Email id in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-invalid-email-id-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 397780600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9211149800,
              "status": "passed"
            },
            "line": 26,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2006496100,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14757413800,
              "status": "passed"
            },
            "line": 28,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21197329000,
              "status": "passed"
            },
            "line": 29,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2003902700,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12996120900,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 179baae2-ce80-4143-9f5f-8a0f70dce51a\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Sign In\u0027) or contains(@text,\u0027Log Masuk\u0027)]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickSignIns_InSignUp(PulseLoginScreen.java:719)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.clickSignIns_InSignUp(LoginSteps.java:349)\r\n\tat ✽.And I click the Sign in link(features/PulseLoginTest.feature:32)\r\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 31,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 32,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 33,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "t@gmai"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 38,
                "value": "#    And I scroll down"
              }
            ],
            "line": 39,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 40,
                "value": "## need to check validation message"
              }
            ],
            "line": 41,
            "name": "verify invalid email message \"Email is required\"",
            "match": {
              "arguments": [
                {
                  "val": "Email is required",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 42,
                "value": "#    Then verify invalid email message \"E-mail is invalid\""
              }
            ],
            "line": 43,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 44,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "t@gmai"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 47,
            "name": "verify invalid email message \"${email.invalid.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${email.invalid.text}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 85300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 18300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 49,
        "name": "Verify the User not registerd email in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-user-not-registerd-email-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 380745500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10176200,
              "status": "passed"
            },
            "line": 50,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 131000,
              "status": "passed"
            },
            "line": 51,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "USER_NAME",
                  "taf-${RANDOM_NUMBER}@mailinator.com"
                ],
                "line": 52
              },
              {
                "cells": [
                  "USER_PASSWORD",
                  "Pas$1234"
                ],
                "line": 53
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 11901226900,
              "status": "passed"
            },
            "line": 54,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 17952158400,
              "status": "passed"
            },
            "line": 55,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22073188500,
              "status": "passed"
            },
            "line": 56,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2002217300,
              "status": "passed"
            },
            "line": 57,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12531433100,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6cfb3408-96aa-4980-8f49-146b57141942\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Sign In\u0027) or contains(@text,\u0027Log Masuk\u0027)]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickSignIns_InSignUp(PulseLoginScreen.java:719)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.clickSignIns_InSignUp(LoginSteps.java:349)\r\n\tat ✽.And I click the Sign in link(features/PulseLoginTest.feature:59)\r\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 58,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 59,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${USER_NAME}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "Password",
                  "${USER_PASSWORD}"
                ],
                "line": 64
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 65,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 66,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 67,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 68,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${USER_NAME}"
                ],
                "line": 70
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 71,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 72,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 70700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 15300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 75,
        "name": "User should be able to retrieve the reset password using forget password link",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;user-should-be-able-to-retrieve-the-reset-password-using-forget-password-link",
        "after": [
          {
            "result": {
              "duration": 1023265100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 363700,
              "status": "passed"
            },
            "line": 76,
            "name": "I assign \"${forgot.password.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${forgot.password.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12817396800,
              "error_message": "com.prudential.tap.exception.TapException: Not able to find element on screen [By.xpath: //android.widget.EditText[contains(@text,\u0027pulsesgqa\u0027)]]\r\n\tat com.prudential.tap.appium.AppiumCommands.findElementNoWait(AppiumCommands.java:176)\r\n\tat com.prudential.tap.appium.AppiumCommands.cleartext(AppiumCommands.java:406)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.enterEmailForgotPassword(PulseLoginScreen.java:224)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.enterForgotPasswordEmail(LoginSteps.java:61)\r\n\tat ✽.Then enter the email to request the new password(features/PulseLoginTest.feature:77)\r\n",
              "status": "failed"
            },
            "line": 77,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 78
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 79,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 80,
            "name": "I read the otp for emailid \"${PULSE_EMAIL}\" using mailsac api and store into a variable \"EMAIL_OTP\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 28
                },
                {
                  "val": "EMAIL_OTP",
                  "offset": 89
                }
              ],
              "location": "RegistrationSteps.readOTP(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 82,
            "name": "I enter \"${EMAIL_OTP}\" reset code",
            "match": {
              "arguments": [
                {
                  "val": "${EMAIL_OTP}",
                  "offset": 9
                }
              ],
              "location": "LoginSteps.enterResetOTP(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 83,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "comments": [
              {
                "line": 84,
                "value": "## password reset success message is not displaying in ios build"
              }
            ],
            "line": 85,
            "name": "Verify message: \"${password.reset.success.text}\" for Reset Password",
            "match": {
              "arguments": [
                {
                  "val": "${password.reset.success.text}",
                  "offset": 17
                }
              ],
              "location": "LoginSteps.verifyResetPasswordMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 76000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 12000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 87,
        "name": "Verify Account should be locked after entering more than 7 times incorrect passwords",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-account-should-be-locked-after-entering-more-than-7-times-incorrect-passwords",
        "after": [
          {
            "result": {
              "duration": 1810309800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 29100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 513500,
              "status": "passed"
            },
            "line": 88,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 77800,
              "status": "passed"
            },
            "line": 89,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9607704200,
              "status": "passed"
            },
            "line": 90,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2002031300,
              "status": "passed"
            },
            "line": 91,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13624638500,
              "status": "passed"
            },
            "line": 92,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23724302600,
              "status": "passed"
            },
            "line": 93,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5007791700,
              "status": "passed"
            },
            "line": 94,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3822396100,
              "status": "passed"
            },
            "line": 95,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2007285500,
              "status": "passed"
            },
            "line": 96,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7819439600,
              "status": "passed"
            },
            "line": 97,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 98
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 99
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 100
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 101
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 337402500,
              "status": "passed"
            },
            "line": 102,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4225656800,
              "status": "passed"
            },
            "line": 103,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 32747272800,
              "status": "passed"
            },
            "line": 104,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 40477950000,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 3008421d-fcc2-493c-a43f-9a43f9346268\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027DD-MM-YYYY\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.clickSkipButton(PulseRegistrationScreen.java:1117)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.iClickSkipButton(RegistrationSteps.java:377)\r\n\tat ✽.Then I click skip button(features/PulseLoginTest.feature:108)\r\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 105,
                "value": "#    Then I wait for 10 sec"
              },
              {
                "line": 106,
                "value": "#    Then I click skip button"
              },
              {
                "line": 107,
                "value": "#    Then I wait for 5 sec"
              }
            ],
            "line": 108,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 109,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 110,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 111,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 112,
            "name": "I click the sign out from pulse app",
            "match": {
              "location": "LoginSteps.Signout_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 113,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 114,
            "name": "I enter invalid password on login screen and verify the error message",
            "match": {
              "location": "LoginSteps.verifyInvalidPasswordErrorMsg(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 115
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 119
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 121
              },
              {
                "cells": [
                  "Pas$123##${account.locked.message}"
                ],
                "line": 122
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 92500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 16500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 144,
        "name": "Verify the Login Functionality using \"Continue with Facebook\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-login-functionality-using-\"continue-with-facebook\"",
        "after": [
          {
            "result": {
              "duration": 13878100,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10071208500,
              "status": "passed"
            },
            "line": 145,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2005371700,
              "status": "passed"
            },
            "line": 146,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3199178600,
              "status": "passed"
            },
            "line": 147,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2011282100,
              "status": "passed"
            },
            "line": 148,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 63324400,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 2b9c1340-1501-45ce-85fe-3581619eb81e\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.Spinner[1]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.changeTheCountryName(PulseRegistrationScreen.java:1016)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.iSelectTheCountry(RegistrationSteps.java:306)\r\n\tat ✽.Then I change the country as required on registration page(features/PulseLoginTest.feature:149)\r\n",
              "status": "failed"
            },
            "line": 149,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 150,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 151,
            "name": "I navigate to pulse registration page and select the lang on toggle bar",
            "match": {
              "location": "RegistrationSteps.navigateToRegPageAndSelectTheLangUsingToggle()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 152,
            "name": "I click on connect with facebook button",
            "match": {
              "location": "RegistrationSteps.selectConnectWithFacebookBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 153,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 154,
            "name": "I click the \"Email\" in Continue with Facebook",
            "match": {
              "arguments": [
                {
                  "val": "Email",
                  "offset": 13
                }
              ],
              "location": "LoginSteps.EnterFacebookLogin(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Emailid",
                  "${emailid.text}"
                ],
                "line": 155
              },
              {
                "cells": [
                  "Password",
                  "${password.texts}"
                ],
                "line": 156
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 157,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 158,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 159,
            "name": "I logout from onepulse app",
            "match": {
              "location": "WealthSteps.iLogoutFromOnepulseApp()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify login functionality on One pulse App",
    "description": "",
    "id": "verify-login-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/PulseLoginTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@onepulseLogins"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 77800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 52400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10443214400,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 235200,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 15602747000,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23208428200,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2003815200,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11883951600,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4926260900,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1536463300,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 78900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 53000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2280003400,
              "status": "passed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10350275400,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 276429100,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14348232000,
              "status": "passed"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5004350000,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13790438500,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 107100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 19900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 26,
        "name": "Verify User should be able to share the link with Whatsapp",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-whatsapp",
        "after": [
          {
            "result": {
              "duration": 69500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13904210500,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify the share with friends links",
            "match": {
              "location": "LoginSteps.iVerifyTheShareWithFriendsLinks()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 100100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 20600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 29,
        "name": "Verify User should be able to share the link with Contacts app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-contacts-app",
        "after": [
          {
            "result": {
              "duration": 46300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9231063000,
              "status": "passed"
            },
            "line": 30,
            "name": "I verify the contacts share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheContactsShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 83000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 16800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 32,
        "name": "Verify User should be able to share the link with Messenger app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-messenger-app",
        "after": [
          {
            "result": {
              "duration": 63600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6428883100,
              "status": "passed"
            },
            "line": 33,
            "name": "I verify the fb messenger share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheFbMessengerShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 85700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 16400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 35,
        "name": "Verify User should be able to share the link with Viber app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-viber-app",
        "after": [
          {
            "result": {
              "duration": 32529300,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 21582462700,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 1ecd9188-e345-40c6-8e4b-f4fdbc0c7f97\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:276)\r\n\tat io.appium.java_client.DefaultGenericMobileElement.execute(DefaultGenericMobileElement.java:45)\r\n\tat io.appium.java_client.MobileElement.execute(MobileElement.java:1)\r\n\tat io.appium.java_client.android.AndroidElement.execute(AndroidElement.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:83)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickViberIcon(PulseLoginScreen.java:645)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.iVerifyTheViberShareIcon(LoginSteps.java:316)\r\n\tat ✽.Then I verify the Viber share icon(features/share/ShareWithFriends.feature:36)\r\n",
              "status": "failed"
            },
            "line": 36,
            "name": "I verify the Viber share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheViberShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 64400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 13400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 38,
        "name": "Verify User should be able to share the link with Line app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-line-app",
        "after": [
          {
            "result": {
              "duration": 26558800,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 115722200,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 1ecd9188-e345-40c6-8e4b-f4fdbc0c7f97\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.TextView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor21.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickLineIcon(PulseLoginScreen.java:639)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.iVerifyTheLineShareIcon(LoginSteps.java:311)\r\n\tat ✽.Then I verify the Line share icon(features/share/ShareWithFriends.feature:39)\r\n",
              "status": "failed"
            },
            "line": 39,
            "name": "I verify the Line share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheLineShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify share with friends functionality in OnePulse app",
    "description": "",
    "id": "verify-share-with-friends-functionality-in-onepulse-app",
    "keyword": "Feature",
    "uri": "features/share/ShareWithFriends.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@ShareWithFriendsE2E"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@shareWithFriends"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 97500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 21800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 4,
        "name": "User should be able to login on app with correct credentials using \"Continue with Gmail\"",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-gmail\"",
        "after": [
          {
            "result": {
              "duration": 56700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8932882500,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5001761500,
              "status": "passed"
            },
            "line": 6,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 181400,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${onepulse.login.global.idsetting}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.idsetting}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 59
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12968714800,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22837012300,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4012927800,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10627585100,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4804327900,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10365959300,
              "status": "passed"
            },
            "line": 13,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 14
              },
              {
                "cells": [
                  "Password",
                  "${login.mysettings}"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 280010900,
              "status": "passed"
            },
            "line": 16,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10001409600,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10657539000,
              "status": "passed"
            },
            "line": 18,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3624884200,
              "status": "passed"
            },
            "line": 19,
            "name": "user should be landed home screen",
            "match": {
              "location": "RegistrationSteps.isHomePageDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 800000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 364500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 21,
        "name": "Verify the My Feedback screen in Account tab",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-the-my-feedback-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 13189700,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 297900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5004947700,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 35924500,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: d9f8fe68-e0c2-4372-a9ac-14ae436e10b7\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.ImageView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor21.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.accountButton(PulseRegistrationScreen.java:738)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.accountButton(RegistrationSteps.java:143)\r\n\tat ✽.And I click the Account icon in Home screen(features/th/PulseMySettings.feature:23)\r\n",
              "status": "failed"
            },
            "line": 23,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 24,
            "name": "I click the My Feedback icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickMyFeedback()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 25,
            "name": "I click the Feedback start icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickstartIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 26,
            "name": "I verify following texts are Displayed",
            "match": {
              "location": "DieticianSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${HealthArticles.text}"
                ],
                "line": 27
              },
              {
                "cells": [
                  "${BMI.text}"
                ],
                "line": 28
              },
              {
                "cells": [
                  "${Wrinkle.text}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${Health.Assessment.text}"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 47600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 19300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 32,
        "name": "Verify the submit functionality in My feedback screen",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-the-submit-functionality-in-my-feedback-screen",
        "after": [
          {
            "result": {
              "duration": 13202500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 25500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3043560500,
              "status": "passed"
            },
            "line": 33,
            "name": "I click the Health Articles icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.ClickHealthArticles()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5036281300,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: d9f8fe68-e0c2-4372-a9ac-14ae436e10b7\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.EditText}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor21.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$16.executeCommand(Commands.java:148)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.setTextWithTab(TestBasePage.java:260)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.enterMobileNumber(CustomerConnectScreen.java:781)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.enterMobileNumber(CustomerConnectSteps.java:231)\r\n\tat ✽.And I enter the \"Feedback\" in welcome to Feedback Screen(features/th/PulseMySettings.feature:34)\r\n",
              "status": "failed"
            },
            "line": 34,
            "name": "I enter the \"Feedback\" in welcome to Feedback Screen",
            "match": {
              "arguments": [
                {
                  "val": "Feedback",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "98678419"
                ],
                "line": 35
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "I click the Submit icon in Feedback Screen",
            "match": {
              "location": "CustomerConnectSteps.clickSubmitFeedbackIcon()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 66700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 9600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 38,
        "name": "Verify the Pulse Personalised tab",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-the-pulse-personalised-tab",
        "after": [
          {
            "result": {
              "duration": 12464600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3006155700,
              "status": "passed"
            },
            "line": 39,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3033013500,
              "status": "passed"
            },
            "line": 40,
            "name": "I click the Pulse by Personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickpulsePersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3003157300,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3063649200,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: d9f8fe68-e0c2-4372-a9ac-14ae436e10b7\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor21.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\r\n\tat com.prudential.tap.appium.AppiumCommands.swipe(AppiumCommands.java:432)\r\n\tat com.onepulse.app.screens.TestBasePage.scrollPageDown(TestBasePage.java:204)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickSaveButtonPersonalised(CustomerConnectScreen.java:835)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickSavebuttonpersonalized(CustomerConnectSteps.java:245)\r\n\tat ✽.And I click the save button in pulse personalised icons(features/th/PulseMySettings.feature:42)\r\n",
              "status": "failed"
            },
            "line": 42,
            "name": "I click the save button in pulse personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickSavebuttonpersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "I click the Ok button in pulse personlised screen",
            "match": {
              "location": "CustomerConnectSteps.clickpersonalisedscreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 44,
            "name": "I click the Back icon in pulse personalised screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackpersonalisedScreen()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 46,
            "value": "# Marketing conset is not there in th"
          },
          {
            "line": 47,
            "value": "#  Scenario: Verify the Marketing Consent in Account tab"
          },
          {
            "line": 48,
            "value": "#    And I click the Marketing content"
          },
          {
            "line": 49,
            "value": "#    Then I wait for 3 sec"
          },
          {
            "line": 50,
            "value": "#    Then I verify the following text \"${Marketing.Consent.text}\" Screens"
          },
          {
            "line": 51,
            "value": "#      | ${Marketing.Consent.text} |"
          },
          {
            "line": 52,
            "value": "#    And I click the save button in pulse personalised icons"
          },
          {
            "line": 53,
            "value": "#    And I click the Ok button in pulse personlised screen"
          },
          {
            "line": 54,
            "value": "#    And I click the Back icon in pulse Marketing Consent"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 62100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 7500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 56,
        "name": "Verify my setting screen in Account tab",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-my-setting-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 13930900,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:94)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 44015400,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: d9f8fe68-e0c2-4372-a9ac-14ae436e10b7\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.ImageView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor21.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.accountButton(PulseRegistrationScreen.java:738)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.accountButton(RegistrationSteps.java:143)\r\n\tat ✽.And I click the Account icon in Home screen(features/th/PulseMySettings.feature:57)\r\n",
              "status": "failed"
            },
            "line": 57,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "I click on \"${icon.mySettings}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${icon.mySettings}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "User verify following list texts are displayed in My Setting screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnListMySettingScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Country"
                ],
                "line": 61
              },
              {
                "cells": [
                  "Thailand"
                ],
                "line": 62
              },
              {
                "cells": [
                  "Language"
                ],
                "line": 63
              },
              {
                "cells": [
                  "English (UK)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "Change Password"
                ],
                "line": 65
              },
              {
                "cells": [
                  "Enable Face Auth"
                ],
                "line": 66
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify MySettings functionality in Account screen",
    "description": "",
    "id": "verify-mysettings-functionality-in-account-screen",
    "keyword": "Feature",
    "uri": "features/th/PulseMySettings.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MySettingsth"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 51300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 6900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 6,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 44300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11328145700,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 292000,
              "status": "passed"
            },
            "line": 8,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 17176067000,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21212821000,
              "status": "passed"
            },
            "line": 10,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2013294700,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11406517500,
              "status": "passed"
            },
            "line": 12,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4648598700,
              "status": "passed"
            },
            "line": 13,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1555782800,
              "status": "passed"
            },
            "line": 14,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 65800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 16,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 45500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2242079900,
              "status": "passed"
            },
            "line": 17,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10303107100,
              "status": "passed"
            },
            "line": 18,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 19
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 20
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 276721400,
              "status": "passed"
            },
            "line": 21,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4999981800,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14429794100,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 79600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 11700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 26,
        "name": "Verify My Challenges texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;verify-my-challenges-texts",
        "after": [
          {
            "result": {
              "duration": 3108492300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12598520600,
              "status": "passed"
            },
            "line": 27,
            "name": "I click on My Challenges tile on one pulse app",
            "match": {
              "location": "LoginSteps.myChallengesTile()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10143135500,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tYou have not connected any wearable text is displayed on page  expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\r\n\tat ✽.And I verify following texts are displayed(features/th/home/PulseMyChallenges.feature:28)\r\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 28,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.challenges.text}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${not.connected.wearable}"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 70800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 12500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 33,
        "name": "Verify the user can Connect Wearables via My Challenges",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;verify-the-user-can-connect-wearables-via-my-challenges",
        "after": [
          {
            "result": {
              "duration": 3048499300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 40700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8307489300,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 72614c95-5e58-4b83-bf43-c1fc6ff61d15\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"Connect Wearable\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1741)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:534)\r\n\tat ✽.And I clicks on \"${myChallenges.connectWearablesButton}\" in app screen(features/th/home/PulseMyChallenges.feature:34)\r\n",
              "status": "failed"
            },
            "line": 34,
            "name": "I clicks on \"${myChallenges.connectWearablesButton}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${myChallenges.connectWearablesButton}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${wearables.title}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${wearables.subTitle}"
                ],
                "line": 37
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "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\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 38,
            "name": "I click on Back button of My Wearables screen",
            "match": {
              "location": "WearablesActivationSteps.clickBackButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 57500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 19600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 41,
        "name": "Click on All challenges and and verify texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;click-on-all-challenges-and-and-verify-texts",
        "after": [
          {
            "result": {
              "duration": 40800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 274836500,
              "status": "passed"
            },
            "line": 42,
            "name": "I clicks on \"${all.challenges.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${all.challenges.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8854958500,
              "status": "passed"
            },
            "line": 43,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.challenges.text}"
                ],
                "line": 44
              },
              {
                "cells": [
                  "${all.challenges.text}"
                ],
                "line": 45
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 477115500,
              "status": "passed"
            },
            "line": 46,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${no.challenges.available}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${notify.challenge}"
                ],
                "line": 48
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 301756700,
              "status": "passed"
            },
            "line": 49,
            "name": "I clicks on \"${back.home}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${back.home}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify  My Challenges on One Pulse App",
    "description": "",
    "id": "verify--my-challenges-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/th/home/PulseMyChallenges.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_challengesTH"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 80600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 14500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 4,
        "name": "User should be able to login on app with correct credentials using \"Continue with Gmail\"",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-gmail\"",
        "after": [
          {
            "result": {
              "duration": 44400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10305118200,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 207800,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${onepulse.login.global.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2003326100,
              "status": "passed"
            },
            "line": 7,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14562732400,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22120815100,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004718800,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10124357200,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4809532800,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10450859700,
              "status": "passed"
            },
            "line": 13,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 14
              },
              {
                "cells": [
                  "Password",
                  "${Password.text}"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 238515700,
              "status": "passed"
            },
            "line": 16,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10003024400,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12219220200,
              "status": "passed"
            },
            "line": 18,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14360969100,
              "status": "passed"
            },
            "line": 19,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 20,
            "value": "#    And I click the pulsemate pop up in Customerconnect screen"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 110400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 45500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 22,
        "name": "Verify the Terms and condition should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pluse-app;verify-the-terms-and-condition-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 42500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5001658900,
              "status": "passed"
            },
            "comments": [
              {
                "line": 23,
                "value": "# And I click the pulsemate pop up in Customerconnect screen"
              }
            ],
            "line": 24,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 849539500,
              "status": "passed"
            },
            "line": 25,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3751905300,
              "status": "passed"
            },
            "line": 26,
            "name": "I click the Legacy and Privacy in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickLegalandLegacy()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2514173500,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Terms.conditions.text}"
                ],
                "line": 28
              },
              {
                "cells": [
                  "${Privacy.Notice.text}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${Regulatory.text}"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 31,
            "value": "#   | ${Appversion.text}       |"
          },
          {
            "line": 32,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 71700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 13900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 33,
        "name": "Verify the Privacy screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pluse-app;verify-the-privacy-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 61400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2339450600,
              "status": "passed"
            },
            "line": 34,
            "name": "I click the Privacy icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickprivacyIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13613553700,
              "status": "passed"
            },
            "line": 35,
            "name": "I click the pulse icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickpulseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2385766800,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the Back icon in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2359657400,
              "status": "passed"
            },
            "line": 37,
            "name": "I click the Back icon in Privacy Notice",
            "match": {
              "location": "CustomerConnectSteps.clickBackbuttonPrivacy()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 38,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 63500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          },
          {
            "result": {
              "duration": 9400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          }
        ],
        "line": 39,
        "name": "Verify the Regulator screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pluse-app;verify-the-regulator-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 33400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 7300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1240216900,
              "status": "passed"
            },
            "comments": [
              {
                "line": 40,
                "value": "# And I click the pulsemate pop up in Customerconnect screen"
              }
            ],
            "line": 41,
            "name": "I click the Regulatory icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickRegulatory()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1621961200,
              "status": "passed"
            },
            "comments": [
              {
                "line": 42,
                "value": "#  And I click the clinical safety icon in Account screen"
              }
            ],
            "line": 43,
            "name": "I click the Babylons  icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickBabylon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5478795700,
              "status": "passed"
            },
            "line": 44,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Clinicalsafety.text}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${AI.in.Healthcare.text}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${Localisation.text}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${Privacy.Data.Protection.text}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${Raising.Concerns}"
                ],
                "line": 49
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20800847400,
              "status": "passed"
            },
            "line": 50,
            "name": "I click the clinical safety icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickClinical()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8004193200,
              "status": "passed"
            },
            "line": 51,
            "name": "I wait for 8 sec",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20982054600,
              "status": "passed"
            },
            "line": 52,
            "name": "I click the Back icons in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.ClickBackBabylons()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify legal and legacy on One Pluse App",
    "description": "",
    "id": "verify-legal-and-legacy-on-one-pluse-app",
    "keyword": "Feature",
    "uri": "features/th/profile/LegalAndLegacy.feature",
    "tags": [
      {
        "line": 1,
        "name": "@Legalth"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  }
]