[
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 164025400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 392477100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 237900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10789513100,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3564700,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 16727348000,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22006204900,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2014560700,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10333109000,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4815346700,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1554523300,
              "status": "passed"
            },
            "line": 13,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 62800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 44000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 74500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2272602600,
              "status": "passed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10896126400,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 242616600,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5001107300,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10757140800,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14170723500,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 60100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 77400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 25,
        "name": "Verify the Invalid Email id in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-invalid-email-id-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 399305300,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 10953241100,
              "status": "passed"
            },
            "line": 26,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2000576700,
              "status": "passed"
            },
            "line": 27,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14921789600,
              "status": "passed"
            },
            "line": 28,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22213851100,
              "status": "passed"
            },
            "line": 29,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004633100,
              "status": "passed"
            },
            "line": 30,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13260110600,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: b5b169f9-b719-4f9f-b3e0-39333b9844ec\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Sign In\u0027) or contains(@text,\u0027Log Masuk\u0027)]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickSignIns_InSignUp(PulseLoginScreen.java:720)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.clickSignIns_InSignUp(LoginSteps.java:349)\r\n\tat ✽.And I click the Sign in link(features/PulseLoginTest.feature:32)\r\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 31,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 32,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 33,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "t@gmai"
                ],
                "line": 36
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 37
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 38,
                "value": "#    And I scroll down"
              }
            ],
            "line": 39,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 40,
                "value": "## need to check validation message"
              }
            ],
            "line": 41,
            "name": "verify invalid email message \"Email is required\"",
            "match": {
              "arguments": [
                {
                  "val": "Email is required",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 42,
                "value": "#    Then verify invalid email message \"E-mail is invalid\""
              }
            ],
            "line": 43,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 44,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "t@gmai"
                ],
                "line": 45
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 47,
            "name": "verify invalid email message \"${email.invalid.text}\"",
            "match": {
              "arguments": [
                {
                  "val": "${email.invalid.text}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 45700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 24500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 49,
        "name": "Verify the User not registerd email in login screen using \"Continue with Email\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-user-not-registerd-email-in-login-screen-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 478798600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8213800,
              "status": "passed"
            },
            "line": 50,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 289000,
              "status": "passed"
            },
            "line": 51,
            "name": "I assign value to following variables",
            "match": {
              "location": "ConfigvariableSteps.assignValueToVariables(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "USER_NAME",
                  "taf-${RANDOM_NUMBER}@mailinator.com"
                ],
                "line": 52
              },
              {
                "cells": [
                  "USER_PASSWORD",
                  "Pas$1234"
                ],
                "line": 53
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10038166500,
              "status": "passed"
            },
            "line": 54,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 16290386800,
              "status": "passed"
            },
            "line": 55,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21741363500,
              "status": "passed"
            },
            "line": 56,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1995126000,
              "status": "passed"
            },
            "line": 57,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13230107300,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 107bc7ee-cb8b-40fb-ae79-17eca1d00e39\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Sign In\u0027) or contains(@text,\u0027Log Masuk\u0027)]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickSignIns_InSignUp(PulseLoginScreen.java:720)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.clickSignIns_InSignUp(LoginSteps.java:349)\r\n\tat ✽.And I click the Sign in link(features/PulseLoginTest.feature:59)\r\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 58,
                "value": "#   Then I change the language as required on registration page"
              }
            ],
            "line": 59,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${USER_NAME}"
                ],
                "line": 63
              },
              {
                "cells": [
                  "Password",
                  "${USER_PASSWORD}"
                ],
                "line": 64
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 65,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 66,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 67,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 68,
            "name": "User clicks on Forgot Password button",
            "match": {
              "location": "LoginSteps.clickForgotPasswordButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${USER_NAME}"
                ],
                "line": 70
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 71,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 72,
            "name": "verify invalid email message \"${invalid.credential.message}\"",
            "match": {
              "arguments": [
                {
                  "val": "${invalid.credential.message}",
                  "offset": 30
                }
              ],
              "location": "LoginSteps.verifyInvalidEmailMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 34200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 75,
        "name": "User should be able to retrieve the reset password using forget password link",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;user-should-be-able-to-retrieve-the-reset-password-using-forget-password-link",
        "after": [
          {
            "result": {
              "duration": 1175803900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 144900,
              "status": "passed"
            },
            "line": 76,
            "name": "I assign \"${forgot.password.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${forgot.password.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12968484000,
              "error_message": "com.prudential.tap.exception.TapException: Not able to find element on screen [By.xpath: //android.widget.EditText[contains(@text,\u0027pulsesgqa\u0027)]]\r\n\tat com.prudential.tap.appium.AppiumCommands.findElementNoWait(AppiumCommands.java:176)\r\n\tat com.prudential.tap.appium.AppiumCommands.cleartext(AppiumCommands.java:406)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.enterEmailForgotPassword(PulseLoginScreen.java:225)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.enterForgotPasswordEmail(LoginSteps.java:61)\r\n\tat ✽.Then enter the email to request the new password(features/PulseLoginTest.feature:77)\r\n",
              "status": "failed"
            },
            "line": 77,
            "name": "enter the email to request the new password",
            "match": {
              "location": "LoginSteps.enterForgotPasswordEmail(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 78
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 79,
            "name": "User clicks on Send button",
            "match": {
              "location": "LoginSteps.clickSendButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 80,
            "name": "I read the otp for emailid \"${PULSE_EMAIL}\" using mailsac api and store into a variable \"EMAIL_OTP\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 28
                },
                {
                  "val": "EMAIL_OTP",
                  "offset": 89
                }
              ],
              "location": "RegistrationSteps.readOTP(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 82,
            "name": "I enter \"${EMAIL_OTP}\" reset code",
            "match": {
              "arguments": [
                {
                  "val": "${EMAIL_OTP}",
                  "offset": 9
                }
              ],
              "location": "LoginSteps.enterResetOTP(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 83,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "comments": [
              {
                "line": 84,
                "value": "## password reset success message is not displaying in ios build"
              }
            ],
            "line": 85,
            "name": "Verify message: \"${password.reset.success.text}\" for Reset Password",
            "match": {
              "arguments": [
                {
                  "val": "${password.reset.success.text}",
                  "offset": 17
                }
              ],
              "location": "LoginSteps.verifyResetPasswordMsg(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 35400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 35600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 87,
        "name": "Verify Account should be locked after entering more than 7 times incorrect passwords",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-account-should-be-locked-after-entering-more-than-7-times-incorrect-passwords",
        "after": [
          {
            "result": {
              "duration": 1962420200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 535000,
              "status": "passed"
            },
            "line": 88,
            "name": "I generate random number and assign to variable \"RANDOM_NUMBER\"",
            "match": {
              "arguments": [
                {
                  "val": "RANDOM_NUMBER",
                  "offset": 49
                }
              ],
              "location": "ConfigvariableSteps.generateRandomNumberAndAssignToVariable(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 67400,
              "status": "passed"
            },
            "line": 89,
            "name": "I assign \"pulse${RANDOM_NUMBER}@mailsac.com\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "pulse${RANDOM_NUMBER}@mailsac.com",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 58
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10990083300,
              "status": "passed"
            },
            "line": 90,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006069900,
              "status": "passed"
            },
            "line": 91,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14689482200,
              "status": "passed"
            },
            "line": 92,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 21759363100,
              "status": "passed"
            },
            "line": 93,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 5005213000,
              "status": "passed"
            },
            "line": 94,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3824591300,
              "status": "passed"
            },
            "line": 95,
            "name": "I navigate to pulse registration page and select the lang on toggle bar then click on continue with email button",
            "match": {
              "location": "RegistrationSteps.navigateToRegistrationPageAndChangeTheLang()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1997777500,
              "status": "passed"
            },
            "line": 96,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6897748900,
              "status": "passed"
            },
            "line": 97,
            "name": "user enters registration details",
            "match": {
              "location": "RegistrationSteps.enterRegistrationDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "testAutomation"
                ],
                "line": 98
              },
              {
                "cells": [
                  "LastName",
                  "testAutomation"
                ],
                "line": 99
              },
              {
                "cells": [
                  "Email",
                  "${PULSE_EMAIL}"
                ],
                "line": 100
              },
              {
                "cells": [
                  "Password",
                  "Pas$1234"
                ],
                "line": 101
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 268701700,
              "status": "passed"
            },
            "line": 102,
            "name": "taps on continue \"Sign_Up\" button",
            "match": {
              "arguments": [
                {
                  "val": "Sign_Up",
                  "offset": 18
                }
              ],
              "location": "RegistrationSteps.clickOnContinue(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5948987500,
              "status": "passed"
            },
            "line": 103,
            "name": "I wait for otp screen after clicking on signup button",
            "match": {
              "location": "RegistrationSteps.verifyOTPScreen()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 30938817400,
              "status": "passed"
            },
            "line": 104,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 42822986900,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 01bcc27d-236d-41c6-bbb1-a8715283b99d\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027DD-MM-YYYY\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.clickSkipButton(PulseRegistrationScreen.java:1116)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.iClickSkipButton(RegistrationSteps.java:377)\r\n\tat ✽.Then I click skip button(features/PulseLoginTest.feature:108)\r\n",
              "status": "failed"
            },
            "comments": [
              {
                "line": 105,
                "value": "#    Then I wait for 10 sec"
              },
              {
                "line": 106,
                "value": "#    Then I click skip button"
              },
              {
                "line": 107,
                "value": "#    Then I wait for 5 sec"
              }
            ],
            "line": 108,
            "name": "I click skip button",
            "match": {
              "location": "RegistrationSteps.iClickSkipButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 109,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 110,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 111,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 112,
            "name": "I click the sign out from pulse app",
            "match": {
              "location": "LoginSteps.Signout_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 113,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 114,
            "name": "I enter invalid password on login screen and verify the error message",
            "match": {
              "location": "LoginSteps.verifyInvalidPasswordErrorMsg(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 115
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 116
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 117
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 118
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 119
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 120
              },
              {
                "cells": [
                  "Pas$123##${invalid.credential.message}"
                ],
                "line": 121
              },
              {
                "cells": [
                  "Pas$123##${account.locked.message}"
                ],
                "line": 122
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 31600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 144,
        "name": "Verify the Login Functionality using \"Continue with Facebook\"",
        "description": "",
        "id": "verify-login-functionality-on-one-pulse-app;verify-the-login-functionality-using-\"continue-with-facebook\"",
        "after": [
          {
            "result": {
              "duration": 37200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8985568000,
              "status": "passed"
            },
            "line": 145,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2009264600,
              "status": "passed"
            },
            "line": 146,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14144638400,
              "status": "passed"
            },
            "line": 147,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2012529900,
              "status": "passed"
            },
            "line": 148,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20929566800,
              "status": "passed"
            },
            "line": 149,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2004779300,
              "status": "passed"
            },
            "line": 150,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3609954200,
              "status": "passed"
            },
            "line": 151,
            "name": "I navigate to pulse registration page and select the lang on toggle bar",
            "match": {
              "location": "RegistrationSteps.navigateToRegPageAndSelectTheLangUsingToggle()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 213340400,
              "status": "passed"
            },
            "line": 152,
            "name": "I click on connect with facebook button",
            "match": {
              "location": "RegistrationSteps.selectConnectWithFacebookBtn()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2001551400,
              "status": "passed"
            },
            "line": 153,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2831291600,
              "status": "passed"
            },
            "line": 154,
            "name": "I click the \"Email\" in Continue with Facebook",
            "match": {
              "arguments": [
                {
                  "val": "Email",
                  "offset": 13
                }
              ],
              "location": "LoginSteps.EnterFacebookLogin(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Emailid",
                  "${emailid.text}"
                ],
                "line": 155
              },
              {
                "cells": [
                  "Password",
                  "${password.texts}"
                ],
                "line": 156
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10009144700,
              "status": "passed"
            },
            "line": 157,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14684581900,
              "status": "passed"
            },
            "line": 158,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9733649800,
              "status": "passed"
            },
            "line": 159,
            "name": "I logout from onepulse app",
            "match": {
              "location": "WealthSteps.iLogoutFromOnepulseApp()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify login functionality on One pulse App",
    "description": "",
    "id": "verify-login-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/PulseLoginTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@onepulseLogins"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@sanityTest"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 49100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 15292200,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9260417200,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 183400,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2093309700,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 97177100,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6a164b59-9df1-4c19-823b-310614818d8c\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.Spinner[1]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.changeTheCountryName(PulseRegistrationScreen.java:1015)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.iSelectTheCountry(RegistrationSteps.java:306)\r\n\tat ✽.Then I change the country as required on registration page(features/share/ShareWithFriends.feature:9)\r\n",
              "status": "failed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 13,
            "name": "I verify below language options on toggle bar as per specified lbu on login page",
            "match": {
              "location": "RegistrationSteps.verifyTheLanguageOptions()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 117500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 62500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 15,
        "name": "login to the app with correct credentials using \"Continue with Email\"",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;login-to-the-app-with-correct-credentials-using-\"continue-with-email\"",
        "after": [
          {
            "result": {
              "duration": 9771700,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 25700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 24954600,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6a164b59-9df1-4c19-823b-310614818d8c\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\"EN\"]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.selectTheLanguageToggle(PulseRegistrationScreen.java:1066)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.selectTheLangOption(RegistrationSteps.java:338)\r\n\tat ✽.Given I select the language option on toggle bar as required on login page(features/share/ShareWithFriends.feature:16)\r\n",
              "status": "failed"
            },
            "line": 16,
            "name": "I select the language option on toggle bar as required on login page",
            "match": {
              "location": "RegistrationSteps.selectTheLangOption()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 21,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 22,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 83700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 134000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 26,
        "name": "Verify User should be able to share the link with Whatsapp",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-whatsapp",
        "after": [
          {
            "result": {
              "duration": 12275500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 42100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 51646100,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6a164b59-9df1-4c19-823b-310614818d8c\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Invite Your Friends Via\u0027]/following::android.view.ViewGroup[3]}\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickWhatsappIcon(PulseLoginScreen.java:607)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.iVerifyTheShareWithFriendsLinks(LoginSteps.java:294)\r\n\tat ✽.Then I verify the share with friends links(features/share/ShareWithFriends.feature:27)\r\n",
              "status": "failed"
            },
            "line": 27,
            "name": "I verify the share with friends links",
            "match": {
              "location": "LoginSteps.iVerifyTheShareWithFriendsLinks()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 71900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 44100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 29,
        "name": "Verify User should be able to share the link with Contacts app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-contacts-app",
        "after": [
          {
            "result": {
              "duration": 8661600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 19054200,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6a164b59-9df1-4c19-823b-310614818d8c\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.TextView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickContactsIcon(PulseLoginScreen.java:622)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.iVerifyTheContactsShareIcon(LoginSteps.java:299)\r\n\tat ✽.Then I verify the contacts share icon(features/share/ShareWithFriends.feature:30)\r\n",
              "status": "failed"
            },
            "line": 30,
            "name": "I verify the contacts share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheContactsShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 44400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 32,
        "name": "Verify User should be able to share the link with Messenger app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-messenger-app",
        "after": [
          {
            "result": {
              "duration": 24506900,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 69200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5066126600,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6a164b59-9df1-4c19-823b-310614818d8c\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.TextView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickMessengerIcon(PulseLoginScreen.java:1147)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.iVerifyTheFbMessengerShareIcon(LoginSteps.java:415)\r\n\tat ✽.Then I verify the fb messenger share icon(features/share/ShareWithFriends.feature:33)\r\n",
              "status": "failed"
            },
            "line": 33,
            "name": "I verify the fb messenger share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheFbMessengerShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 163000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 62900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 35,
        "name": "Verify User should be able to share the link with Viber app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-viber-app",
        "after": [
          {
            "result": {
              "duration": 14468300,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 41958900,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6a164b59-9df1-4c19-823b-310614818d8c\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.TextView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickViberIcon(PulseLoginScreen.java:646)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.iVerifyTheViberShareIcon(LoginSteps.java:316)\r\n\tat ✽.Then I verify the Viber share icon(features/share/ShareWithFriends.feature:36)\r\n",
              "status": "failed"
            },
            "line": 36,
            "name": "I verify the Viber share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheViberShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 37800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 25500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 38,
        "name": "Verify User should be able to share the link with Line app",
        "description": "",
        "id": "verify-share-with-friends-functionality-in-onepulse-app;verify-user-should-be-able-to-share-the-link-with-line-app",
        "after": [
          {
            "result": {
              "duration": 13039400,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 41153500,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6a164b59-9df1-4c19-823b-310614818d8c\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.TextView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseLoginScreen.clickLineIcon(PulseLoginScreen.java:640)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.iVerifyTheLineShareIcon(LoginSteps.java:311)\r\n\tat ✽.Then I verify the Line share icon(features/share/ShareWithFriends.feature:39)\r\n",
              "status": "failed"
            },
            "line": 39,
            "name": "I verify the Line share icon",
            "match": {
              "location": "LoginSteps.iVerifyTheLineShareIcon()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify share with friends functionality in OnePulse app",
    "description": "",
    "id": "verify-share-with-friends-functionality-in-onepulse-app",
    "keyword": "Feature",
    "uri": "features/share/ShareWithFriends.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@ShareWithFriendsE2E"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionSG"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionMY"
      },
      {
        "line": 1,
        "name": "@shareWithFriends"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 49200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 27900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "User should be able to login on app with correct credentials using \"Continue with Gmail\"",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-gmail\"",
        "after": [
          {
            "result": {
              "duration": 52400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7976426200,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 5002253300,
              "status": "passed"
            },
            "line": 6,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 301800,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${onepulse.login.global.idsetting}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.idsetting}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 59
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 12300170100,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22652666200,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4011280800,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 4 sec",
            "match": {
              "arguments": [
                {
                  "val": "4",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10931218100,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4858759100,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9403801400,
              "status": "passed"
            },
            "line": 13,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 14
              },
              {
                "cells": [
                  "Password",
                  "${login.mysettings}"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 278686200,
              "status": "passed"
            },
            "line": 16,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10014474200,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11261113500,
              "status": "passed"
            },
            "line": 18,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9007351700,
              "status": "passed"
            },
            "line": 19,
            "name": "user should be landed home screen",
            "match": {
              "location": "RegistrationSteps.isHomePageDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 410300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 222600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 21,
        "name": "Verify the My Feedback screen in Account tab",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-the-my-feedback-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 13576100,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 335500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5008879800,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 53701200,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 62c361d3-2461-455a-8be9-404002919b8f\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.ImageView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.accountButton(PulseRegistrationScreen.java:738)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.accountButton(RegistrationSteps.java:143)\r\n\tat ✽.And I click the Account icon in Home screen(features/th/PulseMySettings.feature:23)\r\n",
              "status": "failed"
            },
            "line": 23,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 24,
            "name": "I click the My Feedback icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickMyFeedback()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 25,
            "name": "I click the Feedback start icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickstartIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 26,
            "name": "I verify following texts are Displayed",
            "match": {
              "location": "DieticianSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${HealthArticles.text}"
                ],
                "line": 27
              },
              {
                "cells": [
                  "${BMI.text}"
                ],
                "line": 28
              },
              {
                "cells": [
                  "${Wrinkle.text}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${Health.Assessment.text}"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 46100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 27500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 32,
        "name": "Verify the submit functionality in My feedback screen",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-the-submit-functionality-in-my-feedback-screen",
        "after": [
          {
            "result": {
              "duration": 15560800,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 34500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3030612800,
              "status": "passed"
            },
            "line": 33,
            "name": "I click the Health Articles icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.ClickHealthArticles()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5052673200,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 62c361d3-2461-455a-8be9-404002919b8f\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.EditText}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$16.executeCommand(Commands.java:148)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.setTextWithTab(TestBasePage.java:260)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.enterMobileNumber(CustomerConnectScreen.java:781)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.enterMobileNumber(CustomerConnectSteps.java:231)\r\n\tat ✽.And I enter the \"Feedback\" in welcome to Feedback Screen(features/th/PulseMySettings.feature:34)\r\n",
              "status": "failed"
            },
            "line": 34,
            "name": "I enter the \"Feedback\" in welcome to Feedback Screen",
            "match": {
              "arguments": [
                {
                  "val": "Feedback",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.enterMobileNumber(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "mobileNumber",
                  "98678419"
                ],
                "line": 35
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 36,
            "name": "I click the Submit icon in Feedback Screen",
            "match": {
              "location": "CustomerConnectSteps.clickSubmitFeedbackIcon()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 54900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 38,
        "name": "Verify the Pulse Personalised tab",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-the-pulse-personalised-tab",
        "after": [
          {
            "result": {
              "duration": 18104500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3018150900,
              "status": "passed"
            },
            "line": 39,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3065758600,
              "status": "passed"
            },
            "line": 40,
            "name": "I click the Pulse by Personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickpulsePersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3012392600,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 3083071000,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 62c361d3-2461-455a-8be9-404002919b8f\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\r\n\tat com.prudential.tap.appium.AppiumCommands.swipe(AppiumCommands.java:432)\r\n\tat com.onepulse.app.screens.TestBasePage.scrollPageDown(TestBasePage.java:204)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickSaveButtonPersonalised(CustomerConnectScreen.java:835)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickSavebuttonpersonalized(CustomerConnectSteps.java:245)\r\n\tat ✽.And I click the save button in pulse personalised icons(features/th/PulseMySettings.feature:42)\r\n",
              "status": "failed"
            },
            "line": 42,
            "name": "I click the save button in pulse personalised icons",
            "match": {
              "location": "CustomerConnectSteps.clickSavebuttonpersonalized()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "I click the Ok button in pulse personlised screen",
            "match": {
              "location": "CustomerConnectSteps.clickpersonalisedscreen()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 44,
            "name": "I click the Back icon in pulse personalised screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackpersonalisedScreen()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 46,
            "value": "# Marketing conset is not there in th"
          },
          {
            "line": 47,
            "value": "#  Scenario: Verify the Marketing Consent in Account tab"
          },
          {
            "line": 48,
            "value": "#    And I click the Marketing content"
          },
          {
            "line": 49,
            "value": "#    Then I wait for 3 sec"
          },
          {
            "line": 50,
            "value": "#    Then I verify the following text \"${Marketing.Consent.text}\" Screens"
          },
          {
            "line": 51,
            "value": "#      | ${Marketing.Consent.text} |"
          },
          {
            "line": 52,
            "value": "#    And I click the save button in pulse personalised icons"
          },
          {
            "line": 53,
            "value": "#    And I click the Ok button in pulse personlised screen"
          },
          {
            "line": 54,
            "value": "#    And I click the Back icon in pulse Marketing Consent"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 44300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 56,
        "name": "Verify my setting screen in Account tab",
        "description": "",
        "id": "verify-mysettings-functionality-in-account-screen;verify-my-setting-screen-in-account-tab",
        "after": [
          {
            "result": {
              "duration": 13878000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 45456100,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 62c361d3-2461-455a-8be9-404002919b8f\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.ImageView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.accountButton(PulseRegistrationScreen.java:738)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.accountButton(RegistrationSteps.java:143)\r\n\tat ✽.And I click the Account icon in Home screen(features/th/PulseMySettings.feature:57)\r\n",
              "status": "failed"
            },
            "line": 57,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "I click on \"${icon.mySettings}\" link in Account screen",
            "match": {
              "arguments": [
                {
                  "val": "${icon.mySettings}",
                  "offset": 12
                }
              ],
              "location": "ManageProfileSteps.clickOnAccountOption(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "User verify following list texts are displayed in My Setting screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnListMySettingScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Country"
                ],
                "line": 61
              },
              {
                "cells": [
                  "Thailand"
                ],
                "line": 62
              },
              {
                "cells": [
                  "Language"
                ],
                "line": 63
              },
              {
                "cells": [
                  "English (UK)"
                ],
                "line": 64
              },
              {
                "cells": [
                  "Change Password"
                ],
                "line": 65
              },
              {
                "cells": [
                  "Enable Face Auth"
                ],
                "line": 66
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify MySettings functionality in Account screen",
    "description": "",
    "id": "verify-mysettings-functionality-in-account-screen",
    "keyword": "Feature",
    "uri": "features/th/PulseMySettings.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MySettingsth"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "comments": [
          {
            "line": 5,
            "value": "# fitness tab is not available in ios device"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 41800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 8,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-exercise-buddy-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 36000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 8500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9026432000,
              "status": "passed"
            },
            "line": 9,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 114800,
              "status": "passed"
            },
            "line": 10,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2012260100,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13188010000,
              "status": "passed"
            },
            "line": 12,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22933829400,
              "status": "passed"
            },
            "line": 13,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2011244600,
              "status": "passed"
            },
            "line": 14,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10784641200,
              "status": "passed"
            },
            "line": 15,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4816014500,
              "status": "passed"
            },
            "line": 16,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9959134000,
              "status": "passed"
            },
            "line": 17,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 18
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 19
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 241448400,
              "status": "passed"
            },
            "line": 20,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10013926700,
              "status": "passed"
            },
            "line": 21,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11137059700,
              "status": "passed"
            },
            "line": 22,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13847835500,
              "status": "passed"
            },
            "line": 23,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 26,
        "name": "Verify the user can access Exercise Buddy via Fitness",
        "description": "",
        "id": "verify-exercise-buddy-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;verify-the-user-can-access-exercise-buddy-via-fitness",
        "after": [
          {
            "result": {
              "duration": 12042300,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 11834761000,
              "status": "passed"
            },
            "line": 27,
            "name": "User clicks on Fitness tab",
            "match": {
              "location": "OptionsInFooterSteps.clickOnFitnessTab()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5390829200,
              "status": "passed"
            },
            "line": 28,
            "name": "User clicks on Exercise Buddy button on Fitness screen",
            "match": {
              "location": "ExerciseBuddySteps.clickOnExerciseBuddy()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 294600,
              "status": "passed"
            },
            "line": 29,
            "name": "User verifies text on Exercise Buddy screen",
            "match": {
              "location": "ExerciseBuddySteps.verifyStaticTextOnExerciseBuddy(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${exeBuddy.title}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${exeBuddy.description}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${beginner.title}"
                ],
                "line": 32
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 43491000,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: d00a4c23-2776-4cb3-a55c-1a0591a681f6\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"Intermediate\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.ExerciseBuddyScreen.clickOnTab(ExerciseBuddyScreen.java:59)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ExerciseBuddySteps.clickButton(ExerciseBuddySteps.java:37)\r\n\tat ✽.And User clicks on \"${exeBuddy.intermediate}\" button on Exercise Buddy(features/th/fitness/ExerciseBuddy.feature:33)\r\n",
              "status": "failed"
            },
            "line": 33,
            "name": "User clicks on \"${exeBuddy.intermediate}\" button on Exercise Buddy",
            "match": {
              "arguments": [
                {
                  "val": "${exeBuddy.intermediate}",
                  "offset": 16
                }
              ],
              "location": "ExerciseBuddySteps.clickButton(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 34,
            "value": "#    No visible change to be validated in each difficulty level"
          },
          {
            "line": 35,
            "value": "#    And User clicks on \"${exeBuddy.beginner}\" button on Exercise Buddy"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 41000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 27200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 38,
        "name": "Verify the Take Challenge via Squats",
        "description": "",
        "id": "verify-exercise-buddy-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;verify-the-take-challenge-via-squats",
        "after": [
          {
            "result": {
              "duration": 9992600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 22884800,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: d00a4c23-2776-4cb3-a55c-1a0591a681f6\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\"Squats\"]/preceding::android.widget.ImageView[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.ExerciseBuddyScreen.clickOnTakeChallenge(ExerciseBuddyScreen.java:64)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ExerciseBuddySteps.clickTakeChallenge(ExerciseBuddySteps.java:42)\r\n\tat ✽.When User clicks on Take Challenge button on \"${beginner.squat}\"(features/th/fitness/ExerciseBuddy.feature:39)\r\n",
              "status": "failed"
            },
            "line": 39,
            "name": "User clicks on Take Challenge button on \"${beginner.squat}\"",
            "match": {
              "arguments": [
                {
                  "val": "${beginner.squat}",
                  "offset": 41
                }
              ],
              "location": "ExerciseBuddySteps.clickTakeChallenge(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 40,
            "name": "User verifies text on Exercise Buddy screen",
            "match": {
              "location": "ExerciseBuddySteps.verifyStaticTextOnExerciseBuddy(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${exeBuddy.takeChallenge.title}"
                ],
                "line": 41
              },
              {
                "cells": [
                  "${exeBuddy.takeChallenge.description}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${exeBuddy.takeChallenge.subTitle}"
                ],
                "line": 43
              },
              {
                "cells": [
                  "${exeBuddy.takeChallenge.noPartner}"
                ],
                "line": 44
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "User searches for \"Test\" and adds \"Test Test\" as a partner",
            "match": {
              "arguments": [
                {
                  "val": "Test",
                  "offset": 19
                },
                {
                  "val": "Test Test",
                  "offset": 35
                }
              ],
              "location": "ExerciseBuddySteps.enterAndSelectBabylonSymptoms(String,String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 33300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 48,
        "name": "Verify the Start via Squats",
        "description": "",
        "id": "verify-exercise-buddy-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;verify-the-start-via-squats",
        "after": [
          {
            "result": {
              "duration": 10987500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 22981500,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: d00a4c23-2776-4cb3-a55c-1a0591a681f6\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\"Squats\"]/following::android.widget.TextView[2]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.ExerciseBuddyScreen.clickOnStart(ExerciseBuddyScreen.java:87)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ExerciseBuddySteps.clickStart(ExerciseBuddySteps.java:59)\r\n\tat ✽.When User clicks on Start button on \"${beginner.squat}\"(features/th/fitness/ExerciseBuddy.feature:49)\r\n",
              "status": "failed"
            },
            "line": 49,
            "name": "User clicks on Start button on \"${beginner.squat}\"",
            "match": {
              "arguments": [
                {
                  "val": "${beginner.squat}",
                  "offset": 32
                }
              ],
              "location": "ExerciseBuddySteps.clickStart(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "User clicks on Stop button on \"Squats\"",
            "match": {
              "arguments": [
                {
                  "val": "Squats",
                  "offset": 31
                }
              ],
              "location": "ExerciseBuddySteps.clickStop(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "User verifies text on Exercise Buddy screen",
            "match": {
              "location": "ExerciseBuddySteps.verifyStaticTextOnExerciseBuddy(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${squat.results.title}"
                ],
                "line": 52
              },
              {
                "cells": [
                  "${squat.results.description}"
                ],
                "line": 53
              },
              {
                "cells": [
                  "${squat.score.stat}"
                ],
                "line": 54
              },
              {
                "cells": [
                  "${squat.score.stands}"
                ],
                "line": 55
              },
              {
                "cells": [
                  "${squat.score.precision}"
                ],
                "line": 56
              },
              {
                "cells": [
                  "${squat.startAgain}"
                ],
                "line": 57
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "User clicks on Start Now button on \"Squats Report\"",
            "match": {
              "arguments": [
                {
                  "val": "Squats Report",
                  "offset": 36
                }
              ],
              "location": "ExerciseBuddySteps.clickStartNow(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "User clicks on Stop button on \"Squats\"",
            "match": {
              "arguments": [
                {
                  "val": "Squats",
                  "offset": 31
                }
              ],
              "location": "ExerciseBuddySteps.clickStop(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "User verifies text on Exercise Buddy screen",
            "match": {
              "location": "ExerciseBuddySteps.verifyStaticTextOnExerciseBuddy(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${squat.results.title}"
                ],
                "line": 61
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "User clicks on Done button on \"Squats Report\"",
            "match": {
              "arguments": [
                {
                  "val": "Squats Report",
                  "offset": 31
                }
              ],
              "location": "ExerciseBuddySteps.clickDone(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 63,
            "name": "User verifies text on Exercise Buddy screen",
            "match": {
              "location": "ExerciseBuddySteps.verifyStaticTextOnExerciseBuddy(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${exeBuddy.title}"
                ],
                "line": 64
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 27200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 67,
        "name": "Verify the Preview via Squats",
        "description": "",
        "id": "verify-exercise-buddy-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;verify-the-preview-via-squats",
        "after": [
          {
            "result": {
              "duration": 10058600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 21085200,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: d00a4c23-2776-4cb3-a55c-1a0591a681f6\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\"Squats\"]/following::android.widget.TextView[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.ExerciseBuddyScreen.clickOnPreview(ExerciseBuddyScreen.java:81)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.ExerciseBuddySteps.clickPreview(ExerciseBuddySteps.java:54)\r\n\tat ✽.When User clicks on Preview button on \"${beginner.squat}\"(features/th/fitness/ExerciseBuddy.feature:68)\r\n",
              "status": "failed"
            },
            "line": 68,
            "name": "User clicks on Preview button on \"${beginner.squat}\"",
            "match": {
              "arguments": [
                {
                  "val": "${beginner.squat}",
                  "offset": 34
                }
              ],
              "location": "ExerciseBuddySteps.clickPreview(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "User verifies text on Exercise Buddy screen",
            "match": {
              "location": "ExerciseBuddySteps.verifyStaticTextOnExerciseBuddy(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${beginner.squat}"
                ],
                "line": 70
              },
              {
                "cells": [
                  "${squat.preview.titleDescription}"
                ],
                "line": 71
              },
              {
                "cells": [
                  "${squat.preview.about}"
                ],
                "line": 72
              },
              {
                "cells": [
                  "${squat.preview.description}"
                ],
                "line": 73
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 74,
                "value": "#  PCAONEPULSE-22731"
              },
              {
                "line": 75,
                "value": "#      |${squat.preview.withFriend}|"
              }
            ],
            "line": 76,
            "name": "User clicks on Take Challenge on \"Squats Preview\"",
            "match": {
              "arguments": [
                {
                  "val": "Squats Preview",
                  "offset": 34
                }
              ],
              "location": "ExerciseBuddySteps.clickChallengeonPreview(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 77,
            "name": "User verifies text on Exercise Buddy screen",
            "match": {
              "location": "ExerciseBuddySteps.verifyStaticTextOnExerciseBuddy(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${exeBuddy.title}"
                ],
                "line": 78
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 79,
            "name": "User clicks on Back button",
            "match": {
              "location": "ExerciseBuddySteps.clickBackButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 80,
            "name": "User clicks on Start Now button on \"Squats Preview\"",
            "match": {
              "arguments": [
                {
                  "val": "Squats Preview",
                  "offset": 36
                }
              ],
              "location": "ExerciseBuddySteps.clickStartNow(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "User clicks on Stop button on \"Squats\"",
            "match": {
              "arguments": [
                {
                  "val": "Squats",
                  "offset": 31
                }
              ],
              "location": "ExerciseBuddySteps.clickStop(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 82,
            "name": "User verifies text on Exercise Buddy screen",
            "match": {
              "location": "ExerciseBuddySteps.verifyStaticTextOnExerciseBuddy(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${squat.results.title}"
                ],
                "line": 83
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 84,
            "name": "User clicks on Done button on \"Squats Report\"",
            "match": {
              "arguments": [
                {
                  "val": "Squats Report",
                  "offset": 31
                }
              ],
              "location": "ExerciseBuddySteps.clickDone(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 85,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 86,
            "name": "User verifies text on Exercise Buddy screen",
            "match": {
              "location": "ExerciseBuddySteps.verifyStaticTextOnExerciseBuddy(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${squat.preview.workout}"
                ],
                "line": 87
              },
              {
                "cells": [
                  "${squat.preview.instructions}"
                ],
                "line": 88
              },
              {
                "cells": [
                  "${squat.preview.instruction1}"
                ],
                "line": 89
              },
              {
                "cells": [
                  "${squat.preview.instruction2}"
                ],
                "line": 90
              },
              {
                "cells": [
                  "${squat.preview.instruction3}"
                ],
                "line": 91
              },
              {
                "cells": [
                  "${squat.preview.instruction4}"
                ],
                "line": 92
              },
              {
                "cells": [
                  "${squat.preview.instruction5}"
                ],
                "line": 93
              },
              {
                "cells": [
                  "${squat.preview.instruction6}"
                ],
                "line": 94
              },
              {
                "cells": [
                  "${squat.preview.instruction7}"
                ],
                "line": 95
              },
              {
                "cells": [
                  "${squat.preview.instruction8}"
                ],
                "line": 96
              },
              {
                "cells": [
                  "${squat.preview.instruction9}"
                ],
                "line": 97
              },
              {
                "cells": [
                  "${squat.preview.instruction10"
                ],
                "line": 98
              },
              {
                "cells": [
                  "${squat.preview.warmup}"
                ],
                "line": 99
              },
              {
                "cells": [
                  "${squat.preview.warmupDescription}"
                ],
                "line": 100
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify Exercise Buddy functionality via Fitness tab on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-exercise-buddy-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/th/fitness/ExerciseBuddy.feature",
    "tags": [
      {
        "line": 1,
        "name": "@exerciseBuddy_th"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 30800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 34300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7929458200,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 145800,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2006885700,
              "status": "passed"
            },
            "line": 7,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14981978900,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22333531100,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2024032700,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10553245200,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4838654200,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9902387400,
              "status": "passed"
            },
            "line": 13,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 14
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 261927900,
              "status": "passed"
            },
            "line": 16,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10015460600,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11023672900,
              "status": "passed"
            },
            "line": 18,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14248972800,
              "status": "passed"
            },
            "line": 19,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 45800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 34000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify the user can access My Wearables via Fitness",
        "description": "",
        "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app;verify-the-user-can-access-my-wearables-via-fitness",
        "after": [
          {
            "result": {
              "duration": 37700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13787229400,
              "status": "passed"
            },
            "line": 23,
            "name": "User clicks on Fitness tab",
            "match": {
              "location": "OptionsInFooterSteps.clickOnFitnessTab()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1620712200,
              "status": "passed"
            },
            "line": 24,
            "name": "I verify My Wearables tile on Fitness screen",
            "match": {
              "location": "OptionsInFooterSteps.verifyStaticTextOnFitnessScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${fitness.myWearables}"
                ],
                "line": 25
              },
              {
                "cells": [
                  "${fitness.myWearables.description}"
                ],
                "line": 26
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 414164900,
              "status": "passed"
            },
            "line": 27,
            "name": "I click on Connect Now button on Fitness screen",
            "match": {
              "location": "OptionsInFooterSteps.clickOnConnectNow()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 3598813400,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify following text are displayed under My Wearables screen",
            "match": {
              "location": "ManageProfileSteps.verifyStaticTextOnMyWearablesScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${wearables.title}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${wearables.subTitle}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${wearables.description}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${wearables.fitbitText}"
                ],
                "line": 32
              },
              {
                "cells": [
                  "${wearables.garminText}"
                ],
                "line": 33
              },
              {
                "cells": [
                  "${wearables.googleFit}"
                ],
                "line": 34
              }
            ],
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify My wearable functionality via fitness tab on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-my-wearable-functionality-via-fitness-tab-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/th/fitness/MyWearable.feature",
    "tags": [
      {
        "line": 1,
        "name": "@myWearables_th"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "comments": [
          {
            "line": 6,
            "value": "#  Better to proceed with a new registration"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 25500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 7,
        "name": "Verify User should be able to login using email account",
        "description": "",
        "id": "verify-food-journal--functionality-on-one-pulse-app;verify-user-should-be-able-to-login-using-email-account",
        "after": [
          {
            "result": {
              "duration": 50600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 8600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9729934700,
              "status": "passed"
            },
            "line": 8,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 105200,
              "status": "passed"
            },
            "line": 9,
            "name": "I assign \"${onepulse.login.global.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9738510800,
              "status": "passed"
            },
            "line": 10,
            "name": "I navigate to login page",
            "match": {
              "location": "LoginSteps.iNavigateToLoginPage()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1253800,
              "status": "passed"
            },
            "line": 11,
            "name": "I create connection for api service",
            "match": {
              "location": "APISteps.createConnection()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 10660675000,
              "status": "passed"
            },
            "line": 12,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 13
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 14
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 329183700,
              "status": "passed"
            },
            "line": 15,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10006575200,
              "status": "passed"
            },
            "line": 16,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 31354302500,
              "status": "passed"
            },
            "line": 17,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13980200200,
              "status": "passed"
            },
            "line": 18,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 50700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 20,
        "name": "Verify User should be able to navigate to Food page",
        "description": "",
        "id": "verify-food-journal--functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-food-page",
        "after": [
          {
            "result": {
              "duration": 78100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 493991000,
              "status": "passed"
            },
            "line": 21,
            "name": "I navigate to food screen from home page",
            "match": {
              "location": "FoodSteps.iNavigateToWealthScreen()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 4996950900,
              "status": "passed"
            },
            "line": 22,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4674668100,
              "status": "passed"
            },
            "line": 23,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5002438400,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 499346900,
              "status": "passed"
            },
            "line": 25,
            "name": "I navigate to my food journal from food",
            "match": {
              "location": "FoodSteps.iNavigateToMyFoodJournal()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 68900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 33100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 27,
        "name": "Verify User should be able to see the list of food schedule time",
        "description": "",
        "id": "verify-food-journal--functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-list-of-food-schedule-time",
        "after": [
          {
            "result": {
              "duration": 37600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 9800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3218898600,
              "status": "passed"
            },
            "line": 28,
            "name": "I verify following options in food journal",
            "match": {
              "location": "FoodSteps.iVerifyFollowingOtionsFoodJournal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${food.myfoodjournal.LogyourFood}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${food.myfoodjournal.Consumed}"
                ],
                "line": 30
              },
              {
                "cells": [
                  "${food.myfoodjournal.foodjournal}"
                ],
                "line": 31
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 32,
            "value": "#      |${food.myfoodjournal.log}                    |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 69000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 34,
        "name": "Verify User should be able to time of the meal, add to cart and scan",
        "description": "",
        "id": "verify-food-journal--functionality-on-one-pulse-app;verify-user-should-be-able-to-time-of-the-meal,-add-to-cart-and-scan",
        "after": [
          {
            "result": {
              "duration": 28000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 7200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2114188000,
              "status": "passed"
            },
            "line": 35,
            "name": "I verify following options in food journal",
            "match": {
              "location": "FoodSteps.iVerifyFollowingOtionsFoodJournal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${food.myfoodjournal.Scan}"
                ],
                "line": 36
              },
              {
                "cells": [
                  "${food.myfoodjournal.addfood}"
                ],
                "line": 37
              },
              {
                "cells": [
                  "${food.myfoodjournal.breakfast}"
                ],
                "line": 38
              },
              {
                "cells": [
                  "${food.myfoodjournal.lunch}"
                ],
                "line": 39
              },
              {
                "cells": [
                  "${food.myfoodjournal.dinner}"
                ],
                "line": 40
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 25100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 55,
        "name": "Verify User should be able to see the details after moving to \"Breakfast\"",
        "description": "",
        "id": "verify-food-journal--functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-details-after-moving-to-\"\u003croutine\u003e\";;2",
        "after": [
          {
            "result": {
              "duration": 12533000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5006571400,
              "status": "passed"
            },
            "line": 43,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 522049000,
              "status": "passed"
            },
            "line": 44,
            "name": "User clicks on add food button for breakfast index \"1\"",
            "match": {
              "arguments": [
                {
                  "val": "1",
                  "offset": 52
                }
              ],
              "location": "FoodSteps.clickAddBreakfast(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 5020163800,
              "status": "passed"
            },
            "line": 45,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 124945600,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tChange Meal text is displayed on page  expected [true] but found [false],\n\tSelected Food text is displayed on page  expected [true] but found [false],\n\tSave text is displayed on page  expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.FoodSteps.iVerifyFollowingOtionsFoodJournal(FoodSteps.java:61)\r\n\tat ✽.And I verify following options in food journal(features/th/food/MyFoodJournal.feature:46)\r\n",
              "status": "failed"
            },
            "line": 46,
            "name": "I verify following options in food journal",
            "match": {
              "location": "FoodSteps.iVerifyFollowingOtionsFoodJournal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${food.myfoodjournal.Breakfast.changemeal}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${food.myfoodjournal.Breakfast.selectfood}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${food.myfoodjournal.Breakfast.save}"
                ],
                "line": 49
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "User search for the food \"Seafood Gumbo\" index",
            "match": {
              "arguments": [
                {
                  "val": "Seafood Gumbo",
                  "offset": 26
                }
              ],
              "location": "FoodSteps.searchBreakFastSave(String)"
            },
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I validate the food selected and calories",
            "match": {
              "location": "FoodSteps.validationFoodCalories()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 52,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@foodJournalTH"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionTH"
          },
          {
            "line": 1,
            "name": "@foodTest"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 34900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 56,
        "name": "Verify User should be able to see the details after moving to \"Lunch\"",
        "description": "",
        "id": "verify-food-journal--functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-details-after-moving-to-\"\u003croutine\u003e\";;3",
        "after": [
          {
            "result": {
              "duration": 16250800,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5009632400,
              "status": "passed"
            },
            "line": 43,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 57731400,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 815ad8bf-4a20-4f0d-8a96-b197b7598d63\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.TextView[contains(@text,\"Add Food\")])[2]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.FoodScreen.clickToAddFoodBreakFast(FoodScreen.java:68)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.FoodSteps.clickAddBreakfast(FoodSteps.java:66)\r\n\tat ✽.When User clicks on add food button for breakfast index \"2\"(features/th/food/MyFoodJournal.feature:44)\r\n",
              "status": "failed"
            },
            "line": 44,
            "name": "User clicks on add food button for breakfast index \"2\"",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 52
                }
              ],
              "location": "FoodSteps.clickAddBreakfast(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "I verify following options in food journal",
            "match": {
              "location": "FoodSteps.iVerifyFollowingOtionsFoodJournal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${food.myfoodjournal.Breakfast.changemeal}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${food.myfoodjournal.Breakfast.selectfood}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${food.myfoodjournal.Breakfast.save}"
                ],
                "line": 49
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "User search for the food \"Bites\" index",
            "match": {
              "arguments": [
                {
                  "val": "Bites",
                  "offset": 26
                }
              ],
              "location": "FoodSteps.searchBreakFastSave(String)"
            },
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I validate the food selected and calories",
            "match": {
              "location": "FoodSteps.validationFoodCalories()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 52,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@foodJournalTH"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionTH"
          },
          {
            "line": 1,
            "name": "@foodTest"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 43200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 57,
        "name": "Verify User should be able to see the details after moving to \"Dinner\"",
        "description": "",
        "id": "verify-food-journal--functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-details-after-moving-to-\"\u003croutine\u003e\";;4",
        "after": [
          {
            "result": {
              "duration": 16276900,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5004280700,
              "status": "passed"
            },
            "line": 43,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 52963000,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 815ad8bf-4a20-4f0d-8a96-b197b7598d63\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.TextView[contains(@text,\"Add Food\")])[3]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.FoodScreen.clickToAddFoodBreakFast(FoodScreen.java:68)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.FoodSteps.clickAddBreakfast(FoodSteps.java:66)\r\n\tat ✽.When User clicks on add food button for breakfast index \"3\"(features/th/food/MyFoodJournal.feature:44)\r\n",
              "status": "failed"
            },
            "line": 44,
            "name": "User clicks on add food button for breakfast index \"3\"",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 52
                }
              ],
              "location": "FoodSteps.clickAddBreakfast(String)"
            },
            "matchedColumns": [
              2
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "I verify following options in food journal",
            "match": {
              "location": "FoodSteps.iVerifyFollowingOtionsFoodJournal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${food.myfoodjournal.Breakfast.changemeal}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${food.myfoodjournal.Breakfast.selectfood}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${food.myfoodjournal.Breakfast.save}"
                ],
                "line": 49
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "User search for the food \"Cake\" index",
            "match": {
              "arguments": [
                {
                  "val": "Cake",
                  "offset": 26
                }
              ],
              "location": "FoodSteps.searchBreakFastSave(String)"
            },
            "matchedColumns": [
              1
            ],
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I validate the food selected and calories",
            "match": {
              "location": "FoodSteps.validationFoodCalories()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 52,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "line": 1,
            "name": "@pulseRegression"
          },
          {
            "line": 1,
            "name": "@foodJournalTH"
          },
          {
            "line": 1,
            "name": "@OnePulseRegression"
          },
          {
            "line": 1,
            "name": "@OPUATRegressionTH"
          },
          {
            "line": 1,
            "name": "@foodTest"
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 43200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 27600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 59,
        "name": "Verify User should be able to see log after add food is done",
        "description": "",
        "id": "verify-food-journal--functionality-on-one-pulse-app;verify-user-should-be-able-to-see-log-after-add-food-is-done",
        "after": [
          {
            "result": {
              "duration": 15822600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 19844700,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 815ad8bf-4a20-4f0d-8a96-b197b7598d63\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\r\n\tat com.onepulse.app.screens.TestBasePage.scrollPageUP(TestBasePage.java:377)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.BaseSteps.scrollUp(BaseSteps.java:73)\r\n\tat ✽.And I scroll up(features/th/food/MyFoodJournal.feature:60)\r\n",
              "status": "failed"
            },
            "line": 60,
            "name": "I scroll up",
            "match": {
              "location": "BaseSteps.scrollUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 62,
            "name": "click on the \"${food.myfoodjournal.Log}\" button",
            "match": {
              "arguments": [
                {
                  "val": "${food.myfoodjournal.Log}",
                  "offset": 14
                }
              ],
              "location": "FoodSteps.clickButton(String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 63,
            "name": "I verify following options in food journal",
            "match": {
              "location": "FoodSteps.iVerifyFollowingOtionsFoodJournal(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${food.myfoodjournal.logtime.Log}"
                ],
                "line": 64
              },
              {
                "cells": [
                  "${food.myfoodjournal.logtime.save}"
                ],
                "line": 65
              },
              {
                "cells": [
                  "${food.myfoodjournal.logtime.cancel}"
                ],
                "line": 66
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 67,
            "name": "click on the cancel button in logtime in food",
            "match": {
              "location": "FoodSteps.clickoncancelButtonLogtime()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify Food Journal  functionality on one pulse App",
    "description": "",
    "id": "verify-food-journal--functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/th/food/MyFoodJournal.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      },
      {
        "line": 1,
        "name": "@foodJournalTH"
      },
      {
        "line": 1,
        "name": "@foodTest"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "comments": [
          {
            "line": 5,
            "value": "# This feature will fail due to the defect PCAONEPULSE-21990"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 42700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 6,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 33100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 7100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8392115900,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 107800,
              "status": "passed"
            },
            "line": 8,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2017857700,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13772718600,
              "status": "passed"
            },
            "line": 10,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23127049300,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2009816300,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10821650300,
              "status": "passed"
            },
            "line": 13,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4897223000,
              "status": "passed"
            },
            "line": 14,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9902758100,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 269372400,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10004624100,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10818442500,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13426801100,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 36100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 67700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 24,
        "name": "User should be able to locate Hospitals using PruShoppe location",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-should-be-able-to-locate-hospitals-using-prushoppe-location",
        "after": [
          {
            "result": {
              "duration": 2209880400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 13479955600,
              "status": "passed"
            },
            "line": 25,
            "name": "I clicks on Health button",
            "match": {
              "location": "MyDocUiSteps.iClicksOnHealthButton()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 41403991800,
              "status": "passed"
            },
            "comments": [
              {
                "line": 26,
                "value": "#  This step may fail due to Location locator - the xpath has updated according to MyEnv in PCAONEPULSE-19412, which is passed during execution"
              }
            ],
            "line": 27,
            "name": "I clicks on Location button",
            "match": {
              "location": "LocationSteps.iClicksOnLocationButton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 20139378400,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 50cfc597-464d-4b71-97f1-f1c3d2744919\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Search here\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.LocationScreen.clickSearchTextFieldInMaps(LocationScreen.java:68)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnSearchHereTextField(LocationSteps.java:35)\r\n\tat ✽.When I clicks on Search here text field(features/th/health/Hospital_Clinic_Locator.feature:28)\r\n",
              "status": "failed"
            },
            "line": 28,
            "name": "I clicks on Search here text field",
            "match": {
              "location": "LocationSteps.iClicksOnSearchHereTextField()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 29,
            "name": "I clicks on \"Hospitals\" under Pulse Search",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnUnderPulseSearch(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 30,
            "name": "User can see the list of \"Hospitals\" near by to user\u0027s current location",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 26
                }
              ],
              "location": "LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 31,
            "name": "User can see that Call, Navigate and See Details links are displayed under \"Hospitals\" search results",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 76
                }
              ],
              "location": "LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 33,
        "name": "User can see details of listed hospitals in detail",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-see-details-of-listed-hospitals-in-detail",
        "after": [
          {
            "result": {
              "duration": 2579199300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8490310200,
              "status": "passed"
            },
            "line": 34,
            "name": "I clicks on See Details button on First result",
            "match": {
              "location": "LocationSteps.iClicksOnSeeDetailsButtonOnFirstResult()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 25382376300,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.screens.LocationScreen.verifyHospitalInformationScreen(LocationScreen.java:151)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(LocationSteps.java:81)\r\n\tat ✽.Then I can see the \"Hospital\" Information screen with Navigate and Call Now buttons(features/th/health/Hospital_Clinic_Locator.feature:35)\r\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 35,
            "name": "I can see the \"Hospital\" Information screen with Navigate and Call Now buttons",
            "match": {
              "arguments": [
                {
                  "val": "Hospital",
                  "offset": 15
                }
              ],
              "location": "LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 37,
        "name": "User can see the details in speciality tab",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-see-the-details-in-speciality-tab",
        "after": [
          {
            "result": {
              "duration": 2165192900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8316622100,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 50cfc597-464d-4b71-97f1-f1c3d2744919\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"Speciality\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.LocationScreen.clickOnHospitalTab(LocationScreen.java:140)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnTab(LocationSteps.java:61)\r\n\tat ✽.When I clicks on \"Speciality\" tab(features/th/health/Hospital_Clinic_Locator.feature:38)\r\n",
              "status": "failed"
            },
            "line": 38,
            "name": "I clicks on \"Speciality\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Speciality",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 39,
            "name": "I verify the Speciality screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheSpecialityScreenIsDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 41,
        "name": "User can see the details in doctor\u0027s tab",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-see-the-details-in-doctor\u0027s-tab",
        "after": [
          {
            "result": {
              "duration": 2151427400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7865043500,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 50cfc597-464d-4b71-97f1-f1c3d2744919\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"Doctors\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.LocationScreen.clickOnHospitalTab(LocationScreen.java:140)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnTab(LocationSteps.java:61)\r\n\tat ✽.When I clicks on \"Doctors\" tab(features/th/health/Hospital_Clinic_Locator.feature:42)\r\n",
              "status": "failed"
            },
            "line": 42,
            "name": "I clicks on \"Doctors\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Doctors",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "iVBORw0KGgoAAAANSUhEUgAAALkAAAGQCAYAAADyecEWAACAAElEQVR4Xuy9d1hVWbbubVcwB0CQJEEUEERyFCRIEAFRzDnnHMqy1LLMqcw55yyCiuQcJSfBhKksLSt0V1fnPn3PPf3ed8y1sYL9fff+c8733TrW84xnrr3WYu3t3r/5zneMOdeqFo98fPEu3sWvOVr8cse7eBe/tngH+bv41cc7yN/Frz7eQf4ufvXxDvJ38auPd5C/i199vIP8Xfzq4x3k7+JXH78ayB+H9MOrBQvxcu48NAUGvXX8PzOeDR2G70+fwQ/Xr+PbrdvwyNfvrXPexf9L8PtqCgxEk1+ft4/pQr7jpzExb+3/P4n/esjlHyIQMJ70j9ReNx+Tf2xAXxXN+x8HBeNxaNjb1/lJfDljJv7x/Av88+9/x3/85S/4x5Mn+GLc+LfO+27ffny7c9cbCJv6BuL7M2fwetWnPztPvuxvtm7Fd3v2/ixeLV781jVfzl+g3ven/32zZQse9wt969z/VsHv8Ou16/Dt59vxeuXKt4/7aN//bw8exB9v38bvL17EHxIT8cPVq3gWO+hn5/3uyFHtd33+/K3f6v8k/kshfzFhovqgX7D9461b+GNqKv5SXPIGupdz5uLvdxvU/heTp+DLmbPwt5oa/KW0FF+vX//W9STki/r316/xfPQYpeIvJk3Gy9lzCPrTn3cgxg/x8Xi1aDF+uBaPZ0OGqi9XOsPvL1/+2XlPIiKA//gP/P3+ffzz3/8df29owN/u3sW/PXr08/fn9f9WV49/a2rC36pr8I9nzxTkfy0vZ+c5+9ZnbY7nI0aqz/3L/b+a4Pfy1Sef8HdM4/c7Dn9MTlbf+y/Pk+//5bz5P9v3JHIAv9O6n30/Srz+/Gf8xx//iD8XFLx1nf9d/NdCTgD/kJCAFxMn4UlYuIL7r5WVeD5yJP5wKwlff7YG3587h9crVqov6s85ORyiBqKpjz/+Vlv71vUkvpw+QwH5NCpawfOn9HT8KTtbwfZ8+IifnSuQ/+7oMbz+ZAVV4wa+XrMG32zegh/egrw//pSWpjqDdLDfE9jfHTpEeCt+dp6o9Z/z89V7vV65So0Avz9/Hv/xpz+pDvLLzyrxYuo04J//xB9TUt469muJ31+6pITqh8tX1Gtp/3DjJn534sTPzns+cpRS76+WfYw/Z+dQ1Q/R7m3FNxs3/ew8gVx+NxG8/99DLvH9qVMKcrVNeL7bt0/BLsB8MXq0Gt6+P3kK3+3ajb+Wlb3p0X+vr3/rWhKixD+F/M1/3PfLYU8gF7hlSPwD/fMPV67gtwcO/EvI/1ZdrYZS+XFkKP3+9Gn8vbHxZ+dJJ2r+T4Zm6ZB/rahUr0WNfvlZJZ7yM8nIIJ3rl8d+LfH92bP/GvLDh98696ulS1Wnb/5PfqNfnvPPv/0N3+7YqUaE/6sg/93Jk0rVBUQBXKyKqKEkj18t/0SB/vsLF/D16tV4MWUq/pL///CPo3r+nVZC/ubb7TvefFnKBv3i3D+lZ+CvVOYmdipRkWeDBuFPWVkK9p+eJ6MM/uf/fHOt5v/+fu/eW9eUffKf2LB//tu/vTlXPP0vz/1vE/x+Xy1cqEZisSN/ysjEl7NmvX2eLn57+Ij6zkSpm/wD3jouSi6/sfwm/1dA/oqJmijeb/cfUEou8WzoUHyzabNSUOn1P1y5qrYfB4dw+L+ghjT5m19eqznk2F9K7uCf/+N/4J//+Ae/3Fw8CY9467xng+OUz29+LaOE+Hfxgb8894vxE9Sxn8azQYPfOk+8vQAu//2lqIhRjD+mpWtJ9S/O/W8VAvriJSpRlFzpreO/OFdGy3/1O0j8raoK/3j6VIUUCn55/H8X/+WQ/2eGlBGlGvPL/f/ZIeojP6io97/qCO/i/9v4VUH+Lt7Fv4p3kL+LX328g/xd/OrjHeTv4lcf7yB/F7/6eAf5u/jVxzvI38WvPlqkhYQhNSQUtwNDcNO/L+K9fHHN0xuJXt5I9vJkeKlI8fZm+CDNxwepvn5I6dNHRbyLMy71dsJlVzf1dxLxXj6I9/ZV15K2ef+NPn3fRKJfX9wMCEJKSDhuB/VDUmA/pPaLQEq/cGT1j0bOgBhkhA9gRKrXWf2juG8g8qIHqe30sEhd9FfRfF5edKxqsyOj1f7k4FAVKfx3StwKCEYa30eOae8boj6H/PuTAoOR1DcEyUGhSOd3khYUgqyIKHXtK+6euODUG1fc3NXfyXtnRmifLz2UnzksDLkR4cjhZ0sOCsYt/wBc5/d1hd/LhV69GI644twbmX7eSPP1QpK3O9L8vVE5cACeThr3kxiLJxPHMJrb5u1fxhg8niAxWovxWvtkQvPfvB0/PU/bHvUmmsaNZIx4Kx6NHY5HY4bh4ZihKh79pH00dpiKJjlHt/1wzJAfY3TcW68fjBqM+yNjGYNUPBili9GDteNs74+SY7Fvjt0fMRD3VMSgcXgM7kn8ZJ+2PxqNw6LQMDRKa3+y3SJqzBSEDx8P58Bw2HkFwNrZAz17OaOvcy/0d3HAAHdnRHm4YKCXOwb7eWFYXz8MCe6LGIa7gw0M9NtDr0sXGPewR1dHZ1j1dmd4oJurD1tPtt6w6OUGO+9AuIUOhEu/aBUBcWPRd+h4hIyYjPCxMzBk1lKMWrASk5evw7iln2HGp1sx+ZMNGLd4NWZ+ugVTV2zEhI/WYNyS1Rg5/xOMmPsxxi76FJM/XqdiGo9P+WQ9t9dj4rK1GDR9EaInz0PEuJkIGz0dwcMn8b0mqff0HzQGfQaNhnfUMH6OMar1iBgM/9hRiBw9GTHjpiBy1EQMnT4fUeNnwIqfv71RF1g49IZn+EAMnf0RJn28FhOWrELclDkYNGUGBoyfishho+Du1wc2zq7o4e6Dzpbd0MnUDG319PFByw/QxbAjZkT6YESQCwJcLBEeYI/cxCN4/aAYXz0owuuHxdwuwqv7Ber1V/eL8PJevvb6fqE6pvY/4PZD7bxXPP6yMU/Fl425qm3eJ69fNGTzGtxuyMEXdZmMDLyoz8IX9Zl4XpvBSMfT6mQ8qbyFprIEPCq7jsfliXhWdQtPK2+iqTQej0qvqXhYcgUPiy/hftEFNBacU+2D4ovcf4ntBdwvPIeGvJNoyD/F46dxN/cE47ja11gg+07x2EnuO6aL4yrqsw+jLusgajP3ozptD6pSdqIqdRcqbu9AZQrb5B3c3o6ym1tQmrgZdxI2qu3y25+rqEjerto7PFaSuAnFPF54dQ0KLq9G/uXP0CJ8yCh4BEegl08AHF3c4O3shH4ujoS7N2I8BW5XDPZ2wyAfdwwi5DG+nghzd0RvG1P+aHowtLCCqV0vmBMAgdva2Qs9PPxh4+YHB78Qdp4I9PQNhr1PEHwGDEXIsAkIImjho6cidup8DCaMowjteMI7Zfl6zFi5GdNXbiKwGwj3Vsz5bJtu/yZMIrzTV23GjFVb3sAtHWA2z2mGezjhjyHcsdMWInzMdESOn6lagdw3ejg8+8fBK3IofKIF7Dh48LVAHzpyEuImTMWAMZMRO2kmgoeOhRn/XR27mMKylysCYkdiJK89esEK9bkHTp6NARNmwXtAnOrYBhbW6GRiAj2DjmjbqSNadeiAD9u2wYdt2qBl27Zs28KkiwHGhbgj1s8Joa4W8CfomfEH8XVTmRYP7xDeO/j6kS7U62K2JXxdorW6jqCAJ/jSCRTkbL9syMUXd3PwtDYTj6vT8bAiDfdKk3G3JAmVeQkoSb+MvOTzSE04hYRLR3Dx9D6cOLwdB/dswJ7ta7Bz66cqdm/7FPt3rMHxfetx4egmpFzdjzvpp1FfcOkN8A8I/IOSywrwR6WE/85lBf29wvOMcyru5p5EfY4Gs8DdSPh/BPsIwT6ijtfnHFVRR9hrMw+gJmMfYz+q0veiitAL+Ar+tN2oTN6p7ZNj0hFSdqhQkBP8O4S89NYWFF/fgKL4dSi8tgYt+nm5IcTDGaFU636EuZ+XCyI8HBHuakclt0estwuiPXnc1REBvbqjt3UXmBh2QCcDfXSx7q4AN7PvDWsXb6q2L1sfQh2C3n37w5cA+MUQpvBYOPqHwiNsIF+PoOrNJCTzMHLecqXOswjqnDWfY7YEgZ27Zjvmr9+JWau3YuGm3ZjBdhrhF7WW86dSsWcQdvmbmTw2ZfkGjFm4Sqn78DkfKQjDRk0hqOMJ9WAVHhJUa1cZTUKi4R4+CAGDRiFsxASExA5jOx4Dxk6FV8RAGFraoJOxGbpzFOpLxZfrjlm0kgq+FHFT5yJizDS4h0ajS7ceVHgjtDPQQxuC3bJdW3zw4Qd47/338Jv3GNK+/wHe/7Al3m/5ITp1aoswF2v0c+0Bf3sTRHnb4OTOFVTmUgX3VypK+bpEvX4t2w+17Vf3S6jKhXhSl4tHVVl4WJ2L+rIs5GcmIuHqGZw7cwzHjx/B3r17sGY9O/9cCsiI0ehH29Y3lL8F7aCbjz96uXqgh2MvWNl0R1dLClRXc5iYm6GLqTGMTIxhyFHZyJi/sZkJulp0hZW1FWxse8DewQG+fp6YOXUUDu9cibKM01R9ncrfuaKUvBnwxoKzb1ptm23+aU3NCXtDnii8wH2MUAvYB3WgE/wcvs46pIUCfr+CvjqdkKfuVoBXUukrqe5lt7aihKqtgb0VpQK5DvSia2sV6MXX16FFCFU7iBHi5oRAN0f0cbCANSE202uDbkYd4GJpCI/uJrA3N4Bp547o2LEdOhp2QRcbOwW4JdXb1tMf3d37EOwIWpIYDvsjVQhEflTMvoNHwz0sBp6EPG76QqWIEtOp1qLaAu9cArt0yz4s334I89btIPhbsWjjHgX61E82EvJNmL9uJ+YR/rlrt2PBxt1YwvOlM4i6Dp6xmPBNV6OEqLVz8ABGFFwY7nxfp8D+6B00gCo+BP7RQxAcNxJhQ0Ygevw0hAwdB3tatQ5UbQNz/qhuPuhLGzNo2iJ2nhUYNmsJBk6Zi37DJ8DJP5iduxvPNUQ7fT207kTFbtMa7xFuBfV7v1HRQtdKvPf++3jvgw/Qtl0rRHjaw9vBGm6WRujXuytmjwxFNVX2eX2+gvglYRboH1TloiQvHTkZtxEffxX7Dx3Fmo3bsGDZSkyZsxhDx01HKAXEOzAMTh4+sKPFtO7RA+YE08SM9tG4M7oYG6BLF30YSXDbiCOJkVFzq6dCjpuadEE3awuEB3tj2Zwx2L1+AY5tX4ZTu1fg8JYl2LRsMqaPGYCIQDdYWfDaJkZwJS+L5oxF6tU9OttCG0Pr8qBEa1XoFF0D/rRS82Yro17rLI3ALipel3VYawV22pdqUXMB+4112alCqTchL0/6nLZlK2EXuGljbmxWgAvcJYkbddZlA1oEu/RCICOYFsS1Wxd0aNsSv/lNCxXv8Qdq2+pDGHVqB0NGWypVJxNzdO3pAisnKoJHH/T0CYRjH6pEvxh4R8Yp5QsiNAK5QCERNGSsUlX/gSMUMBPpuedRscWCTKEHn792B+YRXFFmgV4UXaAXwOX19FWblG1ZuGG3UnABfM7azzF64UpEjCXYYoGGjFN2xJ2jhhuh7h1EqAMj4Ur/7x4WSxUfBF+qdL/YOESOHI+B46ej37Bx6MYcROA2sqZa+fRFMK8lFip22nzETm5W7ShY93ZhBzCDHlWuk5Eh2nfWow1pQ4Wmcn+gQSyqram3LqjmCnb1+n2YmRpgRLg37C1M0MusM3xsjBHpZo2ty6ejrvA2HlVmozAjHlcuHMHObRsQyH+LR58Qqq8XrO0cYWJhSbUVpTUknAKxPmE2gIkJBci0M2HlNqE17qLHVkK29X88j2FmaoiuZkawYkewNjOGNRW8W9eusOxqBkc7G0RHRmLFx0uRnnACTRX05VVJ9Os36Nevo7HwEpLObMGSqYPR296Sn8EA9j17YO70UchJ3E+Y6cuLmsHWKXjBGQW2wFyXfVSpeEP+Ca3NE39+XMFdK578TRzguaLmB5RNqaE1qaZVUWCLN7+1DWVJ2zTIVWxDaZK2T6xKM/BvIO/r2htBtCs9uxqg5YfvE+7foOUH76Fz+9aw6NwBFlTz9m1boSW9pUFXa8LtBhtaEzvPPspvuwZHKoX2GTBEqbYnfxjXkCh40R6IkksyF0DwQ0dORB9CPohWYvT85RhD9R3FVtR85irNh4u/XrhJU+9FBHnBhl0qROEF8mboxXOHDJ+IfkxaAwm3P68vCi0dzZmfxykgHL0YMqrIZ/GNjEVfDtsxVO3+o6egd0Ao/y1W0DPlcOzkrqxL0NAJGDhhJnOG8Rg8hddnp+zpHQBjqrYCu4sRW0PoGelDv3MnDuv6hKszDLjdsnVLpeQCugAvUCvL8iakE7wPCxM99HW1hxUB7UHgept3RkAPEwzydcCt8/xhi1IQGRUOF6qzO+1FRHQMhsRFEV4jGBgawJDvbcQwJagWXbvAppsZbHtYwJkjQ6i/MyYN749lc8dj7cezseXTBdi6eiE2r5yL9Z/MwqeLJiKsjxMcbMxhZ2mGHl1NYUuwbS1MYW/dFb1sLeHSsxvcHGzg4mCHoJAIrF+7CtW5lwn5TTxmPK0Q2BOo0peQc20XZo7uzw5ipGB3oRvYtnY+anJOa4qui+ak9IHy683ga0quefRjKvGUqBWwRcV1iWiNLhEV/12TsVfz4cquiLJryWa5gn2bBr8CfquyLiU6yIuui5L7eMLT1hwd2rVEm1YfwFSvLayNOsJYrx1ai0pRjT5g0tTZoptKwHq4ecPRLwhuIQNoTwhSSCQ8CJPA7T9wOPyihiKQ9kQsQIAAzggnWP3HTkPYyMkqwRvLRHMak8lR8z7GOHrdyZJQ0rJMXSHJ5hbM+HSz8uai2pM/XsvzltNrL0P/cTPQj9fwHzwGAQxvJrIeEbFwDopUn6VXQBhHlVA40TZ5hUbCP2oQwgcPw8CJMxDM0UQqHh2NqdpW3dUo5M2O6c2OGcHPJ5+3HwH37h8LCwcnGJiZEmxDqnZn6BNKfQ7tArcRFdLW1gIDI/2xZfV8XDy2A+tWLYJ/H0/mKZ2U99aA18BWQciluuLR0wK2lqYUDn1YMGnvQThcLYwQaGeGFbPGoCo/CZ4eTuho1AWuHInCRRgCfeHFUXZwVAhmThyKVYun4eC2lbh5bh9KmUjeK03Fk+psJpxMPBsL6d2lUsNg+4qJqSSnr+4V4MXdbGRf2YGZI0MQ6ueMMYPCsGDyMGz6ZCbO7V+DjCv7UHz7OHKuH8CJnZ9g8vBIBAUFY/GSJSjPuqCqLwp2qcCUxquqS2PBBZzasRQB7vYwZac3Z8cZNqQ/ki/tUGp+v+i8Ttk1uH/cPqNaTeGZiOZpUZ97VBeSkB5+E3Wi6On7fpKACuhastlsWUpvbGGIgm9649PFssjrFkEevQl0G+jRL1pSufWp4B+KGlHRW4iqt2uPTmYWMO/ZG7YefnDpG6bKjb0JlAt/CFFyb1qBAKq0J1uBXODxixmOoLixjDEIHTGJieZcxFIhYybNxoRFqzCecI9d8AmmEvBJH32GRVRsAXs0PfAo7o+buRhx4rPHzkDY6KkIJIQ+tCOSuDYrtySQotTiv8V3C/A+4VEIihqIUMIdEjcCXuEDYWrrQEtiAktHF/TyD+PfxqlOIhYnbNRkKn4UuvV2g4GpCTpQMTsaCtiGBFtfVUsMmIsYc8h3duqOSaOjcXDHamQknkRF7g08rMnHq0fVeFxfjKT4cxg9ahBMzY3xYetWeJ9W770PJN6HoX47eDhYwYxgS5gb6sOabU/aDFeq4ZioYJRmJSAsxBet2rVGe/2OcPDyw3Dau4UrVyIvI4FJaDm+fiRRwWS0TCWmP7ZaCOCvmawK7AK5qr6oEmSBKiM25J9D/MFlOLltIVIu70VlzmU0ltzAo/JkPKlKxdPqNDyvScODO4nYvWYewsLC8dGyZajJu6KzLRrkj8sT8ITKLm1x0iFMGByErvy3iKo7OfXEjg0LUc/3ui8JKS3L3Tyt0qJKjG9syhFdYnlASzqzj6gkVCm5UnMqe4YALnZFU/TmbfHqqnSoKx+Kiouii4rfuSHVlY0ouLoWeZdXo4WDFYdiqrgxFbwl1aYFvXiLFi2Un2zZvgP0zCxVKc3Ow5dqGYpe4hHpwV2CIpR6SiueVerHYld8CFCQKDlVUWrMQ+htR81dhrhpCzBy9lIMI7zDZy/BlGVrMJaeevziVaodNmupqooMmroAQ2YuQeT4WaqG3o+2RDy+XFvshzOTRyfaJEfC2putMzuae78o9BkQq1Q7auwUVdURGyL5g4G5JRNjP3bAWNU5IpmwidXx7j8INq4e6NzVgmB3ZhKpT7gNCLYBrYGeAtvAsCO6MtHy9eqFOVOG4dS+9chPZWLFpPCLe+WMMnz9tB6/e/kI3796hG+e1eMlgc9JuYb5syfDzr4b2hDY1q0/hIe9OaxoM0x5bXO+hwVhsGR0p+Wx5/7h/YNQnnsLn6/7GB312ys7NI3KPXXKaIycPgcrPt+Hk+dO40F1Pr5pqsS3jyvxdZMAX6YLrQMo2B/oKjUPdGr+QEIrO0oN/UnVLarhYWRd3EgF34mC2ydQkXUJd4toRUpv0ovfpj1JxkNub2a+EBkZg/VrPkVj8XU0lbNjE/IHxZcJMEeSoktU5YsoTzmCZdPj0I0jkyS0oupjR0QhK3638uWakkv1RefTm2GXEqIqJ0qV5RD9t0AvVkUqK1o5UaosVWl7VfKpJZzbuf25Tr23qKqKagl4s0eXWrlWXdmIFsYG7dGFgH9AtVGAS9LJ4bVlOwJOQKSCYkdIJMHs7uYLe/pUJ1FxAuZOFe0bOwJ9aVP6EUSBO5SJZgy97cCJsxA3ZS4hX6DAHr9oBcZRoYfMWIgRc5YqTz6ZCi5VFknuoifOUYodOmqKgloqMjIiuNAWudASOUt1hJ1K8oBe/qHKd7tzv8AdNWwk4Z7K3CAa+vTa7TobwdjGjh0vRlkQKScK3H04utiysxpaWtGKdOF5otqGSrUNBG7akc6GDP5INvSuocGe+HjBBJzc+xnykqhGd1Lx5UMC9kUjfvviPr59dhffPm/A94T8h9dP8bsvHxB67vviHl4/qUdtSQY2r/kY4QGucOphBvmuTQ06wIzv05WwW/A9LRnW9Pozxg9DRV4S7mTdgLOzPTtYJ3y2Yh4aaEcundiJSdMm4eNNO7Ht0HFkpiXii0ZRbFHuO4S3VAd4marMSBlSwH8toStDirK/pG152ViA53VZeFR2A3U5p1B4/XPkxO8i6MdQmnGOyn6Jqn0VtflXUMcoSz+NaRy9Bg4ZjSN7N6la+d38C6jLPYu6vHOo18Xd/LOozjyBnZ/OQK8e5jDiv0+qMF6eLji0nSNBtiSap5Wi3805obW6yaI3FRaqea1KQjUVV0pOby5tTaYGvtgW8d8Cu6h5pYRuwkjgFsgl6RTAxaoU07a0MOMw2prDqliTZsA/pEXRF8BtHdGVNqU7fbiNixccfYNw4Php9Bs8Ej5URoHaL2qIAjxyzFTla2MmzCDgMzF48hwMn7mIw+1iBff4hZ9g9sqNCuxRcz/CUB6LURZmPiGfqqxDIK2NJKkukjwSaFFq2dYUO0IpuCtV2zciGn1j4jBg5Fg1eSOJpNgRmbgRBfeIGIhw2pD+vG7YiInsGGEw7WGnqiP65lR3M3N0pufWp5LqKcVmIinlNCaDPbqbIaa/Pzaumo/Lx7aiOO0iQUvHk/pCvG6qxm8J+O9e3CPg9Qry3315/8d4+VDB/zvGN0/rdFGPx3VFuHhiL8YNHQBXx+6Eu5NK6q2Y+1hzu6e1KfZuW41iAt5YnoO508dCn59p8byJuF+RiaaaXNSXJOPzDcswZc5cbDxwEgdPnURVSTpBbrYwOhsjsDME/peNRfTpRcqvP+U1ntZk43E1Aa9Mx4OyZNwtvIry1CPIvboVmZe3ITfxIAqTT6A49RSKkk+ihG1ZxhlcO7oBUWGBGDV+OhLPbkd19hkmmGdQnXUKlRknGMdRmX4MFelHUZ52FBf3r6Dvd1LVHAHdvqcdxo6Mpqrv0nx4HqEWsLOPKsuiSodSJ88V0I9Stfcp5RYro9kUqZNLSOIpk0Aa2BJluoSzVHy5zpuXJIgf16KQlqWFfofWurrue/jNBx8owDuamMGAiaZAbk2vKmW23rQpF64lYMnqDfCPHkqwxyoVj2AiOWDMFERRKQfRbw+aNAcjZizCKFoTibHzlmEiLcl4qTdz/whalcG0JRFUV4FbZj6ltKi8tSSQVGgZKZwCJIEMJeT0/UrNB8A3bAD6DxnODjSTSdkEOPj0RXvDLtA36wp7L392kJGIpKJHs5MFxA5n5/RgkmmFLtbWqjWytIABv3T9zpJEdlSKLWFCL9nL0Rpx0X2xZdVsJJ7ZibKseNwrz8DzxlK8fFCOV1Twr5pqlFoLyN+JmlOxvyfYap/Az1ZUXfbLazn2+5dNtDENjLt4xU6Sn3odC2aMgzOTVzODdlTyDgih0m/fuAJpN86jriQTV07ugYWFCSaPicUDfobHBPRJHUGtz0NBygUsWjAT05euwPq9R3Hh0hk1MfTlvRK8oLo/qy9Q8aQ2lzBn4SH//t4dAl10i3Hzxyi+ibqC66jKPo+iW/uRdXkLsq5Q1RP2I+/mIeTfPIz8W4dQSIUvYqxaMB4REZGYO3cu8hP3oyzlMEqTD6Lk1l4U39yNgoSdyLmyBSmn1yB+/1LsWzURA0Nc0M3SCGZmhrQvxlg0czghP6MpuKi6TsGbFb1efDohr8kUBdd8uViWagW9JJ17NbBvaQmnBrXmwQXs4uubUBS/QVkVBTkVXVVX3v/wfQ3w9wl427YcwrvQh1vQpjiq6Wp7zz5M5mJw9UYSPl63GYGEJyRuNAbRjoQMoZKOnoJh0xcghr188OTZansE1Xs81XvKR6up4svV9mj68qFMJGPZCfrTnkgFxoujgZusZWHiKDOiDvT6jv79aEf6Ke/v6BdMzx8Oj5BwBA8cTE+/CLEcIXq4+6KdgRFth7U6L0w6Gt9fAPcIHQBz+54wsibc3Ww0wM1N0Vmn2vq0C/r6HZRym5kbwc3FFqOHReDztQuRfv04qvLpSWuZpD2owFePKgl3BaNcqfJ3hFfZE8KswBZ78qQOrx/X4DvuV+C/aFSKLh5dOsNvX0inuKf+VuCXv3/FzlKacxMfL5wOe8Lu4WaLTz+agYybTNQqc/GgMgd9fJwR3NcdDXdSCG0hHhHaB1VZPJ6J+uLbasp9xPixWLBmK1Zs3IyUmxfxsDIb90rT0FByW8Xd4iTUF95ATX48qnOvojL7Esozz+NO+lmUSqSdwR2qdUnKMeQn7EI2Qc+N347c67uRl7gXBTcPouCWxCHcOLUZcQMCMWLsNCaVH6sRoCz5ABO/fVRTgn5jB/KvbUHOpQ3IPL8Gt48tx6Vd87B7+SgsnRSOyYP7YONHo/k3+wm4VjdvYKt8OUNq6NoU/zGl7tX05pWp9OHJu5QH16bz5bXmyX+0KTtVlN7apqAXy6JmPRklAj+jhdgUUfAP2rRBW/3OqpJi1M0WFg4uCnCZ4fuEcP/2+++RkVeArPwi5BTdQXZRCXKLSzFnxVrE0oNLjKHXHjfvY0xZ+ikmLV6JMVTxUVTuoQRfPHrosAn0xSMIbqRaz9LTJ1j5a1kGYO8dRGBD1aypVG08+w1A32hakiFDVQcKHjIGlr3clN825CjjTphDaUWi+L4xvHbvgH704d0JvgUMraxh2LUrDIxFtTtBj1CLcostEc9tTri9PXpiypgoHN21Glk3zxLuW7QVhXhxn8P942rCW6ta5btpTQTgb5+LB7+r7IqALscEcDn31aMqKn0VvhOwvxR1f6iUXM77ntsCuIAu+7+lsr9m5/iKf1uafQPH+RlunduF2qLbVOxCPG8owbpP5sHaxgI3Lh7GEyr5/fJ01BLuGipyVUECP+91pCcex+xZEzBkykyMm78M6zetQUHqRVTnEeq8a6jKvaI8dkXWedqOs/TXhDrtpIrS9FMozziNyqxzVHN68cxTymqUpx6mOu9DQeJuFN7Yx9iPQoIuFZR1S/l9R/bHpOlzcfvCdlRlHENN1nEqL9vMo/TkR7jvsBZpBwniAQK4DxUp+9kZaD0yjioF19RcZj9l+7SyLrWZ4sePqqjJFAUXD35ISz6VJz+kzYCKmqdKGVFaid28PjvC7Z18D4ntKBWVV7BLvZyQC+Dvt26D1p2YhBmbq4TNpIcDenL4d6OKujJEyS8l3MKOQ8cQOWoSokZPxiB67xgq5zAml4MnzcLQqfOo2AR8yadsl6uqSiiTvnCqbF+Z3o8apuCW1YiyWEtaO69A1cqCLnsCL5YlgEls0MAhiIwbxk6zWNki+TytOuqhE22UwCxgD6MVGsz3dA2OoGJ3I9yWKqHsTN9tYNxZqbaeqLaBZkvEb0syGeDnjFkTYnB0xyfISjyBmsIkApSGp3eLFHhfU7HFe3/3BS0G4f36iQbxa8aX9+9Q0WuZWPKYTrllv1RVRMnFf3/9RLx6vYJafPpvv5DEVFP2b583qo4h6v67Fzr42WHk9evHtXjB0eN5wx0mlaXIT74Eh162GD58IOFPRiMVuo6QF2ddQVHGBRRnXkRR+jnkp5zG7s3LEBodxTxkEoZNnIjzJ3coxRawS9NOM06inFBXEOqytBPcpp/POktffR61eReZTF5R/vwu2/q884SKwKcc0pSa0JenH2ecwM0zWzEkJgTDaU9XLV/EaxDW/PNoKLiIRqmyvInLeHDn6psKjCzk0vZfZFxQkCu4c04S8JMEmQCny0yn+PNmu6JBr+BOP0AfLlZFyoa0kklSNpQ6OZNN1e5Uoby5JJ5UdVmRqC3SWk+70qo1WnXQQ3sjEzW13cXGHo7eAXDp209B7k6IQgaNwEACHZ+Ugr3HTtOiTEYY4Yvh0DWOSeRoJpGTmFiO5XY0vXkEFVaSUZ/IwfAZEKcSRwU31VoU3NYjQK11kUVdslrR1rMvnPxCmMzGIIS2ZBA9deDAYUwWe7Lz6aNzV0s1Cyg+PGr8NAzg+7qF9Cf8PdCZcBtRuSWR1GNG34mqLbVtVSVhaMmkOSJDfbBi8RScP7KVAJ1TlZJH9LJiBV4SLlFkCbEo3z6rU6CKh36tIK9ToMs+sSkCs1L1ZwJ1LV5K/Zp/++2zRp1X12AWqMWyaL79voL696+aVGgVmSf44avH+APbP33zHL/n9tf8O6m9P6zOw6qlM2Dn3AubNq1CRW4ilTkeRWnnOPIcR9aNo8i+dQx5t0+ggEnijXPbMWF8HNxDIuAfFYvVny4m6BcIMcEtuEr/fZXbl1Cbe0FVTerzBexruFecgHslibh/R0qDt/Cw7Cbul1xXFZTa7FOoZYIpVZTavAtU+zNYOmsUoiPDMJ551bWT23nsPK9ziZBf4d9d1aJY4oqaLGooOKfglllSmfaXJboNBTIRdIaQn1Aw12SIch+m5z6oYJeQUmJlCu1JitgSWX6rAa7si4B9Szz5Ns2f62AX+LVEVJeMCuy3tqKF1MLb6huqGU0z+nBHH38Ftii5B5M+n/BoVU2JokrETZqJRavWox89eSDBj6RKDxw/Q/lzAbtP1BD67EFqgkgmYWRWVGAWsAXy7h7aQq4engGw9eqrZh3t2Xr1i4RfcD8MIMR+kbH00T3QumMnWg4rVSaU9d2xsrR17BQ4B/ZTXtuAdkRq3AamxtqkjT4TZr12WhlQ/DaTSceelogdEMChfxbiT+8kIJdwtzQdz2gHvmgsocWoVEr9zRMNagG1uSrymtbjK9qV73T2RNRalF4UW1RawJfz5NhPE1GBXhJU6TAqAf3ykbIpArN0EKm8/PDVE/p2LYEVhRe4xcaIx39UU4CM60fprdNRlHIOI4ZH83sZjV27N6Mk4yL9NNU76QSyEg4h5+YR5CUdJ+hHUZR6DIXJR7Fkzhj0cHZRKyoXfzRfWZZ7JTcI8U08UBAnqYmfh2W30VSegqYKmQRKw7OaTDxlPKtholuRQuD5N0VXtXKhlAnzNcU/f2ANE/QgjGPyP2/uHGV5GgovE/KrfJ9ran1LY+FFBXgjVb6x4Lx6fb/kigK9UZbgKsuiga6si86ji4orBc8U8A/RkuzXQS9VFqmuSL2c1uc2k88kWYUoyi1rWbYTZtoUFZ+jOHELk89Nyq4I9C3a6DEhM7WARU8nel4XdHf1hLN/CNwCQ+E/YBD6MMKHjkHsuKmEe5RKPIMJfRAhF9sir10Cw+HEpNGdPtqX6u0RGg0Hgi0Qd3f3U621iy+6ufgo1ZZ1JTKB40GAffuFI3r0RHaKGEJrzVGlI4wsbRTcEYR+oCg339stOJxWygb6ZubQN5cqCeFWyt1eAS62RFbbWVgYw925OyaMiMCOdYsRf5LDWE4ik8lCPK0voupWKoVWPpvASisWRAAX4JXtkErIIy3x/KpJOkK1gl7ZEYItnUOU+nsBVZeEalZFLE2ZOt6cpGr7pTPoFJ0hdXZ5j++p6N8Rbuk8v33xEA8I+Kk9zBEIuawFL009gT2rOCr288XYOfOx7fN1hPkMbcg5FCUfR27SUar4CRSn04bQW1fmXkQJ7Un/UF8ERsdi7urN+GzDahSq6X/CXE2Ia7PwVFoC/bwuW8UX9RI5qn4ux9X+WkJfzdGuNJFqfxWNKuLp4c/jo9mjMXRwFKbOWY7Th7ZodqdAAL6izn1A2B/ciVfx8M41HdwXqeAa9DLrelf5crmJ4qxSdgFdvHldtnh8mRiir0+XuvhBqvcegr2bfluW2u5TlZdKevIywl56S1NxBXfCZg1wNTFElZcJI3rzFgZmllRGW3QVyB2dCSsthVcfuNIe+PWPRR8qa3DsCATGDEUAldo/Kg4hhFxCLERPb0LbJxieBNtdSn20JjLlL5AL4NbOnm9siXhx1+AB8JRJnAh6yLgRCOK1zWwdFdwGhFc8t1RtYidMUzVw77AomHTvoerbKgh3J6q12JKOeu1VQmnYRQ9WVibo4+OEmZPisGfTR0i5wuGvKEVVKqT89tUjSSYl2atWVkOpr4JcSx5FlZXyyiSPVEAIqpaAiiqLojdooWrgkogKxLQnDIFbFF/ZmGfSysjA6zbJdaUzNdKiPFIdQqvASNIqfp4dpkn8fj1qitNwaOdqbF8zF413UqiKN1HNhLCECd+xLXMRGxWIoVOmYf2WtcijwtfkX1NRnXeVSWg8aguvo774Jhr4dwtmjICppQm8KSCzVqzD7BVrsfizNVi2ehU2bd2AG9doQ4qTVf385b1CAi43W+Tiy8Z81b5oyGPkKtAfVzBnKYlXduRuodicS0i5uBOzJw7B5BnzMWfufCayVGL68oYiUfTLSs3viRdXN1eIdflxdlRsjPjyRrEuCnwBXlN38ed1OVJK1OroddlSNz+uvHm1UnaBXmZBD1LJd9KuCNw7qNifM8GUmyYkJOEUX859VHKpsrQwo++VZFOU3NbNC718+8I5IIS2YaBS8oABg9kOVpal/4jxCB0yhl49Qq1jcfAJpJcWwKOUiouiO/gGoQfh7uroCisC3p3niV2Riol0Gt/wAQgbNJSeezjfszfh7gQ9E3N2rmAE8T0CY4cilCOHJLtmtnba3TamZoS7i4K7Q6d2uoRSKwNaW5swmezNH3YkjuxcRa96CnUlqWrYf3pXbMkdqnE1FbwCX9CmSKIoivot4ZPEUtRaQNQmdB4odZXtr1VlRVRe/HeDrmR4X3WU108lQb2r4BXQ5doCuQAsx6WjaLXxBvwg12uupesmiuQ9vpFOwY7whKNLZsJJ7Pl8FbZuWYHlCydh//ZPkXOL4BTGqxAPnXF5F8EaiNjRo7F8w3okXDuJ+2VpeFSRjoeVmbjH5LmBeUZ9yW1MHDOII5oR3F16MAk3hLG1Ncy7d4e5rb3y7P1HTcSCzzZi447tuHzxOBrL0wl4gQoBXO4uUsouql/F77Jc7I6Afo2f57JKOPduWIQxo4Zh+sJV7JyfqSS2jtbmLm1NQ754cSaZxZpPFzV/IIpeIoDrklOquyh7fa7ALSGTRBro9TqwJQRsBTfBVh6dai52RYVs/zRSpJX9ovAy87mNyr4ZLQRwU9ue6NbbleEOZ8LmHiy16QiluIExQ9A3egiCmAiKqsoEjEyNy+SLc0AobUQknPz7wVHsiVgTRnc3H1oTL1XnlsVcXuwEfZkMBUcPoncfB3tPP4hNat/ZUG0L1GFDR6svP4Dv1dWuJzrJ8lZjY+gxOhp0QkfC3azcsjbCppspwoI8sHzBJJw+sBGZiSdQmZeIBxVZtAzlypZIie4VbYYorairWBIBU6AX2OW4HBPwlKqL/5byn6i5AP5M893NJUQFr6qQNGiwsyNISEcQVRbgBVxR+d8zmdQmhmRk0EqH6vULmfqvV9e5X5WP+LN7sIeQ7Du0HRu2rEJ4sDumjYtGQHAfLF0yExn8d927k4QHZSlM/q5hz4b5GBQXjSmLl2Ln/t0ozrmpTRbJjGZtrqrEBAZ4wM+zO5Iu7MXty8cQFxOKDrR0UkK1sjKCvUM3RA8cgOjhozD9o0+xevse7DqwD0kJtA1Sl6/NUf5cIBcr87QmnZBeV2pdR59dlX0W6Zf3YObE4Zi7eCXmL1qC4pSTqCXgtbni3wm7eHKdoisVF5+uQpd85ktoVkUsjCwLEMjrck6qcqSUIasz6M3Fo8vMKEO2xcJUpkkNfR+qGNKWp4id2aX8eQnBVpG4lUpOVWcC2kIqGOb2jrCiVXH09oebqqqE0a6Ewjciht5uiKqueNGOuPQNVbeE9fINJOAyYRNMBQ5R6i03QXd39+VxH7XORaba3Zm4Bg0cCr/QCPr60XDl33c0MlHqbW7nQF8/UnWeUB7zZ2ey6tWbx40If2e2hm/gFmsiyi1w2/boigFh3lixaBLOHtpMuE+jIvcm7lXk4FF1Hn13IZ4zqfzyQbmCWTx082SMshjKi+uqHzogVWd4KIouUGtVFOW3CbUAKRNCmr++q5JKAVnUWdov75dq3r25pq6sSZNKJqVeLiFwyyIuFYT8q8d1qKKVOrxrNfbu24QDR3djz6EdWLJsFgb298aA/n1g0d0a1vZ2cHR3xeIls5GXfBEPqNb3y1Lp2Y9g9uQ4RMbFEvYl2HNwDwoyE9BYloFbFw/CrrsZVi+ZiGccJb68V0oLk8rRzg0mpgZK4R0crHD+2FakXzuCLWuWYNjwWIycPA1zV63Hik1bsXv/Tl7vKjuPQC6KnolHZbcUtAKwVFoqMs9iy4rZmMiR5aPVn+Povo2oydWOqYqLqDnPF6tzX3l0KjkVXBJSKTFKezfvrIJb1tAI2JJwVkulRRLP5hBFz9YlpM2Qp0rtfY9usmiPsizFAnWCeHGpk29XtqVEJaBUcvHiEnbuAm+AsisCowshliqL2AZ3WTdCoG0JsUwQiZLbeforNXfwlYVbPmqipgf3C+CuPD8wejB8QsIQPmQkfMKiYWjZDR+2bYfO5pYcJQj/oOG0LEOZ2A5m5+qjbEk7A310kEVThLt9x7Y6wNvDyFgfvag+IwaHYT2/2EvHtiMv9SruZCWqGw3EmjTVFeF5Qyme3S1WS181T13zBj6pQ4t6q/axpuLNlRRRcekQWlS+qaBIBxDF/o5KLKU9uZ5YE7m2jBACuVZZ0ZLM5hr49y+btKRSpvp15UNt4dZ9dr4qpCeewu5tK7Hv4HbsP7YH2/dtxdTpIzE4ygcRoV60Ft2gx/yks4UlLGxtYd6tG9x8vbBty2rUEtjHtXm4R9hP71nJTuEHz4A+CB00CKMmjUFEhD/iogNpXdLwFT/rl/fu4AU7/bL5U2Bk0hlm5l1gzU6wY/MyPKqk3alM5bVuI/XqIaxcOhPDRg3H0MkzMGHhx1i+dg3OntqP6oJEJq2y/DZBKXQd1boq6zSSzm/H9NFD8dHH67Fo6TK1yEv212Sf4TnnVYdo9uj3dSVGzYeLmku9XMqJUmfXlFxsS202vXgOQ+fPJREVda9lW62SUXpzJqPKxoiFEUWnsleIokuCmiyTQ9LuQpkuWljSF1tJVcXFU1tOy8TT3lNg9lNVFgFdFFwAlxsm5MYDWcvSvGjLwtFFPcZC/Lkbz/UNi4Szrz9CBw9Xyaq5rYNaky4lQXmfvjHiuUfBJ4KJanAYjCyt1E3AstS1g4HmuSU66bVDFyaUbs62mDY+DptXL8C103uRnXQJRenXaU1u42FNMZ42lNN7l6r13LLO5MW9cqprhVpvoqnyXZU8ilJrs5JaeU86glRCBE6payu78YXmy5VFUdA26Orn1UrNXz4ow3MmsUq9dZZHSz7lGuK3tUkeAfolj8u1mhNVGV0ayjJx9TRVe/c67D+6C/uo4Ou2fIphQ0MRE+EJP+YWJjbW6GhqCgNLaxjZ9IAJraShlRWsbbujp5MjgvqH4tCBrbxWhrJmJSlnsXbRaPi4dkM3a2MMHBCEnNuX8FyXj8js6fOGYlw6vgtdqOQ23UzQzcYUn29aRi+f+gZ02X5A2CuzL+PC0S2YNHEEgqOiEMXkf+zseVizfhVuMZkXPy6LswRmqf5s+Xg2ZoyfiuVrduLY3vVU+DOozjlHNb/IDnGZai4+XMqH9OalCWiqkHr8dRWi8FppUTqC+Hh2jLwzOn/OViowBWzzNPgFdAlR9+pMgV28usyEEnrdMgCBvEwmhmSCSOfRW9h7UIUdnFQSaCcA05d3d/WimouSh6OXX6AGN9VaVN7GxUOtTJRnkAjsavEWVd83nHbGzx9BA2IQTAti7eSqwJZHMhhRxf1VlWaYuhFA7tqx6e2G9gYGaNOxA9rrCdxanbsTfbe5aWd4utphyphY7NzwEa6fO4iMG+eRT/UuyUxEbTE9YjXVu7aEcJcQdMJ3rxIvHlZr67zVoipR3CoVzX5ZzSw+IXBUe20F4UPNhugSSNmWTqAsiai3WBVVS9f8t8xGPr9bqPy+zIq+uFemFPv7r56o5bUS8jfazKl0rjq1NFfq8neyruMU7dWBg1tpT3Zh75FdWLp8DgbH+COmvw962BPuLl3U8106mJgSdDP1zJaO3O5k1hUGMuHV1QKmVHUzm24YMmoIUm+cw8OqHPXIidtnt2HRhAjERfnj882f4nb8GRRkXEdFQTLqSzNxh3bGzbUn7Gj3+nh0x5VTO9hJqM4VAjqT1/JkBXkTFftxtTzK4iZybxzH6uWzENgviL9ZBEffYRg5cRw2rl2M9Pi9KJNZ0NOfY+aoEVi2cis+WrYcBUlHCfppNfFUlyf2RiaKZNJJSokCtWxfUereIKquqiySsGrLdQVusS+i4M0zoqLk4s9VhSVdpvg1WyOvmxW8LGkXLYpYlR0qynSwiz9vYUalsOrlTIg9tTo5Fb0nQRTQbXVgO/oEKJUXuM3tndR9nrLGvHcAk1R6dxe/APiH9SfIg9Cd0LfpJA/TaUV1NuCI4MNkMg5+/Qcqv+/kFwQ9U3P1XBIBvG1HTbkNDDrC2soEQX3cMHvSEHz+2UJcpvqkJZ5DIZW7LJcqU5DG4ToTDeW5uF9ZgEe1xWiqv4PHdaVKzQVwsQNfPpTQoBQgxWJ8pSyKZlkUgGr9iFROZJbynrbmRELZFEkWG1UJ8Iu7RXjFUUGA1dRfktoqdQ01Pc+OIueL9/5OFmOxlfNUVYfvJx0w+9Z5HNm/CYf57zl4fDe27d6IyVOHYdAAH0RG+MBE7iRq3w5t2ek7MNEWqDsYmxBwE7Qn+LIqVOyLAUc9fVoYg66WMKa693Rzwdq1y/ndSMKdqRZcnd46F8tnDMTSeROwffMqXL90AvkZCYQ9BRPHDIaFtRn69XUj9FcJdAY7SbpS86YqDW4VValoqqQNrEzGo4pkJpTXsGvDEvQP7wsHD09aVLG0wRg7aTQ+3/gRNixfignjZyImbhTOHd6oaum1+ZeVP5dkVSaStAkjKSPK81o0ny6vtZLi5R9tS4GsT5fZ0JNKsavS5d5PWSPzo0f/MWTfIWVbxMJUyqQRwZdWqbjMkqbuRgsLu55KybvaORJwD1UrF3UXuAVIAbwrwW5Wbls3LfH06tcfTt5+8A6WBDVaPZyoXWdDvN+yJVp36KiuJ947cOAQuPgHwbNfJKz4Pm06dULr9h3QUV+7rUweidCrpzUGRQZg+YLJ2Ld5Oc4d3IRbl47SmlxGSU4yKvIJ950c1Jbm0h+moKY4A3dLc9BYkUfY8+jHNUV/fq8CL5rqlKKr7ftaKPsiYIq/1lU7BGqBW3y1qK9aa/JSyn1NuhKgpsSi5LIiUTqLKhu+SWAbtImgV1qCqY0E2vVk9JCOda8yF4nn9+PIoa04dnIPjhzfg0/XLkNsdB8MjPCAi1M3jmId8X6rVmqB3Ift2qJVx45oraeHdoZGSsVVUNEFcD0quT4B72zVTb2W5Qy9XF0QOiACZ07sUZWR4ttHcXXvEhxZNxVHty5W1ZvMpAsozUvi9kFYd7Pg3zgiOf6Een7L49psPKnLQVNNplLxJ7UZfJ2FJzLzqQNftqXCcr8sicKzmYm/H4wtuqqqnAV5cabI2csjMawtcXzPZyhnUlqbd1ktG5AJpPslCXhQeoPJ603alER1Z5G2BEBXVtTV0KVmrioteTIbKkmpWBdR8maPfkoHvLaIS7MpB5RVEV8uVZfm6kuFJKU6b97CmuBZ9rCFasW2EGYbZ3dVaRFlF9sha8rFpkjS6eIfDC966d7evvAKiUBPKnoHQ2MF9wetW6OLlY06p9/gEeztIaozyLX0qEyt2rVD+04dYM5EsoeVEZzszBE3IACfLZ2Bw9tX4/KJ3bh99RTSE86iMOMGh9tEtokozaGKF6ajilFdRMDLqORVRYQ8n9vZ/HGpSGJfqOpPGyvwrFF8OhOuB9VvFF1UVZRWLIWqeLx6pKm7zH6Kaj9tUMekti0KL+ALyCoZfaypv7SqsiL1dJmKfym3vDXyWo+VJ3/9WGro9WokKc1JxIXj23Hi5G4cP7UXh47txGL+O8V7R/Zzg5WVMT4g3O99KHf6t9RA5/f3PuPD9u0V6G2o7JpdMYch/bmxrb2yLV2626GztY0K4x52sOzpAC//Ppi3YCZSE46h4OZ+JB1fhRtHVyH96l4UpF5Qn0dWPM6aMhKdzUwQN2IQ8tOvqjuPZIXjoypCXS1gZyqPLsr+qCJFKbm0j6u0eFh2A+UZpzAyNkhb4WmoD32OPqYWJuhpZ4Vrp7ahNP00KrLO0ptT0ZU/b662aEouVkXsiSSgCmyxK2+8uGZValXSeezHVYlUbVnVqKBOk9Kh3EChJZ3qtSzDVcq9540XVzOhSdvRogMVw5RfoKO7F7o7uaBrD5kY6qXWj1jY92LCST/u6qlaFyalDr17oxcTUye/vjAws4As8JInRHXqYqKADxsyGu5BYXCnNZHEVaBvTWvSiirVrn0bmBh2hJWpPnpaG8LP1Qbjh4Zj4ydzcJEQ3L5yAlm3ryIvNR5FmUkozk5GcdYtlWiKXakoIOiEvO5OFurvZDMy1S1mDQS9kRamsTwPj2hdntGfi315IhaG9uVlk0ArEN9XoWB/rt2iJmC/eizeuUpVZuQeTQW9zI4yBHpRf4H+JVVdAJdrCNzfvXiI379+pkYFsTGyTvz5/Srk3r6A00e34sy5Azhxeh/27N+MKZMGK/UOCegNQ2MDJQoK8A90rcQbRW+HVhzx2hkaKtsikBtYWMGQUAvgXXrYK7gNuwn4PRX8xt1t4eDqqvzzuk/nIeX8ZqSd24DchH0oTj2Lsux4VOQmICfpHEYNjeTv3APD6K8vMt+pzL+BhjtJ9OG3CbSodzqeVMkzEjOUbRG4m2hdmiqSeDxJTQwd2bIQpvJIDnW7oD7sKVgrFk5E3q0jaga0lFEpKx1zxbJcVtP+ArlMEgncYlO0xVzaBJFatFUolkVmP2WKX6uXS4iS13OfKiGqGrmm0ppS70ZJotzArPnx4oQtqkYua1dkIqiIbQs9KoVMqXck7N2p2D0Ju7WDo7rbRt0ETMDFvtjY2cPRxRW9mYhKTV3+5r0PP2TyaAhrKr5a5xI5EE4+/uoca57TTk9fqXcreSZgq/fRqtWH6NihNUwJendzA7jYmiLEyxbjqAqfLZ6Ks4e24ZYoOX14bjJhT7mq2ny2ZXkpqCjMoHVJIfBJqCHsArrYluqiNJ26F+B+dREe0qs/rCnUJaTlStG/IuQvHsiaE5mVFC9+T6nut8/vK9jFYrxoFA9fpUCXEOWW1wr051IOfKTWmgjcqrMo+DWF/4KWqI4dLoH24NzJnTh34TBOE/KNm1dgxJAQDOrvhd69uqFN+7Y/Qv1TwFuKmrfGB/yuWnagkhPytp07a55cklDzrsqqCOQmdg4wc+gFC4qSBUdaU4qSwG5C2K24v7ujA8IHhODEvk8VbHLDRE1+AqryriM/6SQObJyHQB8HWNnbof/wkVi7eR1uX6eCFt2iJUlmEipQp70B/amyK7Qxal+qutFZnqwli+Bk1tnYxIDJsy+yEw+gJOUkShTkJ1WlRdaq1+aep5prSq7Kh+LFVQIqyi7LdC/inm7i6M1Uf95pLcGUkqHMeMpiLVVJkTisLdaS0FkWZVEE+hRJOLW1LFIrL4rfiBa2TDRtervCgMlgSw6THeirTbp1h6W9g1oFaGnviB69ejNhsYY9O4Dsk4dXttfvTOV3RXBMHAKZWLrSd0ti2ZMdQp+JkiSVrQl46zat1FMAWrUk5B++r9r27VrB1Kgj7Cw6w6dXV0T4OWA4v6QlU4di+2eLcP7Idqr6caRfP6N8uSh7SVYSCtKu4U72TRSrqkEqvXkmIwuNtC4NlYUK9EYmpPcqpW5+B48I/PMHNfjykSg1gWX74r54a02dlT/XTb9LOVHdDSTASse4V8a2VB1XqwdltlIWUz0VL96k3RhB/y6wf8FrFiRfUCsdL50/iEvMJ06e2Y9ly2YSbk/ERnjB0sLoR/X+UJ7N8pOWSXqziksoyGlXBHLlzQVyio54ciktSpj2dISNmxe6ucmTgz3VA1fNaDflji4pPfbkiOvu44nPVi1A/u1TKM9mfpN6BqnntuLi7iU4uHY6pg4LgrurLbxDgjFx/kJs2bkVSYRdlgaIdVGrEmWhloRuWxZxPaXSr1gwHiYckcOCvbBz/UJkJxygFz+trEpJ6gkUJx/DndRjKE87oWZIZd26rFeXaf+7zTdA50p5UCoq2oSQ+HCxLjLlrzqAqsJI5UVWKupursjSJosk0axQ0/yi5tqEkEzjN69fKbmxVQFecGUdWph0s4UNFaE3kwdRX0OqRZtOemjNBEhaI36hbgHBsLWjD+TwqdfFGN14njf9eJ/+MWrCR7y32BcTDqdtOmoPvmzbrg06tG2N9oS8XRvtwUUSbVtrIY+jM9RrCwfalr6u3RDVxxHDwzwwNS4Ey2eMwLaVc3Fqz3qkxJ8h5NdpAS4rRS9MT1BlxDL6dPHoNSU5BD4NdWV5qKF9aazQ1Fyi6W4ZE9JSVV4U6yLbLx7WENRGKrskiNWqVKgtlNJq56r8SPXW7Iy2FEAmgr778pHO7mhT91J2/OaLB7QnlerOoovHtuHq5aO4ws559PguzJg2DMOjvBEV7KIe4/aBKHWzar+B/OeAS4VFRkixKm0NOqtyoii5VFbEsoiSa1UWa6XmouJdHXujK5M+K2c3WFKsxMoY0cYI6Jb2PeHo4YGxE0bg9rXDqupRSL+eE79T2ZicxINIPLUZny0ayzzBG30jQjF+zlxs2r0Tx47vQ/ZtKnBhoiovakt05VEVqagriEf/EE+EBrqpW+PEc4taV9OaVGafV4lnRZbMip5XS3FV7VwUXc2GXoDcmNF8l39dzmmCKxM+4sVlIkhuhROrotXExaZIvVzZGVmtqFYsatP/ml/X1ciVJ5dSolZCFC/erOYt9IzN1CxkDyablhz2xJ7YMskULy3P1RbVllJgG5nMsbWjH/emagfCJygYLr5+arbSqqeTmsxpxR9Jng/YkrakXesP0blDOxh1bA9DtiZMOLvocaRoR8vC0G/fCgYdW6vnvdia66OPkwVi/HthWIgrxvX3wfS4YCydHIeda5fgzP5NSCJAAnph2nUUZ95UIbCX5yWjsogJKVW9sjAN96qL8aC2BPdripVPF0V/WFOkEtKn9wkxFV2SUSk1Sj1clF1sjEyaqPq3SkZrVPlQwJf14M3lwS95XvNSWvHx96vycOv8Xlw+swfX40/iKgHfsXMNJowKx+hB/ojs2xv23Yxhb2OqHiknZdWf2hMBXBLND+TRzhxFWzJ30RTckHAba/VyXeIpoZRcVVas6c+7K5CN6MXFwqhHZzt7qGfEd1F+vTvP47kWFrChfekT0hc7t35CK0EbkXVawSirGGsLb6K2iN9l2jmcO/AZZk4YiOB+fogZMRwzlyzFio0bcPTEAY5QR5CceBpJV49g5eIpcHXujqsnNqnyX3UG1TrzFMqo4HdSjqPo9nHdnf5n1d3+VUxAa0TJC2W57nU0MPlsUI+20O4quqsWammTPnUShF2tX0nTrIl0Aqmq1GbJU3B1ZUSpsijrolVXtPUsAvpeNcupKbrc/iY3TfALbqOn3X1jQgUwUSsSexF4J3SjQnSSqkj7DqosaG5jC/eAIDgywXFxc0MPJ2dVNWktCkT1lmcCataEqk217ki1NtPvADt6t3BnR0yKCEeEtwd6cOh2tDGGm31XeDhawtXOFL2o6J5sY6joI0LcMCHSBzMI+pLxMVi3aBL2bVqOy8d308acRG5KPGFPIOg3lG0pz01WkNdTzRuo5A3l+So5vVuapXyyPObhcUM5rQttS1MDE9NyQl9GVacPJ+yaPZEZUlmkpdXLtVKirE/R7IwkmuLdRcXl/NxbZ3Hl+FbEXzqMRNqqy+yEKz6ZjZED/TEmxgeBHrawtWBy7d4D08YMwLqPpiGC8LTm9/SvABe4W1MolEWhgncyFbC7asFtAV4loARcn0mosi0EXiosRvxdOlOURMXNpULG3008uiSmcq6ehSWFqCecPd2xaNF03MmgPy5ORKMkm2Vpqrpyj9FQmoy64pv01kewe91cDIv2h6enI7z9fREWHY2A/v1h7+KE3k622MsOIz79ceVt2gxCnH2K/vgkvfhx5N84hIKbR9Rd/iUpYlcuqLp5821294rjcU9q5Xdk1jNet179srrp4h6TUZnur8s9re4frVb3jh6jMu+h/RB1ljuEZO2KFpVqheIhrWau6uay1lyrvkiNXKotLeRhj+3FP0vy2cVEPZdbWln+amhhrZ5BLq2FLOJiUmNgbKzKjeZUig5U6Na0JQpuWhGJ1j+xJe3baordw1gfMT6u+GzqZBxeux7rFszDtBFRmDVmIGaOjsLU4eEYOcAPod528LI3RWBvKwwNdMZEgj6bSducYaGYNzIca+aPw24q+9VT+5Bx4wKV/Qq9+g2UEnKxLKLk1SWZqCvN1iowkoyKbamlmlPdZfJIlgE01RapKohYDUlMnzBJffWoRjczKo+ZIODitxXkWqKq3XhchwdV+ci4foKfYScSqd6J10/j9Km9mD19OEbH+mFImDucmVA7dOuC8AAnLJo2BIe3LcftSweQR9/+yZJZ6Nyl85sqSrN6izURBW9nZIQOxlIbF7DNlB/XowD9WB/XpvtFqQVwgVjtZ4iqi40RuEXpVctz5Tw537SHLZw83DB89BCkJhzH/VKZ5Uwh6MkK+IY7t9BYKveTyoP7b6Iy54q6r3PdkjGIC3dTSweiwn2wd9tKVObGa39756YqE2p37x9BMe1Lvlih+H2E/TAKqepyn6nYlqocufWOEBdpy3Ybi7WZUFmrrvx3kVRhLryxLtp6laO0IAT8+naU3JSVhnvovXeylSW1e9SMp1JxKSVmyOOeaV8yfkxCS5mEtnC2MaeKmsLYqDMVm0Nm+45qGWybTgbq7n15RIU8tMeICaeDi5tSckksRb3l8WcfUrWVejcDzn1t29CuUMU7dWgNE4P2sGCS6cH3mTwgDDuXf4wrh47i0sFD2L9pNXatX4btaxZj4/KZWD57FKYODUW4T0/4OJghzM0G48I9MCXaD9Ni/DFnaAiWcjhdT2U/uHk5lXQX0hLOKs9ezMRUklJRdgFe6ukqCa0pYZuPB1J1YTyijXlcV4ImWphntDCvHt/F0/o7eEULo0qDVPKvBfSvnvG1tg5FElWxNLLa8fLhjbh6dg9uJpxGApO0XTs/w4QRoRhHwPtzFLK3NISLnRmGDvDF6kUTaLXW6ZYB38J9uYGjvhiXTu6DXU9bVUFptifycCRRbP3m5FIHtMxwCuTKi4voKNXWjgm8quVr+d/ZaBUWO029u3aljbFV6i7HBXIjAV0sJ0dhN6rzicPbqOKpeFiRrlvhmMzXKdyWRVsphF0DX27IkOevXDzwCVbNGYSpI0Ow/pPpuHXxAEeFiyhOopW8uh3Zl7Yi+wrb+D3IurYXOdcPKdALbsjd/nJD9Cm19kUUXWyLApwqriyL+PPcsyoRFQWvkBuoUw5C7vIXsCtSBVyZwpc79KXSos2EapNEJ94sw1UTQ2JhdFP+pbd3ooUNrYSDRReCbg5L0y5oo/43IO3UcxBVEkQv3k6SIAMDVXUR/y1evWWb1nj/A3l663sKcnkKlwDevl1L6HVsAzNjPTjZdkWIrxMGhfmin7cj/B2sCWsEPv/4I1w7egJJ5y/j8rHDOHdkF04f2Ipju9Zh94aPsGbRRMwc1R+Rfo7w7WmGaB97jKdCTonyw/RBfbF4dH98NCEG6xdOoEquRPyZ/Ui+ehI5SZfUxJGCvDiLoKdT1XOUostSgHsVeaqmfp/Qa5CX4wvdhNFXMgEkloTW5NXjerxsqmPIMoC7ytIUpVzExUMbcZ325GbiGVyj/169Yg5GRPti3EA/BLrbMIk2gq9zN0waHobPV83GlaObkZfEH02ePV5ToJ6dKJ5fKjbl+amIZKfvwMRSauECpQDe2UqU2lbz01bahE+zEjcDLa2ArzoBW1VeFEW31mZCJaSmLorfmX8n24bddKHOsYR1T3s4+3jhxNEdhDxD1ccfEuz7pbepzrfQUHJDPRuxrlDuQLqsHvhZlXuJsB/BlQMfY8fysTi4aSESTm9H8sWduH1mI1LPb0HmlZ3IurqHoDNxvX4QOQmHUJx8AmUCuNxYQcAbaFdkJrSx5LpSc/Ho9bnnqNoylS9xTK1VqUg5QFDFd8sjL+QpXWJLjmoTRRK52qSRLMXVFm3J4zBkev8AO8heAr5b3fvZQvyziUEH2BN0S2ND9OhKRenUUc2+ySOb5YlabQh7B0L+v8g6y/iqsmzb87q7jEIKdwIU7h5C3N3d3UNCAgR3K9zdneAhgRAgAUJCcHcp6arq6r7d93bf2/d9Hm+Ouc4JdL8P67f3OTmEkrHH+U9Zc7FsT7fnzz774nP84TOOJP69Ygpz4BR3z67tMHJIb3g5jkZCmBeK0qMxZ3IGFkzLRU5CCDzGDBQMccGS4kIcFjevOHIC5YeP4NSBnTh5YBuO7dmkgt+yfCYWC8dmRnnCQzDGblA3BE4YqK6eLULPDnbCpEh3TEsJwhJ5KLavnIOKY7tQU3kCN4XVb0tA+qjhiglIr1/AQ82l14jIa5ocncEoWwBYLPr1/TPBEVYrH2hKkB2N3BPKAZtVJ3ZIkLVK3fvc2QPYL3iSnxmBaL9xiPAai5GCJ4MFT9zsBqEgJRAbFhXizL7VqL8kDHrrkjxQNzQl+ds7tu1yzNxL/NfPrzSPn5Odgo49P8URGy3uULRtejDAJJL0NNhhwxZcw+l0egqdzm5NK/Ln/D262OPy6beBPgh8MGzQXbBzuHwj+4SEITI9CytXLcQTCUBf09WtQhcX52aN5w2cuHUaT1TwJ/HoxgnNgV84sAiH1xbjyMaZOLp5Lg6uLcWhdaU4s0fELqK/dHwDqo+vx43zO7U4dEcC0AfykLDc//i6ZUkwStThRAAzGWCvuvijq2ytNRkWsnlTG672s+zUoNMIepu6Ogcc0eEp6tuyGs+bxixuiWuQALRZBxF4n15d4eNqh8GD+6HDNy0wuGcntGvTGr//7DMVNAs6X7b6RltmOWieqbDPvvxK3fzL5lxfoGOH1hg97Fv4u9kiOdLXiLskG8vmFGPd0jnYsnoxtq5ZjCWzioRbJyDccSzm5WVh16pVKD90HJXHROxHD+DcsX04c2Q3TuwXh+ehTeLUC4pTkBLiAqcRvTFxcHeECa9nBNghN0SEHuWBQuH1OVkR2LCgEAe3LBeEOShCP4fbwurMvlDszKnfrT0vwehVRZe3wudMK2rWRRydzs30IgX+/dMGvH9cLw/GRZzaswrHhL/Lxb3PishXy8OUEOGKeAkufSYOwmCbjsrgAW6jMT0/FrtXz0Tl0Y3aAPW88bI+KL9Y+mZY+v/PP74Rgb82oyh+fa+96pvWf4dvhwxRp2UGhU7OAU9N7E0Ol6tiCEVucW5+lhijDwGdng8GnVy+DazZGH4zWEXeQVx8mL0z/ONT4BoSDmcfH/iGhMI3Igaz5s2QoLPSzEq8S7GbrsSXjeXK3Sp2CVafiNDJ1jfOrkf5zlk4tm4KDq+bjmMbZ+D4phk4t2cRqsvW4dpZ4+C3yONMKcqi0K3DjB4Itjy4vFcX3dvsJjpiybhwWUv9BkeYYVGHZyAq4r7LwUU6tIjiXq+LSMNAlJhisix0cmHy3sKQE8YNQniwF4KD3DF4UHd0addSnKmbipzri+bNFV3YX6ETt373O/yeXYaCLZ26dcWAfjYYMXwA+vbrjVEjh2JKXgqWzC7G6sWzsHHFQmxbtxy7Nq3Gvm3rsX/7ehV8ZkwgAuxGYHp6IjYvXYpTew+I0E+i4vhRVJ48jIoTB1F+bC9OHdyGA1tXYsOSaZghzB7lPR7j5Z/RTsQe7TYS2SL0fGH1SZFuKInzxnwR2pbFJcLra1Bt6WCsrz6DO7UVEozWaEDKnhcGoqyMmn6XO9oK8P1zrrvi5g+1NfWEiPts2U6Unz2o6cE5M3IR7j0WUV6jYTfUBgN7doCtXGMC7TG/JBmHhL+501634d3jeOePeGLcW8T9ixH3f3PWym/f6/1//fwGF88dxQRXZy3Ps4ecbE20oFsbZOmtTm3cvAdaMW9uFT0buPSegqf4e1qKR8bR+YAMsp2IyIxcOHh6Y6KLK3yiExA/aZoeCObiF4DA2ETMmDdLjOAU3oijv6Kbi7C5nt08oyLnHHNFGHFzzmDhlK3qw0u0feDC/sWolFV1ZIVgygadpciJArcuMuOyR6fjMvh8cPWQrofa0/Kx5M9FoVvz55pOtLTZMnXYNKWrmlO6TMaFHYp3KHQRtGZZmFnRbkQRepUVWdaiWZe2X6Jlc2FpCRRbtvhKt5l16tweXTu0xZeff6bc/Zm4+efi5nRxzi6n0DlDkYWfdhIs9erfH/Z2Y+DqYo/4SMGHOVOxdG4pNq1aIgIX1haB79m6Dvt3bMTh3VtxeM9W7N2yFtPykuE9fghywvyxckYpjmzbjgvHT+NC2QlcPHUMF09T8Idw7ugelO3bhL0bl2LlnAIUJgfB12EoRvftBIehPZDsa4u8MGdkCcaUxHlhTkYIlhQlYPtyCXJ3rcbFE3vNRgtt8KrSgPTN4zu66eIVl8XZtZvx2V1Un96LQ1uX4pwEluUWPMlNC9XgMlQerCG9OorA28Fx9LdIiyJ/56Bs53e4VmHhb0EcpiSZlaFTc1QcBf4Pde8PIm6u70XoXB9U8Fz3bl6Gl5+XCLanZdlo8KgpQ1nK2CJyOjmzLqYSSsc2YqbgDc500yC2Y59v0W/MeHhHxcPVPxAewWG6YSVh8gyEpOcjOq9EZ9lEZRfBPTAYiVl5mL9ssY6re3e/Wk+weMuGLW6WFme3Cv4ZhX79uAh9j46Uu1a2EleOfSdrBWpOrEFd+TbNk3OK1/2rR8S9D4v7H9Fx0NyYzcBTUUXL/dw3yhw6g1FmXih4s8GZqGLd6Py4dq8WjvieFVvUzS3ObTYy073Xm6XYIsgoyNKsOXtKhKs7tGmB1i2+RGcRd8c2rdDqq8/1UCyekkD+5plBPBbEiJxD+in0P6CVBKW9Bw2FrYMTIkP8kZYUB3uHCRg1aiSWzJ2OHRtXYdfmNdi7bQMO7tqCQ3u24cje7Ti2bwcO7d6iju/nMBIRzuOxcFIu9qxdi/NHynCx7JQI/TiqzlDsR9TZzxzaicMSKG1bNQdLS7OE173gNrYfRnzbCc4S8CX5jFNHnxzjgWmJvpie7C/BaQI2L5mizn5FBMuWgNs1pveFbQAsHFHsb+R693ql/B2b5e9YgTMnd+P0yb1Ys2oukgRPUkLs4TFhEPr1aIehfTrB034IClODsXHJZJzdvwb1VcfwpIEjnutNW64FT9gSoOJW5/5BJ2XpEpF/FLsROQX/QR6ygsJccXSmAT9mT9TBFU8MkzPNyCsfABU8042du5gKqbzuO3ocnAND4cmDwCKiESBiTp06FxEi6Nj8qQjLnITQ9AK98lBejv/wC49CTFY+SufN0dmQb+9dllUtAueuIUu6kWnG+rMq1ke1IuBLu9FYuRU3zwmiVWzFrQvb9fhDzl80c845ueu4rDI8lM8/FiZ/Iu/xzz+7yaDzhHFza8+5ZTgRN1MQWR7X7ldWN869VTsR73HOohVLmlKIfL1JubzhLNONq9XF1clbsDLZ+mv0tels+kpE2G3E1b/56jM0/5zn3fwfPZvy869YqbM4ucXNefgTmdymb18MHDUOI8ZNgL+vF7LTk1BSkI0Vi+dhTulkbN+wWkW+f8dmEbY4+d4dOLpvJ47t34UjIvr1y+chytcRPuMGY3paArYtX47T+w+J0E+j6tRJXDpbJus4LpwWjCnbL0HqVuH1ldi0tBRzJyUgIdABE4b2xLDe7eFjO0AdvTjWE9MSfDBdAsHZGcFYMS0VW5aV4uS+jfI79+Fa5XE0Xj2nXY2skrJl4OCWZfLPsw4nju7AkUNbMWNKOuKDJiIpyB7jh/SU4LwdRg3shjBBphn5McrfF45uRmO1uFBjNb7nJo039/Hn908t/M3RzW8sePLBIvCP4jYCtzg57+Uh+Ie8Zspy/ZqlsBk4QB2cmRa688ceFro2A0wbFTuroxQ305DdBwzGeE8f+EfF6egP35gkxORPQURWkV55DmlAchaCUnIQlVuE0IwCEf0UHajKaQk8HS8iMx+Lli/SMXofHl/T9f5BDd4/vKoDiqzM/ryeez4pYOLHIeVs3R5Xe1jWUXVudX5hecP1py05ckt2RZaiCp2ckwBU0CbopLBNMMoSPre/Uejk8t16VcFXWfpXVOifsjhz5FYmX8OTJlqjb49OyuF/EEF/+YffoY0Iuq0gTMsv/qDvUeififj/IPjCMc9mYL85uo8406Jlc3S3scFEV294BYYjMjwEOZmpcHBywNDhw7FgVil2b1mHfds34sBOI/Qje8TN9+/E8QO7RfA7lNszYwPhMuJb5IYHYv3CBTi2c7dy+sUTJ3DpjAj9XJk4+1FcOHVYeF2CU0WYxVgzvxBT0sMQ7DoKI/t1wog+HREiwWlWiCMmi9hLk3wxTdaMtEAsm5qGXavnoGz3WsGSA8Ls8vtF9LvXzZOHbx2Oibg3szU23hcxfuMQIngytLfBEzsJfOPlAVo0JQ2HNi9E9ckduHP1FF7evYofn9/Gr2/J3xwXZwSu4v7NiFhF/YmLG3H/u9g/qMiJNNzhf1IC8GFjRzeV9a0Cp7BZKOI9HZxMPnC8nWBJAjxDI/WkOx7jGJSao4cghGXkIzhV4onMAr3Syd0jExFXMFVFTzb3jk2BR2QCHPxD4BUajpicAlSVH8WHRyLyhzUGXdiGe9+4u6Yc71zQ8XMUralmiivrPZ2a5XuK+ozF+Yk4ZZpV4eee3SzT/Z9PLDuHmGVh1ZR5ci6ryBmUPr7KjsRd4FTcpqwKBW7JnSuuXBCzOb9OHZzC1kwL23DPrUKzziLuti2+QGtx7s9FzL8XDGkh4m4rQm8tLv+FiP53v2smYv6dCt2cV8lj/P5gGo3kNU82ay2IM952AsY5umGMnSP8AgMwOS8d82cU47vFc1FckIUt61Zg345NOCDYcngPj70WR99PR9+p+LJHOH1KTgKcR/ZFvI+zsO4McdetOH/4GCqPHkPVyeOoFqFzGbGT13fj+J4N2LlmHpaVZiIn1gce4uZDxdVHCsZEuI3ClHhvXUboQViQG4n18mDsWTsXu9fOF+SYgsP7N+LQgS1YNL8E4cL4sb7jNfdN9x5s0x7OgkVp0Z5YMTtX+bu2XP7D11XitfA3y/xMDzLAZPaEsw6twaURuIXD1cWtqMLrDzBcboRumP2dvuZQIlZbVy2do5u9mUOnoLUaatkOR3ThBhdfEbSPOLdnYAj845KRWDRdxD0ZSZNnIpqCluCSjh2Yki0snoewrEJ4C55E5hQJvhTqDPmo3GI9JS8wOROuQSGISMtB4bRindXOfa3W4f7vROxkdOV0FpBYIaWIb3DwEMXL+SwnTNuAvP+cLm4JYOn8z29S/KxyylU+/+QGU4mHTBtuHZ2fVz4Ilv5z3WBBdhfhX92tmZWPLr5ZZ6PfUYTZKny+RVn8diVHyAmXM/AUV2/GYwyby/qarbAWQfPaSgROkTf/TNz6981EzP9Hc+IUtB7h9xlTib/H5/xzzJPLQ9Gu/TfoN6Af3HyCEBgZj+CgQGSkJcPO3g5Dhg7BbPmPtnf7JuzfuUX4fKs4+rYmdDl+YJeKff/2DZg3JQc+dkMRYDcc8/KzRJDzcGjTJpQfOIyqE8dE5CdwudysS2clOD1xAGcObsOhbSuwefl0zCs0CDNxuA0G92wDu8E9EOM5VoU+PSUAM9ODMT8vCksmJ2JuXgw2LJuGXTvWoCgvHpEi7jCPURg9oKs2jg3/tiO8HYYgL9Ef6+ZP0vx33QX5j15/Ae8e3dT2XCt/GzQxQqWgmxxcxPzPv/yoLv5PdXK6Nn9uRM4HgovC5p9lBoYbRFav24ixTq5NeW/NqliatvpLQBmSkgW3wDC4+HIoaAIisyYhoWgGsmYsEP6eg+SSWerSvJLFo0XIkXINFlTh1Ss6WZk8roAHJEwSxy8QrJmkLB8Un4jojEzUXzmjw4s+8KQLDjF6YI5kUTcnr1Pw97i54pIlK8NNFeWanTGLrylyCv6UJXil0Ikrp/QbwHpPd+eELmZZOPaC4mcV9NFVk0cnl7MSev+SybDcY8FIhH3/Mueqi+irOG6ark42NwcD0N2baY+3rObMllC0sr5UNpeg8gsj/s9F4J+J2PkzLd+zXfYr9qZ8jpZff6EbIVrKt0Fzts+2bwMHEfVEV0+MtXeGr58f8jMSJQidgWUL5yJVAtM1yxYJuhixK6OLq6vQ9+9WsR/cuQnL58rXrPs4uA7thfQANyzIScWOpYtReegIqk+V4UrFKVw5fwqXzwuzn5MAVVy9omyfIMxG7Fk3H6tm56EkLRSh7qMxun9nDOrxDeyF21P87VCSYBx9uqypqUGYXZSEqGBnQZMRCHIZId8CHTCge1uMGUT+Hoep2ZHYurwU5w7I15/w97PGy/j+KTdYcHqWlb+ZQXmruPHff3onYiae/Jtz/9kqaoMm1uzKPzStaMT9+lEjtm/fgamLNiIuf47uAGKmRHtYROTcdB6ZyZnwWfAOCYNHSIQItlDFnTZtnqy5upg5oXgzpy9A3KRSpMvPOPo6Oq9YEYWiZ8DJRdHT/SnwOOFzb+H4wLgkeMm3Q9mRnXjLoU2Priu6cFLXO8EXYouKXa4UOkWuhSRWS2+e1fW0zrj4S7r4TVY36e4Us8XNyeWW+2d1ZYotZoKuGVDEaVx6rdmvKKMsXr3L3AvG8BAAOri19F9/do3pbxGB31J0WSvoIoEnG6m+Zq8JS/LsN2khQWfLL7S5qrm8x2arL7/4vXYVsifFCPtztJLVtjW3s7VA5w4t0KHt12gjr78W0bcRdBk4sD88/YIRKqzn6x+A9JQETLAbj5GjRmB26RTs3rpBhX6Arq6OboTOYJRCZ6px/TJxo1APOA7pgRD7YcLWEdg0dyYqDh7G5TMnVeBXKsy6XE6UkeD05AGck/8xnDOyQ9h7+Ywc5CcIo9oPFnzpgOGCMR5j+yIz1EmEHoxZGSGIEfcOch4Kd3mfmDOkVztMHNEL0fJAzCqIw+41c3Dh+A4ReJl2NnLGYhN//yTi/qMp7nzK2E0MbsGS//nzj8bNrfyt14958h+e38Oh/XswY8kGFC3cioJ5mxAUl4G2XcS5O0lAOXAwXEMiVdwc72bn4S3OXagCjhfc4GhrYgfFmzF9nnHuvCmCLDPkdy1TR1cXT8tDSBoZPU85nAFoXMEUpEyZre9HiugD4lMQIH8Hz0FduXIBXty5IoKutZT/ucjlVjZn5sWMtSDCUOxkdwamFDwd/FmdETj5nLxusIXZFbOekNNv0MGPaiqRi2lFa+85rzojnWxuEbi58lCuHerkVle/KyhDfFE3r2TvygY04+YFCraViLO1uPE3XC3N4nvm5/zZl/KeWR3aNIdN12/Qv1d7DKDrSWDWv1dH9BZ+7djua7TgZ0XodrZj4eDmhTETneHl44fc1HisXroAi+fNRERYsOKLVeh09EPK6UboZQd3a6qRhaNJKeHwHt8foc4jsXhKNnauXIL9WzfjzLGD6uZXKk7jqjj71UrenxCxC6+f2I/TB7cahFk6DfPErZNDnOE0qjdG9u2A0SL4IOfhyA53RZoI3n1cX30AGLi6yt+VHO6GhVPSsW/DAlws24H6S8KPDdV4/8Tq4E90kBDdmwxO0RphM0tivSeiGGFbBf+Rwc39r++eovzUccxatBoli3dg8qLtSCmaCztnV7Rt307Hd4xydodfVDwc3D1h5+YujluoOELuji8UkYsL+ydmIUpeM4MSN2kqYmWRv9NL54rLl4qI5+jPwiT45APgE5emXE5XZ0AaKuLXPydOH51TiPCkVLhHxGLO3FL59+amZm5w5o5+CULV0enmV1Xo7+4TX4zINdUomGJEXiEiPifCpsjP6rB/E4Qafn96g+5tFTdRhXlyOvxpvedxiuR03VEk93T0BwxG1dn36RHn96+wl10c/dI2gyvC6bcqjZPfOi+uLvfN6MZtWlkFbBF4qy/Updu2/hLtvvkKHds2F8f+Gt07tUIf4dShfbtgrGCE3ch+cBgzQI+dthvVHyMG9bQIvYU4+pdo0bIFetr0gLu3P6KSsuATEITwcEGIYH+MYW9zQR52blqLPVvXW9KLnzI60cVkXnZvXo1FpXlICnJGVqQPdqxbpinJ9WtW4OKZ4yp0Fbk4es2F00bs50XsEpyy//zE3o3Yt2kJ1gpTT8sMF+62xcRh3TGqb0eMHdAZtoO7CdJ0wrhBXeHrNAzZ8b7yDZCNw9uW4+LJ3Wi4fBqP6uV/9APOWeSMRbPB+W8/mQLPRwe3ZE5k/VOd+496bXJzdW/y9wf8xw+vcKO6Egu/Wy/i3obixTuROW053P2D0KV7V22K4ynRLN7wdGln/2AEJmVqMMkDxxgohqQV6DVBhM5zmYgoyeLI/hJAJhXP0rx4aEa+BJ9TxOmzFWv8EjI066JpRLkyfciAM0iWX0K6Iku8OLuvOLmPYEtRUQ7u3xDR3iWa1BoXt2RY3qrwL2kwSqGbotEFdXZeuej85rOG2bWoZGF0ZXURNFHFODnTiOTww2ankTr3fhHxHnnNTdE8VnGPCv0+r5cpcLPo5JphqdgoQt+owSdRpUGE3qx759bo2rEVOokDdxBBt//mS7QXcXdq11xE3RK9urZG357yFU5hD+klgu4Pl3GD4DlxOPycxyDAdTwC3Gzh4zwWrhIoThwzECPlcz27tUPLll+hVasWGDtqOBzdPNXRPXwDkBIXgeULZ2P+7FJ4e7kjOyVehL7B4ujbLIy+Q0VepmLfhUO7tmjvy8Kp2VgyPR+Hdm5E+YlDmlZkAGqc/LSI/AxqL55FrVxrKgVlzpfh0unDKD+6S2coblsxA0umpiJXhOznOBTjB3VRjJk4XJDIYwyK0sOwet4kHN2xQjh/rxaPHtVX49X9OnFxs32O7vuX71+oyBVTmpz63zHlR4ur/2BJJX4Qdn+LxtoLWLlmA6Yu2YqSpbuQN3st/MPj0OvbPtoIx3kmPJxgoqsr3MQYQtNylaljxGWZ/iOeJBXPlGCxEMlypfDpzjEicp6dSrESXawpQgaV1uwK/0xgSi68BFUYaPI9nr0aIA8Qj6rke57i4G4BwXD0D8Gkwkw8ucVZLHX4/ulNnT7GI2h0Pa3TgJRZF+ILRU5O/xicirNrz/onjV8aeDK1eMrC45aikO4aYgBKl6erW5BFuNycGbrbwuDbFFHuXtppOT9U7qt5fiidfJugCnFli67bF3gU40Y0G9yvu27P6tOjPXqJS/fu1lZE3Q4DBUGG9+8ujt0b9uLU7iJgHycjarbOhnvbIyrAGdGBrogN9URsiAciA1wQ6GkPD/ncmBH9YCO/k4M7v2r+Jbp06wJHF3fECAN6+AbCPzAAAf4+cHSYiKmTC7BtAyuj6z4KnYyueXSDLlzHmX3ZsQHb1y7Bro3f4cTBnag4dUSEfkIXg9GaShG3ReS14uo1lXxPnL38GColMD11YDP2b1qMDYsmY7bwdlKos543yf6T0txobFgyBcd2rZYHYx/qqk5qXzpnvHBKF7mZG6L/9J4TbjlkiIdbMaNCJzeFHCuKfJoP5+u///IeLx80YNu2HZiycCOmLNuNScLdEck5OuOwZbt26NSnL0Y4umKsqwe8w6IQnJypjqxIIotCZVDJgDJBEMUvMVMzJkQXgyolyt4UfKC4NA/Kips0HamCKsHC2/7yeV9xcmIK/5xLWKw6t39ihuBLijxIc7TM7xEieBgZhyHjxiEvNxkP6oS57wuiPL6hi3xOdHlHdNEiUa24Ow/BtXJ6NV5zlktTqpEzzunsJvOihSFLevGZOLlJI1rOMuLZRuLk5kBcCTwFZSh2BqFcD2sOqJNr4CkOfleEznvD5IIrTCNe3KRHKZqr4MqYYf0wakhfjBwsrDrIBqMG9xJh98FEwQ8X26HwchilTh3q44QIEXF0sDviRNSJET5IivJDSmwgUuOC5RqE5OgAxEf4IszfBb7yZ5wmDENvm074WhydQh82uL8I3Q3jHd1E6EGIj4nEkjmlmD6lCM7ODggR4e+0CF1TjGT0vXR0Cl2w49BeWXvk9U4c2bNFrjtw9vhBVJ4+hio6ugaixBWzai6ewTVZ16tE9HK9Ks7OHUWc71K2dz32bliIjUtKxLkLsHZBEXavm4+T+zfi0pkDKvB7Ny7iSWMtXj1gxyLHW3D83CNty/3tAydmMavCg64MgnzsRTHCtvL3+6d3sX/vbpQuXIeSJTtRuGAr4rKnYKSIqE3HjuLcAzBsgj0muLjAKzQSYeLcySWzkSrunSgipyDp0sQRBpN0cqb+EiWoDBKWThQ354nXxJNYQQ26fABPxRYmJ4fzgeAp2HxQPKIT4S/Ozd/JwpBPbCpCiDTyOmnydAQkpuu3h71fIHr3740lC6bguQSe7Kbkosg/PDZH05DNKe6392vUyRmYWntdjNiJL1Ui6grT4KVcbq6aT7f0sZDLKWa9V8GzOHTAgigsDB3Q05/vM7siV578fO8SRU3nZrDJ62aDKXRv3rM7kbv4K9ahmcP4EXAYPxwO44bCYewQOI4bIuIeBg/7kfBzGYcgceZwEW1UkCdiQn1ExH5IjBLkiA1GWnwYMpMiBTeim1ZmUgSSROyR8vkATwc4ThiOXj07oXkLs02ua3dh4In2xtF5Tqevjzq6m6ujiH0ydgijb1230gSkLBqJq7NoZIJREfrhPTh5eK+uU0f24dzxAzh/8ggunj2OS+Ui4nKr0M8oulyrOocbl87j+qVyEfs5ET2DVFZQD6KibLeek3nm0BacPbwVlSf26AiMm5fLcefaBW3R1Y7Fhxwqehc/vHyIn149ws9vn4rQuWufw/vp5iL0n5kCZABKNKHAP+CXt09w4uhBzFpCce9AEYPKwrmYIEFlh25dxbn7YbDtRNh7eMJB4hZ/cdPsWYtErLMVTzJL5yt2kJsp7jRxbLp4nLg1Ra7lenXwYi3w8CGg8HnqNYXMIyDp3nR5U/2crCzuFZOsR1Dy9wUJrjCQZfAZK3/eRQTuJjFAvxEjYGc3Qkxklzm1gyIXVGm6qqPXaA5dRU5eV6Ebsb/i3tFGHgtTroUha1OXBpfMrlhcnAGoivoaK58Uu7mnY1sXN0mTy+9e2qUOz0Wxk8spfAadVjy5dZ7iluCzYr3cr0cDU4jujuPB5eE4TtZYeDmNhY+IO8DDDsHeDuLKrogK9kJcOMUtbh0TKs4dhozEKGSlxCA3LR556QnIz0zSlZceL2KPQXpChDwQ/gjxdYKb4xh0794Jn335Bb746gv0/7YX7B0dMdrOCa7i6OFhYeLo0zF35jR4erpj7LjxWDZvhgajml605tGtji4CP310H84cO4BzZYdw/sRhdfMLZ4zQLzOHTkyhyC+KyKsrZJ1vWnT2axckSK0ow1XBmKvlR/X1DU4CuHJOBU5MedJ4DS8EVd484jQujp/jxufH+PnNE+Xy3z5wrBw3Pr9Rof/tRzL6e+X1C+dOYt6ydRpUTl68HVmly+EmmNatFzeMf6tH19i6uIq4/RAujps9cxHSS+chY/p8ddwMETjz3ini6LEq7FIVON09WDibzsz3GXjGCnvTuYkzzKLwASBnE0u8xKm9hbXp6uRxrX7yzFVxd3YfMi9OkfvGy+ciorV3ZYKnN3r36YYphanatfnusXHxd49E2A+vW8R9XZ2cIue89HcPr+kR5yrsW8Lhd+jml01V1FocsqQVKfjnDWeUu82pchwOaulK1EwLK6Fk8mM6Bvo+hX1lX9NR540VzKKYTIpiiSXQZNDZyJy5LIr85tnVslahmafzBHi52MHHbSL8PRwQ6OWIYB8XEbe7uLEXokN9ERcRiMToEBF4mAg8AumJ4tjJMchOjbOIPBEFmckozE7FpBxZ2SnIz0hCVnKUuHogwgLcYDtmiM5BpNDZ1di5S0eMGjMWMfI/x4tHmXt4ITIiBN6ersjOSMUWcfNt61YYoe+yFIy0BcAI3erkTCOq0MXNK08dRRWbuejo55lHp9AFVejgVeLklyj486i7LGIXt74hrzlzkRssOI7uVk2lbktjS+6jhho8vX1NeLxeCzRvH98WN7/30c1V6BZs+f4V/vrjG/wqDn9FvkEWLluNkkVbUSxokjNjlQaVvfv2Qbtu3dF72AiMtLXFcHmQ6dwJhTMwacEKEfcCXblzlorY56tzk6UpcgaWUeKyxI4ICSzjxN2ZMWFfCtElXMQaKk7MEn6EvGeYPFd/RoEHCY/7SDDKINNPAkwGpESVZPI+HxBhcnfhcL+YeNiKwHv06QE/ibkqTu7VY9B5rpFBlTpdTfdMJbJ5S7GlRh2colZHv8PeFu4dZYHICFy31bFhq44cfkLPFn16w5yJxB7ze5fp2vvlytSgXC/t0ZOi6eR3qnaKeLdpp6OKvULcupyH6W6X1xQ+XXyjrgZx84Zz61Ffvk7u16OZr4cTuAK8XBDk44oQP3cRuKcI3AdRIX6IDQtAQlQokkTgybHhSEuIEoHHaUYkO1UEnkEHT0FBVqqIPA2FOWap0DMTRegxijehvs7o289GW3Y//8o4es/uXcTRHTDG3hmuPkGIiIrB3NLJWDx/FiLChAvt7bBqyXwR+qaPQtc8+k4NRIkup4/ux1lx9HJxcwqdbl5lcXQKneiiQr9IoX/i6iL0m1cqdN5ig6zG2ou4c6Ma929ybyh3+9fi6d06cXKOnDMiN27+QITO05O5B9RgCydzEYcWLlmOgtmrxbl3IH/OOoQlZEpQOQTtuhJN+mLQiJEYPGo0XILCNYuROWMRcmYtxpQla1G8aBXyROBTlq5V4THgJKrkzFoiCDJLBU6x040zSheIWxdqAYiCZuBJhEkumaOZE+bNWQH1lb8/PJuokqui174V4W9vfbimaaDKtGRAbCLcJRawE2Tq8a0Nxko8tmvLcmHxqyJoIkq9zljn4FSiCl2cKcUXPKWu8aII2Tj4y0Zuir7yEVNunjM8Xn/ekh+nuM1hX8ydP6g5JgGjpXORw0H1OJYjOoiIzVwcGMrORrbzElW47lVT+Aw4dwp7M6NCNt+hwm+gwMs3GJHrMkJv5u3mqCL393RBoLcLgn3dESoijwjyRVRoAGLCg1XkidEi8rhIEXm0OHmMoIoIPTUBuemCKOLiKvLcDEzOy0SRXM1Kl/eT5XMxwvAhOnekdbtv1M05Po5djW3bfoPBQwYjStgxKDoZbl4SuIYGwd/XA7mZ4uhrV2DTStMGYEWXTxn95OF9IvQDGoCWl0lQefIoLpw+jotnyjQYtTL6R6EbNq+7XKEib7h6AbdE4LevVeHudSPyh/U1eHTrGp7cviEib8ArETk3Wbx9cleF/kGw5YcXHA/9UL4JyrF02TLkz1yOwvlbkDd7HaJS8jBizGi079ZFxd1/xGgMHj1GMxZEA56vSZemwAvmLdfXvM+WxT4TokSiCDplyly9JhXPRoIIPXPGQnVtBqV8QOjufBjI5lxJ8j65O05whygTL98SARL7MDil8LlRgsUgHmTLh4WCD4hNUIE7B4Whuwh8yCAbLJg1SYLuSsUUbgWkyN8Lqrxl1fPeFRX1qzvMl9fgjWWRxcnh/JkyuTg5+8+5XmofOveLMqNyVu9fylKxWzIqZt8nC0Bs3eVGCksAyqNbxNnvirh1ieDp6veucKCorGq+3o7GC3R54+aNF5hhMZmWhnJxch93Z/iJiwd4uyHYzwNhgd6ICPYXgQciOiwQsYIQCSLwpNgIpMRHIU0EnpEUJyJPQHZakog8WRw7FQXZ6YIqRtzF+VnaT14si0IvFITJy0hAqgSqI0cOwpctWuCr5l+p0Lk/tFPHdura4xxcYOfqjRARAx+WJeLoURHBGDZiOCbn52D/TjI6HX1bk6OT008Ktpw+ZhH6CQrdoMuFMybrwq7FK8y4MHcuYqfrKrbIarh6EbeuXUKjLAr9ft1VEXmtiLwWj29fxzNxc6b+XgmykM3fPrmDd7JuifuvXSPuW7pERLoBubPXIjazGGMm2KKjiLujTW/0HjgIA4cPx3gPX4SI0ChgipqsXSiIouKeuRgZ8ppOTnHHC3sTJYgpxA26O4NJFnvI3hR6aPokFW3q1HnInr0YKVPnKqOnC8/zM3TxWPk9RBdiTby8VqSRbw+W9Vne9xd8CYqNx0QxFXYw2vS1wdDBPbFQBH675pwEm6wL1CuqcL0V5jarVsXO4xXNuoSXKmhiikkjElMoZLo5Xf15Q4W6+FPdRscUIicCnDfi5iYKQRcOHyK+KMbwlApmWa4bLud4OWV2uTKteP8qt9EdUFbntwCPdqHwb6vYiS6b1cnr1ckVV1zgLwIP8HEXkXsiNNAHESEBiBQXjxZkiI0MRXxUGBJF5MlxUUhNiBGhxyJDkCWTQk9NNELPotDTjNBFoJPzM1WovBbn093TkZMWJ7/TD116dEHzli3QulULdXXuMGop933790NotARGcRmwd/PU5q4gfy8kyt+7buVSbFq9HDs2rrE4+sdc+v/v6B8Z/aKF0cnnFLrV0a1Cv3lFcKVGhF5bJTx+GXdvXDFuLk7+uPG6uPl1PL97U9i8Qded65ewecMa5Aga5M6S68w1iM+ephmTTt27KXfzzMxhEm9M8PDGZBEzg0UKO0sESpFniQtPX7EJk+Z/h8kLVwnayHsidiIJXZrBJ3mZ/SR0aro8cYSuzt/Be7o2MYVZmPiimciYsUCFzzQgRR3DXLp8PnXaXH0dKQEqg1QTlGbALTBEj50c4+ImiNIDw0TgpUVJqL98SgJJ8naduT7mlfnxuqbsCoVuHJzb49h6S1e/2uToFDEDT612SpBK8bMgRCbnYlHoJWe61J+xuPcJ3cWvGy1qreI+qpsvVMzMpOjV8Dq33VHo5PXbVSwEEV22K75Q5Lc0ABWhVxg+b+YjmOLn5SZCd0eQrydCAnwQFuSHCHHyqLBgxIiTx4nI49XNI5Esbp5CoSdR6PGGz63YkpEiLJ6m2FKUJ+hCR5+UgymTctXVJ8t7BcLq7m72aNmujQr966+b4/ccbyGL/S5jx4zEmImOsHXxQmBEPNKTE7Bo7gxt8Bo5ejRCQ0JNddSaR7eiyyETjJLRmXVpEvrpY01CV0bX1OKnQie2XBA2vyBuXi1cLkKvo9DF0Rvo6AZbKO6dWzaiUESTMXU5siWgTMyfCUcPH3Tu2UPQpLsEbH3Qd/BgDLGdKM6dq70gk+Yt04xHUgnFukQ5uEiEnTNrEQpE5ORxcjgrmcyo5MxeolkWtsumsFVW3JzYYnLgU8W156hgiSQUbaiIlr+b+fQ4ETnTgryn8BPlQciaxazNfM3OBAuTs4NxrJMTvOTbcpSDI3r07oqhg3pi9tRM1FefwKv710wWRTMpvNaJUK9bAs56w+RMH/IhoLOzMCQCJ6LQ1fU0aVkmCL2kx50/ry8HOxKfKJNb8+MnRcRl4swUM7HEiJtsfv8KCz6HdFDo3UsGUXi9Q0FfZIXTTMqlgxNhDKPv0iCUXF5/TlY5nZxb8jYJk7u7wMfDVYUe4OOBYH/BhQBfhAuyRIqTRwuTE1nUzWMikCSuSqF/6uiKLRnJyMtK+Ygt6uJZuijwkoIcvS/MSUd6UjQGDuqnG6HbtvlGxc6xaZwMwGm43Xp2h19IJCKScjDR1Qt+Af4I4YMnD93CubOE07/D9vWrTHXU0tRlrYxq1sUidJN1OSyOzvTiMZN5YS+61dUvGnSpq2YASjcnslQbRxeh3xOhN4rD792+EQUl05FevEjQ4jsR92x4BATD5ts+ephuZ0GTYWPHY6KnLzyjEoXNlwtmLNEeEwo3b7ZBjvRp85E/7zsVO5198qLVihnWrApRhIUcgyWL4C3sHJUnvC2vFTsKZ2qmhEFncHqB4Mck/Tlz5EQUCj9THg7mxTPU8UuV1fmQ8VvCPyYervLt6CkCHzRmDHrYdMG4kX0xvzQbNy4ew7PbV3RGjEkPWoRucXEuxZUHXNfVtc098cVkVjQAZfGnkXhC9iaPXzQzFxtMQehZvWnY4s4huvjDWuPg1mwL7x/WMPg0U3IpZuPeFsFX79ORFg/Z21LDjAyLQ7twu3KrcXMGopagtFGbtTaimZcwua86uQcCxMkD/bwQbHVzxRY6epA6uqJLNMUeruiSEh9thJ5kQZe0REESBqJMI6YbR8812EJOt4qd70eFBcjXe2d83bq1OPg3Oj1XjxT5/HMV+vDhQzB6gr04ujcCIhMRHxeHBbNLUSi/Z4KdLdw8PLB5zQpl9KbN0ZbuRWZdTHpRhC74wjx6BdHlzHEtGlVzw4W4OhmdGZfrVVahMwitUkfnPXGooEiCu/xZSCtZgqRJc+ETEoV+A/uhTcf26NijB2zI3WNtESG8my54kVoyE2kiKmIKUYKtrsSNfBFx8eI1iiuFC1eqwIkeaaXc4DBXgs4l6uYUfUz+NHHrEhEnMWcBogvEhdPYZ5Irwi4U1i5BiFwjc6ciIrtYS/ZReVPF0edoijFz5iJFGoMq0xGdKwweGYXQpHQ4BYai//Bh6GnTERPHDcC6ZdNw/8Z53QH0/jGrmHV66C+FTix5fU8w5B6d+nJTkKlYcq9GD+N6fZc/twSeDEhvk8dF2A2VhtcbWfGsVB6nmz9vsAwt0qrnad3UrBudrzPgpOCPiYgpXnSYpAMAAIAASURBVB6VeFhd/W71Xl2Gv/erozdq6pAMzivz51vlfqs6uQafF7coqtw8txbNPFyd4C1O7uMpbi5s7i9uTqEHiaOHBvqJoweI2C3oEh6iYo+PDhehR/4bo8dbhG5xdYvQrcHo5HwRuGDL1MI8TC3KQ6Ggi5ubA1p3aI+2HHIpYqeb64kL4uifC6t36d4F7j4BiE0vhINnANy9fZEkf190RJA4+kxsXb8Sa79brAHpx6yLJb14aPe/CF0DUgajii8UuikaaTAqjs6sCzMuXNyKV1xSgtisKUgtXizinoegmGQMGzkcbTq006GnnW1sMGD0WDgFRcFDsCourxg5Itp0EfiUxas1e5ItnM1eEoqcbk6hMw3IlSk/YwYkb84yFSaDQro03yN7U+gJk2eLS09WwQeIwClsZlR4HyPCD5EAlD+nq3MlFs9W12fRKFb+Xn4jhKVmwTswAPa+gbprnynC3r06wtttDHasX4A7tecUPX54cdsyNazeOLdc3z0yjv2aPSnk7wfcMMHKpsmwUMgUNIXMh0HTh8relXhG5xYnf6qttqfx8BqHEpld+1yc3WKcnMEkOw7Zm0J0OabCZoBJjKHY6eTW7IoGmZfo1EwbWkTOHLoInEJXB69k9ZOiZwC6Ds3cXR3h6eYML8EWX083Efonjm5Bl7BgOrqgi7p5mDB6uEXo1mA0VthZRC5BKEWek25ETnQpFCfnmiwOXiwiV6EX5esqkAdgxKhhesx4B3HGr77+Wt1cHV0Ynbn0fn17w9bBGRPE0X1C4xApX7lzppegRB4WB+bYJzhgzXdLm4JR9ro0Ofqhf3V0di1q5uU0i0Yfq6MUOhcbwEqnTUNcRhESC+bqConPwOjx49Gxc0e0ln/O9t26odfgoRjCHnlBE+a0o3OKkM0dOMLbySLQBBFYChmZFcmcYiQKH7NEz/J8tmAIMyh8CHhlcEjujhXRRopDh2eTs4s0cGRZnkUhFnn4PrHEPyVHrkX6nsmaTNbPBqbmibCna/aE77G0H5KQDHfBk3ESxA+xtUXP3t3Qv08nRIW44tie1Xh484LiyVu6tro37y1I8tDi7JZ+FauzayCpDH5FsIRoclEdm/cU9bObzJpIQHmD2RQRuGALRf7o+kl97/F1bnk7pQyuaCLrgXL5UUUUoohO2BIXv8dAUwTPdYepQ+bKlcEZcO4UAW8R/t4kSEIWp8ApdmLKxwC07vRqNHN1soe7iwhdRE6h+3h9FDrdPCSQIveXQDRIGD0YUeEGXUwwGi6MHmmwRZAlQ5w8KzUJWSJ0dXS6uQi8SFycq7hARF5IkRdgioi8WILSeEGfrjbdtMW0axfOOuesxa/06BE9UU5Wp84ddK5LgvzPdQuIgJOnDyLlYUuIDVeEYb8LN2Ps2rxWOxgpdGt1lE1dVqFr0ajsoAqduXQro58UvJk9awZixEnjcmfKmoWwpFxMkMCsc9dOaCU41a5TZ3T7th+G2DnCPTwOgYkZuouGpfEUQRKKWFtbufmAaTwRXKIwcjbZWASpBR0RM3ffJIvjUuAMCMnp7BRksGh1Zzp6BFFERB8q/E0Rx/JBmMRcd4E6eWBKHvzYnyLuzt9J9yerM/XoFZUg335ZmOjuLgJ3R49+fdC1W3sMH9QdBRkRuHByN542Vmse/J26NjMopkRPkZuUIfPi1/HqnmHvN/dr8fKOwZNXsl7crsbTehaDjMCf1p/XeYpPRORP6yv09TNxek0fSuD5RFDlKbfFkckFXTTorLW4Oh+A6ycsqCLivnxQBCuBJIPNS3sNj4u479DNyeBcck+h31SRU9TbNeC8cXotrp9cjWsnVorA18hrEbmzox1cnS1CF0f39hBH93IXbPEUoRNbfNTNQ4P8hdP9P6KLhdETmoJRZlziNBuSkZIoQk9GTkYK8hVZxM3zstTNSwrFxSdPwtTiSZgmi2L39fVAm04d0LZjR3TqYo5CtB73R1f/XK7du3WBnaMzxjq6wdU/HGExiSgtKcTMqUXwlm+ggcNHY1JeblMHY1Or7sE9lsyLCF0CUnX0Mjr6YZQd2Il5syVgS81GTNY0xGTPQGhiHuyZVuvZTc8abd2uvYq732hbTPQNVnEHJ4u4RGgBCZmIzi5EsnAvhR4qYktn9kMcl+Kni0eKA4cTMyzuytcs0sSJoFNKmCmR93KmqID5IDD3HZU3TYWdKD9PlYeA2RU6frQgTKA4uXtUMnziM7WHJSqXO4H4LVCs1cuQ+GTYu7rAwcsHQ8aPQzdx7548DGDsAMyfno2a8gPaVUgc4T5VzYU/pqiJJtbUYK0IuUaEfEW3vnEiGJn99X0K/LLFuYklPB7xsvK5YfQreEZEqWfP+DlFlmcidrr4w9oTxtV1Mei0CpsZlSMaRFLkOrZCUOb+FRF6FR17j4iYDL7TFILo5pfFzXlahop9t6JL44Ud4uabUF++SYS9DnVn1suS61lhcif7CVChq6M7iNDJ6OLoii7uCLQKXQJRYos6OtGFWReLmyfGRiJJ3JypxdTEj+hCkedlpanQiSYUuiKLoAbFzT5yCp3BpK3taOXzjiL2dsK9HEunGRfiCx1d8KXVN60wbNQoxIvb+UUkwcnLDzExURoMZwkibV67EmuWL8LOTWssG6RZNLK06lpTjMf2i7h3YemCOYhLyUREqnz1Z04TcefD0cMbvYRZOV6jJec82vRC76EjMdbdF66h0fCNTUZkhgiLmxDSchEkThoj4goWwauIszidSkTHwFFeJwmmcNMC76NFjDGydNODpeDDknxcIXPapVqSZwCazzy68HrJ0nX6MLC3JSiVBRx2EObAOy4dbpFJut3NKzYNfonc0ZMBl6BQuPr6wsU/EEPt7NBr4Lfo1acrBvXrguhQV+zfugx3r53X806/f3ZbByG9e1yvjm0VN0VK0b4Ql3+uDn1ZHVvdW5jb/OyiurcGncLmii2aUeFM82oRdYU6Ot1cBS1iJ6YorgiqPBI2J548uCpLRP1ARH5XnNu61MmJJww01dUtvSyKMUSXfZZFlDFCp/C5GIyayudm3DxrBF53RpzccaItnB0mwEWE7ubs8Imju2rWRYXu543gf3NzphejGIiKm1PsVkc3OfR4gy7K5ymCLRQ6c+SG0ScLthRPEqFT7AxERex58rPBQweo0LuJa/MQLp7EoCeicYz0l5Y2gHbfwG7iRIx3coeTTwhCRXjZIvB5M6chPSUeQyUYTE1JsfS7cL6LEToD0qP7tmP18sVIychGeHKBCLxYuDUfzt6B6Nu/D75p2xotvmmNtl27o+fgYRjl7AHnwHBESVDoHZ2EeAn6QsRJk4pKlcP949MRImKNYaFFO/ok0BNRZwmfJ4o440W8dPMY4eqg5FzdPMxijJ98G7AVNq7AsDgzK3RxBqHJ4trFS9ahYMEqLRpR2Nzo4BQSDX+5jvcOgnNorLyOgUNAOFwDQ2Hv4aWVSyf/IPQbOQzde3dFH5sO4t79Mbc0ExdP7cbjhkvixCJoEfnLO7Vyf12rmhT56/vXRLB8jx2FdXrVJcJm+d4qcA0uxbHp5Ly+0Ly4ET2vH9ncBJ7PiCk3zmqAyqwKsyvMsuhu/nrD6g/Exe9zpJy6uDUY5UPAzMpBC4sTUyhoSwGIQaesWxXbFFXYtKUNXJbsSkPFFhG8vC+ivyVs3mzihLFwsBsHJ3uKXRzdceK/Cf0TdLGI/aPQg8XRDbZoMCpC18povHF0K6dnK7qkIj/LOHpRXrYKvUSFbnF0QZjkxBj0Ficln1PobUXw6ujNmV406EJXb9W6Jb7t3w9h8akIS8gW9vRBYHAQ0hKjdUTd5rUrLCMvTBsAxb5m2UJkZOUgPFECt+RCBMfnwdUnGAMHDUDb9t+geasWeuBu94FDMMjWHnY+QXALjUEQ9z2m5yFRBBwlAg1NlT8v3B0lSELBcxFPgpKz5Vqkbk5XjxVhk8HDGSQKW6cLhmQIetCJmQlhepAcnV66QBcxJYWfmc5c+WytaJK/ORvFISgSfnFJWLRqFc5Unkf+jNkY6+SCCa5uGDx2HEZI7NBn2BD0GtAbvXt3VvZOivHBoV2rtQeFgqZrmzL9LRG2tWTPDApFft2CJHXK6OY9IosRNR2erv2GQacuU9pnqvGVJT+urs7PWtyemGJdJgClwA3GUOgMPilqa9MWxW3NulDw1hHPdGyK/UHtERW6SSeaLAvZnJkWdieSx2+eXa/IQhevP8dW23XC7OvQzG78GEy0HQN7Ebu6uuCLq9NEuFnRpSnr4m6CUT+TcWlKLzYJPQxx0RR6uJbhjchNxVKFLo5OoRNftGDEHHq+YfQmThexR8u3QtceXcXRO6BT1y5oQ0f/qrkeCKD4QlcXdGnZqiXGjBmFcY6ucPIVR49LQ0pyIjasXILdW9Zj77aNutl57XcLkZkpDB2boa4dFJcLN79w+dYYjPYdTNWVB/V27kPuHo/h9i5w9A+FX0wyEvJL4C+/15+72sWxuWMnXl05G+kiwnCiiLh8TO5kRGTwAeBOmxQkTpqqDh7G7Igwdy4rnfLnokTsdGb2npCjmSNPLjFld/aaxBawV2W5PhjegiIT/ELhFZOE+StX4d6ju6i4cA537t3Cq1cPUDw1HwNGj0KXb3uia+/u6Najg2ZOfNzHYe2ymbhRdVKn9f7w/C5+eHFXT7n7Ua7fP2tUFueGbAaeFLf2i8t7xBg+BB+eNKi7vxQeZ+D58rZFyJYOQxZ8iCV0b7o204Ys45sNEyzrVxomrye2lDcFnHR0FTnz5foAsDPRFIXo5lwU850qVjfZeLVb3Ztubnhc+LtqlwacuiyO3khXtzg6nZuZlQZBFlY9b5LJbceNhgp9wjhx9PEwjD5R8GWi4ounqyNYMLIyOl39I76wYPSpoxuhk9GThdGTNYdugtHMNGvWJRm5DEizWP43mRemFa2MTl4PDwtA526d0apdO3Ts0kWdnUe8cFnF/gdx9i+/+hI9bHoiIFy+OfJLESeiysvNxYYVi7FW2LxwUj5CY1IQGJOFAFmuIu5hI0eiU6d2+Lrl1zpfnSdP95egcqSDG+wEWxxEWOHi1nTwMLl6hMchhDvZY1NFvMLazGCIKOPzJKAUR4/ILJDAUoSeM1muk+S12RHPbsPYPKYXizXIZGDIn4dJEMrXmjXJZ6fgTOVuVjjZQssNDewBdxBMSptcgnMXK/D+w0v89NNb/PHn9/jtt+/xH3/5AVVVZzBy7DAVd99eHeFiPxxzZ+Ti4pkDeHy7tun8Up5GTUHr4QLPTKBJQfNYdl5N0HlDZ8nwAeCVBxC8FpdWjFFHZ/77khGzsjgxhqJngcjcU+R8ABRRWMK/wc3KFDoLP3Rv4skZcWsiCdOJDES5M8g4Od37Qc1xbb+lc3Novzr3pb3i1CLkyu3K6SalSBdntoXlfLOYeVFkEUyhwK+fWo2a48tw48waNBs/ZiRsx43RGSn2FLq4+b8Gox/RxcrpARS6JSD9VOimMsqqqHFzitww+kehk5+ZWvwYjJocunH0PA1Eee/n444OnTuiRZs26NKV6NJB0cVwusXVv2AX41cYOmQQwqLlG2PSDCSLmJLThJUjE+AXmQbfSO5ZjMKI0WPQtWsHHU7KNGWbLt3Qtd8gCdKcMF5wxy04Eh4SXAYKAnHMcTB3rwuHBwp3083p4nTtiHROr8qRz2QotgSLq1PgdHeKmNVOBp/s9IvJ5cbiUk0nsouQk2Ujs0s0oKSrc7saOZ0C55UVTS7OO9myZxcuXanGtZu1ePRMXPjHN/jw4YWs5/ivv/2MP/70BuvXLZX/HxMwvTgVZ45uw6NbV/DuqQSV4tgUNd2bLq5Hr7+8b3HzOx/FTFyxpBBNPpy7f0zF8zXL9syNs3dFHgITlBpHV4yx9JNrD/kdjoy7old+TpGFLm8JPp8yEFUHZxBKQR/Hfc2Nl2nwyQCTwuYMc84yZ0al/hwLOdbc9w4VtAk89+O2ODqdu76cn2Fb7XYNOm8Ji9edYbBpUofXT60yKcSxo0dgnAp9tAqdjk5scRI+dxGR///BqHHzJken0AOZeWEuPVAd3fB5JBKasi6xSCW6CLZowYjBqCW9aM26mGKRYXS6OgUf4OeJ9p3aC060V6G3Ekfn0eifNbe4+Zd0dO40+gJ9etsgNDIWuSVzkCRC9w1PVnGPHDce3bt3Frz5Ws87atmhk+6t7DtiLGw9fOEcECYOHgCviDjEcuc6p0olUNhG7F6RiYhIyxd3z1VH9wyPR0hSNgLYqspdTZFJ6uQB7IeX19wQzP2TZHIiCpGFox78EzK16MMiUKw4eHBKnrq7luezi+Emv5f5ce7A94pOxOwFc3G97ioa7ws68OzR71+irr4Gl2sl0Hv5EP/51z/iL3/+EU8fN+BefZWiyYen3L3EDdcicouL88rTM4gt7wVD6ODkc85xtF6JJ1aBU9y6LEGm4e4r6uBN7C1XUwQy/eOmnE+EYXBpSRNasipcD66y8EPmPmEKP9eO4zGn3FocnBkUgytkcEvxp4qpQh6qa+ldsWRTrJhCNKk/zwBzpwh+q6YOKXJt0CKmCIuzzVaZfMyo4ToXhUKfoI4+DvaCLXR0BqIujvZwVaE7idBdjNCJLlr+9zbpRRF56RT5OmavC9GFGRfl80iLo4vILdiSocUiE4iarAv53GCLyboYdKGjT54kjunnIejSCS3btUXHTp3QtmMHfPG1EboK3tLzYoTeE8HhkcLfqRg1zg49usuD0bqF5t2/bttezyPlidPkblsPP0wUPKHQ7SXIdBUn9xQ08QiLFcHHK5P7Ceq4y2u6OX/G94ISs2RlCH/nwSsqSTMefuLqgfK+VeiBfAiSstTZQ1KJNJMUW8jnbNhiatHK68QTog17VtwjEuXPZuno5ZETJiBGvgHPny/DtevV4tzvBFvEyUXs//j7n/C///Nn/OO//oS//uUnfHjRqOeS8jiYH18+EHE/1KkCP/KsUkEV5XJlcx74RSe/3SRs5r9Z9NGCj26KoLiZDzeBpAkmjYvzUFu6tBF5pbo4+ZuO/vQm2btcRU2RsxBkSvu8skBk2Nxgi9kZRFRpGtJPXOGpFCz8EFP0jCFzZDlfk89vi6NzyL8u7vVsKukLziin09GFy7mRuXKTPAQUujD5SDZCjRiKMaNGwKCLcXQK3XGiYIvDRIujG3RJEsHeu3sHT588weNHj1BYIF/ZIvI//fqr5tHDWSzS1GJYE6NbHV0ZXdOLiYIuTP0xvSjoIm5Ooaujsy3Xkktn6Z8OHxzoLU7eES3F0dswly4Yc7W2FrXXr+NqTQ2uXL0Kv8BAEfxX6CFBa18Jxlq1FucWlOFp0+272wiaDBT2Ho9Rju4Y7+YNJ3FwJ/8wuIdECXfHwp158CiOQE5UMa/YtE2EHyXuXoCbt+9pf4pPNIdgJiJUC0EZuih0FoYoTgrcVx4wBqGxImBucUspnqPjIjhzkC7OUj/Fza1pxBa6e6D8OTf5/Q4+AbB398Cg0WPRc9BgCSp74dv+vTBoSD9s27oOv/36Pf4uwv7nP/6CVy8eYMP6lfjp/WPcunKiib95HOMf9cqdSybo/P458+KNFky5ZXF6Cp+CJ5eznZYZk+taBOK8dUUOcWdWLHVZxEpBP28w5XsGn/xcU3GokYLnwbfm86x6sjBkLet/2ojFK7MrfE+3uXFJ0KkttFrWN12ID68dVRens2s6kYEnEaaKeXFTBOI9ceb2Jbq6BJyWxqy6s2twk9vfRgwbjFEjhmHMSHF0QZfxY0dhwviPjt6ELo4GXV69fIGSyYUaiObnZuHt2zfa5/KriDxWMGXK5Eki7AitilLsuVnpmDV9GlLEya2cniMOvnD+HGXvbBaM5DWd/LslCzF3ZimK2JYrrs4RFWtXrcCcmdMQHhqAHj274Gth9G+Ezz98+ICefXorp3/RsqUef27r6IT2nP7asRMGDR+Bjj17Y7SDE+zcvRCdmokxzh6wF/ce5eQurB6L5NxCEXaCsHgMkvImIyYzD7EZeciZMgN/+6+/IzwlCy5BETqrO0hcmiIvmDEfmSUzRfQJ8BGn9xMU4euUwmni6Gk6IZZOHs++lezJyu2shFLYdG/uECKrsyjECiiDWZegMDh4eGI404H2jujRvy8623RF567t0Klja1mtYNOzkwToqXh4+zL+/Mtr/PLDUzTeOIutq6Zg29p5evI0hx8ppih/8zh149xczJoQV5hNeX3vmhaFeGXe/JVcmUV5o/0p7F9hPp2CZ38Kd/4QV4yjG1EbXHmuwma6sBzPVNTnVNwq8gaW+U1O/KnmxE8pnrDaqbuElNVN3pwnypkUouktV3Fzw4RWQU27LZu2mC+nwDXLwuasSmZXTLblFvd4VtC92Ue+wRSCzrEgJIHnsCEDMWLoIKijjxymQm9i9PEfGZ3oEiVB5YcP7+Hu6qS9LiynL5g3V5DCG3/+82+4fq0WFyor8ObNa8WWdWtW4cXz5zh35jTev3+nu/CnFE3Cjz/8gPPnzuJ7ESpFXCAu/sP3H1B1oUKu32Pblo2YMbVYOPQDrl6+hJ9+/BHrVn0nvzMQvXp1w9fftMa79x8wctRI9BKhc6NCzz59cL7yAjLzJyE5Kxd1DY06sOef//xfnD5fgSvXb+DKtRsq8qIZsyWYe4Ejp+Q/8POX4ubReCO/7/mrN9i8ez/2HCnD//7f/4uNO/ciOb8Ej+UzHsLMdx48wrEz5bj76Il+zj0sDrfuPUT5pSv6mcVrN4mTpynSMEj1jOSDkKpFouDkHK14MgBlXj2U49mEvZ29fWHr4o6x7p6wGTQAXXr3QA+bzujVoz1GD++NUH97RAbYw3Fcfwzt3xl2o/sgwG0YovxHI9RnJBxG90RhTjxu113Gh+d0cx7TKOjy7E4Tf/OYdYqZB/RqilDcnCzOfDmFrRsjLOImtry8y5z4NYMyFL7OVDFdiNY0IbMp1qyKuryW8cvB/Zy6D/SuybawrZapQj4IWgjSe+IMMy/m3uroFLiKvIY7gkxunK/ZemsQZr8GpdbUIQNQilwbtITRb5ZvVFHXnV2HG9bFiudQ+Q87bMggEfpgI3RBlyZHJ6N/IvTkxHg8e/pUHN1Rha4NXSJ0Xy8P/OlPf9KKKBn9119+EUSJwi+//CzBZqI6+tEjh3D08CFUni9XETMYnVk6RYVOnv/l55/FsUsxe8Y0rPpuqTwYp3Cl+hIWzJmJIwcl6LhzW1mdxaYB/W3kAfge9bduoeH2bVy+cgX9hg6Hk28Anr14iRevXsMzJEJeB+HnX35VB+f9hx9+hF9UHN5//wMyiqYgNDEN9bfvoqB0Nl6/ey9uXiSBaLhmWf7y17/BSzg8fXIpnr58BT8JSPleZskMCTwzUbroO8xY/B3q79xDUsEUTJ63RD73Wkv9PuR5cXg2cAXKNwCrouRyOjyLSa4BwXD19cN4EbdLQCj6jxiOjhIcd+veQQemjh3RG5nJwdi1eRkunt6HCyd2YtfaWchP8objGBuM6N8Bowd2xEi5jhrYCfmZUbhx5TxeP7qlqcN3j2+JQJk9saYKb+vVlPMNtlgzLHwITKalQXFFxa3CN6JnCpHVTsPk1VrlZOaEQaa6OTsPLSlCcre1APS4jlvbTqq7q5Mz0OTS8v5JSz9LmWZTmGkxWRYWfIyQGy8SR4go5mjEWxd4XCJThLtE0CJqi7A1N6695NvFwc0BXXVnN+I6G7VOr9EMS7PBA8UhmoT+iaOPsji6BV8o9LDgQHx4/74JXcjoc2bN0IzLryJodi8yGP3jH39Skf/5t99MMBoahFUrlqPi/DncaqjXpqikuGhkCZP/7W9/lWA0EetWr8StenGad2+xYtliXKsR53jzSt/jOn3imGkDEKFnpCbo3zdIHszR9k4Y6+iKvsKwA4Vlz1VexPWbDbB19xWnTMBPP/8CO08/Xbfu3kdWcSn+8+9/x/mqyyivqsZZ+Xxm0TS8fvsOYUnpcBROD0lMV0FrQShnEp68eAVPYeacabNQWX0Fz1+/wfIN27Bu+268kwfnyo0GXL5Rj+PnKjS9qOV+HjzF/ZQJDEozEZyQBkdvP8ESL0yUxf2fveW/eaduHdG9W1v06tkWY8S50xICsW39IlytOK7Hpz+5XYMXd6/rwblVJ7Zh9ZwMxAWOh6ttHziN7Y0I/wnYsnY+7tRVCbIwJchCz8cA84fnFLhxb4re+h5Frm7elGWxpgqZUTEVUKYXtYzP7IqltM97il3FrcGlYW/2qzxiHvy68LeFwdlDztdMH1LgyuXsX7GK/FoZ7orIeRTiPT0K8aAKmofacvGocr7Ha6MEnjwP9NbF3SJ4cXHtQtxt+lW4qiQoFXen8JlWrBORM7tSx8Bz0IC+GDywH4YM6o9hg4kunzD6qOESjBpHN8UiW7x48Ry52ZkSjDogKyMNr1+9UnShe2t60dcTf/zpJ+XyVy9eYEpxoQajl6ursHXzRhw6uA8ny45pLp2Off/eXSycN0ff48aLLRvXoaG+Dgf27UbDzTotGM2YOhnfLV2IYmF17XURof/1P/4CPx9XdOvRBWMcnDHU1h6xScmobxRnr72GWYuW6Qlof/3b3zDRyx8+EbH4y3/8FUGxyYIWL5A/bSac/ELVxd2Eu1+/fY9oYW8GoP4xSfLn/hMeYRIoF05VtEnILULF5avK5nTzh0+fY8aSlXjx+p12JcZkF2LG0lXq5BQ1P8csjJ+wPw+IZX/JGEcXDBk3Ht369EJ3my7o1rUt+vRoq84dF+GBTWsW4FL5ERFstW6gfnGPG6hFiI8596URz+/UapB5sWwrjmxfjANbFuHc0S24c6NSzyN9/5SH7nIuzH1NJdK9OYlXzyils4uj86zS1w/qtNhDXDFObkr9FPbLu8yosHfFcPqn64W6OVHECJ5MbgLMchXvk5ssBFly4nxPRM9U4r80aSmb856IUqbiJ5uT19nHwu1tFC87EK2Cv3eVxSHTYkvB377EA3CN2Nlq28CcuQhbcUXWjTNrUVu2EjXHluPqsWVoNrDftzBCN44+nI7OYPRfHN2CLrZj9WS3xsZbuCfivCsIkZaSBO4uun2rQfGFKUa6NbsV87Iz8PjRQzx5/AiXLl7QHHpCTCRuXL+GZ08e68+YTWFVtE7ee/H8KV7KQ7R4wVzkZ6fheu1VeYheSLD7HGtWLvvYvSiL7718/kz+GRpRW1uDoqmluHrtOnyDQuAdEChMfksEnYh//Pf/oObGTbx68xarN20VYYcga/I03Hv0GLfvPUDV1Vp4h8eipq4e4ckZmjdnzvyafBvwveSCYlTX3tDU4qmKKmXvh8+eY+n6rZpL339cvoIFkR7Jg7N0w1Z1bz+ytpcPnN09MNHdiLv/iBHoYtNNkaRn97YY0KcjnOyGIDc9Ejs2CpacPYz6mgrcr7+qAn96pw7PReQvJKB8/ZD40ai58Bf36/BMxP60sQZPGq/g2V3hZXHj94oizJowbcjMicmPU9jElXc8iFcrmewRp4BrLeKnm1P0xr0pcmZXnt9mYxbFXavtts9vG4HznmJ/fku+ZW5WNLXTqrBlUewUsoqegWW9KQCx21B7yC07gyhyc39Cf3afXYkcNnTlkLj0XkuqcIdpta2gmJk12WaELYImrtRXbNN7frZOxH7zPD+zWUV+XZZhcgk8+33bG/379sFAiegHDegnQh9o0EWzLkPV0ceNHqmObm0BYGXUZF1M9yJ7XTwsO4wocr9PmrpMC4CpjBJdzBSAIMRGmKYudi8mxrIfPRopTU1dibr5gtVR7XWxpBh144WmFyl0tukWolDec3e1R9cu7dGnf3+MdXLD8HETMHK0fPu4uiuujHP1FiYPhot/CBzlOtHTHw4+gcLcsSLIBL0ypcgsi2cY30uUa4yW+Z2E0V04xk6CU28JJFkg8mZ+XBidBSL/2FR1baYi/aPj4EjXFmGPmGCHvkOHofu3fdCxawd06dJGgsm2GDawGwI87TCzJBP7tq9B5amDuHbprM594cbpB/U1llEYN0ToXGbuC6d4Uezkbrr2W8ESzYtLoPnTaw4hfaK5cbq4Cp2ZFRW8OU6dwjfObmmvlUD0PZlcC0As+Ig7K5pcVaEbMRuxs+322S1Z7DaU9bRe3JtpRLJ5w0Vz38A+8ko8EES5d1X4WquZZcLbFPZJeS0i1weAefTT8jm+f1wXHVzL+iwMWXbpNxJLZDVc2GkRsLh1JZFkpyzyOXPmxJMtIvatIuYNwuDrxM03y+fF0dmgVbFJnH09mn3b2wafCp2OPkQZ3aDLyOFD/5XRrXn0T3pdXCwNXXT0psqodStdU6+LReisjIrYo6w96bo5+qPQPzZ2fexJZ9FI23SbNl4YR2fBaHpJEYrldUSoPwb064lOXTpisLC5nasnbB2dUXWpGkNF9OPdvPS0Bie/YHiIIN2DIwQl4sW5Q+EVFg0n/1B9n+J2E1FT+A6+IXATcZsjBBM0h05R8+olf5bpR3tPH3Frb9g6uwlz+ws2TUCvgQPRXv452nf8Bl07t8HAbzvDxX6EBJOCaEtm4dj+7agqLxNxlzdtnr59nSKvUaE/bLiGR43XdLjRk9vi6PfrdVwdR0hT6G/Eld8Khrx/xhy4RcxElKemwYqIooui5gSsZ3x9S1trtb1W3PuVttOaFCJdXIUtgn7WWK3iNou94hQ5A87L8pqLrk6xV4m4K/UUPO4GUke/RcFXKLY8tlQ+TWXz/7H3HmBWVGm3/9z/vd/E735zZ8acdcyiIiAqJhQlKAKKSBRBySA555xz7iZ004nUgc4555xzzjk3GV3/d+061RyO4IiKgad3P+9TferUqfjbq9YOtctBAKcHF9Um1AF2Ar8GtYJcPsey77hR0KdHehxRkIe50nPrNuWQqlVRnbKo9jrsouyhzpqaK/vCt0S7MQPsxR8ee+Qh/PvRRxToTwnozxhA7/Sspuidn9dAZ8uoUvRuXaQwaugC8Irm01U33fYnjAT2d7WaF/WU0ft8OFrvvXhV0TkKACFnf3Rd0dUTRlIgHWN4ykh7wmh0+8MX08T+ULlnfj1FqTm7AMybOU09ITRfYJ8ky/R8qzvuu+8O8bwPofNrb+A1gfuZFzrjuZe64AX5/GKPt0TJP8DrvfuLTx+hQO8pas3/e4qa0668Kkrf86NPVH+WPjK/jyxDde8r01ff6ycFx75KqdnV9fnur6HLG2JHXqAdeRB33vMvBfajD92B17o+jc+H9ce6FXNhdXgPnE/bqGdKtaEwtPFewv09ER7A4TA8ECOQx4mSc8wXDnCkRvES2KnoaeLNryp6uBqbkSN5ZSeyy2yUwEsrEqy8dy5rSvgq9Xj6bAE6JtjwfYgUYgNEsQMFVD/1f2acBjjHW1EqLvYkg/Nj+V2AAWZPpeCEm/XhqTIvmTUowU4KdEKuCp0SKWz9VPMIOD25NlWFTfpx9b+9UndCzxZP1q5o/VaslJJHs3MWm/f9jkkG0J775GdGpBcLn2aqJoXqTbtCsAl8uDtB360+h7hQxXch0EHsysMPPoBH5eLoiq5AF9vCoKITdr16sWt7PfqLWq2LUYGU1oWgq9ZR1U3X0Knr/av9XfThLgi66uvC1lHDA9J8ZlSzLuzBqD9hxG4AGuhapy6xLaLm06dMVA1Gqq+LwbZQ0TmYP3syjhj6MV584Qncffc/8eBjj6Lr628q2Dt1645nX+qKTl27ibq/olS429u98KooMeF9o+8AvNJL5vV8X7U+vtzzPbzyznvqd6zB4Z3htZ69VNXfM91eEZ/dWYF9h2znrjv/jgfv+wdefPZhDPrwbSyeOwUHdm4Q1TbDmZNW2ksCXLVhMAI8XbQxGTlUna8bQnzc1EheamxGfw486qvGfYkJ9lH2hYMcaeMyaopOr87RdpWyJxL8UAUwgWcVIj06+4hTodsfjlDPc4apscYJdHo0a238NahV0H8b1JuFSvHgDAKtKTSb7qnSArCod1KIFDLZAYuAU7VVtSFrUQi+K5JCtcIoPxP+eAIdbKhVCaIPPykQ2wnQrFEh0Kw+lP9ZhaiqDVngFOviaynB+RaqsBnuril4OBt/3HQF36sUO5TB/uQSrD4MPL0VvlL4/MNDD9yPRx4S0JWi69blUWgFUgHdoOov3Mi6GOrR263Lmz2Mei8ahrsweTha76ar9XXhE0Z8ZvRjVSPDVlFWL2rPjGr90Wlb9P4ufPBC+fN2yNkPXXtelC2kbERibQy/H/TR+7Lvj+Kuu/6Bu++/D8907oIuAisbiV4SRefnZ6VA+LTA+pT4Zyo/573wSg881/VldJbl+LLYTi93x4v8TuY9+PjjuOv+e/BPWecdd/wPHhCv3enph9D7nZelHPEZNq9dgmOH9movCODgRvaGkXbPcGQABzWClwql6GeUZQnmUBiEXY2ye3UA0tgQH1UQTTAouvLpLJRGiRKLOqercRoJN62IruRU9kgFu6r7NlQT6g1CmnJrYFOtVUZgoZM+3Sj4fQr9t1iVVGVVpEAcJrAL4CkKeg/D85wuSrmZEZKo2uzDYqhWJOB6rYoqeLKgKWpOyLU6cUPVIZ8OoprTk/MpfQmqNoHXlPuQgjuczfhiV8IE7ED7nRI7tDi9QwqaO6WgKfMctf/9WbtychP8T23BHx68/148/KCALoqkWZf/7NFZIFUNRnph1ODR9ZbR74KuPxyteXS9UxefMNLr0Qm7Al23Loa+Lu2Krvq70LrwwQsd9MlXO3WxapHWRcE+A4vmEvgZovzjJRP1R7euz+KB++/AnaK690rG5mCcT3V+CY+LlXnypW544oUueLrLyzJ9CY899zweeupp3PXgQ/jXPQT6DvzjX/8P//rX/+Deu/+urEiXFx/HR33fxNeTRmPjmsU4uHuregqJowNwzHSnE9aG4aTtjIarO2UYrs5eBWFXI+0q0EXJBfAwf21cRnr0mFBtFC+CnhgRpBSdQ0oTdg5EmqpAD1aKnpnAqkFRa+XJtdoUAq+eCDL0TqQ/p6IzM1DNNeA5ZesmvTqrFEMV5FkM1sQoG+OvCqDJYZqKa1NXJHDoCVYbhmnKzYKlVk9O68LGH23KoCdn4ZNenJ6bULOOXKk2n+9UPtxKQR0uBc4wN3MBm/5be5iZKk646c9DaVXO7BWYd6kItGfDD+GWcJJ5hN1+q1iVrQiQ6R8euO8ePCgqZwz64wr0R6QgR+ui1aN3etbQYKSqF7VaF9NuunqnLq2vSw+j3ovGz4waFL29MErQP1JVjsajALAefZQa22WwKpDqHl3vk07Q22tdpnB0Lg10rTA6HQsF9MXzZ2PJgjkqFgjwkyd8odT9lW7PyvHdjwcfuAP33PNP3ElVvvMf+Ncdf8c/BWQq9F0sNIpKP/bI3UqpX+32DPq+9yo+H9pfygETBeyl2Ltjg3oCiUPV2VnytemGB6ZtLQ0j7VoK7NrY6a72x7XBjRyPC+inDOMy6u82okfnGzC0FwOE+rkpNY8O4XB1HITUR1Sd4zP6COhaFWNydBBSY1nNGKz6rWTSsoiaZ8QSTEJKhQ8VsCO0OvO0aFUAJfQcd5zKTICzWLsiyxJ4VctiCELNZWhjaFt0uFMiPFXhlNNksTBJYmESFeCi1sqKaMF5moXR7Ipq3aRqi0WJ9WdBU4tob1YZ0o5ohc0ob3pvKXR6iYobGoUYStlZb84Hm+X/KLaCsq5clD3cw1wrbLI/ucGuqHDldDf+cN89d+F+BbpB0cW6GCv6U2Jb2qsXjUFngxG76ZqCbvTgxVXQ6dG1OnTNulx9wkh78MJ4XJerD0fTp6sBjAy1LlR0+nMFuvGQF6p6URu8SH/CSA1XMW8Wliyci2WMRZzOwXKZLlkwW5aZjCkTv8CYUZ9i2OAP8OmA9zFkUG8M/aSvZK4Bkqk+xbQJn0uGmYJVS+dhy/qV2Ll5LfZu26DGeeEjdnxtuvY2aY7zokF+4hhHBSDkGuhqvBfDCF76K184ACnHfNGHqyPsuqIHejqpUbzozbXRdj3UCwIi/d0RG+wtHp21Lxw/3V+9DYPvNUqO9FPvNiLwrEfPTtKa91VNC1s6UzSfnp3AhiUqviET0JpQ2RNYIPVX8LMOnXCzujBVgeyhoOYwFgQ7JUIAD/cSFXdWkayWYS2Liyp0qv/px9kCqmpY2CjkoDy4ql1RVYm0L8eVkmvQaw9LKH8uhc5Yf3pxAq9BzXlRDDYUebP185DAfUSU/YCyJoGi4gEca0VUm1O/ExvhY7sB3jZrVPzhHrkV30vQ7/0u6I8/9ojy5wRdK4ga+fPnn2v36C+393Uh6Kb16KxefBPvcZQuQq76uhhDzgGMDMNdGBRdPXgxxGi4C0PvRf3BaHbT1Z8XJeQa6BPa+6Rr9ehTDdaFY7PMxOJ5M7Fk/iwsE8BXLJ6PlUsWCLwLsGbZIqxdsQTrVy3DhtXLsWnNCgF6NbZvXCtQr8fubRuxZ/sm7N+5VSzJNvV2ukP7d+LowT2wMN8voO8X0DlE3SED6IdFzY/ilI2FCjWctHhzviCA1oWvZNQ8+kml5krVJfQBSPkOUsIe5K0PLe2qgS4eXb0oQI26a3hZgAAeH8ZaGDYM8fUvUpCM49sxBGI29LAPi7ItBJxQa0DrPjyDqq0Dz8KqwcYoe6KqCn2VH9fVWwt+9lJw6948mQVNNu2zIEr1Vsqu2RU9aGUId6yyK6LgvlrE+Noqq0J/rlkZKwH4qKjzETVlXblWR35QWZRgZxYu9xs8urkCXdWTO+8Wm7JDlqEv3y42ZZv48c3wO7UJf7jrTrll33Un7rvnbijr8oBmXVjjolkXQ/WiAXR6dL35nzUumqJrraJU81f1gmiP7ldti6pxefPaenQOMsoGI4OaE3RlXdptC9V8cPsoAKowOmq4ajDSCqOjVd8XVY+uYKd14Uhdk1S9ud5gRNhpYRYaYF8iFobDV2iQXwV8o8C9ae1KKTiuVMNWKMi3bJBYjz3bNmHfzi04IJAf3L1dgX7kwB4Bfa+C/ZioOUHXFV29TVoNPMqhpI9po+zqI+2esm4fTlqDnT5dU3QWTLUXBWgv3NVB5zuOQv20V79EBLBg6o4oVjmGUNk12BPCfNRLdZMifMSrixqz6T4xXNW4KDsin3OSOdaKEfT04eylmMR680BV2Ew31LZQzQmzKnzqU1Fwvnqdap4k1iUxVFRbLEsia104UpYoOdU7kS2fypOz+tBJvLjYFwW6oXXTAHqM2Bflx0XF+T/VO5o1KbQrYlGo1gp48eYhzvvFihxoDwLvd3wrvG03CdCi5CyIEnI27YtNCXbeqSKIXW3vvIPVXwL63UagGzx6O+hK0R8T0DXbovq5iG3RFd3Yupg+eKGsi/GjdAJ6u6qLon9gaBltL4y2+/NBGCqga9bF8OCFgK4epyPo9OeqVVR78KJ9FID2x+kMA4wScjXkhVgYiUXi1ZcuoG2ZpxR9tSj5uhVLsW6lQckJ+rpV2LpxDbYJ6Ds2rVOw792xRUDfpkA337sTh/fvag+Cfo11EciPWx1RoGse3UIDXQqjrHHRX+RFyN1pXZRHt2+vffHzYDWjs6boHFpa4A5jXbooeaQUSKOCOby0l4Sn8ulxoYTdR1kXQq6a+6P9FdisXsykcicEadN4rfZE1aio5nzNk2t15oHKtrBGRQFNuA2qnRTmgYQQN8QHu0hmchf/LfAGOcpnZ/nfUQULolTwhGAnmWr/x/qfEICPq3mx/vTlJwRgawFRAPaiNTmOODYIBRJ+qrq1CoJOhTeuXYng+Ids1hflZkHT78QWeFqvg7vFarEl6+F3cosoNwubouKnN4uSb5TpRvzhrbv/hbfvvQM977sT79x/N3o9eA/ee+g+9H74fvR55AH0ffRB9Pv3Q/jw8UfQ/8lH8dFTj2Hg049j0LNPYJhAyu63Y0aPwtgxo/Hl2C8w7ssxGP/VWNV5a+L4rzBJFHbKpPGYKio7TVR2+tTJmPH1VMyUmDXja/UAxtzZMzFvziwsmDcbi+bPVQ9ZLFk4H8sWL1SxYtlirJRYtXwJ1qxcjrWrlmPd6pVYv2Y1Nq5fo3otbt6wVnX42rZpPbYLlDu2bsKu7Vuwe8dW7BU4GftFhQ/u3QXz/Xtw6OA+HJY4KnbD4tBBWB42w7EjZrC2OAybY0dx3NoSJ2yO4aStFU4ft4H9CVs4SDiePoEz9lo4O5yEq9NpFe7ODvB0dYKX2xl4uznD18MFfp6u8PdyQ4C3OwJ9PBDo64lgFR4IDfAxhDcigvwQFRKAyBB/CT/ERgQjLjJEIhjxUSFIkEiOi0BqfDTSEhhRSIkLlwhDemIk0hPCkSFTRmaS+O/kKFHtKOSlxSE/Pd4QcSjg43BsGU2PQS77mjPY7zw9FnkyVY/QMQyf2R8mn/1g+JRRZhyK1DRBlolV62BhNo+tqalshZXMkxgg62RHMN4xWFPDKk1mJi1DZSfSDskdIlJsDl+zEu0pmcpT5nnLd/6yLJ8v5SvevSQ85Y7C793krsICr7NkNGYmWp4T4s0N1Y+GwivvBnHse87+6HyaiGOX89UrgTb4Q9xzD+LHRrWoVEfqSL/11AF5R7rt0x+yx36GHxuNPu6m6+tIHek3l/5gOqMjdaTbLXVA3pFu+9QBeUe67VMH5B3ptk8dkHek2z51QN6RbvvUAXlHuu1TB+Qd6bZPHZB3pNs+dUDekW771AF5R7rtUwfkHem2Tx2Qd6TbPv2skF++fBnnz583nX1TqbW11XRWR+pIPyndFOQpKSlYtWoV1q5dC39/f9OvkZaWBjs7O9PZ30kcsL+oqKj98zfffIPY2Fj1/8KFC9vn/xLJeNt6iomJwbfffnvNvI70+003BfnUqVOVUhMAMzMzNY2Pj8exY8cUuMaQ+/r6wtbWVikzQXJ2dsbx48fR1taGDRs2YMmSJe2qzQwzevRo5OTkYMGCBWrZM2fOqPVzea7T29vbeFdQVVUFKysrREdHo6WlRU2ZfHx8UF1djcDAQLVfGRkZan5lZaVangAzeXp64tSpU+3bzs7OVvOzsrLw+eefIygoSK2Die8n4juRuG4egz6f5+LkyZNwc3NTnzvSbzPdFOTBwcGYM2cO3N3dcenSJeTm5mLLli0KqkWLFrVDTiAJEL/fuHGjAoFQEaB9+/ap/wkL4Weqr69Xvyc0X375JQoLC7F161YkJSWpOwch04Fm4u/mzZuntrtu3TqVwVauXIkTJ07A3t4ecXFxan38fsqUKbh48SLmzp2rPvMuxAwyaNAgdTcx3jYTp8xozc3NWLp0KZqamrB69Wo0NDSo3/C3XAePhceWmZkJBwcHlak70m8z3RTkVFZC4Ofnh9mzZyt458+fj127dmHZsmXtkBPQ9evXq/k7d+7E4sWL24FmCg0Nhaura/tnQkiYmXS7Qli53NChQ9V6qP4BAQHqOwKoz+fvCBozRp8+fdR2CPmBAwfUstyX1NRUDBs2TC3PzMA7BuFnYmblPOO0fPlytR6quaOjI1asWKHmjxs3Tk2p5LzbMENynZs3b4aHh4fRGjrSbyndFOQEm2p49uxZZV1oVXbv3q2AoOrqkJ8+fVpddMLLeRYWFkqFa2tr1XdhYWEKYt33EjSqJj+bQs5MVFNTo+wCt83EAu6MGTNw7tw5paicUl2PHj0KFxcXBTk/c71cjvvLKTMo7QunxpDTOhl7cGZY7vuVK1cwZMiQdoA/++wztTyPmRmH+8z94v6Vlpa2/74j/bbSTUHOi0kvTnUmXEy0Jtu3b1dg8XtefEJP60CV41vaCIylpaVSV9oDemiugxZAT/TvXAfvEkzp6ekoLi5WYPN3R44cUTDriWrM9dMWNTY2KpUnqIScBUlmyB07diAqKuqa5ZnJuBwtl564bePCJ3/DTMbEu5BediDw+/fvV/aEicdy8OBBHDp0qKNW6Decbgry30viHYbw/dREq0LV1tP48eONvu1Iv5d0W0LOOwltxU9NvEMYlyV+ahtAR/p10m0JeUfqSMapA/KOdNunDsg70m2fOiDvSLd96oC8I9326SdB/lNrMFh//lPTz7EO48Q69J96XL+lxGNh/5/fSvq5r9cPSTcFORtN2IjCBpi6ujrV4PNTEtdjmthCejOJXQt+zkQgjBuKjBNbQNmF4OdI3A67ItzqxE5qxj0+f+30Q3qp/tzppiBnJykmdohi7z1CzrpjvdcgcykBYYsgWyrZ+skWyIiICHVRuQw/ExYmHXKuiw0vbJXctGlTe89BtqCye6/ew5EtkdwW16snQp6YmKguJNfHPjHsacjWSCcnJ7U8t8194Pq5noSEBNXxioktpewLw31gCyu3p7eMsmMYoeY6Q0JC1HfsC8NuAkwlJSVq/fp3ZWVlqvNZXl6e2jY7oXE7bMnlOtiKyxZdngP2i2GDFevh2U2B83kuuS52Z+Ay3Fdun10HOOX6mSgwPJcMJnZnYAMYu0twnp55uDzPJ6fh4eFqH7if7DjHfeN6mLhf3B474PFc8PyxjYD7zR6WercGtjhzW9wXtnTzGNlVg9eF62bXDnZv4HwvLy91bGzp5r5xHTw3NjY2qrWc2+P+/hLppiDnRdGVnBARcl4UnlietOTkZHWCeIB68ILxpOsni/1YCBOTvh72TORF5/qM7w68OPw9uwYQUmYE9oEx7ifCnoB6EzxPIBPXwROt921hkz1/ywvDk8vv9MT/uW1mFn7Pi8Zl+FsdGF4MNuczE3M9ejI3N1f7xy4KBJXdD5jhCCdhYkbXuz1wHYcPH1bniZaIvRn1LrtMVDjCwHOob4PHw/PJzMYpMw8TAeR2uU/MRNbW1mr73A7n8xzrieeC29PveLwbcx8Jtp50daU4MUPxulFgmPGMlZddF3i+mLnZlYE9L3mu9HXzOunHxwzD68zts/sGueF8bp/CwnPO5X+JdFOQ60quJx4A4eNJ0ztR8QIRQgJNxSXEPOk8IeyzzX7dFy5cUL8n5LxIXA9PIKEwhpzLUmGpHNwO18d5PFF6orLwQrA/DE8wE9fBk8qTS9Xm77g/vCC8cMZ2hPAQJmYeHp9uV6iqhJzzCDePgVO93woTf8dt8Hip7uxfw/UTcgLLuwtB5nweH8+PDgSPVe9VycT93LZtm9oGlyEQhJfrYUYlNDrkBITrZuYm8Dx+3h25j9wOz5Ge9PPJc6avk9dL73ukf6f3N2ImpyoTZB6L8fXgunnn4vp5bqj6PA79evA8c995fZlRuBzviHrm4LFxWZ4fnjdeu18i3RTkvB0ZJ+4sTw4vJGHkwRFmXgSeRJ4o3qKoGiwA8aRxWd2u6GrCk07FY0ahalEFmbhuPqjAdXNdtDFcn7HH5D4QMH6n2xjOI6TcFyobEy8G7wycEjY9GfdM5P7wQtDWUBl5DNwf3oX09XB/9IIcLxT3m7d1/oYZjeeIakw4eKG5Pq6DyxFSvczB88Fj0c8Fj0HPQMzU/I42jXcUZlCeAwqGvl2CyHncpn7c3H9uU7c1TPr2eCz8jsdO+HSrwsTP/I6/Z0bgepkBud/G1pDHomcO3h15LrhPPC7uLzM7weex8nuuS7/GPEdcL9fH/eP2jNd9K9NNQd6RfljiRddV94cm3d92pJ8/dUDekW771AF5R7rtUwfkHem2Tx2Qd6TbPnVA3pFu+9QBeUe67VMH5B3ptk8dkHek2z51QN6RbvvUAXlHuu1TB+Qd6bZPHZB3pNs+dUDekW771AF5R7rtUwfkHem2Tz8Z8m++/Rbn+UT4hQtoPX/+R0fLuXM3jFYJrv/shYu4cPkyLl+Rbcq09dx5NJ+V35+7gLbzF9DcdhblVTUoKa9EXmERahsb5ftzJnFWLad/vmY7RvujtnfxIs5dvKSO7/yly7h46QqufPMN+PctfqnXrch2vv0GVy5fxKWLZyXacPniefVAybffMr69LUM7Pu3/n5p+NOTc+OUrVxQQTQLOT43GtrbvBOe3CrznBbSzEvz/wuUruPzNt+pzs4DZJKA2CbRVdY0oLq9CfnEpsvOLkJ6di1y+SaKlBQ0trTcM0+0xuN4WZjwFvJa5zgnkFyQuf3MZV77V4vyli9cMCHorEkG+dL4VF1sbcOFso/zfgssXzsp2r6ht/9JhCuDPEabbYPCJKU71ceJ/SvrRkHMHdMA12LSp6f/GYQr2jSAntG0C1iUB+tIVucjfaMpN2C7KvCtyYvh9fetZNMiydU0tqKipR2FphUBehpyCYqRl5SIlMxMFpaWoa27+Dtzt0XoV9O+DnJnqwsVrIecd4ex57R1KtyJxvZdFvc+31CnILxHycy1q3nchN/18a0KH0hTUHxum6zeN83JHPXdeu3P92PSjIOfOXZRbOG/xpiB/X5iCbRo64ISK9oAwC+MqLimLQrsg84SpFrEotc2tYkmaUdPQJJDXtcOdmpmDpLRMiQwkpWcgp7AQNWJdvgO4ruatbVpcB/TvQs5MxtAgb2hqVkrDc/JzJq6P6z3f2oTzzbUCuYDe9tuA/FaE6Xb04HPDZ8+dVc/E8vOPST8Kcp585i5TiH9ImIJtCnmL+Gz6/Iu8wLQIAvZFoZxxQYJW5ZIcbL0AXikWpbq+CZW1jSgoKVdgJ6Skq4hPTkNcUqrMS0cqH0guKZHf3Ni6/BDIz7dDblByWa62vkHdUn/sBbhR4vouXZRtN9UL5JqSX/heyC9fZ97PH6Zw/pxhui3GBTm3bQI5efuxtuWmIefOMFe1GkD4MWEKtw44g4U9aiKD6k24aE0Yrbx1qTvIeYG7UeCuFwVvQFlVPfLEpuiQ64BzGp+ShsS0NKTn5IjiN3wH7mtAN7It14XcxJO3yHLVAvlZWfbHXoAbJaXi59rQ1lSnlPxCa71Egwa5ePJvvwP0rYfcFMobhba87IvBV1+N7y5r+rurv9dCQX7+nBrNgNzx+5tNPwpy3kKaqboG32ocpkBfL24EOIOem4ch56PdqnCe8uQG4PmbGrEp5dX1Eg0oqahBXlGpsioEPTE1Q02T07PU//EpKfI5DVX19ddAbVoopZp/r5IbQX75m0tKyatlnRxXhENY/JgLcL3E9XB9ba0t7ZDTl58XyC+ebcal60LOz6bzbhBXrjPvB4YpmNcL1gQlxkTilLUFXB1OwdP1DKLDQ3G2TXun643Wpc8zXoaQnxXIeY7J3Y85xzcNOTfMMUqaZaOmgN8M7DeC/NLlb9oB55TBwicBI2xUcf6mVhU2NRUvLq9WBU7WqtCPp2RkS+QgWaaEPC45BQmpqWJv6q4BXI920A2FUFPImbFuBDkzDsc++bEqc73E9ai7ZUsTWhtrcU4gP6cgFzVXkLfBFGitNsJo3veB/H3f3SBMgVR/JkBeln2+KCBGhwZj8fTJGP5RH3zc+x181OttfNznPSyZPQNebi6oq63+3nUbf6dD3iznmNxx3s2mHw15k2zUFGzTMAX7P0IuSnpB1UUblFyCHtxYyQldY+tZVeCsrG0QJa8TJa9WNSt5haXIyMlXoOuws/BJyBMF8vKamu8Abgq7rubGkOtKzmpEBbkArkHepiDngDq3AvKWZoG8oVZ8eY0CXYf84vnrQW5iV74P5O/YiB8W14OR5Ybi/BwEebvjzHFrWOzfjXmTx2No/9746N230b/nm/hQ4oO3Ga/jQ5m3b8c29bv/tG7GVcibbw/ICRmB0pT8WwW4glxoJ2AEreXsOQVigxQ8axo00MuqalFUVoncwpJ2yDXAaV3SlV2hkpdX/2fIFejXUXO9rvzSlV8W8paGGgX5WaXmrCtvEsh5278O5D8U3h+6nEmYQnjx/Fm4nrLB5qVzsXL2VEwfMxxfDhmAIf16CdyvS7yFfm+/gXde7Y63u7+MN7t1Rc/u3TCo93tYs2QR0pOTr9kXU8AZ7ZA3/84gNwbcFHJaA9au6GrO1k1VfWiwK2ylbJRt1zU2okbsR2U1WzgrBPJyFJSUISuvUKsjb7cqyYhNSlLTkoqKa6Bm/TnDFHQdcoYGOVtANTW/eEWzKlR03a7cUsjra8SXa0p+tqUe59sIeQtMIf/GFPKfUclNVfbbb6+gqa4GjjaHsXzmBCyYOAZTRw3B6AG9VUwZNhDzvxyGCZ/2x6Bebwnk3fBm1y54rXNniRfx1std8V6PVzF2xDA01Ndddzv6vF9dyalwDFO4TcMU8huBTsAIlO7FdUU/Jz6vqaEBVeWlKC/IRWlOOgpS4pAVE4yUEC9EuR9HiJMVQj0dERMZhtSMTIE8S9Q7XVmVmMRExCQkIq+4+DuAqzBVdPHmxpAzfi3Im+urcbax2qDmAnlrIy6cI+S0J1dBpJJfYTuCDvD3QM7lTOf9pzAGkAVLl+PHsGbuFKyaNRnTRw/FjC+GYtey2bDfvRae5pvhfmAdTm1Zgh1zJ2L68IEYKMr+epfO6NbpObz8fCf1/3tv9EBIUICqljXdjv75NwP5fwL9PwFuDLlWT66r+GU01FahpqwINaUFqC7MQWVuJiqy01GUHI2sSH8k+9gjxvEIgq12wOvgKjjuWAR7OcEB3q5IEMBpVQh5dEICMvPyroXbJK5RcxNvfj3I+f0th7yuGm0NBJ2Q1+Ec68tvAPk3hNwAcDvs3wkuw99ev176emGq5Odam3Fwy1psXDAd00Z9ismi3E5H9iHd7wyiTpvD7/BmuO5ajuPrZuHwkinYPXcCZo0ciD6vd0fX555Bl2cZT+PVF1/AiMGfoLyszLCt6yn5hdsDcmO7ois5Aa+pKEGtwF1XXoja4jxU52ejIicD5VmpKEwSyCP8BHJHxLlYIfzEPvgdWgfX3UvhuG0Bjq2dDrPNK9ToqVRxQs5GodqmJgU0p8ZhDLpe02IMOevofy3IW8WytNKbGyA/f/a7dkXz5JplIeCXL12bCa6GKP4Vth7+cMgZxpDnpidh9+rFmPPlcIz66H1sWzIbxUkRiHexFaFZhzPbF+HE2hmwXD4ZZgvHY++ccVg7aSRG9n0H3Ts9ixeefFLiCbz0zNN4S7z6scNHUFVZ2b5PpkrOxqDfNOSmgN8QchYm2yH/FnXVFagryUd9WSHqBfI6gV2BLmpekStKnhaPvLgwZIb5INHHAVGORxFsvQueZuvgvHc5Tm6ZhwNLJmD0oD44ZGaGqNg4JKdnoFpsD6FmM78eNwLduACqFz4vXtYAvyx2gOUDVkveSsibaqvRLHczzZvXaZal7XqQE1wCzKBa8zOXMYVZ/+67IF83THo6Xr50EactzbF27lSM/fgDjOrfC3Z7N6EwNhjhJ83gtkfO/cZZsF0zHYeXTcHycZ9hrqj4vFGDMHfEQLzZ+Tl0evwxiX/j+Scex0ui6BPHjoGb6xnD/v7OIDeF+3qQG1cf6nblnNyeirJTBfI8NJQXobGyFA2VJQJ6IWqK81GVn4XSrBQUpsQgI8Ifcd4OcDuyE3uXfo0VE4dh9bRR2Ld0Cuy2LsT80QPQ9dmnsGfXTsQnJaOithbVRoCbwn4jNb8Kuda0zwIx+67casgbBXANclH0plq0CeTn2po1IL69FvKroav1dy2LUvnL7Ibw3e++L3TIWxrqlVVZNOkLjPjwPQzt8xZO7d+CGE8HWG5aCvNl02C7diYsVkzDglEDMHNofyz8/BMsG/spNkweiQGvd8Uzjz2MZx59RKaP4MWnn8SbL78MK4vDaG7SXvOuIDccG+3KbQc5/6+sqkBBeiLqSwrQUFEsUSJqXiRKnq8puRQ8SzKSkBMfBv9TR7F+5nh8+WFPzBraD5unf45d877CqolDcHiNnGzxhW93fgavvvQiTtpao6ikGJU1NcpmUNX1uBHouprzeOjLtf7sV1Sj1S8BeUNNpah5pdiWKtUwRDWnJzaFVAdctyPa/wKMCaw3Azl/y5ZVHfAL59rgYHMUy2ZMUF58wDs90P+NbjBfswAnd63FuuljsWzcMBxYOBEHF4zH4s8HyXV5F4Pf6o5x/d7C5inDMfaDt9Hp348qwJ96lLA/JoXRTli+aAFqa2u+sw+/e8jbATfy5IQrMTkeGYkxKMhMRW5aEnJTEpAeE4a8pBiUi8IXp8YhLz4csd6OAvVofD2wp/i+0VKanwf7bfPhuHUeTm2aheMbZ8NBbp+zR32EJx+4F5OH9EfQsV1IDXRDeXXV9UH/Hsh5nBdoVwyQs8dkpdwZbjXkjQJ5k0DOOvPWRrEsrU2a/zaCgepNeHUV1+J6INOvsyHmet+ZxlX7wKgQ0WG9+LYVCzF6YF8pSHbDu906wWzNXBzbsBjThn6EiQPfx8apI2G3dg5Wjf0Esz7ti9mf9sGu6V/AaulUTP+kD158/BE88dADePzBB5Siv96tC7764nOUFBe3b9u4P7mCvPlXgJzNrDeC3BTq6wF+I8hr5WAcnU7Dzd4OzsctYbF7C3atmCdqPQ4221YhKypICp1RyosH2ezF4fljYDZrFHbNFtiHfYjhvV/HzM/6wGzBWJzaOBNOe5Zhl6jK+91ewBqxLh4rJyJawC8tLVIqTNCNYdfV/Gp14rW+nPX1l4wgp/25lZDXS9mksabCCPJ6tLVcD3LCe1H1ebksgGvA6yDT4+o+V/b/eyDXf6ODbfz0UW1VGXasXY55E7/A8A97odcrnfF2l07Ys3wOgk+YY8PXY7BW7KLb/g2IPGGGw3Le9878AscWT4KtxKE5XwrwfdHliUfx7/vvx78fuB/PPvYYenR5Ce/0eA3pqant+6Dtx7e/LuT/SclN4f6PkNOu8OVYjQ3Yt28nTliYoTA1Ackh3vC03I1Tm5fAdfcqpAS4ojIvExnBHnDaMBdbP/8AW776BEumjsMHb72OXi91wkc9umDOkPcF8llw27cCdpvnYcEXQ7BsaB+cWTERcVJALasoV4Cagn4jy8J953HxUTg+zMFH4bjPFWJ9biXkdVXlouYVSs1pWVoa6gTyxutDftkAufyWaq019ZtCLvt/kd1WTWtfvlV161r14tV5V2H/FjnpKTi6Zyumjx2GT3u/jXe7d8brnZ/F+jlTUBnrhxDLHXDZvgwp7naIPGWOY6Lcm8Z9it1TR+DI7LHYO2UY5g3pi64C+eMPPCCgP4CnHn4YLz71JAb06Q1XJ6d2wI2VvPWsCM1tATmV3AC5g7MDvF3sEeXjii3LF2DaWCmwiGrsnTseCV4OaBQVLowIguvGxTg2byLM5k/GodWLsH7SWFHrT7B94kjYr5+HwIObEHJgMwIObJGC0HzM7fcaDk8dgiQ/J9WPRYf8eqDrNS3GdebXQn5ZzS+rrr6lkFM966vLNctST8hr0drccB1IryiFJuiXqOgKcqNalPZC6mUB58aQM5MowAzLG0OeKbZxrpzjGV+OxJA+PfHuKy+hxwvPiR38BNG2e+GyZZGo9wSxKvNwdNnXWD16EJaP6I/Fn/XDUokdEz7F/KEfovO/H8FjhPyBB1WwpuXFp57A0gULFNQqoxoyGz05If/dKLkx4DeCvF5K2LFhAfBzOQXzzatxdP8ubF25BNM/6g3nfbtRFhmH5pQ8NAYnoMLJF6Un3VBs74kc69PIPXYa2ZYnkGd5EsW2jii0knnm1sixsEP0gQPY/eUA7P+yP2J8HAVODXJT0HXbYqrmOuR8sJmA83lP7m9pVdUthbxGh9xgWZrra9DSVG+iuKaQX1AgX75OVSHhvnDh3A2+493gKmAKcobBtsSEBWLf5rWYM2EMPnn/LYG8C9546QV82KMr7NbNhfWyKdj59ediIadg87jhWD9mKFZIBhjT6zVM6P0atgnk0z9+H8+Kej8qKv6YWJanHn4ITz/yCF57qTMWz5uHC+d5DLRUOuS6kjf9tiA3hftGoF8P8rq6WuR52iNbCpqFKYlI8vVFkpsXin3C0BCVgeaEfDTH56LeVwqhJz1Qecob1fa+qDzujorj8vmEF0qtzqDM1gVFFqeQf9gOuYdskGt5HHbiD08s/Qrm6xciNSOjXc2vB7qxNze2LOrpfbkI7KzF72415LViV+oE8nplWapEzcUeSeFTA1oDUofzosBLuBkXzvMhA6q5scc1QG74zhRyzeoY7gR8YNzQeqogl2lyfAycbC0x5fMhqmal1ytdxa68gLe6dsa8zz/B0cVTMOeT97F12ldw2r4W9ltXYc/sSVg2YgDWfDEQG778BANe7YwnpMD5yH334cF77sGTDz2M5//9bwwdMEDZFULOtgjuA0dGOG9Q8t+cXTEF+3qAXxd0uf3Xy8HU5GWjOTsfbelFaBWgW2Jz0SzRFF+ApsRCNEVmoMrBF+XH3VBxwhOVJ70kPBXk5XbuKLd1F8hdUWzliAKLk8gTyItkGrhjI05tX4yBPV/Dvj27UVRecQ3oxh7dVM11y9ImynIN5JW31q7UCOS1AnmdQM4uDk111QJ6rfLVVGM9CAXhpUoTdj5VpNkSQwuoUWY4LwU5TemvFj75Hbd5kXeBdsippldBr6muQnhQAJZMn4jBouTvv9Ydr774PLo++zTe7vwcts36CkeXTIHTlmWwmDcF+6eOwY7xw7F1whCs/+pjTBv4rliVh8SP34+H770XDwjknD7zyMN49flO2LxmjezbOfX88KWLWu3Q+Quakv/qdsXUqtwI9O8F3EjNm+sa0ZZdhraUIrTE5aE5RuxJTL6CvCVBQA9LFeV2Q5m1sxY2LgK2q4Qbym1cZZ6LUvMiy9Oi5LbIPXgMhUePI27/fswcORB3/b+/o1/PNxEVF4eSiirVBdfYo5t6c62WRVNzU8j5+1sHuWT4ynKJMgV6fU2lqm2hfWGdNdX40qXz2lQUj2Ar0CXOnW2V63ROrcdU8c+dlUxw4byqJbqq8AbIZT18AkfPPO1KLnFWYCspyMeaeTMwdnB/9Oz2Il59oRNefPIJPP/4Y+gln7fP+QrOIiR2K76G2ewx2D/zc+yeNgxLhvfDJz06o/Pjj6ialQfvvhv333UXHhbQqeyvdHoO40aNRJucZ0J+wZBBuZ8tba23j13R1bylsg5tacVoFdVuiROoBfLm2Hy0KMjFrkSka5Afc0SppQNKLE4b4hRKjoofl2mxKHfhIVvkmVlJWKNA/g/ZvAuPysn903/9Fx65605s2bQe+SWlKKuq/o51+Q7kBsvCBiECriBvbkFxeeUthbxaAFeQM0TVa8pLUFVaoGxLS1ODirbmRvUUUVtrs4L73LlWnG1rVlMtI+gWhIp/Cc1t5xCVno+4nGI0nbug1fsLVOdUD8ezKnMoNb10ta5db1Sqku2vWzgbQ/u+i54vd0b3558VwNlET8vxEVZMH4+t4stPr58D25Vf4+iiCdg4fjCmD+yJz3q+gq7PPImnHnlUCp4P4pF778N7b/XE0oWL8NXIEThtZycZTNvXixfO4opkuHMCd+vvFfLG74O8tAZnUwXypEINbAIel4/WBC1aorLEmojnFnCLxHMXHTmuxSE7FB85IbAL6PK5QAqdBDzfnGGDxD3m6Pb4k/jT//kj7vzv/8ZHfd5DsnjzYqXmtQL6dyHXLYsp5Oys9UtAXlVRhuqKUgU7Ia8uL0ZlSYFWf26wLs0N9eLT61WtC+E+29aiqhn5v/LooswXDfBckPVGZ+Rhg/UZLNxzDHusTsl2GpER5oGw0+aIcLVTfYV4Z+A+XDIUQgk5gS/Kz8WedSsx4oNe+PCt10TJn8MLAniPl17EO6++ihEf9sacIX2wZcpQ7J05CpsnDsbyUX0xa/D7mD9xHD547310fuZZvNn9NbzSuQucHM+gsbEJhXKHOH+WI4TJvrbInTXBG/Xp3oi03YbqzHjUyR3tdwH599qVVkOw/0pxtbIqbcmFAnUB2gT0VoG8jf9LtArk5TZOotonFNyFAnKhQEywi0XJiwR0fs4Xm5InkXvQSlmWoI3b8cS99yvI7/jb39TFCQwOFm9eKWpe025bdMvy24C8REGu1FwVQitU1NdUCeS1aGqoE8gZAnmTKDqVTxRd/S+gX5DrQfvBqjlCztEQDrn5Y8YuS3yxbAvW7NqPKM+T8DqwCqc3zYbliik4c3AT6iuKVc2GruYsBNLqNNTzYYljmPb5CCycMhFvvvSCsirdxbb07fkOJo8cigWjPsLmyZ9h9/Th2DLxE6we8xGWTRgNC7OjWDR/KXp0eRkfvt8X7/fsBfODh1FaVqG2Rat0sakMJQH7EL1zKKK2DkTCns+RbDEHBbE+vw/ITUE3Blx1iDI06zeXaJCfJeii5mcV6ITcAHpMNqpPe2pQi5LTlhBsAk4lLxIfni82JfeAJXIE7myzY8gys8SOcZPwf//8V/xRIP/HX/+Kx++/B/YO9iiUk8wCpALdYFuMC5/XsyuEnPDzsbtbA/kFA+SaitdUswBKuKvRUFeDxvo6NDY0qk5NVGJGs1gXhvq/UcDnk/5iPS5cIOga7HwAxTE4Fgv222LSur04fGg/go5thv3GmXDduRA2q6dix5yxKMxMVsuznlovvDJoJ0qKiuHt7ILRnwzAG507ocvTT6LTvx/D8MFDMOOrMVg4agC2ipLv/noYtk0ZgpXjhsDG/DBOnXCWAv9hTJ8yG3NmLMCyxauwbcsu2NmdQnx8Mlpqy1Hktx+h6/oidPmbiF7zthab+qEi0d0A+WWeIdNT9r3plkB+I9CvC3jbtYDXyK0rLSEB2d5haEnMx9kkDfCz8Uagx+WgzjUYJVKwLDostsTMpt26UMGVF6eCHziGHHMrZB2yxoklK/D0/Q8K4P+llPzvf/mb8uVW1lbtkCvQDfXnpjUsN4K8sLT8FkF+1ZNXVzEqBPIq1NfWoL5eCqH1hXKbL0FTU5UsJ2CLJ9fgrkdLY4NS9iYB/Zycdw10DXYqOo8lJjMfEWk5CPNyhOuOBTi2dBwsJU5umA6zZZPg6WCHNrmOzBTs268VWq+gsqIaqSkZ8HX3Ug8pv93lBbzy3FPqaZ9Fcxdi+vhxmPVZX2VTdkz5DBsnDMa+tcvhdsYTjg6esLVxwJFDNjgoAnTwgAWOWdji9EknuDp7IMbNAhHbhyBo0auIXvsO4rb0Q/T6txGzoSdKo0/9tpT8h4BuquIEnAMGRUdHYfbEMfhy0EC47DuMuqgMDW496Mujs9HgGYHKEx6qoFlkbqssS4GodyGDXpyAH7RE9hEbhO3Yj9eeeQ7/+//73/izAP7XP/5ZIP8rHrubkB9DQVn5NZBTzX8Q5E23HvIq8aLVLHBWVaK6uhTllclITLODb8g6+IduQETcPuQX+6OxqVSgblCPCTYR8AYqfa0alIegMzTrcl5sTItkkEZ1HQsSwuCycxGOLvkK5gvHwnL5BGxbOBHLN23BMZ9whGdIIffcRVU4pZ8vKixFZEQswoMisGjGDAzt9z7e7d4FU8dPgp3VCcyZPBkTP3wbm8Z/jI3jBmL9tC/g4eQMD7FIZ5y8cPqUC06edMaJ446wP+0CJ3sXyQAe8HH1RLj1OkSu7Y3IFT0QvbEPUo5MQPTm9wX411EcYff7hVy1chJwuTix8QmY+uVoDHy/p9wK+6Pfay9j4VeTkesZjtaYXFFwqngeWkLT0OgXj3q3EPHmZ5SKK8hFvenD80UlckUlcsSmZByywuLPhuO//vf/wf+R+Mt//Ql/E8j/+09/xjMP348zLs7XhVwvfJpCro3iZQx52S2C/GI75FUscArgmbkeOO3+NfYf+xib9/fCjkO9sd2sD3YeHITIuCMCdaV6MLhRAV6HhoYatJ1tU6AzdEVvaWmWO4Gm8s2yXl/LrbBeMRGHFwnkKyZg9fwpGDJnJYatO4TPluzAkTO+uMiuxc2tKMgvQVBAGFwdPWC2+yDsjlpg/87diI9JRoBvKBZPn4YpH72NDeMHYZP4ctv9u2V+CDzdA+Hm5quFq58A7yHq7QkPFy94ufsi0MMLYRYrELuxH2JWv4GodaLkOz5GxNo3ELHiFQX5jx3489eFnI0/LdpDxaVV1di1YysG930XEz8fKtNeeOL++3H/P/6JEb37IcnBx1DozEZreCZaIzLRKGpeddpLlNxGVNxaqThBz9tvoSCnFw/dsgXd/v0Q/tf/+l8K8j//8U/465/+gr8J5D06P4/QyCiBvELVd9OT63blNwV5ZRGy8z3g4jsbR+0/wOKN3TF+Vies2t5TFPcNTJrdCeZWk1DfUCpwV6vCYUN9rYq2tlYJuQNxIFVVPXheQV5bW63AZ5VhTpQv7NZMw+EFX8B69WQsXTgNny7ahD4LdmLgol2wEpE5e/4iKitrkZdbDH/fYDiedIGfTwiKi8tRWFCKoqJKRITFY93C+VgwrK8UOD/F3qUzEeIbiAD/MPhKBvDzC5VpCFxdCLqvgtvH0w++3oEI9vZDhO1WJO0eivBlryJiWXc1DVnSDcHLe6A0xvH3CbkOOEHiEMtrly/CuGEDMfyjvugqhZmnHnwALz3xOB67914smjxD1ZG3RGaJXcmVyEGTbwxqzwSg+JCdwK0Brqn4UbEqFkiXkrvNokno8dRD+P8E8j//UazKn/+Cv/zxL6oAOmTgh0jOyFSQFxkgZw3L90J+XnvWU4ecw2DcGsgvyXqbUFleipKSFJx0noh9x96FhWNvzFvTGQvX98BOCyngiZov2/wGth38DBU18YhPOYPsvFDU1OQLyKWG+vMWNcxaa5um6grymiqZ36ZaGKvyUmG3fgaOLBoDmzVTsGH5bEzauA+Dlu3DtJ22yCqtFe+vqXhOdqGC1um0O5KTs5BXWIai0irkF5QjXCA3274d2+ZOhuWGpfBxdEBERDyCg6MQFhaLkJBoBAREwMnJE96eAQruAL8QuTOEIsgnEIF2BxFr/jVitw5E+PLXEbHyDbEv7yJ2+2AURjprg37+3iC/WthsRG5hETasWIQRA/qi1yvd0Of1V9Gz20t47P4H8OD9D8HS+jiacsrQEpuDNrEutC/NgUmodQkWyG1RIHArFT+oQZ4tkAdvWYODs4dhTJ/XcM+//oX/+etfBfI/S/wV//qfv2POrBnILChUkLOu3BjyG3nyXxbyZpSVFgnkqQL5VGw+8Aa27H8dK0TJdx7pjWmLO2PI2Ecxb/Ur8l0/WDtOw5Z9gxEcZQ5H900IizyO5pYGAbzFoOZtOCf2hZ9rqiuVN6eFqS3KwsnNc2CzcgKsVk6C9Y5V6mUGnjFpSMovU2/0oFqnp+ciIz0fgf4ROGPvgcjIJKTK58LiSmTnliImNg1upxyREBiISF8/JMQly7wUBAZFi4qHw1+Ciu7jHSTrCFW2JzQ4EqEhEQgJCkeIuzN8D67GyfmD4LK4P5wXfwC7KW9i55DOiHE/8csr+fc9NPFDIFegGwqdhCg1MwOLZ3+NQb3eRL+3eqiO9M8//SyelgLjyDHjkFtSgcKMXNREpagGobZY8eZhaQJ5oKpRIeT5BsBpVaJ2bIGVKJPZvOFY+tVg9Hy9hyj4n/FHsSv//Ze/4aF77sHC+XOQkVdgUoV4/f4rxpBftSsttwRyPsitQ15RUSqWIB3eXtuxb8tAHN3yLg5vENg3voFVW3pi+LinMWrisxgx4RlMnN0DKzZ9iukL+mD24ndx4NA08eWs4my6JlhArRYb1FDHasZGlGYlw23PCthv/BqHl3wJp8M7UFpUiFK5u5aVl8kdoU4KnGWIi01FSkqueOxwsRr+Splz80qRX1iOPFHytNQ8OFifRJiXLzKSM5CUlImExEy4uIkf9whEeHgcAgXs8LBoiRhEhMcgOipeRVRkHEIlYzgf3IKDc0ZjZu+X8EXXRzD1DbFlQ3sj1k+vQvwVIb9Z0I0LngSJw7k5ODrCUgoyltZ2sD11Bnb2rpg6eyG27z+MGin0pCWnIsBiH+rj0tEan4fmyEyUnXRD4SEb8eGE+yjyzC0RsnktbBaPxeF5w7Bv5qfYPHciJowbjz+JD/+nePznxArdK8r+rhRsXdxdxCqVf6cPy40ag4whZ2NQYcnPX7vyDa7aldLCPFQVJKE+xQ2VvltReGI80o4ORqjVKMya8RImz+2OsdPewLQFg/D1/BEYMfoDfDr0DXz+VVds2jwKyUlBSE6MkIhCakIM0hJjkJ2eLBDnIz9bIIyJRoS3F05tXgRbUfGdM0fC7uAuhAUGICokRL6PQVFBidxRKpGSnIlEgTZAlDzAT1RYIC8uqRYllzuhWJbc7BI4WB1HuH8IsrIKkJqai9S0XISGJwjg8YiJSURYaDRiY5IQE52gwI6LT0GcKL6/+PVTNqdx+sB2HFv5NczmjoHF/K9gNuMLbJs6CtH+Xr++kt8IcmPQr61Z0V6FUi9qXtPYIuopF7S6QaxDDbJEFTLkNhmZlIUZ85fAwc1bfndeVKMIlstmIsHNFhVRMagJSUSZvRQ8reyRa34MGfsPwmv9IlgsGIUjC0fCfPYQbP7yA+xbuwzr1m/EP/91Bx55+CEsX7kMI4cPwcN33YlhAz9AdFy8ZldMrMr1utteA7nMvxVViLqSn5VCZJq3DaqDzdHotxlNgdtQ47YIlQ6TkXFqBsaN6oFlG6Ziwoxh+OyLD9C3fw+81uMZvN3zKUya3gvrt47GHrMF2LF7HvYfXI4Tx/cgPMgN6QlRKMzNQk56qkAs6irnd//CKdgtgFtuXglPFw8E+vojIigAsRGRqCirQnFRuWSYTIksBAVGK8sSH5cmal+DEskA5RU14tcLYGN2FOmSGTIyC5GRXYx0mcbL76jqEeGxSIhPlf8zpJAai8iIOLkzZCobY2vtiNN2znA9Zg6rNbPENk0X+/S1qPpX2LtkJgoyUn8dJVcD4/8A0An41c8X0Cger67lLGqkMFNVT8DltlzThLTsIkTEpCJaTmR2UQU8AiOwYNlqgb5EQV5YUgWzxbPhsn0BkvxOq0fg0l2dkGB9BBHm2+G6ZT6Or5oI6+XjBPJRODBjCJZ99i6szQ5g245dePKppzF61AgsXrIA1nY26PdeTzx+3z3YunEtcotLZB++pxfiLwi57snPScEx8uhiKWCvR5PHUjQHbEKD/F/vvQ4htmtgabEHX0wcjt79X8EHA18RwJ/E88/eh959nsPUOf2wcN0wLN04GvOWj5A74ieYNHUgNov3TogORm5WBjLT0hAtoHk7eWDrrAnYOW+SqHCgUlVfb3+EBgTI3TMF1VX1KBBPzoJmclI2QoJjRMkjFKxlZWLzykUcKmtF6TPgccYDOTklyGKIT0/NKEBaRr5YnWQkJaYhMzNP7Emi2JZwxMenia9PxHE7F5xx9IazowfcrQ7hxObFOLBwAnbM/BzrJw+Hs5U5CvNypJD8K0DOcUi0Vxt+P+Tn2DHoyjcKjKazFxTghLu0sgFVdS0SzcjMKYKfqENsQobYh1oUyXcn5ISt3bgdFXWNaBTIy6rqYLNtI45MH4YIpyNIDnRCrLsNQux2I+jYVvhbbIK3+Ro4bJ0tiv8VzOeNwrKRH8LdzQPbtu9Cp+dfwNq1a3FULNFpRyes37AG3bu8iE8+eB+JaanXVfHvg5zzbiXkVPJMVzM0CdT1rovQ7LMOtR7r4b51KuyO7MDwzz9Gjzeew6uvPY458wajX8+n8crT92Dk4G5Kyb+Y9hbGze6LMVP74svJ/fH5l30xbtJAnD51RABPRnpKCqLEF/t5BuCMtRUCPb3FQhDACHi6+yDYPwC5OXmormlAfn4JEhPSJTIRJAXJAFHf9LQcUfA6lFfWqerFKMkwQSJMLITmFpSJkhciJ09+l5ghBdYc5OYWIVWUm4BzOaq7yxk/ONh7wt3VXzKIJzyOHYTthvnYOWcstkwfiU2zx8PZzgoFudkGyNmsf3PpZ4D8WjU3hpujYfGZSI4v3nqBY4tfQrkAXdXQItBeQFkl3xJRj2wpvISFxSNIFCKvSGxDTTMKyuuw95Aldu05qDIFX4RVVdsIdztb7BndF34CdJz3ScR42CD89EEJM8S4WSPK5Rjc9q6AzdqpsFg2HnsWT5eMk4ZNW7aj28vdsWffARyztoWjqzs8/YJE0U9g9arlatRbY8B/COSNrYS84ueH/BsD5HXVcF69ACk75yFj79fwXzUUWwe9iBkDXsegj3ripecfRqen7kL/np2wfHI/7Bz+Ps5MGwGLiQMx9oMXMXz0q/h88jsYPPp1DP/yPYwa1xfDv+iFBYvHIS4mVDx6vChzsliGbFHpbPHHmQgNjYOvTwg8PfxU9V5BfrHy15ERCaLwEXKdEuHvHwU/n1A1v6y8FuWi9BUiQH6+YYiV8lJ2ntjNrCIUFFYgTTx5dk4h8mQ9mZn5CBdP7ucbItYlTgqfiThh6wI3F3/4eAUhPDAU+1bOw94F47FZjmPthCHYtmgm7G2tkZ+Tpbj7RasQbwS5MegciIcvuCKgLecvSiHznMBbi1KxJs3nLgpQraLgJYiNT5fcHYUYmRaX1SnIs4oqsWbDVhw+bK0yBbdTU9+MMD9/mI0fANdtcxHpdBSRzkcRbm+OWM8TSI/0Q6KfEzwOroX9tnk4vn4mnMXjZeQWYvHS5ej5zruwsj0OB2dXuHr7wc0nEL4hUQiLSUByVo7y5Bxdi3AbA/6LQ64reU0ldn01Ehaf9MHy5x/Ewtcexo6BT2PlwCfRr+ud+LT/y1i5eAysxHOvmdgTC3r+Gzaf9YT/FwOw5q1OGDW4KwZ81g2fjXkLfQd1Rf/Br+GTEW9KobQfnM5YITlOCp2hIUhKTpfCXzoio5IRGBhpsCvB8HALkIJirLo2bi4BcgfwgJ9fJHx8wuX7EOSJOLGOvFLKUqVSlvLwDEVEtFiQ6HQpjFYhW+xnnih5fl6x/F8gBc9k1YDk7xuqbMrpU+6wsXKEl0cgvDyDkJ6YiiVfjcC68YOxcsxHmP7Je1g5azqOWxxFXlbmr+PJ1RsYrgM6AecTNGoAfVmeVoPKXSGQ5klpnFaEHptvbUtJz0NERBKCQ2KRIv6tSBS8VCBPlhO0dPka2Nk5CXwNsr5LqBaLEx0RA8t5Y+G0bhrCTuwV23IYkWeOIjnYDXlJkUgMcIa/1U54HdoAl32rERHgi+SMXIwc+QUGfzpEAe7uGwCvgDB4BYbDT5QlREr9UaL2CXJLzSksUdWIxoMMfT/kt9Cu1FZh/af9Me2xu3F0VF+U269F6d5BSNnaB15HpsLbdY8AcxTm5rOwYFYvDO77GA5P/BC+w6Sw/foLGNL9IfHqL2DgyJfRf2h3vNe/Mz789BUMG/seDh3ZhsTYSIT4eyMmKhbR0Ymi0nGGar4IUdZg1aHK3c1fAW4vgNvZnoGLqK6Xd5iofRhyxJZk5cr5kuuZll4sFlBsj2sQUtMLFeT5YlkyM/IEcPHkUkj1F6Vn8z6n/mJNly7ZBHMzO9letNxF5A6QloEZQz7E0hF9MeeTdzHkre5YOX8BbI4cUmWIXxVyhinkfEvbpW/5UlkW0M6qKJACSi6rnMTH1bWcQ7EAHZ8ot0ixKpGSyzPkhBWKfSHkEYnpmDtvkXg1X+XZG1r4SvF6dTHsNizByeUTEGy9HREO5oh2tUJqqCfykqMEdndEudkJ/JYIPn1ElKQQwZGx6NPvQ8yVE+bi6QPvQDnJYeIrw2IQKD4yLC4F0cmZiE3NRnxaFlKy86QgWorK+oZrXotIyLVjuwp5wS1r1peCZ1Ul1n/wLpZ0fRgVp9ag5MCXiJvzMoI2fYSTx+YLeBtgbbkAOzaOwJgBz2Hoqw9jd5/usHijC/b26IIRj9+NHi8/iN4DnsdHn3VFr/7Po8/ALlII/Uwgc0F8dASCfD0REuiPmNhE1TrJlskgUXN3dwHb3h1nxCe7OPvC/rQHrK2c4ODoA1e3YIE8AqlphUhKzUdeYRWiYrNgaeUGb98opGcWixcvRboUOFNTslShMyQkToWnR7DYlXCcdvDGqtU74eMbKRYnA0XFFchKTcO0If3FjvXEl++9gpH9emPb+s2wPmyGnMz0Xx9yUzXni2UJQ2V9k1JtWo50uXXllVYry1LT1IbcwnJEx6YiLDwe8VJyzxYPV1BWi5LqJvgKhDNnz0doVBLiUvIQFpuOoMhkRIoiBHh44sTamfA9vEHz4q7WSA5yRVZsMFLCfJAU6IZEuYjpcjsurayH1XF7vPve+9i5ew88fALgFxKNIFGsoEg58dFJiBAVV4Cn5yJRLkxCRjZipYCUnlck1qlWU3LDM56mSp5/iyDn42dtYleWDngfewc9j9R1HyBkWhc4j3wWh8e9gm3LhmDNwo8xcWg3DBKQR7zwML56+gEs7fwU1nR/ESt6vITJrz6Pj999GVPHf4KVS8dh1pxhmDlvpEBrjdioEMRFhiHQVyyIlzvi45KUhQgNZfN7DDzEQtjbe8DBwU2sjTeOWTnAzNwWRywd4Cxq7SSwR4o1iYrJQGZ2mVzHTJw46Q1P7wgRrhyJbOXPWSMTEiznOzhOlk1HSFgSgkISYH74NPbus1bgp8vdvKikArlia86cPI1VX0/EiPfewLxJk3Fwz35YmR9ETkaa6lD2C0Ouvd/nemrOasJzl66IWreJKjdIofOiqgNPEQuSU1wpdqVOPG8bMnKK5EQlI0JAThK4cuUWV2iA3NHTDwsWLUOaKEKMQB6ZICdLTmpcWj5yCsoR5OoAh20LEGy3F7EedgK2M9Ij/JAW4YuUUG+kRgaiuKRMMk4Z5i1cgk8+/RTWNnbw8gsWwOMREpkgCi/KFZuCKLlrxKZlI4kNGLJPCenZiE5KR2JmntimPNn3mhtA3nZLIeeY5JFyVwo/sRMRVmsQeGAB3LdMh+3qCdi79Ctsmv8F1s/9ApvnfCmFtUk4vHQarNfMwcktS+C0dy3cj26HzylzBLvZIsTbAX6eEl6OCA3wQnR4MGLCQxDg5QZfT1cpCEbJXTJJ7qpiV4Jj4Ctq6+TkBQcB/eRJV+zeawkLS3ts33EYjs7+OH7CFYFBsYhPyBF7UoywiFSZHyQqHyq/j0d4ZIrMSxSbkoqAAPH5YkmCQuLhFygZyCsSazccgO1xN9U1IDOzQLWYxsRnSGbgnSRCygM+4tnPYP/uvbA8uA9Zaam/EuRyoa8HeZMC/SIq6ppQLBajVf4nvCk5xciQgymvbVJViGmZhQK5WAVR51SVAaqUXSHkNg4uWLFqnXj4GvWbVLEysam5so4SlWGycgqwatYk7FsxA+5WuxHqYosYPxfEBrghzPsMsjMz4C9+e/8hG3w+dhwWLVyo3iWZGB0ut2m5oFHRCBcvGh6XrICOFZtCyNNyixXc0ckZAnuuUvSsgmJU1tUL5NprHX8JyLm+lsZaxPo7Itz5CIJO74e32DO3Ixtxxnw9HKRwfXLfGhzfvRJ2u1fAdtcy2Ekc37MCp/evhoPZerhabIPXCTNEyHkJ9HEVyGXq7Y5gP09EhgQhMjQY/oTc3QUBUqAPD49VtVwBUtBkAdPNLVDsiSccnbxhY+eKw0dOC+iOsLJxxqnTnvASy5KWQcBT4CsQ08Y4ngmAj18U/CUDhITGK48fEBStMoSvzOdvjlk7Y/GSLXCRgi2b/VkDQ28fJHcRv8AoWZfYJa8gHD1qg53bdsLCbB8y01IMkN/8S4F/VshpWViTwkJmY9t5peKFotp8IjxfSt8ENDWvDDXNbVK4a5QCYb54uVTEJmUhQxSbfr2oqkEyRiOsTztj05YdyBffTouTkV8q8BXKlGMYNqvC6PrN23DvPXfj6Scew6svd8W7b7+JXu/0xFfjxiG/pAqJaTlYv3E7Dh48gMykWFTlZ6AsKwll2ckoSo9HLsc3T45DWkoiEpOSVMEzJbtQ1LtAMpR4SbEwMQJ7ZkEpMvOLZZ/rflnImxuRK+WMCHcb+B3fCxeLTQa4V8F25zJYbFmIQxvm4MDaWTiwbhYOytRcPltsXQibnSvgcGQ74kJ91cPOHBa5ID8XSQkxAncQIkKCES6g+4mK+7ieETUXb87OUqLk/v6RYleCxZeLLXH2E9viJZC74PhJd5wWuK2sz6h5Tk6+AnAcfPyjRJ1D4SaFSnsnH7h5hsDTJxzBArk/VVzA9fOPFv8dJd+FYt3GA9i5y0IsTjrSs8TXp9DeZErmCJffBcPVIwDHT7nAzMxK9iUYocHByM/LBTuTaZDf3Hn+6ZCbgN7Qdk5BXt96ThS5QVkT1VpZUavUOF0gbZAMUCSFz0TxYjGJopiSkzOlJE6vXlzdKBmjAZYnHbF91z5VE8M6c37PGpcs8e3FkhFKRe1DoxPQuevL+PNf/ob//r//wN//3x244857sXX3AfW7yJhEBPl5ozIvAxWZCcgO90Z+fChK5f8SgbxEppX56aiQyBQ/Hx0dLRkpX0FOwCMTUxEenyqZs0gpOqsZ2XqrH/ethfyiWi/7hBdmSrnB4zg8rXfC0WydUmvLrYtwaOM8BfeeldOxa8U07Fk9Awc3zMUxAdzp2H7VfN/UJHax7awaGbaN+27ohVhXV6ee1UyMj0Wwvy+8PdxFwUNEcaMQEBgNd7cgOLsE4IyLv6i2h6j3GSlYOuLEKQ/Y2rrCzs5NVN4b9g4+orphKtw8g+HiHozjp72Vb/cV+L19QmUaqTKCp6i43QkPgfeEZKYk1SqallGgmv0Dxbd7eknG8pK7xxkv8f4nsP+gpdidFNVKWl5RZSh4/sqQ06rUsOFG7Elt81mUCIyEm1WIhI4qniuqzIzAqkT68Dg2RIhNyC0xWJWaJlm2HmZWJ7Br7wENeoE8Swqp/3975/0d1ZXl+/mh15q35q2e9d7r90fMmnZ3j+m2jY2xMRkhBEIgEQ02mAwi5yCCyQYkhAAJBZRzjkgoCyEhEBIooECpVKWEUABjt8PY3/nuUyrA0G63McG6fb5rbd2qe6tu1d3nc/b5nlu3VOKX67iUc+hNrd20Me3Yte8g/u1//5bx7wr01/40hB67lvutR3hYJNqb6tHZeAPdrY3oul3HZQPuMrpMdbjTcgs9bbdxr7MV5loOrdkpCu7K2iZCXY+Cy1cZ1zgRbcKlq/SY5VeVN38c8qZWy4uDXE5f9vSoqwU7W2/jGucaCfTZ/oTb22MFjm5bjP0bF2D/Bsb6BTi8ZQmO7XRHTKC3Aryhrho3qq6pH566z/a6z/cr15Q/+ML2lThpxy+/+qv6YsWdO11objYpe1FQVMGqnK8qtVTysIhkBXhQcIKyKnJfAE9OyUMMK3pMfDarbxEBL1JLX/84hEXRzmSxMmcWIiv7EjIZKemFnLxGc0TIRDknpbUcNSvZ/kWXrnI7R4KMPHaqHJwPjYWffyTOBUSoa1tqaxufgPzn6flAPgB6H+HtItzy6WYXJ5ZSycWuSOUW4G80WmDpln90/0BNMqs44RDfKwBLtW5mJbfSr1s67+J0QDA+O3GS++hT8N8i2HJ2Rip6vYmQW7ppgXrUxPEvb72Df/1f/8aK/lssWLqSldiEgKAwlBaXoP+OFQ/utuNuSz0sNRVoq7/G5RVW8iuEvB697S3otjThVkUhCuIDcbmCk6UbDfTptdw3RwJOTqXTyJmYCwXFuNPb//B4BfjGFwa57VLbzs4uRof64aiuNk6kKy/TnqzD5oXOWD5rPBa5jmGMxfLZjvBY8wk2LJ0Hj02rEBpwGqkJkcij/25ubCDEd1T17u3rRV+/fOlZvkhxX30Buq9Xvv3fpf4xUbPJwqpaoexHvIL8IqFOYT5jcS4ohuBFIzQkBvFxtDms0HF8THhkGm1KDhJTCpCUWoig0BT4BsQrqFNpezKyipV9iUu8iFM+YQjj4yurm3CNgFfQpmTlXGIFl+faJrQBfJ2zfuGcE1zEzZpbnNjegrWtY+AqxJ+f4+cGuVzD0i0XXQnkvN/Z97kCVCaeYlfkdlWDRdkYmXSKR5fJZjU9mZw2bLbQM7LK97Ah7lpoDwryEBEcojqHjAJS6cWXC+R1rOANZj6+rUfBvv8zT/z23/8v/s//+/8IiohDQjI9ZFAwuloa0cMKbiXQ1toKtN+6ju7btehqukHYK3HHVIteaxN6GHJ25kLIceRnpaDkShWr9nVGJfJKylEkn9QV0nfm5KszLQ8hfyCd9UVCfp+N267+L0mrXA7c2qY+FAk964nNy+ZjxbzpWDLHBcvmTsOGJfNwYPsGRAadQ05aPK6WXsCtmhKYebztbRZ2knb1Vbo2jghWczNamurQLL+71HgTFubpbpcVnZZmjhx96qyIVF8BXCCWSac/wfPzj0bg+RhE0UqGhUQgv7CM1TsfoewEwWHJiI7LQQxBjozPIejJfH4uJ5f5SKNHF58eHZdFC0J4M4pRfrVOnXAouVxFwAtpb3I5ImQiKCQOfgGROM/XkQu4btwk5Cw61jZ7JX8VZ1cG4t6Xf1VgC+Ty6aTclo/vLZxgysRTJpM3m+lfaWnknHkLq7NAXkOfLpBbOwZ+KkT+BzftQ3+bGa2cFDbeqOIwakZtg0w6BXArfb1FWZZmPk+qvJzn/s8//An/8fs/IrfkCvx8A1BdwWp9oxy3KwrQz2rd22ZCZ9NNdDRW05PTj9OedHEi2m2mdSEI1y7GIyPoKLIiT3OiRB9ZcAkXiy4T8jLkcJmZR8+ZlUt7YoX8gx5bJX+AhpbWFwj5PZi4/4YmE2pqG1BZVYOSS+VISUqFz8nT2L5pCw7s9sBpz+MI8vVBeOA5JEaFIy70ME4ecGKMRVTQIsJ+AQ31AkwVrlRdR87lMhRVXFOwmxpuwtrazCrfyU4gtuY+amkfc3LLCR4LTVQ6As7H44xfBKtrpDpR0H/vc5hMZlznpDwlNY+dIFVt8w+KR0gE/XsEYQ1LRXh0Jis8rQw7QhIfF8lJq39gLPIKr6Kw5BptSiUnm6Xclssqf4EVPpn7iMa5wEjk5BTz/daj6kYdrt+oV5X8lUMu16W03b2vvPgXX3+LDkKurAdDIDfRZ9+mP++nX+/iNhOtSQ09tnwgJEOp/Eblg25OSumTuxpYaWs5KeSysTQXJRG+yAv3Q1VNg4JcTvPV8nkNZtvZGAF94hQXzJgzH4mpWYiLjEFdWTGay/PRR7h7aEtM5RdhulpAm1KB1pvlMFUWw1RVqjy6+PMr2bHIOH8EaUFHkJkUg8yLnDjRnlwsKkVGDidUmbZrXW7calJnkeyVvIGTtxcFufz7tIDAYJzgBHz/gaP49OBxnD4biMTEFFwi7AX5hQjmdt+z5+B7xhfRkVHIzcnhaBSIuODFCPVzpTdeiJicACSWVuFMYi4OhiThBCtucb0Z/WxDsUJdnZ20Lja/Lr69p+8+rlbW0x/nwvdcFE76hNCPx6nTgJ0cke9/ztGa1vQW7WM6bYYv/fP+Q6ew98ApHDsZDE9aEm/fKJwl0CH073LGJYYePjQqVXUW2W927mXbaMGJrQAeGZPKzhSjAPfzD+PE9AqqCXgl50bXOU+yWl8x5NLoAq58HC9XDKrrTPoeKOgl5GIsORXY3f+5quRdPfSaXfSaVjN6O+mZWb2/lF8c7uvi7XZWXjMarxTgako4GiuKkBMbjoyIEAJmq+YyAa29bVHXnAvgMkps2LYLB456wu9cEELY8IVpyazcNQp0y/US5cn7O8xoa6hGB9d30LLIqUQ5rdjBCn8lKwqpgYcYh5Ee7qN+5DY7r5CQl9CmcMafnIY02pUr1bXq9ztfFuRhYVEELIK+N4EwpLETZ9ICZNL/ZiA+SbxwCgEiSHHJiOf2lLQLqOAo1tR4HXmX87D0iBfWegUhMKMU+VWce1jvov0u24kg9zL62CZ99yQeqGUv27H7bj9HkE5kXyxTlTeDE8jqm83qG/ly7bhYh6YmM6v9ZVqQTFqVJMIbiQNHTmPD9sOYv3Qz5i9eh007DuL4SX9lQSQOHPbB7r3HCXGUzaMnXUBEbDorPgEPjuVrRbHDhLJTBXBecBnXmWuBXMLySiB/7CzDPpj3EwAAF3ZJREFUPVZqa/c9BbmcOXnw1bdq4imAd/TKP6//mlX8rpqQSlW/wyQK0Pc5KbxPLygW5UFPB++3ocdyG03lebhVmo2bxZyFJ4agPJP+LjQYpeXXCLhJnY2x+3PbVY33EBqTiKj4FJw5c44wZKCsqAg3irJRXVxAS9IIC4GuKStEfmocynLSUV9eCNPNCvX9xsbrpSjLjMKFME+kn/8MacHHkBEfxoqTSqgykJGdi+j4JKRl5yuv3t13b2CiTcjNL86u9PXfQ3BoJLxO+arPDPbsO4idHvvUh2R79h0gMPtVfHrwCA4f84S3jy+Bi6LPvYq8K3VILGlE0MV6lNbfQeUtK66xItY3mtRH6F1sg7u0jXd5LD19NujlKs8OzqGaObGvpZWsuimn9xrUx/Ell2+oSaJckyLfzJdTf1nsBCHRF+AdmIJ9nhHYeuAcNu/3xdqdx7HvqA/2HDyBnXsOw2PvUWzd8SmWrdyILVs/hc/pEKRzMhrOyh4SkYRAAu4bEIHTvsE8hgAc/cwb4REJyM0v5evTSlbVvRrI7xPyR9+Q+UKd6hMPLmdSBGb1gY9cO86Krjw5t39JGyOd4G5PLz6/287oULB/2d9N0DvQ126idahHNSeBRSGeqM5NRkVmNI6uWwz3JQuxfeduZBeWspreUufWbaceu2BlZ5LrTuKT0ln1IpEr//4grwDb165CRJA/chJiEBngj/Nn/XDa6yT8fU7TmpxGWWo0bl29hJrL+biUEY28GD9kh59EevBxpIWexPkAX0TFxiOdkMsyKSOblb0cre1dLwdyqeThUYQgTC1j4pI40cvCBVqpoktlKK+4zqG8FjV1DYS3GU3NLbjdYsFtcxtz1IiU3CsISSnC+aRinIrKw27vGGzY4wP3LYdw4kwwLVgBzodHo+L6DXRy7tROwM2c/N9qoiVsaEV1nRmVNSb6eLl2qB7ZxdWMKlxgRCQX4mRQMrz843CGnt2f1TyUnjtaPjxKkchGNItNVHy6+mBHbMjxk36s5idpbbwQEp6I86EJapLpczaE1dsfJ06yMx/yxMGDnjhxwhdhBL2URUVAb7W0vzrI5SrDzt7PleeWai7nxO9/ZTtPLpDLKcXeL75SHUDOskiHUP9mmP67v9PMSm5R/8XprqUJdUXpqMyIQu2lCyhP5+TDdz+qC9MR47UHH82fx6FwF3bs3YecvFKUlMnH8XWqmstlALIMCSUICenqisJCTpC27N6HObM/xFnvM4iJSUJsbDKiohOQmJSJ+Igw5MeH4npBFuqvXkZ5bhryk0ORHX0WGWFeSGVFP7Z7Pb3wQSSmZdIzxiGBVV0u0a0lUA/+Kp/qvljI5eyKyczKyclns4LXHlYVplaJtofRYpFoh1nOxrDytcp3M61dMFk61fU+BWU3EZV+CX4xBdhL4DcdCsTWQ36IokeuZqW/WmtBVtENJGReRkh8Ls6EpuPQ6WgcPB0Dn7AsBCfkI6e4Ek3mDnUm7HpNMy5fq8GlK9Ws9JUokuuBiiuQW1CmQtpJzn+rsyecXCak5tBSZSEyNpWdKxHnzkfjyLHTHIlOYN+BY9i5cx92exzE3r3HcMLrnII8r6iMnbBGQf7Sr12xQy4f/AjA4o2losqnnWJf5CxLWw8nop/bPgGVD3nkEtvOnn7b71HSmkiIXemx3qZX5uy/IE19EeJyQhCqeTv3/DH1W50FUWcQFXgOew4cwYr1G/DZCW/O0MtRXMZKVteszrHXm6wIDAqlpShExc0GXKqsxXYO725usxDgF4TcwjJkyZcBmPgiPi8pOR3nT3shLykcdRWXUFmSh6LMOFxMPI/MSB+k0rJ473HH+DGjEBIZzWoUg3jal9QLuSivvKF+Hl0+DBLI5fdsXhTkZjZuiwDMMD8Wah2hlu0S6hSjWrarSZqVgIt3buOo094h38G0hbWdwYJk6biLOvlfKVUNyCy8Br/wNHidT8GWQ+ew90QQgmOzOAcpQUl5Na4zn3JNvkR9Uws7nBUNzWbUyAVtdU2orm2itbHFteoGXKGtuVRWjaKSSlzMKyPoJeq8e3JanjrlmJKeh7SsAs4nMlWF9zzlDy/vczh1OgA+pwLg6XkWe/cdwc5dB2i/4lDMzvOokr/ED4ME8uLSy/SHe7GFFXbL9p3YRjuxa89eFTs89mDbrt3YuXuPur91hwc2bduBrYw9HoxdO7Br+xZs37weG1evhPviBVizfBHWMtwXzsWqBXO5bj6WzHbB8o/nYMG8eVi4aCmcnF0w0XESFi9ZjuUrV8N97QZs2roDG7dsx/z5H2PpCnes2bBJrZ/q6oaRH4zEvHnzsWrNeqx0X8vlOqzdsBnLlq/CrBkz8NGHc7Fm5TJsWLMKq5YvxvJF3Adfe+lHszB7miP+MuR1zP/4YyxY+Ak+WbQYi5cu437W8Lh5rDw27zNnXmglF6C3bN2uYuvWbU+ErHssttliG3OsYvsObH8YO22xYyd27NzFqulBiDzUUtZt2rINa9ZtwKrVzBGPb8Uqd+ZoBRYtXqKOfd5HH2PO3A8xa/ZcFo6ZcJsxCzNmzub9OZj74Xx8vGCRahPJ8RrmfvWaDXBfbcv5ylXruE9brJRYtZb7X4PlK1bzNdyxdNkq5nWlev6ixcuwZOkKbuM63l7M2yv52IbG26/GrqSmZ2DGrNlwncGDnjkLM3l71pw56sBlvYTclpDt05mc6W5umD1zBgFzxXRnJ0yeMAaj3n0b7735Zwx78w2MGz0KLpMd4TDyPUyZOB6Oo0dgisN4OIwfh8lTnDF+goP6GpuDw0R133nqNO5zhtr3xImOap3LdFdMnTYdo8aMxbBhwzCRj5X70wj9dNcZKuR548dPgAOf4zhpEqZNdcbUKXw/k7hfRwcuJ2DUiOH40x//iDFjx8FpyhT1uElOkzHZ2ZkNPFMd1w4PjxcKeQttiRuP7x+KGbaYwfb4mzFTgu3E5UwuZd0kHtPIkaMwfPh7zNW7eOedYXj7bfnXFu+o+++99z7eH/EBRo4ahVGjR2MMczp23HiMZU7k9qjRY9TzR4wYieF87Lvvvqdujxs3AS7TXAdiOlxc7MvpmOryaCntYI+pEo9tl8dP4/OnsT1vNTSRO9sv1v1cPTPkcnYlhZALvA8hn22DeubfgFwgnDrdTR3MrBlucJvOA5rkgAkfDMf7BHz4G0PwxpAhGPrWW5hC0BxGj4TjuNGYMGoEnBwmwHEiwZvsrKAcMZJJJKCTp0yFs8u0h/BKhXcSyKcJ5K5wcJyIkSNGwJHrBXzXgQrkxvc7lc9z4v4cJznxcYSXj5062Qb5pIkTMHrkCLz++n/h979/TTXylKlTCbgToXBSHcmVUL0MyMWTy2sJxPblj8ZPQT4Aug3ymQRoOkYT1NFjxjB3jqpIvPf++wpsWe/g4Kg69SSnKWw3lwEI7SDabst6ycdERydMmDBR5fqdYcPZQYar/Aqkqj0ewmsH37bOBrOrbfnYfQHbHtPJTWPTK6jk0gBJqWkKGhvksxXcUskFdgW5rBsAXSB3dHImnA6Y4eaKGYTceeI4OBDyEW/9Be+98WcC/ibeeuMvCmzHcWMwieFATzzRwQb4lAGr8gErxzhWkymSeKkOKhluKsGSWFknsDuwY3xAyKViOzN5UvFtkM9SiZROIvsbPXYsK9VovPP226qTDfnzEPzhD39UgEu89dZQvvZU1ZhSzZ0mT1Yj0iwe506P3S8AcjyCnJNLV76WAG6Pp+B+RtDlcU6Tp6jKPIrHL9VcKvmwd4djKKv52LHj1XFLjgR2AV9tl4o/UPXlcW8NfVvl6M03h6qCMHrMOAW9dAob5AMgD9xWcD+8/1i1f2y77TGPKnlTs+nlQ97b14e4xGQFuKv4M3vVtkNOwAV8BTrXu7LSOxLAUaPH2SB35YHQlkwaw6QMG4r3CLoA9rZYFtoEZ1Z5f19fnD7lTa/9ka1qM2mOTLZALg0j9+1JkmHY2Vmq7WSMpz0Zw+o0WVkMRz5eKv94VXns71c6hVQh6RgjuV1s0JAhf8Zrr/0Bv3/ttUdByF/negHcXs0FdJdp09Rx7t6z5wVAPlDJ79+D2WqH/GnQfxR6Bfkj0NetW48tW7ao2+7uq7F23ToFubIvkg8+R+YtApXkZAqPdSU9+YIFn6jXlVFT/LvkT9k1tqPkQwqKdBInVnqp9jIHEAakY6jKz8dLkZOR8/HK/DAeg1zu2wCXNrUBriCXEZgjtcnU8gog7+1FZHTMQ6vyOORyWwC3WRmxMeLJZ2MKe+eEiZOYWDcFuYvYA3ry8YR6xNA38fbQoRj29lvqP1vNdJuOlORkLFmyFHn5+ZjHSaWAuX7jRtoTV0I+DnM+nKcmWrPmzIV/QCD8/f0VrLNnz+LEZzVmzZrFxlqFhZ98ouzOeIIutkbesyxVxWcjjRkzWnUeqUYC+ZPxX68PUdtl5LB7c3meQLJ37z51vcfzhlx+hEr229be8Rjgdth/CP3fgtxezQUwb+9TaG1tZQ4/wpEjR+HldVLlRXz5YuZ30eLFuHKlgpO9lZwILsf69Rs4eeREkaCXl5djESfcm9lJBLiPOAHdsnWr2q/sb+my5di8eQvz6YYNGzep0U32t3nLVvXeYmJiccLT86G9sccPq7sdcntFt20XOyXr3Xis8v5fKuTyg0n9/f2Iio62JdPuv2XS+RDyWSqmuT3abrMsU+BGwBXkzpPV5NKBUI94h1WcduH9d9+BA724VPto7l888MFDh3GYjZNE6GWZl5fH2fxCFBUX49P9B5CVlYWIiEiEh4dj6dKlSE1NgfepUwgNC0N6hnyTJQRO9NqjRn6ghkHbRHWGSqoA+/7wYfSfDhyu3yfUr/0AcKnuMrkSwJ1dbP5TqrlYFld2NvmPXPIvkQXK5w257Lerq0s1slSzpyH/YXX/AfADoEt4e3sjjLlJSUlV+fP08kJBQQFmsziEh0ewSu/C9aoqBXdBYSECAgNxlqPosePHUcX1MhKkc/61dOkylJRcwiG2h+T8hKfXw9x7nTyJ2Ng4uK9erTrG8eMn4Od3DimpqdyX31OQ/1S4DHSE6YRcRiUrRzTh7qVAbh9K5Z+6x8XFDTSAbUiR27Zh1NYA0runyza13nbbiRVxGnuq63QewDQXuAyc1XBylEmLI7dPgjOr5Ufz5yM+Pp6+zgXHjh3DocOHVcNM4/MOHjyIwMAgJKekqPtSsQ8cOMAqdQRBQUFYvdqdyZmuHp+enk67M5+QT1L7lteW96GCCZxKC+Ls7KyWAu9Y+nMVHCnE4kzhNnkNFQNVRvYtxyzJ379/v6ow8sNRz1Pq14gHRkx5HVuOfyoGOsMT908SwL179yKW7ZWYmAhPVtZ8jo6StzAWgtUEMzc3Vz1HlrJeOoYHJ9VSUCRPkkdph1M+Puq+PN+TkB88eAgbNmxUnUV4WMbKHhkZyQ6Vgo2bNuPMmTMcbbc9yuFAHh8ufyTkNeT9CDdirdrb2xV3z6KfDbnI3gBJSUk2bycVYwDk5xWLFi1CIauKVMrS0lIOkx/hwoUL2L59O7Kzs7F27VpWlRJs2rRJdQZ5XGhoKPbQI8fGxuLTTz9VDSqNs3Dhwqf2/0tDjlmOXTrc87QqdtmLiVTzv5VjOwD/SNghn8NRtqWlRUGewRFu9+7dKrd2yFesWKGWs2k5BHLZLpDLenm8u7u7ahPx9wK5F0eEwyw+0gYRERGqHWRbQkKC6iBpaWnwYaeQfT35nv6RsOdYOl13d/czF5Jngtw+nMqVepIQeRP201LPK+bOncth8ZCqlB9//LFaJxVZEitJlfuSfEmgdIgPP/xQNZ68l10cfqXqyD7Wr1+vlk/u/5eGvI4cu7zOsyb/pyT7lZ8klGP7JTletmwZPuG8RG4LqGLp5L7kTnIleV2zZo0CcyPnPPJa9ufY10se5XjXcdIqnWbBggXqMYvpv6V9pKNI4ZH3upWeXR4j6yUkR0++p38k7DmW9pNfq3vWQvJMkIvkBRsaGtQbkAohb+afKeSYJWQ0e9bk/5Rkv+JBBcR/5hxLx/wlheSZIRdJI9grpv0N/bOEHLNULzkD8qJVWVmJefPmPfUejB6SYxkZZG71S/SLIBfJcBocHKyGLXlT/wwh84OjR4+qMx8vS9euXVM2TWB/8v0YMQRusUoyB/il+sWQ2yUe3f7Lv0YP6divQjJyyoT/yfdjxJDjfF428LlBrqX1a5WGXMvw0pBrGV4aci3DS0OuZXhpyLUMLw25luGlIdcyvDTkWoaXhlzL8NKQaxleGnItw0tDrmV4aci1DC8NuZbhpSHXMrw05FqGl4Zcy/DSkGsZXhpyLcNLQ65leGnItQwvDbmW4aUh1zK8NORahpeGXMvw0pBrGV4aci3DS0OuZXhpyLUMLw25luGlIdcyvDTkWoaXhlzL8NKQaxleGnItw0tDrmV4aci1DC8NuZbhpSHXMrw05FqGl4Zcy/DSkGsZXhpyLcNLQ65leGnItQwvDbmW4aUh1zK8NORahpeGXMvw0pBrGV4aci3DS0OuZXhpyLUMLw25luGlIdcyvDTkWoaXhlzL8NKQaxleGnItw0tDrmV4aci1DC8NuZbhpSHXMrw05FqGl4Zcy/DSkGsZXhpyLcNLQ65leGnItQwvDbmW4aUh1zK8NORahpeGXMvw0pBrGV4aci3DS0OuZXhpyLUMLw25luGlIdcyvDTkWoaXhlzL8NKQaxleGnItw0tDrmV4aci1DC8NuZbhpSHXMrw05FqGl4Zcy/DSkGsZXhpyLcNLQ65leGnItQwvDbmW4aUh1zK8NORahpeGXMvw0pBrGV4aci3DS0OuZXhpyLUMLw25luGlIdcyvDTkWoaXhlzL8NKQaxleGnItw0tDrmV4aci1DC8NuZbhpSHXMrw05FqGl4Zcy/DSkGsZXhpyLcNLQ65leGnItQwvDbmW4aUh1zK8NORahpfhIP/uq6/wbW8vvu3p0fFzg3mT/BlNhoD8+2++xRd1t9CTnoXuqDh0R8bqeNZg/iSPX9TVq7waQYMe8m96enE3JQNdEbE6nnNIXiW/g12DGvJvevvQFZuETjaIjhcTkl/J82DWoIX8+//+b9xJzUR7RIyOFxx3UjNUvgerBi3kDxqa0BYeo+MlheR7sGrQQt514SKsTL6OlxNdWRefbIJBo0EJuQydlqh4WJh8HS8pmO/BalkGJeTfff01zOHRv6qwxiejPS0TrVFxT217GPS35shYWOISYf57j/uVhuR9MGrQQm5i0n8tYY5JQFtmNloIsFoSYCsnxeaYeJhjE2FJSkNrYgqsKRnoyM6FOS4JLdHxar2VkzoT4W+VdXy+7Mscm/Bw/ZOv9Srju6805C9NkuzbTPqvJcwJKTATYvv9tqwcmAR4Am1Jy4KZVV5utwjwhNfCiq/WcV7RStDNCcnqOS2EW7a3X8xjp0iFNT3rqdd6laEhf4mSZDeHRf9qwkR4W1ml5XZrSjqsBFZuy7KVFd3Eqm3NJPis0vK4VoLcEp8ES/oFLpPRQsgt9u0K8ny0sNPIfp98rVcZGvKXqO+++QZNrCyNYVG/mmgh3K2E9jbBlDCzCptY4U2EuIlV3ZSUiiaxJRl8DNc1E3zZ3kxL0ywWReyNPJ+2xSTVnc+X9U++zqsKybfkfTBqUEKO779HM0FpYPJ1vJyQfEveB6MGJ+RUZ3kFbjH5Ol5OSL4HqwYt5F/338OtiGjUh0XqeMEheZZ8D1YNWshF3dU3URsaqeMFh+R5MGtQQy7qKL+KGjZETYiO5x7Mq+R3sGvQQy7qN7WgPiEFN9gwOp5PSD4lr0aQISAXff/dd/i8vRMdlVWwXC6HpVTHzw7mTfIneZR8GkWGgVxL68ekIdcyvDTkWoaXhlzL8NKQaxleGnItw0tDrmV4/YuHhwd06DBy/Aslf3ToMHI8tUKHDqPFUyt06DBaPLVCx4+Ei4sLzGbzKw95H0++Nx1/N55aoeNH4je/+Q1+97vfvfKQ9/Hke9Pxd+OpFTp0GC2eWqFDh6HifwAktImh6WNEOwAAAABJRU5ErkJggg\u003d\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 43,
            "name": "I verify the Doctors screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheDoctorsScreenIsDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 45,
        "name": "User can see the details in rooms  tab",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-see-the-details-in-rooms--tab",
        "after": [
          {
            "result": {
              "duration": 2459220700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7699753200,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 50cfc597-464d-4b71-97f1-f1c3d2744919\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"Rooms\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.LocationScreen.clickOnHospitalTab(LocationScreen.java:140)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnTab(LocationSteps.java:61)\r\n\tat ✽.When I clicks on \"Rooms\" tab(features/th/health/Hospital_Clinic_Locator.feature:46)\r\n",
              "status": "failed"
            },
            "line": 46,
            "name": "I clicks on \"Rooms\" tab",
            "match": {
              "arguments": [
                {
                  "val": "Rooms",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnTab(String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 47,
            "name": "I verify the Rooms screen is displayed",
            "match": {
              "location": "LocationSteps.iVerifyTheRoomsScreenIsDisplayed()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 49,
        "name": "User can navigate out of the hospital details screen",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-navigate-out-of-the-hospital-details-screen",
        "after": [
          {
            "result": {
              "duration": 43300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 8300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 348964200,
              "status": "passed"
            },
            "line": 50,
            "name": "I clicks on back button in See Details screen",
            "match": {
              "location": "LocationSteps.iClicksOnBackButtonInSeeDetailsScreen()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 30400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 53,
        "name": "User should be able to locate cli using PruShoppe location",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-should-be-able-to-locate-cli-using-prushoppe-location",
        "after": [
          {
            "result": {
              "duration": 3095619400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 550124500,
              "status": "passed"
            },
            "line": 54,
            "name": "I clicks on back button in \"Hospitals\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Hospitals",
                  "offset": 28
                }
              ],
              "location": "LocationSteps.iClicksOnBackButtonInScreen(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 20113679500,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 50cfc597-464d-4b71-97f1-f1c3d2744919\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Search here\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.LocationScreen.clickSearchTextFieldInMaps(LocationScreen.java:68)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iClicksOnSearchHereTextField(LocationSteps.java:35)\r\n\tat ✽.When I clicks on Search here text field(features/th/health/Hospital_Clinic_Locator.feature:55)\r\n",
              "status": "failed"
            },
            "line": 55,
            "name": "I clicks on Search here text field",
            "match": {
              "location": "LocationSteps.iClicksOnSearchHereTextField()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 56,
            "name": "I clicks on \"Clinics\" under Pulse Search",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 13
                }
              ],
              "location": "LocationSteps.iClicksOnUnderPulseSearch(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 57,
            "name": "User can see the list of \"Clinics\" near by to user\u0027s current location",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 26
                }
              ],
              "location": "LocationSteps.userCanSeeTheListOfNearByToUserSCurrentLocation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 32900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 59,
        "name": "User can verify the clinic page",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-verify-the-clinic-page",
        "after": [
          {
            "result": {
              "duration": 3091750200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 177179214500,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [1] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [1] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [1] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [1] under Clinics Search Results screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [2] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [2] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [2] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [2] under Clinics Search Results screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [3] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [3] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [3] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [3] under Clinics Search Results screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [4] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [4] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [4] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [4] under Clinics Search Results screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [5] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [5] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [5] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [5] under Clinics Search Results screen expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.screens.LocationScreen.verifySearchResults(LocationScreen.java:102)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(LocationSteps.java:51)\r\n\tat ✽.And User can see that Call, Navigate and See Details links are displayed under \"Clinics\" search results(features/th/health/Hospital_Clinic_Locator.feature:60)\r\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 60,
            "name": "User can see that Call, Navigate and See Details links are displayed under \"Clinics\" search results",
            "match": {
              "arguments": [
                {
                  "val": "Clinics",
                  "offset": 76
                }
              ],
              "location": "LocationSteps.userCanSeeThatCallNavigateAndSeeDetailsLinksAreDisplayedUnderSearchResults(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 62,
        "name": "User can view listed clinic details",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-view-listed-clinic-details",
        "after": [
          {
            "result": {
              "duration": 26000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 5700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8869391000,
              "status": "passed"
            },
            "line": 63,
            "name": "I clicks on See Details button on First result",
            "match": {
              "location": "LocationSteps.iClicksOnSeeDetailsButtonOnFirstResult()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 23000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 65,
        "name": "User can view listed clinic info",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-view-listed-clinic-info",
        "after": [
          {
            "result": {
              "duration": 2992548400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26897071600,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tCall Now button is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstHospital tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Hospital tile See Details screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [1] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [1] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [1] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [1] under Clinics Search Results screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [2] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [2] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [2] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [2] under Clinics Search Results screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [3] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [3] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [3] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [3] under Clinics Search Results screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [4] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [4] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [4] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [4] under Clinics Search Results screen expected [true] but found [false],\n\tCall button is not displayed for Clinics tile [5] under Clinics Search Results screen expected [true] but found [false],\n\tNavigate button is not displayed for Clinics tile [5] under Clinics Search Results screen expected [true] but found [false],\n\tSeeDetails button is not displayed for Clinics tile [5] under Clinics Search Results screen expected [true] but found [false],\n\tTimings text is not displayed for Clinics tile [5] under Clinics Search Results screen expected [true] but found [false],\n\tCall Now button is not displayed for the firstClinic tile See Details screen expected [true] but found [false],\n\tNavigate link is not displayed for the firstClinic tile See Details screen expected [true] but found [false],\n\thospital address is not displayed for the first Clinic tile See Details screen expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.screens.LocationScreen.verifyHospitalInformationScreen(LocationScreen.java:151)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(LocationSteps.java:81)\r\n\tat ✽.Then I can see the \"Clinic\" Information screen with Navigate and Call Now buttons(features/th/health/Hospital_Clinic_Locator.feature:66)\r\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png"
              }
            ],
            "line": 66,
            "name": "I can see the \"Clinic\" Information screen with Navigate and Call Now buttons",
            "match": {
              "arguments": [
                {
                  "val": "Clinic",
                  "offset": 15
                }
              ],
              "location": "LocationSteps.iCanSeeTheInformationScreenWithNavigateAndCallNowButtons(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 68,
        "name": "User can view listed clinic info details",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-view-listed-clinic-info-details",
        "after": [
          {
            "result": {
              "duration": 40900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 7500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 626722800,
              "status": "passed"
            },
            "line": 69,
            "name": "I clicks on back button in See Details screen",
            "match": {
              "location": "LocationSteps.iClicksOnBackButtonInSeeDetailsScreen()"
            },
            "keyword": "When "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 27400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 71,
        "name": "User can navigate back to clinics screen",
        "description": "",
        "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature;user-can-navigate-back-to-clinics-screen",
        "after": [
          {
            "result": {
              "duration": 28100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 6200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7573434300,
              "status": "passed"
            },
            "line": 72,
            "name": "I clicks on back button in \"Clinic\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Clinic",
                  "offset": 28
                }
              ],
              "location": "LocationSteps.iClicksOnBackButtonInScreen(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify that user can locate near by Hospitals,clinics using Location feature",
    "description": "",
    "id": "verify-that-user-can-locate-near-by-hospitals,clinics-using-location-feature",
    "keyword": "Feature",
    "uri": "features/th/health/Hospital_Clinic_Locator.feature",
    "tags": [
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@StoreLocatorTH"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 33400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 45200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9179442400,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 103300,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${onepulse.events.user}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.events.user}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 48
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2008449000,
              "status": "passed"
            },
            "line": 7,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14272824500,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22099157600,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2010382400,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10225664500,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4856185300,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10554731800,
              "status": "passed"
            },
            "line": 13,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 14
              },
              {
                "cells": [
                  "Password",
                  "${pulse.password}"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 299681900,
              "status": "passed"
            },
            "line": 16,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10009440000,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11117787700,
              "status": "passed"
            },
            "line": 18,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14178432500,
              "status": "passed"
            },
            "line": 19,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 93500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 26200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify MyEvent Functionality in Home screen",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-myevent-functionality-in-home-screen",
        "after": [
          {
            "result": {
              "duration": 28000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 5800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 21556710500,
              "status": "passed"
            },
            "line": 23,
            "name": "I click the MyEvent icons",
            "match": {
              "location": "CustomerConnectSteps.clickMyEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5008455900,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1633389500,
              "status": "passed"
            },
            "line": 25,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events enrolled yet"
                ],
                "line": 26
              },
              {
                "cells": [
                  "Please choose from the open events and get started"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 29,
        "name": "Verify Events Archive tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-events-archive-tab",
        "after": [
          {
            "result": {
              "duration": 36400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 8100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8522581100,
              "status": "passed"
            },
            "line": 30,
            "name": "I click the Events Archive icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyEventsArchive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6065846500,
              "status": "passed"
            },
            "line": 31,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "You do not have any events in your archive."
                ],
                "line": 32
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 44000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 34,
        "name": "Verify Open Events tab",
        "description": "",
        "id": "verify-my-event-channel-functionality-on-one-pulse-app;verify-open-events-tab",
        "after": [
          {
            "result": {
              "duration": 25500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 6500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8558948700,
              "status": "passed"
            },
            "line": 35,
            "name": "I click the Open Events icon",
            "match": {
              "location": "CustomerConnectSteps.clickMyOpenEvents()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13254808800,
              "status": "passed"
            },
            "line": 36,
            "name": "I verify either static text or available open events are displayed on screen",
            "match": {
              "location": "CustomerConnectSteps.verifyOpenEventsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "There are no events available at the moment"
                ],
                "line": 37
              },
              {
                "cells": [
                  "Stay tuned for events on health and fitness"
                ],
                "line": 38
              }
            ],
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify MY Event channel functionality on one pulse App",
    "description": "",
    "id": "verify-my-event-channel-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/th/home/MyEvents.feature",
    "tags": [
      {
        "line": 1,
        "name": "@MyEventTH"
      },
      {
        "line": 1,
        "name": "@OnePulseRegressio"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 33100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 16592900,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9102779500,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 99500,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2015847700,
              "status": "passed"
            },
            "line": 8,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15273611100,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23418774200,
              "status": "passed"
            },
            "line": 10,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2007786300,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11053978200,
              "status": "passed"
            },
            "line": 12,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4986489500,
              "status": "passed"
            },
            "line": 13,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10458728600,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 285494600,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10012040300,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 76754000,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 5115156600,
              "error_message": "java.lang.AssertionError: expected [true] but found [false]\r\n\tat org.testng.Assert.fail(Assert.java:94)\r\n\tat org.testng.Assert.failNotEquals(Assert.java:513)\r\n\tat org.testng.Assert.assertTrue(Assert.java:42)\r\n\tat org.testng.Assert.assertTrue(Assert.java:52)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.LoginSteps.landingPageValidation(LoginSteps.java:92)\r\n\tat ✽.Then user should be landed to \"Home\" screen(features/th/home/MyHealthContent.feature:20)\r\n",
              "status": "failed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 48800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 23,
        "name": "Verify User should be able to navigate to Health page",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-navigate-to-health-page",
        "after": [
          {
            "result": {
              "duration": 16224700,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2008591100,
              "status": "passed"
            },
            "line": 24,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 8076902800,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 99860ba0-281a-41be-ac39-5023f9b523c1\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\r\n\tat com.prudential.tap.appium.AppiumCommands.swipe(AppiumCommands.java:432)\r\n\tat com.onepulse.app.screens.TestBasePage.scrollPageDown(TestBasePage.java:204)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.ClickHealthContent(CustomerConnectScreen.java:923)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.iNavigateToWealthScreenz(CustomerConnectSteps.java:272)\r\n\tat ✽.Then I navigate to Health Content screen(features/th/home/MyHealthContent.feature:25)\r\n",
              "status": "failed"
            },
            "line": 25,
            "name": "I navigate to Health Content screen",
            "match": {
              "location": "CustomerConnectSteps.iNavigateToWealthScreenz()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 26,
            "name": "I wait for 8 sec",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 27,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Health Channels"
                ],
                "line": 28
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 29,
            "name": "I verify the following texts \"My Health Content\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My Health Content",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Category"
                ],
                "line": 30
              },
              {
                "cells": [
                  "Like"
                ],
                "line": 31
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 32
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 33
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 35,
            "value": "#  Scenario: Verify User should be able to Like the post"
          },
          {
            "line": 36,
            "value": "#    And I read the \"Brisk Walking\" post like count"
          },
          {
            "line": 37,
            "value": "#    And I Like the post"
          },
          {
            "line": 38,
            "value": "#    Then I verify \"Brisk Walking\" post like count is increased"
          },
          {
            "line": 39,
            "value": "#    And I Like the post"
          },
          {
            "line": 41,
            "value": "#  Scenario: Verify User should be able to Share the post"
          },
          {
            "line": 42,
            "value": "#    And I share the post"
          },
          {
            "line": 43,
            "value": "#    Then I Verify the share with friends popup"
          },
          {
            "line": 45,
            "value": "#  Scenario: Verify User should be able to Comment the post"
          },
          {
            "line": 46,
            "value": "#    And I read the \"Health Channels\" post comment count"
          },
          {
            "line": 47,
            "value": "#    And I commented in the post \"${wealth.topic.comment}\""
          },
          {
            "line": 48,
            "value": "#    Then I verify \"Health Channels\" post comment count is increased"
          },
          {
            "line": 51,
            "value": "#  Scenario: Verify User should be able to view the story post"
          },
          {
            "line": 52,
            "value": "#    Then I click on \"Brisk Walking\" wealth channel topic"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 37800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 54,
        "name": "Verify User should be able to view the full page article post",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-view-the-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 20424100,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5085070900,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 99860ba0-281a-41be-ac39-5023f9b523c1\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"Health Channels\")]/../following::android.widget.ScrollView[1]/android.view.ViewGroup/android.view.ViewGroup[2]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.WealthScreen.clickWealthChannelTopicDetailView(WealthScreen.java:135)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iClickOnTopicForDetailsFullView(WealthSteps.java:64)\r\n\tat ✽.Then I click on \"Health Channels\" topic for details full view(features/th/home/MyHealthContent.feature:55)\r\n",
              "status": "failed"
            },
            "line": 55,
            "name": "I click on \"Health Channels\" topic for details full view",
            "match": {
              "arguments": [
                {
                  "val": "Health Channels",
                  "offset": 12
                }
              ],
              "location": "WealthSteps.iClickOnTopicForDetailsFullView(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 56,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 27800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 58,
        "name": "Verify User should be able to see the Like, Share, Comment options on full page article post",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-see-the-like,-share,-comment-options-on-full-page-article-post",
        "after": [
          {
            "result": {
              "duration": 8401400,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 9600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4049818000,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 99860ba0-281a-41be-ac39-5023f9b523c1\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:46)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver$RemoteWebDriverOptions$RemoteWindow.getSize(RemoteWebDriver.java:804)\r\n\tat com.prudential.tap.appium.AppiumCommands.swipe(AppiumCommands.java:432)\r\n\tat com.onepulse.app.screens.TestBasePage.scrollPageDown(TestBasePage.java:204)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.isStaticTextDisplayedOncommunitiesScreen(CustomerConnectScreen.java:187)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(CustomerConnectSteps.java:88)\r\n\tat ✽.And I verify the following texts \"My Health Content\" in Screen(features/th/home/MyHealthContent.feature:59)\r\n",
              "status": "failed"
            },
            "line": 59,
            "name": "I verify the following texts \"My Health Content\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My Health Content",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Like"
                ],
                "line": 60
              },
              {
                "cells": [
                  "Share"
                ],
                "line": 61
              },
              {
                "cells": [
                  "Comment"
                ],
                "line": 62
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 18700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 64,
        "name": "Verify User should be able to Like the post in full article view screen",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-like-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 12925300,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 25152800,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 99860ba0-281a-41be-ac39-5023f9b523c1\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Like\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.WealthScreen.clickLikeButton(WealthScreen.java:175)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iLikeThePost(WealthSteps.java:75)\r\n\tat ✽.And I Like the post(features/th/home/MyHealthContent.feature:65)\r\n",
              "status": "failed"
            },
            "line": 65,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "comments": [
              {
                "line": 66,
                "value": "##Defect#PCAONEPULSE-22541"
              }
            ],
            "line": 67,
            "name": "I Like the post",
            "match": {
              "location": "WealthSteps.iLikeThePost()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 25200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 69,
        "name": "Verify User should be able to Share the post in full article view screen",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-should-be-able-to-share-the-post-in-full-article-view-screen",
        "after": [
          {
            "result": {
              "duration": 22724000,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 34800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5052617000,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 99860ba0-281a-41be-ac39-5023f9b523c1\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Share\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.WealthScreen.clickShareButton(WealthScreen.java:215)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iShareThePost(WealthSteps.java:90)\r\n\tat ✽.And I share the post(features/th/home/MyHealthContent.feature:70)\r\n",
              "status": "failed"
            },
            "line": 70,
            "name": "I share the post",
            "match": {
              "location": "WealthSteps.iShareThePost()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 71,
            "name": "I navigate back to previous page",
            "match": {
              "location": "WealthSteps.iNavigateBackToPreviousPage()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 78300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 38600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 73,
        "name": "Verify User can navigate to Health homepage",
        "description": "",
        "id": "verify-my-health-content-functionality-on-one-pulse-app;verify-user-can-navigate-to-health-homepage",
        "after": [
          {
            "result": {
              "duration": 12751500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 3058770400,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 99860ba0-281a-41be-ac39-5023f9b523c1\n*** Element info: {Using\u003dxpath, value\u003d//android.view.View[contains(@text,\u0027First Steps\u0027)]/preceding::android.widget.ImageView}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.WealthScreen.clickFullViewBackButton(WealthScreen.java:165)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.WealthSteps.iNavigateToStoryPostPage(WealthSteps.java:70)\r\n\tat ✽.Then I navigate to story post page(features/th/home/MyHealthContent.feature:74)\r\n",
              "status": "failed"
            },
            "line": 74,
            "name": "I navigate to story post page",
            "match": {
              "location": "WealthSteps.iNavigateToStoryPostPage()"
            },
            "keyword": "Then "
          }
        ]
      }
    ],
    "name": "Verify My Health Content functionality on One Pulse App",
    "description": "",
    "id": "verify-my-health-content-functionality-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/th/home/MyHealthContent.feature",
    "tags": [
      {
        "line": 1,
        "name": "@HealthChannelTH"
      },
      {
        "line": 1,
        "name": "@OnePulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 4,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 42700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 6,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 31500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 6000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9193133900,
              "status": "passed"
            },
            "line": 7,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 93400,
              "status": "passed"
            },
            "line": 8,
            "name": "I assign \"${login.email.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${login.email.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 42
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2008702300,
              "status": "passed"
            },
            "line": 9,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14268890000,
              "status": "passed"
            },
            "line": 10,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22142689600,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1989091800,
              "status": "passed"
            },
            "line": 12,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10408793400,
              "status": "passed"
            },
            "line": 13,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4785096900,
              "status": "passed"
            },
            "line": 14,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10403034200,
              "status": "passed"
            },
            "line": 15,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 16
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 17
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 222444100,
              "status": "passed"
            },
            "line": 18,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10013708100,
              "status": "passed"
            },
            "line": 19,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11227942800,
              "status": "passed"
            },
            "line": 20,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13525896500,
              "status": "passed"
            },
            "line": 21,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 29600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 24,
        "name": "Verify My Challenges texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;verify-my-challenges-texts",
        "after": [
          {
            "result": {
              "duration": 3082026700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 12723940400,
              "status": "passed"
            },
            "line": 25,
            "name": "I click on My Challenges tile on one pulse app",
            "match": {
              "location": "LoginSteps.myChallengesTile()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8251632300,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tYou have not connected any wearable text is displayed on page  expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\r\n\tat ✽.And I verify following texts are displayed(features/th/home/PulseMyChallenges.feature:26)\r\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 26,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.challenges.text}"
                ],
                "line": 27
              },
              {
                "cells": [
                  "${not.connected.wearable}"
                ],
                "line": 28
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 31,
        "name": "Verify the user can Connect Wearables via My Challenges",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;verify-the-user-can-connect-wearables-via-my-challenges",
        "after": [
          {
            "result": {
              "duration": 3031969600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9032081600,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 76cfaad7-6d5e-4210-9196-82180e07565b\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"Connect Wearable\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1741)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:534)\r\n\tat ✽.And I clicks on \"${myChallenges.connectWearablesButton}\" in app screen(features/th/home/PulseMyChallenges.feature:32)\r\n",
              "status": "failed"
            },
            "line": 32,
            "name": "I clicks on \"${myChallenges.connectWearablesButton}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${myChallenges.connectWearablesButton}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 33,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${wearables.title}"
                ],
                "line": 34
              },
              {
                "cells": [
                  "${wearables.subTitle}"
                ],
                "line": 35
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 36,
            "name": "I click on Back button of My Wearables screen",
            "match": {
              "location": "WearablesActivationSteps.clickBackButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 18600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "Click on All challenges and and verify texts",
        "description": "",
        "id": "verify--my-challenges-on-one-pulse-app;click-on-all-challenges-and-and-verify-texts",
        "after": [
          {
            "result": {
              "duration": 37900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 5800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 270845900,
              "status": "passed"
            },
            "line": 40,
            "name": "I clicks on \"${all.challenges.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${all.challenges.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8786968200,
              "status": "passed"
            },
            "line": 41,
            "name": "I verify the following texts \"My challenges\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "My challenges",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.challenges.text}"
                ],
                "line": 42
              },
              {
                "cells": [
                  "${all.challenges.text}"
                ],
                "line": 43
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 487725200,
              "status": "passed"
            },
            "line": 44,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${no.challenges.available}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${notify.challenge}"
                ],
                "line": 46
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 235469600,
              "status": "passed"
            },
            "line": 47,
            "name": "I clicks on \"${back.home}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${back.home}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify  My Challenges on One Pulse App",
    "description": "",
    "id": "verify--my-challenges-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/th/home/PulseMyChallenges.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_challengesTH"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 27300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 34400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9540807500,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 116500,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${onepulse.login.global.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2017786200,
              "status": "passed"
            },
            "line": 7,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 15045272200,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23074579300,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2011610100,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11136740100,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4916865000,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10421562200,
              "status": "passed"
            },
            "line": 13,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 14
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 292014600,
              "status": "passed"
            },
            "line": 16,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9996283800,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10590125700,
              "status": "passed"
            },
            "line": 18,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13592323500,
              "status": "passed"
            },
            "line": 19,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 46800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 17300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "User should be able to login on app with correct credentials using \"Continue with Email\" and Verify the Mycommunities screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-email\"-and-verify-the-mycommunities-screen",
        "after": [
          {
            "result": {
              "duration": 22738900,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 57500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 6010094100,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 6 sec",
            "match": {
              "arguments": [
                {
                  "val": "6",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4923663400,
              "status": "passed"
            },
            "line": 24,
            "name": "I click the MyCommunities icon",
            "match": {
              "location": "MyCommunitiesSteps.clickMyCommunities()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 6001997000,
              "status": "passed"
            },
            "line": 25,
            "name": "I wait for 6 sec",
            "match": {
              "arguments": [
                {
                  "val": "6",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 45951500,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tCommunities text is displayed on page  expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\r\n\tat ✽.And I verify following texts are displayed(features/th/home/mycommunities/PulseMyCommunities.feature:26)\r\n",
              "status": "failed"
            },
            "line": 26,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${icon.communities}"
                ],
                "line": 27
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 28,
            "name": "I verify the following texts \"All Communities\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "All Communities",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.communities.text}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${All.Communities.text}"
                ],
                "line": 30
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 72600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 31300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 32,
        "name": "Leave the community if already joined",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;leave-the-community-if-already-joined",
        "after": [
          {
            "result": {
              "duration": 14031200,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 26867900,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6de76d5b-bda3-4d07-bdc8-d6fde32847de\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"My Communities\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1741)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:534)\r\n\tat ✽.And I clicks on \"${my.communities.text}\" in app screen(features/th/home/mycommunities/PulseMyCommunities.feature:33)\r\n",
              "status": "failed"
            },
            "line": 33,
            "name": "I clicks on \"${my.communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 34,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 35,
            "name": "I leave all joined communities by clicking on three dots menu icon on my My communities screen",
            "match": {
              "location": "MyCommunitiesSteps.leaveAllJoinedCommunities()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 36,
            "value": "#    When I click on joined community three dots menu icon"
          },
          {
            "line": 37,
            "value": "#    And I click on leave button for joined community"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 21700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 40,
        "name": "Verify the All Communities Post screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-all-communities-post-screen",
        "after": [
          {
            "result": {
              "duration": 16481600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 9500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5002644600,
              "status": "passed"
            },
            "line": 41,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 43110600,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6de76d5b-bda3-4d07-bdc8-d6fde32847de\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"All Communities\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1741)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:534)\r\n\tat ✽.And I clicks on \"${All.Communities.text}\" in app screen(features/th/home/mycommunities/PulseMyCommunities.feature:42)\r\n",
              "status": "failed"
            },
            "line": 42,
            "name": "I clicks on \"${All.Communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${All.Communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "I click the Join button in Communties tab",
            "match": {
              "location": "MyCommunitiesSteps.Joinbuttons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 44,
            "name": "I click the static Active icon in community screen",
            "match": {
              "location": "MyCommunitiesSteps.StaryActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "I click Edit icon in stay Active icon",
            "match": {
              "location": "MyCommunitiesSteps.clickEditiconstayActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "Enter the post in community screen",
            "match": {
              "location": "MyCommunitiesSteps.enterNric(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "TEST1"
                ],
                "line": 47
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 48,
            "name": "Enter the post in community large text screen",
            "match": {
              "location": "MyCommunitiesSteps.enterlargeText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "welcome"
                ],
                "line": 49
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "I click the Post icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.clickPostIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 51,
            "name": "I verify the following text \"TEST1\" in post Screen",
            "match": {
              "arguments": [
                {
                  "val": "TEST1",
                  "offset": 29
                }
              ],
              "location": "MyCommunitiesSteps.verifypostscreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "TEST1"
                ],
                "line": 52
              },
              {
                "cells": [
                  "welcome"
                ],
                "line": 53
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 26600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 55,
        "name": "Verify the Likes and comments counts in All communities tab",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-likes-and-comments-counts-in-all-communities-tab",
        "after": [
          {
            "result": {
              "duration": 30771600,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 19000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8140337800,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6de76d5b-bda3-4d07-bdc8-d6fde32847de\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Hi Pulsemate!\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.TestBasePage.popupstart(TestBasePage.java:508)\r\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickFeeds(MyCommunitiesScreen.java:311)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.clickIcons(MyCommunitiesSteps.java:106)\r\n\tat ✽.And I click the Post icon in My communities(features/th/home/mycommunities/PulseMyCommunities.feature:56)\r\n",
              "status": "failed"
            },
            "line": 56,
            "name": "I click the Post icon in My communities",
            "match": {
              "location": "MyCommunitiesSteps.clickIcons()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 58,
            "name": "I click the like button in Post screen",
            "match": {
              "location": "MyCommunitiesSteps.Clicklikesbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 59,
            "name": "Verify the like count in Post screen \" 1 Likes\" likes",
            "match": {
              "arguments": [
                {
                  "val": " 1 Likes",
                  "offset": 38
                }
              ],
              "location": "MyCommunitiesSteps.verifyLikescountInFeeds(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 60,
            "name": "I click the Comment icon in feed screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickCommentsbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 61,
            "name": "Enter the comments in Feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.FeedsComments(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Comments",
                  "TEST1"
                ],
                "line": 62
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 63,
            "name": "I click the submit icon in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickfeedssubmitbutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 64,
            "name": "Verify the comments count in Feeds screen \" 0 Comments\" comments",
            "match": {
              "arguments": [
                {
                  "val": " 0 Comments",
                  "offset": 43
                }
              ],
              "location": "MyCommunitiesSteps.verifyCommentsscountInFeeds(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 61100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 28700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 66,
        "name": "Verify the Share with Friends Functionality in All communities tab",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-share-with-friends-functionality-in-all-communities-tab",
        "after": [
          {
            "result": {
              "duration": 15502800,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4108067000,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6de76d5b-bda3-4d07-bdc8-d6fde32847de\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Hi Pulsemate!\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.TestBasePage.popupstart(TestBasePage.java:508)\r\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickShareIcon(MyCommunitiesScreen.java:556)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.ClickShareIcon(MyCommunitiesSteps.java:173)\r\n\tat ✽.And I click the share icon in Post screen(features/th/home/mycommunities/PulseMyCommunities.feature:67)\r\n",
              "status": "failed"
            },
            "line": 67,
            "name": "I click the share icon in Post screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickShareIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 68,
            "name": "Verify the pop up in \"Share with Friends\"",
            "match": {
              "arguments": [
                {
                  "val": "Share with Friends",
                  "offset": 22
                }
              ],
              "location": "MyCommunitiesSteps.VerifySharewithFriends(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 69,
            "name": "I click the phone icon in share with friends",
            "match": {
              "location": "MyCommunitiesSteps.clickPhoneIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 70,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 38300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 16700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 73,
        "name": "Verify the Post Functionality in All communities",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-post-functionality-in-all-communities",
        "after": [
          {
            "result": {
              "duration": 17550700,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 9500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 68165400,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6de76d5b-bda3-4d07-bdc8-d6fde32847de\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Hi Pulsemate!\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.TestBasePage.popupstart(TestBasePage.java:508)\r\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickSkipfeedbutton(MyCommunitiesScreen.java:662)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.clickSkipbutton(MyCommunitiesSteps.java:208)\r\n\tat ✽.Then I click skip button in feeds screen(features/th/home/mycommunities/PulseMyCommunities.feature:74)\r\n",
              "status": "failed"
            },
            "line": 74,
            "name": "I click skip button in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.clickSkipbutton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 75,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 76,
            "name": "I click the Back icon in Stay Active screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickstarutton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 77,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 78,
            "name": "I click Edit icon in stay Active icon",
            "match": {
              "location": "MyCommunitiesSteps.clickEditiconstayActive()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 79,
            "name": "I click the Camera icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.ClickCameraIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 80,
            "name": "I click the Upload Image icon",
            "match": {
              "location": "MyCommunitiesSteps.clickUploadIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 81,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 82,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 83,
            "name": "Enter the post in community screen",
            "match": {
              "location": "MyCommunitiesSteps.enterNric(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "TEST1"
                ],
                "line": 84
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 85,
            "name": "Enter the post in community large text screen",
            "match": {
              "location": "MyCommunitiesSteps.enterlargeText(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "POST",
                  "welcome"
                ],
                "line": 86
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 87,
            "name": "I click the Post icon in create post screen",
            "match": {
              "location": "MyCommunitiesSteps.clickPostIcon()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 89,
        "name": "Verify the Category list and search feature",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;verify-the-category-list-and-search-feature",
        "after": [
          {
            "result": {
              "duration": 23236100,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 18200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 15011622800,
              "status": "passed"
            },
            "comments": [
              {
                "line": 90,
                "value": "#   And I click the Back icon in Stay Active screen"
              }
            ],
            "line": 91,
            "name": "I wait for 15 sec",
            "match": {
              "arguments": [
                {
                  "val": "15",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 73583700,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6de76d5b-bda3-4d07-bdc8-d6fde32847de\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"Category\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1741)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:534)\r\n\tat ✽.And I clicks on \"${category.text}\" in app screen(features/th/home/mycommunities/PulseMyCommunities.feature:92)\r\n",
              "status": "failed"
            },
            "line": 92,
            "name": "I clicks on \"${category.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${category.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 93,
            "name": "I verify the following texts \"Category\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "Category",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "COVID-19"
                ],
                "line": 94
              },
              {
                "cells": [
                  "Fitness"
                ],
                "line": 95
              },
              {
                "cells": [
                  "Global Awareness Days"
                ],
                "line": 96
              },
              {
                "cells": [
                  "Mental Health"
                ],
                "line": 97
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 98,
            "name": "I clicks on \"${no.post.category}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${no.post.category}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 99,
            "name": "I clicks on \"${apply.button}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${apply.button}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 100,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${no.post.found.text}"
                ],
                "line": 101
              }
            ],
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 51900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 27900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 103,
        "name": "User navigates back to the community screen",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;user-navigates-back-to-the-community-screen",
        "after": [
          {
            "result": {
              "duration": 13219300,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 10000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 80060300,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6de76d5b-bda3-4d07-bdc8-d6fde32847de\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Hi Pulsemate!\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.TestBasePage.popupstart(TestBasePage.java:508)\r\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.Clickstaricon(MyCommunitiesScreen.java:464)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.Clickstarutton(MyCommunitiesSteps.java:153)\r\n\tat ✽.And I click the Back icon in Stay Active screen(features/th/home/mycommunities/PulseMyCommunities.feature:104)\r\n",
              "status": "failed"
            },
            "line": 104,
            "name": "I click the Back icon in Stay Active screen",
            "match": {
              "location": "MyCommunitiesSteps.Clickstarutton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 26200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 106,
        "name": "Leave the community if already joined",
        "description": "",
        "id": "verify-my-communities-on-one-pluse-app;leave-the-community-if-already-joined",
        "after": [
          {
            "result": {
              "duration": 10969200,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 7400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 25865800,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 6de76d5b-bda3-4d07-bdc8-d6fde32847de\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\"My Communities\")]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickButton(CustomerConnectScreen.java:1741)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.clickUploadIcon(CustomerConnectSteps.java:534)\r\n\tat ✽.And I clicks on \"${my.communities.text}\" in app screen(features/th/home/mycommunities/PulseMyCommunities.feature:107)\r\n",
              "status": "failed"
            },
            "line": 107,
            "name": "I clicks on \"${my.communities.text}\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "${my.communities.text}",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 108,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 109,
            "name": "I click on joined community three dots menu icon",
            "match": {
              "location": "MyCommunitiesSteps.clickOnJoinedCommMenu()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 110,
            "name": "I click on leave button for joined community",
            "match": {
              "location": "MyCommunitiesSteps.leaveJoinedCommunity()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify My Communities on One Pluse App",
    "description": "",
    "id": "verify-my-communities-on-one-pluse-app",
    "keyword": "Feature",
    "uri": "features/th/home/mycommunities/PulseMyCommunities.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_communtiesTH"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 2,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 16700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "Launch the app and select the country as per specified lbu",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;launch-the-app-and-select-the-country-as-per-specified-lbu",
        "after": [
          {
            "result": {
              "duration": 14004500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 8500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9309976300,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 97000,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${mychannel.private.user}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${mychannel.private.user}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 50
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2010751300,
              "status": "passed"
            },
            "line": 7,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14761546500,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22442220600,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2011633100,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 69812100,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: ed3e97c0-7199-436a-9bac-1c83295be7b9\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.Spinner[2]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.PulseRegistrationScreen.selectTheLanguage(PulseRegistrationScreen.java:1049)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.RegistrationSteps.iSelectTheLanguage(RegistrationSteps.java:331)\r\n\tat ✽.Then I change the language as required on registration page(features/th/home/mycommunities/PulseMyCommunities_private.feature:11)\r\n",
              "status": "failed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 13,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 14
              },
              {
                "cells": [
                  "Password",
                  "${login.password}"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 16,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 17,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 18,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 19,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 20500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify the My communities screen",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;verify-the-my-communities-screen",
        "after": [
          {
            "result": {
              "duration": 20105500,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 20700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 23336800,
              "status": "passed"
            },
            "line": 23,
            "name": "I click the MyCommunities icon",
            "match": {
              "location": "MyCommunitiesSteps.clickMyCommunities()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3001611900,
              "status": "passed"
            },
            "comments": [
              {
                "line": 24,
                "value": "#   Given User has pulse app"
              },
              {
                "line": 25,
                "value": "#   And I clicks on \"${my.communities.text}\" in app screen"
              },
              {
                "line": 26,
                "value": "#    And User should be verify \"${my.communities.text}\" tab in Home screen"
              }
            ],
            "line": 27,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 59675600,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tCommunities text is displayed on page  expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.verifyTextsOnScreen(MyDocSteps.java:717)\r\n\tat ✽.And I verify following texts are displayed(features/th/home/mycommunities/PulseMyCommunities_private.feature:28)\r\n",
              "status": "failed"
            },
            "line": 28,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${icon.communities}"
                ],
                "line": 29
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 30,
            "name": "I verify the following texts \"All Communities\" in Screen",
            "match": {
              "arguments": [
                {
                  "val": "All Communities",
                  "offset": 30
                }
              ],
              "location": "CustomerConnectSteps.isStaticTextDisplayedOncommunitiesScreen(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${my.communities.text}"
                ],
                "line": 31
              },
              {
                "cells": [
                  "${All.Communities.text}"
                ],
                "line": 32
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 33,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 34,
            "value": "#    And I verify the following texts \"Communities\" in Screen"
          },
          {
            "line": 35,
            "value": "#      | ${my.communities.text}  |"
          },
          {
            "line": 36,
            "value": "#      | ${All.Communities.text} |"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 45400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 22200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 38,
        "name": "Verify the Private Communities in communities screen",
        "description": "",
        "id": "verify-private-my-communities-on-one-pulse-app;verify-the-private-communities-in-communities-screen",
        "after": [
          {
            "result": {
              "duration": 18180400,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 9900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 4102237500,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: ed3e97c0-7199-436a-9bac-1c83295be7b9\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[contains(@text,\u0027Hi Pulsemate!\u0027)]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.TestBasePage.popupstart(TestBasePage.java:508)\r\n\tat com.onepulse.app.screens.mydocui.MyCommunitiesScreen.ClickPrivateCommunities(MyCommunitiesScreen.java:994)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyCommunitiesSteps.Click_PrivateCommunties(MyCommunitiesSteps.java:288)\r\n\tat ✽.And I click the Private \"${All.Communities.text}\" in Communties screen(features/th/home/mycommunities/PulseMyCommunities_private.feature:39)\r\n",
              "status": "failed"
            },
            "line": 39,
            "name": "I click the Private \"${All.Communities.text}\" in Communties screen",
            "match": {
              "arguments": [
                {
                  "val": "${All.Communities.text}",
                  "offset": 21
                }
              ],
              "location": "MyCommunitiesSteps.Click_PrivateCommunties(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 40,
            "name": "I Enter the \"e.g. Be Healthy content, Challenges etc.\" in \"Test\" in home screen",
            "match": {
              "arguments": [
                {
                  "val": "e.g. Be Healthy content, Challenges etc.",
                  "offset": 13
                },
                {
                  "val": "Test",
                  "offset": 59
                }
              ],
              "location": "CustomerConnectSteps.i_Enter_the_in_in_home_screen(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 41,
            "name": "I Enter the \"e.g. Healthy content, forum for celebrities etc.\" in \"2020\" in home new screen",
            "match": {
              "arguments": [
                {
                  "val": "e.g. Healthy content, forum for celebrities etc.",
                  "offset": 13
                },
                {
                  "val": "2020",
                  "offset": 67
                }
              ],
              "location": "CustomerConnectSteps.EnterTextDescription(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 42,
            "name": "I clicks on \"Take a Picture\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "Take a Picture",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 43,
            "name": "I click the Upload Image icon",
            "match": {
              "location": "MyCommunitiesSteps.clickUploadIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 44,
            "name": "I give camera permission",
            "match": {
              "location": "BaseSteps.giveCameraPermission()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 45,
            "name": "I take picture from Camera",
            "match": {
              "location": "EditProfileSteps.iTakePictureFromCamera()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 46,
            "name": "I wait for 3 sec",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 47,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 48,
            "name": "I click the continue button",
            "match": {
              "location": "RegistrationSteps.continueButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 49,
            "name": "I click skip button in feeds screen",
            "match": {
              "location": "MyCommunitiesSteps.clickSkipbutton()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 50,
            "name": "I clicks on \"OK\" in app screen",
            "match": {
              "arguments": [
                {
                  "val": "OK",
                  "offset": 13
                }
              ],
              "location": "CustomerConnectSteps.clickUploadIcon(String)"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Private My Communities on One Pulse App",
    "description": "",
    "id": "verify-private-my-communities-on-one-pulse-app",
    "keyword": "Feature",
    "uri": "features/th/home/mycommunities/PulseMyCommunities_private.feature",
    "tags": [
      {
        "line": 1,
        "name": "@my_communties_privateTH"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 20200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 13500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 4,
        "name": "User should be able to login on app with correct credentials using \"Continue with Gmail\"",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pluse-app;user-should-be-able-to-login-on-app-with-correct-credentials-using-\"continue-with-gmail\"",
        "after": [
          {
            "result": {
              "duration": 32500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 4600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9142305700,
              "status": "passed"
            },
            "line": 5,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 366600,
              "status": "passed"
            },
            "line": 6,
            "name": "I assign \"${onepulse.login.global.id}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.global.id}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 52
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2023988500,
              "status": "passed"
            },
            "line": 7,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 14770481000,
              "status": "passed"
            },
            "line": 8,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 22492448400,
              "status": "passed"
            },
            "line": 9,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2002638300,
              "status": "passed"
            },
            "line": 10,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10720535400,
              "status": "passed"
            },
            "line": 11,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4887059400,
              "status": "passed"
            },
            "line": 12,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10444912600,
              "status": "passed"
            },
            "line": 13,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 14
              },
              {
                "cells": [
                  "Password",
                  "${Password.text}"
                ],
                "line": 15
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 325545000,
              "status": "passed"
            },
            "line": 16,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10027076300,
              "status": "passed"
            },
            "line": 17,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11029287500,
              "status": "passed"
            },
            "line": 18,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13474214600,
              "status": "passed"
            },
            "line": 19,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 20,
            "value": "#    And I click the pulsemate pop up in Customerconnect screen"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 16900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 22,
        "name": "Verify the Terms and condition should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pluse-app;verify-the-terms-and-condition-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 28000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 4800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5015906900,
              "status": "passed"
            },
            "comments": [
              {
                "line": 23,
                "value": "# And I click the pulsemate pop up in Customerconnect screen"
              }
            ],
            "line": 24,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 788339700,
              "status": "passed"
            },
            "line": 25,
            "name": "I click the Account icon in Home screen",
            "match": {
              "location": "RegistrationSteps.accountButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3760218200,
              "status": "passed"
            },
            "line": 26,
            "name": "I click the Legacy and Privacy in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickLegalandLegacy()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2601222000,
              "status": "passed"
            },
            "line": 27,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Terms.conditions.text}"
                ],
                "line": 28
              },
              {
                "cells": [
                  "${Privacy.Notice.text}"
                ],
                "line": 29
              },
              {
                "cells": [
                  "${Regulatory.text}"
                ],
                "line": 30
              }
            ],
            "keyword": "Then "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 31,
            "value": "#   | ${Appversion.text}       |"
          },
          {
            "line": 32,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 27500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 23700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 33,
        "name": "Verify the Privacy screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pluse-app;verify-the-privacy-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 22700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 3900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2965590800,
              "status": "passed"
            },
            "line": 34,
            "name": "I click the Privacy icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickprivacyIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13661742700,
              "status": "passed"
            },
            "line": 35,
            "name": "I click the pulse icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickpulseIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2803045000,
              "status": "passed"
            },
            "line": 36,
            "name": "I click the Back icon in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.clickBackIcon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2329752700,
              "status": "passed"
            },
            "line": 37,
            "name": "I click the Back icon in Privacy Notice",
            "match": {
              "location": "CustomerConnectSteps.clickBackbuttonPrivacy()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "comments": [
          {
            "line": 38,
            "value": "#"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 20100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 12600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 39,
        "name": "Verify the Regulator screen should be displayed",
        "description": "",
        "id": "verify-legal-and-legacy-on-one-pluse-app;verify-the-regulator-screen-should-be-displayed",
        "after": [
          {
            "result": {
              "duration": 42554200,
              "error_message": "com.prudential.tap.exception.TapException: Failed to take screenshot of \r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.takeScreenshotOfFailedTestCases(CucumberHook.java:95)\r\n\tat com.onepulse.app.cucumberhooks.CucumberHook.afterTest(CucumberHook.java:72)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat cucumber.runtime.Utils$1.call(Utils.java:40)\r\n\tat cucumber.runtime.Timeout.timeout(Timeout.java:16)\r\n\tat cucumber.runtime.Utils.invoke(Utils.java:34)\r\n\tat cucumber.runtime.java.JavaHookDefinition.execute(JavaHookDefinition.java:60)\r\n\tat cucumber.runtime.Runtime.runHookIfTagsMatch(Runtime.java:224)\r\n\tat cucumber.runtime.Runtime.runHooks(Runtime.java:212)\r\n\tat cucumber.runtime.Runtime.runAfterHooks(Runtime.java:206)\r\n\tat cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:46)\r\n\tat cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)\r\n\tat cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)\r\n\tat com.onepulse.app.runner.CucumberRunner.feature(CucumberRunner.java:95)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)\r\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:643)\r\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)\r\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:782)\r\n\tat org.testng.TestRunner.run(TestRunner.java:632)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:366)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:268)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1169)\r\n\tat org.testng.TestNG.run(TestNG.java:1064)\r\n\tat com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)\r\n\tat com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)\r\n",
              "status": "failed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 21100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1241400400,
              "status": "passed"
            },
            "comments": [
              {
                "line": 40,
                "value": "# And I click the pulsemate pop up in Customerconnect screen"
              }
            ],
            "line": 41,
            "name": "I click the Regulatory icon in legal screen",
            "match": {
              "location": "CustomerConnectSteps.clickRegulatory()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 1601139600,
              "status": "passed"
            },
            "comments": [
              {
                "line": 42,
                "value": "#  And I click the clinical safety icon in Account screen"
              }
            ],
            "line": 43,
            "name": "I click the Babylons  icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickBabylon()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 3570873000,
              "status": "passed"
            },
            "line": 44,
            "name": "I verify following texts are displayed in terms and condition screen",
            "match": {
              "location": "DieticianSteps.VerifyTermsandCondition(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "${Clinicalsafety.text}"
                ],
                "line": 45
              },
              {
                "cells": [
                  "${AI.in.Healthcare.text}"
                ],
                "line": 46
              },
              {
                "cells": [
                  "${Localisation.text}"
                ],
                "line": 47
              },
              {
                "cells": [
                  "${Privacy.Data.Protection.text}"
                ],
                "line": 48
              },
              {
                "cells": [
                  "${Raising.Concerns}"
                ],
                "line": 49
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11238389100,
              "status": "passed"
            },
            "line": 50,
            "name": "I click the clinical safety icon in Account screen",
            "match": {
              "location": "CustomerConnectSteps.clickClinical()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 8012362200,
              "status": "passed"
            },
            "line": 51,
            "name": "I wait for 8 sec",
            "match": {
              "arguments": [
                {
                  "val": "8",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 18166818500,
              "error_message": "org.openqa.selenium.WebDriverException: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to the remote server. Original error: socket hang up\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: 8b1e5264-e278-4aa6-8c94-1b15a05137e5\n*** Element info: {Using\u003dxpath, value\u003d(//android.widget.ImageView)[1]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.CustomerConnectScreen.clickBackIcon(CustomerConnectScreen.java:2027)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.CustomerConnectSteps.ClickBackBabylons(CustomerConnectSteps.java:209)\r\n\tat ✽.And I click the Back icons in pulse screen(features/th/profile/LegalAndLegacy.feature:52)\r\n",
              "status": "failed"
            },
            "line": 52,
            "name": "I click the Back icons in pulse screen",
            "match": {
              "location": "CustomerConnectSteps.ClickBackBabylons()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify legal and legacy on One Pluse App",
    "description": "",
    "id": "verify-legal-and-legacy-on-one-pluse-app",
    "keyword": "Feature",
    "uri": "features/th/profile/LegalAndLegacy.feature",
    "tags": [
      {
        "line": 1,
        "name": "@Legalth"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  },
  {
    "line": 3,
    "elements": [
      {
        "before": [
          {
            "result": {
              "duration": 20100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 15900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 5,
        "name": "Verify User should be able to navigate to Edit profile screen and should be able to change the profile on app",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-be-able-to-navigate-to-edit-profile-screen-and-should-be-able-to-change-the-profile-on-app",
        "after": [
          {
            "result": {
              "duration": 34800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 3900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 9178332500,
              "status": "passed"
            },
            "line": 6,
            "name": "User has pulse app",
            "match": {
              "location": "BaseSteps.userHasPulseAppGeneric()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 347000,
              "status": "passed"
            },
            "line": 7,
            "name": "I assign \"${onepulse.login.edit.profile}\" to variable \"PULSE_EMAIL\"",
            "match": {
              "arguments": [
                {
                  "val": "${onepulse.login.edit.profile}",
                  "offset": 10
                },
                {
                  "val": "PULSE_EMAIL",
                  "offset": 55
                }
              ],
              "location": "ConfigvariableSteps.assignValueToVariable(String,String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 2015721900,
              "status": "passed"
            },
            "line": 8,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13807731200,
              "status": "passed"
            },
            "line": 9,
            "name": "user click on \"CONTINUE WITH EMAIL\" with Email button",
            "match": {
              "arguments": [
                {
                  "val": "CONTINUE WITH EMAIL",
                  "offset": 15
                }
              ],
              "location": "RegistrationSteps.clickRegisterWithEmail(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 23200071200,
              "status": "passed"
            },
            "line": 10,
            "name": "I change the country as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheCountry()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1993456500,
              "status": "passed"
            },
            "line": 11,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 10581304000,
              "status": "passed"
            },
            "line": 12,
            "name": "I change the language as required on registration page",
            "match": {
              "location": "RegistrationSteps.iSelectTheLanguage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4837203600,
              "status": "passed"
            },
            "line": 13,
            "name": "I click the Sign in link",
            "match": {
              "location": "LoginSteps.clickSignIns_InSignUp()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10693798100,
              "status": "passed"
            },
            "line": 14,
            "name": "user enters credentials",
            "match": {
              "location": "LoginSteps.userEntersCredentials(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "UserName",
                  "${PULSE_EMAIL}"
                ],
                "line": 15
              },
              {
                "cells": [
                  "Password",
                  "${pulse.edit}"
                ],
                "line": 16
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 293721500,
              "status": "passed"
            },
            "line": 17,
            "name": "User clicks on signin button",
            "match": {
              "location": "LoginSteps.clickSignInButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 10005022200,
              "status": "passed"
            },
            "line": 18,
            "name": "I wait for 10 sec",
            "match": {
              "arguments": [
                {
                  "val": "10",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11084199400,
              "status": "passed"
            },
            "line": 19,
            "name": "I enter OTP in one pulse app for user email \"${PULSE_EMAIL}\"",
            "match": {
              "arguments": [
                {
                  "val": "${PULSE_EMAIL}",
                  "offset": 45
                }
              ],
              "location": "RegistrationSteps.enterOTPInPulse(String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 13543483500,
              "status": "passed"
            },
            "line": 20,
            "name": "user should be landed to \"Home\" screen",
            "match": {
              "arguments": [
                {
                  "val": "Home",
                  "offset": 26
                }
              ],
              "location": "LoginSteps.landingPageValidation(String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12035437100,
              "status": "passed"
            },
            "line": 21,
            "name": "user navigate to account page",
            "match": {
              "location": "LoginSteps.userNavigateToAccountPage()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 4734798200,
              "status": "passed"
            },
            "line": 22,
            "name": "user click on Edit profile link",
            "match": {
              "location": "EditProfileSteps.clickEditProfileLink()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4999253500,
              "status": "passed"
            },
            "line": 23,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26457821400,
              "status": "passed"
            },
            "line": 24,
            "name": "user navigate to edit profile screen",
            "match": {
              "location": "ManageProfileSteps.userNavigateToEditProfileScreen()"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "line": 4,
            "name": "@dsdsdsd"
          }
        ]
      },
      {
        "comments": [
          {
            "line": 25,
            "value": "#  #For temporary to avoid the pulse mate pop up"
          },
          {
            "line": 26,
            "value": "#    Scenario: Verify Details updated during pulse profile registration should be reflected in edit profile screen"
          },
          {
            "line": 27,
            "value": "#   Then I verify the default values in pulse profile is updated as below"
          },
          {
            "line": 28,
            "value": "#     | FirstName   | My Profile workflow |"
          },
          {
            "line": 29,
            "value": "#     | LastName    | Automation          |"
          },
          {
            "line": 30,
            "value": "#     | Gender      | Select              |"
          },
          {
            "line": 31,
            "value": "#     | PhoneNumber | Phone Number        |"
          },
          {
            "line": 32,
            "value": "#     | Address     | Address             |"
          },
          {
            "line": 34,
            "value": "#    This scenario might fail in some devices due to locator identifying issue- Take photo OK button"
          },
          {
            "line": 35,
            "value": "#"
          },
          {
            "line": 36,
            "value": "#  Scenario: Verify User should be able to change the profile picture in edit profile screen"
          },
          {
            "line": 37,
            "value": "#    Then I give manage profile camera permission"
          },
          {
            "line": 38,
            "value": "#    Then I take picture from Camera"
          }
        ],
        "before": [
          {
            "result": {
              "duration": 17200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 40,
        "name": "Verify user can able to change the details in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-can-able-to-change-the-details-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 28300,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 4700,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 29985026800,
              "status": "passed"
            },
            "line": 41,
            "name": "change personal details",
            "match": {
              "location": "EditProfileSteps.changeProfileDetails(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "FirstName",
                  "Automation"
                ],
                "line": 42
              },
              {
                "cells": [
                  "LastName",
                  "Testing"
                ],
                "line": 43
              },
              {
                "cells": [
                  "PhoneNumber",
                  "81069586"
                ],
                "line": 44
              },
              {
                "cells": [
                  "Address",
                  "Thailand"
                ],
                "line": 45
              },
              {
                "cells": [
                  "PostalCode",
                  "10170"
                ],
                "line": 46
              },
              {
                "cells": [
                  "DOB",
                  "13-January-2003"
                ],
                "line": 47
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 928808600,
              "status": "passed"
            },
            "comments": [
              {
                "line": 48,
                "value": "#  And I assign date of birth into variable \"DATE_OF_BIRTH\""
              }
            ],
            "line": 49,
            "name": "click on save button",
            "match": {
              "location": "EditProfileSteps.clickSaveButton()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 19400,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14600,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 51,
        "name": "Verify the email and COR fields are non-editable in edit profile screen",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-the-email-and-cor-fields-are-non-editable-in-edit-profile-screen",
        "after": [
          {
            "result": {
              "duration": 28500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 9500,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 14722136800,
              "status": "passed"
            },
            "line": 52,
            "name": "user click on Edit profile link",
            "match": {
              "location": "EditProfileSteps.clickEditProfileLink()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 378619200,
              "status": "passed"
            },
            "line": 53,
            "name": "verify email field is non-editable",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableEmailField()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4535569000,
              "status": "passed"
            },
            "comments": [
              {
                "line": 54,
                "value": "#    And verify country of Residence is Singapore"
              }
            ],
            "line": 55,
            "name": "I scroll down",
            "match": {
              "location": "BaseSteps.scrollDown()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2000127200,
              "status": "passed"
            },
            "line": 56,
            "name": "I wait for 2 sec",
            "match": {
              "arguments": [
                {
                  "val": "2",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 448802300,
              "status": "passed"
            },
            "line": 57,
            "name": "click on save button",
            "match": {
              "location": "EditProfileSteps.clickSaveButton()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 4999260000,
              "status": "passed"
            },
            "line": 58,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 563723500,
              "status": "passed"
            },
            "line": 59,
            "name": "I click \"${accounts.back.button}\" button on the app",
            "match": {
              "arguments": [
                {
                  "val": "${accounts.back.button}",
                  "offset": 9
                }
              ],
              "location": "WealthSteps.iClickButtonOnTheApp(String)"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 21900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 14800,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 61,
        "name": "Verify User should be able to see the registration required pop up if user not completed MyDoc Registration",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-be-able-to-see-the-registration-required-pop-up-if-user-not-completed-mydoc-registration",
        "after": [
          {
            "result": {
              "duration": 797913200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 9200,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 8172393900,
              "status": "passed"
            },
            "line": 62,
            "name": "I navigate to medical records screen",
            "match": {
              "location": "MyDocSteps.iNavigateToMedicalRecordsScreen()"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1283874900,
              "status": "passed"
            },
            "line": 63,
            "name": "I verify following texts are displayed",
            "match": {
              "location": "MyDocSteps.verifyTextsOnScreen(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Registration Required"
                ],
                "line": 64
              },
              {
                "cells": [
                  "You are currently not registered. Please register yourself before continuing."
                ],
                "line": 65
              }
            ],
            "keyword": "And "
          },
          {
            "result": {
              "duration": 397422300,
              "status": "passed"
            },
            "line": 66,
            "name": "I verify following buttons are displayed",
            "match": {
              "location": "MyDocSteps.iVerifyFollowingButtonsAreDisplayed(DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "LATER"
                ],
                "line": 67
              },
              {
                "cells": [
                  "REGISTER NOW"
                ],
                "line": 68
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8284200200,
              "error_message": "org.openqa.selenium.NoSuchElementException: An element could not be located on the page using the given search parameters.\nFor documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html\nBuild info: version: \u00273.12.0\u0027, revision: \u00277c6e0b3\u0027, time: \u00272018-05-08T14:04:26.12Z\u0027\nSystem info: host: \u0027TM003LSIN\u0027, ip: \u0027192.168.1.124\u0027, os.name: \u0027Windows 10\u0027, os.arch: \u0027amd64\u0027, os.version: \u002710.0\u0027, java.version: \u002711.0.2\u0027\nDriver info: io.appium.java_client.android.AndroidDriver\nCapabilities {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, databaseEnabled: false, desired: {appActivity: com.prudential.pulse.MainAc..., appPackage: com.prudential.pulse.uat, autoDismissAlerts: true, automationName: UiAutomator2, deviceName: Android-Test, newCommandTimeout: 10000, noReset: true, platformName: android}, deviceApiLevel: 30, deviceManufacturer: Google, deviceModel: Pixel 5, deviceName: 0C241FDD40043P, deviceScreenDensity: 440, deviceScreenSize: 1080x2340, deviceUDID: 0C241FDD40043P, javascriptEnabled: true, locationContextEnabled: false, networkConnectionEnabled: true, newCommandTimeout: 10000, noReset: true, pixelRatio: 2.75, platform: LINUX, platformName: Android, platformVersion: 11, statBarHeight: 145, takesScreenshot: true, viewportRect: {height: 2015, left: 0, top: 145, width: 1080}, warnings: {}, webStorageEnabled: false}\nSession ID: e1e9fc54-14bc-43e2-b446-9c4af8c6e3f8\n*** Element info: {Using\u003dxpath, value\u003d//android.widget.TextView[@text\u003d\u0027Continue\u0027]}\r\n\tat jdk.internal.reflect.GeneratedConstructorAccessor18.newInstance(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)\r\n\tat org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)\r\n\tat org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)\r\n\tat io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)\r\n\tat io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.execute(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:62)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElementByXPath(DefaultGenericMobileDriver.java:152)\r\n\tat io.appium.java_client.AppiumDriver.findElementByXPath(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElementByXPath(AndroidDriver.java:1)\r\n\tat org.openqa.selenium.By$ByXPath.findElement(By.java:353)\r\n\tat org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)\r\n\tat io.appium.java_client.DefaultGenericMobileDriver.findElement(DefaultGenericMobileDriver.java:58)\r\n\tat io.appium.java_client.AppiumDriver.findElement(AppiumDriver.java:1)\r\n\tat io.appium.java_client.android.AndroidDriver.findElement(AndroidDriver.java:1)\r\n\tat com.prudential.tap.selenium.Commands$15.executeCommand(Commands.java:141)\r\n\tat com.prudential.tap.selenium.ExecuteCommand.executeCommand(ExecuteCommand.java:19)\r\n\tat com.onepulse.app.screens.TestBasePage.clickButton(TestBasePage.java:163)\r\n\tat com.onepulse.app.screens.mydoc.MyDocConsultationSummary.clickRegisterNowButton(MyDocConsultationSummary.java:857)\r\n\tat com.onepulse.app.stepdefinitions.mobilesteps.MyDocSteps.iProceedWithRegisterNowButton(MyDocSteps.java:871)\r\n\tat ✽.Then I proceed with register now button(features/th/profile/PulseEditProfileTest.feature:69)\r\n",
              "status": "failed"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 69,
            "name": "I proceed with register now button",
            "match": {
              "location": "MyDocSteps.iProceedWithRegisterNowButton()"
            },
            "keyword": "Then "
          }
        ]
      },
      {
        "before": [
          {
            "result": {
              "duration": 17000,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.checkReporterRunning(Scenario)"
            }
          },
          {
            "result": {
              "duration": 11900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.initializeFramework()"
            }
          }
        ],
        "line": 71,
        "name": "Verify User should not be able to edit Gender and DOB fields on myDoc registration page once the user submitted their gender and DOB in edit profile",
        "description": "",
        "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app;verify-user-should-not-be-able-to-edit-gender-and-dob-fields-on-mydoc-registration-page-once-the-user-submitted-their-gender-and-dob-in-edit-profile",
        "after": [
          {
            "result": {
              "duration": 775284100,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.afterTest(Scenario)"
            }
          },
          {
            "result": {
              "duration": 8900,
              "status": "passed"
            },
            "match": {
              "location": "CucumberHook.baseState()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 5002709300,
              "status": "passed"
            },
            "line": 72,
            "name": "I wait for 5 sec",
            "match": {
              "arguments": [
                {
                  "val": "5",
                  "offset": 11
                }
              ],
              "location": "BaseSteps.waitTime(int)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 8035397300,
              "error_message": "java.lang.AssertionError: The following asserts failed:\n\tOnline Consultation text is displayed on page Online Consultation expected [true] but found [false]\r\n\tat org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)\r\n\tat com.onepulse.app.stepdefinitions.mydocuisteps.MyDocUiSteps.userVerifyTheFollowingTextsAreDisplayedOnRegistrationPage(MyDocUiSteps.java:117)\r\n\tat ✽.Then user verify the following texts are displayed on \"Online Consultation\" registration page(features/th/profile/PulseEditProfileTest.feature:73)\r\n",
              "status": "failed"
            },
            "line": 73,
            "name": "user verify the following texts are displayed on \"Online Consultation\" registration page",
            "match": {
              "arguments": [
                {
                  "val": "Online Consultation",
                  "offset": 50
                }
              ],
              "location": "MyDocUiSteps.userVerifyTheFollowingTextsAreDisplayedOnRegistrationPage(String,DataTable)"
            },
            "rows": [
              {
                "cells": [
                  "Online Consultation"
                ],
                "line": 74
              }
            ],
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 75,
            "name": "verify Gender field should not be editable in mydoc Registration Screen",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableFieldsForGenderInMyDoc()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "status": "skipped"
            },
            "embeddings": [
              {
                "data": "",
                "mime_type": "image/png"
              }
            ],
            "line": 76,
            "name": "verify DOB field should not be editable in mydoc Registration Screen",
            "match": {
              "location": "EditProfileSteps.verifyNonEditableFieldsForDOBInMyDoc()"
            },
            "keyword": "And "
          }
        ]
      }
    ],
    "name": "Verify Edit Profile functionality on Pulse Health \u0026 Wealth app",
    "description": "",
    "id": "verify-edit-profile-functionality-on-pulse-health-\u0026-wealth-app",
    "keyword": "Feature",
    "uri": "features/th/profile/PulseEditProfileTest.feature",
    "tags": [
      {
        "line": 1,
        "name": "@PulseEditProfilePH"
      },
      {
        "line": 1,
        "name": "@OnepulseRegression"
      },
      {
        "line": 1,
        "name": "@pulseRegression"
      },
      {
        "line": 1,
        "name": "@OPUATRegressionTH"
      }
    ]
  }
]